{"pageProps":{"posts":[{"title":"Visual thinking","link":"https://blog.allegro.tech/2022/03/visual-thinking.html","pubDate":"Wed, 30 Mar 2022 00:00:00 +0200","authors":{"author":[{"name":["Michał Kowalcze"],"photo":["https://blog.allegro.tech/img/authors/michal.kowalcze.jpg"],"url":["https://blog.allegro.tech/authors/michal.kowalcze"]}]},"content":"<p>We use written (source code) language to express our intentions in a machine-readable form. We use spoken language to\ncommunicate with other people. We pride ourselves as ones choosing a programming language optimized to the task at hand.\nDo we use the optimal way to express our ideas?</p>\n\n<h2 id=\"the-story\">The Story</h2>\n\n<h3 id=\"spoken-planning\">Spoken planning</h3>\n\n<p>— Josh, could you summarize what we are going to implement, please?</p>\n\n<p>That was a bit unexpected. He was just trying to match what he already knew from onboarding days with what was just\nsaid. It was really difficult to follow team discussion at the same time. It was a standard planning session, held over\nZoom, with his distributed team. Someone was already sharing their screen and the story summary, along with acceptance\ncriteria, was visible. They were developing an online store and the current topic was: basket price reduction for active\nusers. In short: users who spent more than 50€ for the last 7 days should have a discount applied during the checkout\nprocess.</p>\n\n<p>— Well, we are going to add a new service which is going to hold this discount logic. We will provide an API for the\ncart service to call us and we will check the transactions store for recent orders.<br />\n— Is that all?<br />\n— I didn’t catch more changes.<br />\n— What about customers willing to check if they are eligible for a discount?<br />\n— Oh, so it seems we need to change the “My Account” page as well.<br />\n— And the checkout service? We have to both display discount and use it.<br />\n— You’re right! I was trying to picture the main change in my mind and wasn’t paying attention to the whole\ndiscussion.<br />\n— Guys, checkout stays the same. The cart is providing everything the checkout requires.</p>\n\n<h3 id=\"retrospective\">Retrospective</h3>\n\n<p>Let’s stop here for a moment. Have you ever been in a situation, when you were forced to do two things at the same time?\nFor example, listening to what is being said and trying to actively participate in the discussion regarding a not exactly\nwell-known topic? Was it a demanding experience? I had such an opportunity and I remember these sessions as quite\ndemanding. Usually, after an hourly session, I was exhausted and in need of a break. Not to mention that it required a\nsignificant amount of writing to capture everything that was said — just to have an option of referring back to this\nduring the sprint. What if this session looked differently?</p>\n\n<h3 id=\"visual-planning\">Visual planning</h3>\n\n<p>— Josh, could you summarize what we are going to implement, please?</p>\n\n<p>That was a bit unexpected, however, it was a no-brainer.\n<img src=\"/img/articles/2022-03-30-visual-thinking/planning_services.png\" alt=\"planning services\" />\n“As we can see in the picture we are going to add a new service, discounts. This service will be called by the current\ncart service to display a reduced price (if applicable). Also, the “My Account” page is going to call us to retrieve the\ncurrent rebate for the logged user”.</p>\n\n<h3 id=\"the-difference\">The difference</h3>\n\n<p>What is the main difference between the first scenario and the second one? To me, it is about a common model. In the first\ncase, I am building an individual model of a change. I need a significant amount of energy to translate speech to my model\nand to explain my model to others. What is more — everyone involved in the discussion is building a mental model on\ntheir own with a similar amount of energy spent on synchronization.</p>\n\n<p><img src=\"/img/articles/2022-03-30-visual-thinking/private_models.png\" alt=\"private models\" /></p>\n\n<p>In the case of the second scenario, the model is shared. There is no need to maintain private models. It is easy to\nunderstand changed elements and to refer to discussed changes later. “A picture is worth a thousand words” after all.</p>\n\n<p><img src=\"/img/articles/2022-03-30-visual-thinking/common_model.png\" alt=\"common model\" /></p>\n\n<p>Output from a visual planning is something that can be used further during a sprint. Depending on the tool it is\npossible to use it instead of an issue-tracking tool. Sticky notes can indicate actions, tasks, TODOs. They can be\narranged in a tree and display the scope of a pull request. They can be connected by a dotted line to indicate dependencies.\nAnd in the worst case, when you do not have any idea how to visualize something, you can always use a block of text and\ndescribe it using words.</p>\n\n<p><img src=\"/img/articles/2022-03-30-visual-thinking/planning_tasks.png\" alt=\"planning tasks\" /></p>\n\n<h2 id=\"the-background\">The background</h2>\n\n<p>Why switching to a drawing board has such an effect? To answer this question we have to check some facts.</p>\n\n<p>On a daily basis, a spoken (or written) language is our standard way of communication. Children, however, need some time\nto develop such a skill. Earlier they are able to:</p>\n\n<ul>\n  <li>register movement (at 2 months of age)</li>\n  <li>try to grab things by hand (5 months)</li>\n  <li>follow movement with their eyes, find hidden things (7 months)</li>\n  <li>exploit cause-effect — drop a toy and watch it fall (8 months)</li>\n  <li>start to use words in a proper context (11 months)</li>\n</ul>\n\n<p>Such spatial skills are something all creatures need to develop to survive. Even plants, to some extent, exhibit\nspatial-aware behavior — they move to follow the sun.</p>\n\n<p>It is worth noting that spatial-related terms\nlike <a href=\"https://en.wikipedia.org/wiki/Natural_semantic_metalanguage\">“where, here, near, etc.”</a>\ncan be translated to any language in the world.</p>\n\n<p>On the other hand, what language do we use to express ideas-related actions? As Barbara Tversky listed in her\n<a href=\"https://www.youtube.com/watch?v=gmc4wEL2aPQ\">“Mind in motion”</a> lecture we can:</p>\n\n<ul>\n  <li>raise ideas</li>\n  <li>pull them together</li>\n  <li>tear apart</li>\n  <li>turn inside out</li>\n  <li>push forward</li>\n  <li>toss out</li>\n</ul>\n\n<p><img src=\"/img/articles/2022-03-30-visual-thinking/ideas_and_actions.png\" alt=\"ideas and actions\" /></p>\n\n<p>We talk about ideas in the same way as about any space-related topic!</p>\n\n<p>How could it happen? Scientists have been trying to understand the functions of different parts of the brain for some time\nalready. In the seventies, they have identified the so-called <strong>place cells</strong> — neurons that are activated at a specific\nlocation. It took some time to identify another layer of neurons on top of these: <strong>grid cells</strong>, working as our inner\nGPS, activated when switching locations. The latter discovery was\nawarded a <a href=\"https://www.nobelprize.org/prizes/medicine/2014/press-release/\">Nobel Prize in 2014</a>.</p>\n\n<p>Tests on human beings resulted in another finding: place cells are activated not only in specific locations. They are\nalso activated by events, people, ideas. The grid cells are activated by thinking about the consequences of events, by\nsocial interactions, and by connecting ideas together. We are using the same brain structures for spatial orientation,\nfor ideas, and for social interactions. This is the reason why Barbara Tversky issued an audacious thesis that “all\nthoughts begin as spatial thoughts”.</p>\n\n<h3 id=\"map-elements\">Map elements</h3>\n\n<p>Nowadays we have a GPS sensor in almost any smartphone, so it is rather difficult to get lost. Basic GPS information -\ncurrent coordinate — is not very useful by itself. It is much more convenient to display our current location over a map\nlayer. What is a map? According to <a href=\"https://en.wikipedia.org/wiki/Map\">wikipedia</a>, it is “[..] a symbolic depiction\nemphasizing relationships between elements of some space [..]”.</p>\n\n<p>As our ideas — and imaginary concepts like services — are treated by our brains as spatial elements we simply use known\nconcepts of space visualization to present imagined beings and relations among them.</p>\n\n<h3 id=\"arrows\">Arrows</h3>\n\n<p>So far we used several symbols in our planning diagrams. Almost all of them can be found in maps as well, except one.\nThis element is an arrow — a significant element of our drawings. According to Barbara Tversky in the already\nmentioned <a href=\"https://www.youtube.com/watch?v=gmc4wEL2aPQ\">“Mind in motion” lecture</a>\narrows as visual elements started to appear in the 20th century. Before that symbols of feet or fingers had been used to\nindicate direction. The addition of arrows changes our perception of diagrams: without them, it is usually a structural\ndrawing, that requires additional labels to understand. Arrows transform such a structural diagram into a functional\ndiagram: we can trace arrows to their origin, we see how things are connected and how they cooperate. Check the\nexample below — the left-hand side version is static, only describes elements and the right-hand side version shows the movement\nof particular elements without using a single word.</p>\n\n<p><img src=\"/img/articles/2022-03-30-visual-thinking/clock.png\" alt=\"static and dynamic clock\" /></p>\n\n<h2 id=\"messy-lines\">Messy lines</h2>\n\n<p>All these well-known elements are our means of communication with other people, or even ourselves, at a different point\nin time. Sometimes we draw to discover, we sketch shapes to find inspiration, an idea. This seems to be important in\na different creative profession: architecture. Architects discover ideas in sketches. The ambiguity of non-obvious shapes\npromotes creativity. It is so important in this profession that sketches from private collections are sold as books. One\nof such books\nis <a href=\"https://www.designboom.com/architecture/sou-fujimoto-sketchbook-lars-muller-publishers/\">Sou Fujimoto sketchbook</a>. I\nwould like to leave you with one quote from it, found\nat <a href=\"https://colorandstory.medium.com/drawing-for-discovery-7e47ae6943da\">“Drawing for Discovery” post</a>:</p>\n\n<blockquote>\n  <p>The lines are never certain, never knowing where the next will lead to. Never knowing, but continuing to draw.\nAnd for this very reason, there is always an opportunity for something new. From the infinite dialogues of the brain,\neyes, hand, paper, and space, new architecture is born.</p>\n</blockquote>\n","contentSnippet":"We use written (source code) language to express our intentions in a machine-readable form. We use spoken language to\ncommunicate with other people. We pride ourselves as ones choosing a programming language optimized to the task at hand.\nDo we use the optimal way to express our ideas?\nThe Story\nSpoken planning\n— Josh, could you summarize what we are going to implement, please?\nThat was a bit unexpected. He was just trying to match what he already knew from onboarding days with what was just\nsaid. It was really difficult to follow team discussion at the same time. It was a standard planning session, held over\nZoom, with his distributed team. Someone was already sharing their screen and the story summary, along with acceptance\ncriteria, was visible. They were developing an online store and the current topic was: basket price reduction for active\nusers. In short: users who spent more than 50€ for the last 7 days should have a discount applied during the checkout\nprocess.\n— Well, we are going to add a new service which is going to hold this discount logic. We will provide an API for the\ncart service to call us and we will check the transactions store for recent orders.\nRetrospective\nLet’s stop here for a moment. Have you ever been in a situation, when you were forced to do two things at the same time?\nFor example, listening to what is being said and trying to actively participate in the discussion regarding a not exactly\nwell-known topic? Was it a demanding experience? I had such an opportunity and I remember these sessions as quite\ndemanding. Usually, after an hourly session, I was exhausted and in need of a break. Not to mention that it required a\nsignificant amount of writing to capture everything that was said — just to have an option of referring back to this\nduring the sprint. What if this session looked differently?\nVisual planning\n— Josh, could you summarize what we are going to implement, please?\nThat was a bit unexpected, however, it was a no-brainer.\n\n“As we can see in the picture we are going to add a new service, discounts. This service will be called by the current\ncart service to display a reduced price (if applicable). Also, the “My Account” page is going to call us to retrieve the\ncurrent rebate for the logged user”.\nThe difference\nWhat is the main difference between the first scenario and the second one? To me, it is about a common model. In the first\ncase, I am building an individual model of a change. I need a significant amount of energy to translate speech to my model\nand to explain my model to others. What is more — everyone involved in the discussion is building a mental model on\ntheir own with a similar amount of energy spent on synchronization.\n\nIn the case of the second scenario, the model is shared. There is no need to maintain private models. It is easy to\nunderstand changed elements and to refer to discussed changes later. “A picture is worth a thousand words” after all.\n\nOutput from a visual planning is something that can be used further during a sprint. Depending on the tool it is\npossible to use it instead of an issue-tracking tool. Sticky notes can indicate actions, tasks, TODOs. They can be\narranged in a tree and display the scope of a pull request. They can be connected by a dotted line to indicate dependencies.\nAnd in the worst case, when you do not have any idea how to visualize something, you can always use a block of text and\ndescribe it using words.\n\nThe background\nWhy switching to a drawing board has such an effect? To answer this question we have to check some facts.\nOn a daily basis, a spoken (or written) language is our standard way of communication. Children, however, need some time\nto develop such a skill. Earlier they are able to:\nregister movement (at 2 months of age)\ntry to grab things by hand (5 months)\nfollow movement with their eyes, find hidden things (7 months)\nexploit cause-effect — drop a toy and watch it fall (8 months)\nstart to use words in a proper context (11 months)\nSuch spatial skills are something all creatures need to develop to survive. Even plants, to some extent, exhibit\nspatial-aware behavior — they move to follow the sun.\nIt is worth noting that spatial-related terms\nlike “where, here, near, etc.”\ncan be translated to any language in the world.\nOn the other hand, what language do we use to express ideas-related actions? As Barbara Tversky listed in her\n“Mind in motion” lecture we can:\nraise ideas\npull them together\ntear apart\nturn inside out\npush forward\ntoss out\n\nWe talk about ideas in the same way as about any space-related topic!\nHow could it happen? Scientists have been trying to understand the functions of different parts of the brain for some time\nalready. In the seventies, they have identified the so-called place cells — neurons that are activated at a specific\nlocation. It took some time to identify another layer of neurons on top of these: grid cells, working as our inner\nGPS, activated when switching locations. The latter discovery was\nawarded a Nobel Prize in 2014.\nTests on human beings resulted in another finding: place cells are activated not only in specific locations. They are\nalso activated by events, people, ideas. The grid cells are activated by thinking about the consequences of events, by\nsocial interactions, and by connecting ideas together. We are using the same brain structures for spatial orientation,\nfor ideas, and for social interactions. This is the reason why Barbara Tversky issued an audacious thesis that “all\nthoughts begin as spatial thoughts”.\nMap elements\nNowadays we have a GPS sensor in almost any smartphone, so it is rather difficult to get lost. Basic GPS information -\ncurrent coordinate — is not very useful by itself. It is much more convenient to display our current location over a map\nlayer. What is a map? According to wikipedia, it is “[..] a symbolic depiction\nemphasizing relationships between elements of some space [..]”.\nAs our ideas — and imaginary concepts like services — are treated by our brains as spatial elements we simply use known\nconcepts of space visualization to present imagined beings and relations among them.\nArrows\nSo far we used several symbols in our planning diagrams. Almost all of them can be found in maps as well, except one.\nThis element is an arrow — a significant element of our drawings. According to Barbara Tversky in the already\nmentioned “Mind in motion” lecture\narrows as visual elements started to appear in the 20th century. Before that symbols of feet or fingers had been used to\nindicate direction. The addition of arrows changes our perception of diagrams: without them, it is usually a structural\ndrawing, that requires additional labels to understand. Arrows transform such a structural diagram into a functional\ndiagram: we can trace arrows to their origin, we see how things are connected and how they cooperate. Check the\nexample below — the left-hand side version is static, only describes elements and the right-hand side version shows the movement\nof particular elements without using a single word.\n\nMessy lines\nAll these well-known elements are our means of communication with other people, or even ourselves, at a different point\nin time. Sometimes we draw to discover, we sketch shapes to find inspiration, an idea. This seems to be important in\na different creative profession: architecture. Architects discover ideas in sketches. The ambiguity of non-obvious shapes\npromotes creativity. It is so important in this profession that sketches from private collections are sold as books. One\nof such books\nis Sou Fujimoto sketchbook. I\nwould like to leave you with one quote from it, found\nat “Drawing for Discovery” post:\nThe lines are never certain, never knowing where the next will lead to. Never knowing, but continuing to draw.\nAnd for this very reason, there is always an opportunity for something new. From the infinite dialogues of the brain,\neyes, hand, paper, and space, new architecture is born.","guid":"https://blog.allegro.tech/2022/03/visual-thinking.html","categories":["tech","communication","visualization","planning","creativity"],"isoDate":"2022-03-29T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Android UI testing in Allegro Pay organization","link":"https://blog.allegro.tech/2022/03/android-ui-testing-in-allegro-pay-organization.html","pubDate":"Wed, 09 Mar 2022 00:00:00 +0100","authors":{"author":[{"name":["Michał Kwiatek"],"photo":["https://blog.allegro.tech/img/authors/michal.kwiatek.jpg"],"url":["https://blog.allegro.tech/authors/michal.kwiatek"]}]},"content":"<p>Will automatic UI tests be able to replace manual testers as artificial intelligence will try to replace\nprogrammers? I’ll show you how we write automatic UI tests on Android in Allegro Pay.</p>\n\n<h2 id=\"the-introduction\">The Introduction</h2>\n<p>Tests are designed to check whether the user interface is working properly. For example they verify\nif users see an appropriate screen with correct data and don’t encounter an unexpected behavior.\nThese tests, apart from checking the correctness of displayed screen, should also check whether the\nuser sees the appropriate screen after clicking a button. They allow to check the business process\nin a controlled manner. At Allegro Pay, we have several critical processes, such as onboarding a new\ncustomer or repayment of liabilities. Until now, these processes have been tested manually. Automating\nthese tests allows us to save the tester’s time and eliminates possible human errors.</p>\n\n<h2 id=\"the-application-class\">The Application Class</h2>\n<p>You can have your tests running the whole <a href=\"https://play.google.com/store/apps/details?id=pl.allegro\">application</a>\nor go for partial coverage only. In our case, they run only single module, namely Allegro Pay. This solution\nis associated with certain changes that needed to be made. The <code class=\"language-plaintext highlighter-rouge\">AllegroPayTestApplication</code> class has been created\ninheriting from the <code class=\"language-plaintext highlighter-rouge\">TestApplication</code> class. It contains dependencies needed to run our module as a separate\napplication. Apart from this class, you need to prepare a manifest so that it has references to all activities\navailable in our module.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">AllegroPayTestApplication</span> <span class=\"p\">:</span> <span class=\"nc\">TestApplication</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n   <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">onCreate</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n       <span class=\"k\">super</span><span class=\"p\">.</span><span class=\"nf\">onCreate</span><span class=\"p\">()</span>\n       <span class=\"nf\">initKoin</span><span class=\"p\">()</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">initKoin</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n       <span class=\"nf\">loadKoinModules</span><span class=\"p\">(</span>\n           <span class=\"n\">loadNeededModulesHere</span>\n       <span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"the-tool-framework-and-pattern\">The Tool, Framework And Pattern</h2>\n<p>Tools and frameworks used in the process of adding tests are Espresso and Wiremock Stubbing\nand the PageObject pattern.\n<img src=\"/img/articles/2022-03-09-android-ui-testing-in-allegro-pay-organization/espresso_and_wiremock.png\" alt=\"Espresso and Wiremock logos\" /></p>\n\n<h3 id=\"wiremock\">Wiremock</h3>\n<p><a href=\"https://wiremock.org/\">Wiremock</a> is a tool which allows mocking the response for\na given endpoint with a declared data example. In addition, it can also record requests, map responses, edit\nresponse data, and act as a transparent proxy. This solution supports testing of edge cases and different response\nstatuses that are difficult or impossible to automatically simulate in a real test environment. Another big\nreason for using this tool is stability. Since the test environment to which these tests need to connect doesn’t\nalways work, running the test would not bring any benefits. This would be wasting resources and generating costs.\nThanks to Wiremock, it is possible to obtain the same answer each time. Here is an example stub:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">open</span> <span class=\"kd\">class</span> <span class=\"nc\">Stub</span><span class=\"p\">(</span><span class=\"kd\">val</span> <span class=\"py\">mappingBuilder</span><span class=\"p\">:</span> <span class=\"nc\">MappingBuilder</span><span class=\"p\">)</span>\n\n<span class=\"k\">internal</span> <span class=\"kd\">object</span> <span class=\"nc\">GreetingStub</span> <span class=\"p\">:</span> <span class=\"nc\">Stub</span><span class=\"p\">(</span>\n   <span class=\"k\">get</span><span class=\"p\">(</span>\n       <span class=\"nf\">urlEqualTo</span><span class=\"p\">(</span><span class=\"s\">\"/allegropay/greeting\"</span><span class=\"p\">)</span>\n   <span class=\"p\">).</span><span class=\"nf\">willReturn</span><span class=\"p\">(</span>\n       <span class=\"nf\">aResponse</span><span class=\"p\">()</span>\n           <span class=\"p\">.</span><span class=\"nf\">withStatus</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n           <span class=\"p\">.</span><span class=\"nf\">withBody</span><span class=\"p\">(</span><span class=\"nc\">GREETING_STUB</span><span class=\"p\">)</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// &lt;editor-fold defaultstate=collapsed desc=\"GreetingStub\"&gt;</span>\n\n<span class=\"nd\">@Language</span><span class=\"p\">(</span><span class=\"s\">\"json\"</span><span class=\"p\">)</span>\n<span class=\"kd\">val</span> <span class=\"py\">GREETING_STUB</span> <span class=\"p\">=</span> <span class=\"s\">\"\"\"\n {\n   \"greeting\": \"hello\"\n }\n\"\"\"</span>\n\n<span class=\"c1\">// &lt;/editor-fold&gt;</span>\n</code></pre></div></div>\n\n<p>The above code shows a stub, that allows any query to <code class=\"language-plaintext highlighter-rouge\">/allegropay/greeting</code> to respond with a status\nof 200 and data entered in the <code class=\"language-plaintext highlighter-rouge\">GREETING_STUB</code> field.</p>\n\n<h3 id=\"espresso\">Espresso</h3>\n<p>Another tool which I would like to present is <a href=\"https://developer.android.com/training/testing/espresso\">Espresso</a>.\nIt allows describing what we want to test in our activity. You can simulate the operation of the application as\nif it was used by the customer. This tool provides several simple methods for ensuring the interaction and\nassertion of the view state. I put a cheat sheet with the most needed and most used matchers, actions,\nassertions, etc. below. Espresso provides management of the main thread, what significantly speeds up and\nfacilitates writing tests. An important consideration when using this tool is that <strong><em>system animations and\n“don’t keep activities” function cannot be enabled on the test device</em></strong>.\n<img src=\"/img/articles/2022-03-09-android-ui-testing-in-allegro-pay-organization/espresso_cheatsheet.png\" alt=\"Espresso cheat sheet\" /></p>\n\n<h3 id=\"pageobject-pattern\">PageObject Pattern</h3>\n<p>The last thing needed to write perfect tests is the <a href=\"https://martinfowler.com/bliki/PageObject.html\">PageObject</a> pattern\nwhich allows you to store the interactions and assertions in one place in the context of each screen. According to\nMartin Fowler (if you haven’t read his books, you should!):</p>\n<blockquote>\n  <p>The basic rule of thumb for a page object is that it should allow a software client to do anything and\nsee anything that a human can.</p>\n</blockquote>\n\n<h2 id=\"the-test\">The test</h2>\n<p>Below is one of the tests written for the Dashboard screen:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Test</span>\n<span class=\"nd\">@Stubs</span><span class=\"p\">(</span>\n   <span class=\"nc\">Stub1</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">,</span>\n   <span class=\"nc\">Stub2</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">,</span>\n   <span class=\"nc\">Stub3</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">,</span>\n   <span class=\"nc\">Stub4</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">,</span>\n   <span class=\"nc\">Stub5</span><span class=\"o\">::</span><span class=\"k\">class</span>\n<span class=\"p\">)</span>\n<span class=\"k\">fun</span> <span class=\"nf\">testUserCanSeeDashboardThenSettingsThenOverpaymentThenGoBackToDashboard</span><span class=\"p\">()</span> <span class=\"p\">=</span> <span class=\"nf\">launchDashboardActivity</span> <span class=\"p\">{</span>\n   <span class=\"nf\">inDashboard</span><span class=\"p\">()</span>\n       <span class=\"p\">.</span><span class=\"nf\">toolbarPage</span> <span class=\"p\">{</span> <span class=\"n\">toolbar</span> <span class=\"p\">-&gt;</span>\n           <span class=\"n\">toolbar</span><span class=\"p\">.</span><span class=\"nf\">checkName</span><span class=\"p\">(</span><span class=\"nc\">DASHBOARD_TOOLBAR_NAME_RES_ID</span><span class=\"p\">)</span>\n               <span class=\"p\">.</span><span class=\"nf\">dashboardMenuItemPage</span> <span class=\"p\">{</span> <span class=\"n\">menuItem</span> <span class=\"p\">-&gt;</span>\n                   <span class=\"n\">menuItem</span><span class=\"p\">.</span><span class=\"nf\">tapOnOptionsButton</span><span class=\"p\">()</span>\n               <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n\n   <span class=\"nf\">inSettings</span><span class=\"p\">()</span>\n       <span class=\"p\">.</span><span class=\"nf\">toolbarPage</span> <span class=\"p\">{</span> <span class=\"n\">toolbar</span> <span class=\"p\">-&gt;</span>\n           <span class=\"n\">toolbar</span><span class=\"p\">.</span><span class=\"nf\">checkName</span><span class=\"p\">(</span><span class=\"nc\">SETTINGS_TOOLBAR_NAME_RES_ID</span><span class=\"p\">)</span>\n       <span class=\"p\">}.</span><span class=\"nf\">overpaymentItemPage</span><span class=\"p\">(</span><span class=\"n\">position</span> <span class=\"p\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"p\">-&gt;</span>\n           <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">tapOnOverpayment</span><span class=\"p\">()</span>\n       <span class=\"p\">}</span>\n\n   <span class=\"nf\">inOverpayment</span><span class=\"p\">(</span><span class=\"nf\">parseOverpaymentData</span><span class=\"p\">(</span><span class=\"nc\">OVERPAYMENT_WITHOUT_IBAN_POSITIVE</span><span class=\"p\">))</span>\n       <span class=\"p\">.</span><span class=\"nf\">toolbarPage</span> <span class=\"p\">{</span> <span class=\"n\">toolbar</span> <span class=\"p\">-&gt;</span>\n           <span class=\"n\">toolbar</span><span class=\"p\">.</span><span class=\"nf\">checkName</span><span class=\"p\">(</span><span class=\"nc\">OVERPAYMENT_TOOLBAR_NAME_RES_ID</span><span class=\"p\">)</span>\n               <span class=\"p\">.</span><span class=\"nf\">tapToolbarBack</span><span class=\"p\">()</span>\n       <span class=\"p\">}</span>\n\n   <span class=\"nf\">inSettings</span><span class=\"p\">()</span>\n       <span class=\"p\">.</span><span class=\"nf\">toolbarPage</span> <span class=\"p\">{</span> <span class=\"n\">toolbar</span> <span class=\"p\">-&gt;</span>\n           <span class=\"n\">toolbar</span><span class=\"p\">.</span><span class=\"nf\">checkName</span><span class=\"p\">(</span><span class=\"nc\">SETTINGS_TOOLBAR_NAME_RES_ID</span><span class=\"p\">)</span>\n               <span class=\"p\">.</span><span class=\"nf\">tapToolbarBack</span><span class=\"p\">()</span>\n       <span class=\"p\">}</span>\n\n   <span class=\"nf\">inDashboard</span><span class=\"p\">()</span>\n       <span class=\"p\">.</span><span class=\"nf\">toolbarPage</span> <span class=\"p\">{</span> <span class=\"n\">toolbar</span> <span class=\"p\">-&gt;</span>\n           <span class=\"n\">toolbar</span><span class=\"p\">.</span><span class=\"nf\">checkName</span><span class=\"p\">(</span><span class=\"nc\">DASHBOARD_TOOLBAR_NAME_RES_ID</span><span class=\"p\">)</span>\n       <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The above test allows you to check the path followed by the user who wants to see the overpayment screen\nfrom the dashboard and then return. Methods with the <code class=\"language-plaintext highlighter-rouge\">in</code> prefix contain a page object that provides the\nnecessary interactions and assertions to check the view. By running this test on the test device, you can\nsee the start of the application with the dashboard screen, where the title of the toolbar is checked\nand the button that takes you to the options screen is clicked. In the options screen, the title of\nthe toolbar is checked and you click on the option that takes you to the overpayment screen.\nThe toolbar title also is checked in the overpayment screen and the back arrow is clicked. The\napplication returns to the options screen, the title of the toolbar is checked and the back arrow\nis clicked. The last screen that is checked is the dashboard screen. And then the test\npasses.</p>\n\n<p>The class fragment presented below has the method that was used in the previous test. This method allows\nto create settings page object and run check on toolbar page and overpayment item page. Toolbar page object\nlets us check name by string resource defined in <code class=\"language-plaintext highlighter-rouge\">strings.xml</code> file. Whereas <code class=\"language-plaintext highlighter-rouge\">overpaymentItemPage()</code> method\nsearches for item on the first position on the recycler view. After that it clicks on overpayment option on screen.\nThis means that the methods can be used for other tests without unnecessarily duplicating it.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">inSettings</span><span class=\"p\">()</span>\n   <span class=\"p\">.</span><span class=\"nf\">toolbarPage</span> <span class=\"p\">{</span> <span class=\"n\">toolbar</span> <span class=\"p\">-&gt;</span>\n       <span class=\"n\">toolbar</span><span class=\"p\">.</span><span class=\"nf\">checkName</span><span class=\"p\">(</span><span class=\"nc\">SETTINGS_TOOLBAR_NAME_RES_ID</span><span class=\"p\">)</span>\n   <span class=\"p\">}.</span><span class=\"nf\">overpaymentItemPage</span><span class=\"p\">(</span><span class=\"n\">position</span> <span class=\"p\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"p\">-&gt;</span>\n       <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">tapOnOverpayment</span><span class=\"p\">()</span>\n   <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"the-future\">The Future</h2>\n<p>Our test team proposed to provide test scenarios that should be implemented in addition to the so-called\nhappy paths. These were be the most frequently reported problems by our customers regarding the display\nof data or switching between screens. However, it should also be noted that the number of these tests\nshouldn’t be too large, because running one test usually takes a few seconds, what may cause queues in the\ntest environment. Additionally, the tests need to be merged into the main branch. The 10 sample tests took\nalmost 30 seconds to complete, but the entire procedure took almost a minute.\n<img src=\"/img/articles/2022-03-09-android-ui-testing-in-allegro-pay-organization/10_tests.png\" alt=\"10 sample tests\" /></p>\n\n<h2 id=\"the-end\">The End</h2>\n<p>We expect that the addition of tests will reduce the work of manual testers. Testing cases that require simulating\na specific, very rare behavior or response from the backend takes the longest time. Reducing it by any value is\na profit. Happy paths and paths with standard errors can be easily programmed in tests. Additionally, programmers\nat an earlier stage are able to catch and correct errors resulting from regression. We are already working on\nadding tests to further processes such as onboarding a new customer, consolidation or repayment. We will also\nextend our test scenarios with additional cases. And the question posed at the very beginning of this article\nis still open.</p>\n","contentSnippet":"Will automatic UI tests be able to replace manual testers as artificial intelligence will try to replace\nprogrammers? I’ll show you how we write automatic UI tests on Android in Allegro Pay.\nThe Introduction\nTests are designed to check whether the user interface is working properly. For example they verify\nif users see an appropriate screen with correct data and don’t encounter an unexpected behavior.\nThese tests, apart from checking the correctness of displayed screen, should also check whether the\nuser sees the appropriate screen after clicking a button. They allow to check the business process\nin a controlled manner. At Allegro Pay, we have several critical processes, such as onboarding a new\ncustomer or repayment of liabilities. Until now, these processes have been tested manually. Automating\nthese tests allows us to save the tester’s time and eliminates possible human errors.\nThe Application Class\nYou can have your tests running the whole application\nor go for partial coverage only. In our case, they run only single module, namely Allegro Pay. This solution\nis associated with certain changes that needed to be made. The AllegroPayTestApplication class has been created\ninheriting from the TestApplication class. It contains dependencies needed to run our module as a separate\napplication. Apart from this class, you need to prepare a manifest so that it has references to all activities\navailable in our module.\n\nclass AllegroPayTestApplication : TestApplication() {\n\n   override fun onCreate() {\n       super.onCreate()\n       initKoin()\n   }\n\n   private fun initKoin() {\n       loadKoinModules(\n           loadNeededModulesHere\n       )\n   }\n}\n\n\nThe Tool, Framework And Pattern\nTools and frameworks used in the process of adding tests are Espresso and Wiremock Stubbing\nand the PageObject pattern.\n\nWiremock\nWiremock is a tool which allows mocking the response for\na given endpoint with a declared data example. In addition, it can also record requests, map responses, edit\nresponse data, and act as a transparent proxy. This solution supports testing of edge cases and different response\nstatuses that are difficult or impossible to automatically simulate in a real test environment. Another big\nreason for using this tool is stability. Since the test environment to which these tests need to connect doesn’t\nalways work, running the test would not bring any benefits. This would be wasting resources and generating costs.\nThanks to Wiremock, it is possible to obtain the same answer each time. Here is an example stub:\n\nopen class Stub(val mappingBuilder: MappingBuilder)\n\ninternal object GreetingStub : Stub(\n   get(\n       urlEqualTo(\"/allegropay/greeting\")\n   ).willReturn(\n       aResponse()\n           .withStatus(200)\n           .withBody(GREETING_STUB)\n   )\n)\n\n// <editor-fold defaultstate=collapsed desc=\"GreetingStub\">\n\n@Language(\"json\")\nval GREETING_STUB = \"\"\"\n {\n   \"greeting\": \"hello\"\n }\n\"\"\"\n\n// </editor-fold>\n\n\nThe above code shows a stub, that allows any query to /allegropay/greeting to respond with a status\nof 200 and data entered in the GREETING_STUB field.\nEspresso\nAnother tool which I would like to present is Espresso.\nIt allows describing what we want to test in our activity. You can simulate the operation of the application as\nif it was used by the customer. This tool provides several simple methods for ensuring the interaction and\nassertion of the view state. I put a cheat sheet with the most needed and most used matchers, actions,\nassertions, etc. below. Espresso provides management of the main thread, what significantly speeds up and\nfacilitates writing tests. An important consideration when using this tool is that system animations and\n“don’t keep activities” function cannot be enabled on the test device.\n\nPageObject Pattern\nThe last thing needed to write perfect tests is the PageObject pattern\nwhich allows you to store the interactions and assertions in one place in the context of each screen. According to\nMartin Fowler (if you haven’t read his books, you should!):\nThe basic rule of thumb for a page object is that it should allow a software client to do anything and\nsee anything that a human can.\nThe test\nBelow is one of the tests written for the Dashboard screen:\n\n@Test\n@Stubs(\n   Stub1::class,\n   Stub2::class,\n   Stub3::class,\n   Stub4::class,\n   Stub5::class\n)\nfun testUserCanSeeDashboardThenSettingsThenOverpaymentThenGoBackToDashboard() = launchDashboardActivity {\n   inDashboard()\n       .toolbarPage { toolbar ->\n           toolbar.checkName(DASHBOARD_TOOLBAR_NAME_RES_ID)\n               .dashboardMenuItemPage { menuItem ->\n                   menuItem.tapOnOptionsButton()\n               }\n       }\n\n   inSettings()\n       .toolbarPage { toolbar ->\n           toolbar.checkName(SETTINGS_TOOLBAR_NAME_RES_ID)\n       }.overpaymentItemPage(position = 1) { item ->\n           item.tapOnOverpayment()\n       }\n\n   inOverpayment(parseOverpaymentData(OVERPAYMENT_WITHOUT_IBAN_POSITIVE))\n       .toolbarPage { toolbar ->\n           toolbar.checkName(OVERPAYMENT_TOOLBAR_NAME_RES_ID)\n               .tapToolbarBack()\n       }\n\n   inSettings()\n       .toolbarPage { toolbar ->\n           toolbar.checkName(SETTINGS_TOOLBAR_NAME_RES_ID)\n               .tapToolbarBack()\n       }\n\n   inDashboard()\n       .toolbarPage { toolbar ->\n           toolbar.checkName(DASHBOARD_TOOLBAR_NAME_RES_ID)\n       }\n}\n\n\nThe above test allows you to check the path followed by the user who wants to see the overpayment screen\nfrom the dashboard and then return. Methods with the in prefix contain a page object that provides the\nnecessary interactions and assertions to check the view. By running this test on the test device, you can\nsee the start of the application with the dashboard screen, where the title of the toolbar is checked\nand the button that takes you to the options screen is clicked. In the options screen, the title of\nthe toolbar is checked and you click on the option that takes you to the overpayment screen.\nThe toolbar title also is checked in the overpayment screen and the back arrow is clicked. The\napplication returns to the options screen, the title of the toolbar is checked and the back arrow\nis clicked. The last screen that is checked is the dashboard screen. And then the test\npasses.\nThe class fragment presented below has the method that was used in the previous test. This method allows\nto create settings page object and run check on toolbar page and overpayment item page. Toolbar page object\nlets us check name by string resource defined in strings.xml file. Whereas overpaymentItemPage() method\nsearches for item on the first position on the recycler view. After that it clicks on overpayment option on screen.\nThis means that the methods can be used for other tests without unnecessarily duplicating it.\n\ninSettings()\n   .toolbarPage { toolbar ->\n       toolbar.checkName(SETTINGS_TOOLBAR_NAME_RES_ID)\n   }.overpaymentItemPage(position = 1) { item ->\n       item.tapOnOverpayment()\n   }\n\n\nThe Future\nOur test team proposed to provide test scenarios that should be implemented in addition to the so-called\nhappy paths. These were be the most frequently reported problems by our customers regarding the display\nof data or switching between screens. However, it should also be noted that the number of these tests\nshouldn’t be too large, because running one test usually takes a few seconds, what may cause queues in the\ntest environment. Additionally, the tests need to be merged into the main branch. The 10 sample tests took\nalmost 30 seconds to complete, but the entire procedure took almost a minute.\n\nThe End\nWe expect that the addition of tests will reduce the work of manual testers. Testing cases that require simulating\na specific, very rare behavior or response from the backend takes the longest time. Reducing it by any value is\na profit. Happy paths and paths with standard errors can be easily programmed in tests. Additionally, programmers\nat an earlier stage are able to catch and correct errors resulting from regression. We are already working on\nadding tests to further processes such as onboarding a new customer, consolidation or repayment. We will also\nextend our test scenarios with additional cases. And the question posed at the very beginning of this article\nis still open.","guid":"https://blog.allegro.tech/2022/03/android-ui-testing-in-allegro-pay-organization.html","categories":["tech","kotlin","android","ui-testing","allegro-pay"],"isoDate":"2022-03-08T23:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"The War in Ukraine","link":"https://blog.allegro.tech/2022/03/war-in-ukraine.html","pubDate":"Tue, 01 Mar 2022 00:00:00 +0100","authors":{"author":[{"name":["Michał Kosmulski"],"photo":["https://blog.allegro.tech/img/authors/michal.kosmulski.jpg"],"url":["https://blog.allegro.tech/authors/michal.kosmulski"]}]},"content":"<p>The attack on Ukraine has shocked the entire world, but in Poland it is making especially big waves. Not just due to geographical proximity - Ukrainians are one of the largest minorities in Poland and simply put it is affecting people we know personally.</p>\n\n<p>While the fighting continues, here’s what <a href=\"https://allegro.tech\">Allegro</a> is doing, and what you can do, too, to help\nhumanitarian efforts.</p>\n\n<ul>\n  <li>If you know any Ukrainians, your coworkers in particular, talk to them and show your support. Even minor gestures are\nimportant. Ask directly what kind of help they might need rather than trying to guess.</li>\n  <li>Do not marginalize Russians and Belarussians. People are not the same as their governments, and often do not support\ntheir states’ actions.</li>\n  <li>Work with your HR people and consider what kind of help you can offer as a company. Some examples would be extra days\noff, legal and financial support for bringing families to safety, or offering psychological support.</li>\n  <li>Ask if the company can <a href=\"https://spolecznosc.allegro.pl/t5/blog/wsparcie-dla-ukrainy-co-mo%C5%BCesz-zrobi%C4%87-na-allegro-aby-pom%C3%B3c/ba-p/334998\">donate directly, make donations by others easier</a> [PL],\nprovide means of communication, etc., depending on the industry.</li>\n  <li>On a personal level, consider supporting one of the trustworthy humanitarian organizations. You can support them\nwith cash, volunteer work, or donate necessary items which are being collected in most cities.\nBe extremely cautious of fake fundraising campaigns that are popping up on every fundraising platform. Carefully\ncheck the fundraiser.</li>\n  <li>If you work in tech, you are likely an authority on IT matters for your family and friends. Make them aware of\nthe issue of disinformation, and encourage them to use only reliable information sources. Due to the threat of\ncyberattacks, encourage them to upgrade their systems and make backups.</li>\n  <li>You might also be able to <a href=\"https://www.techtotherescue.org/tech/tech-for-ukraine\">apply your tech skills directly</a>.</li>\n  <li>Regardless of how the situation develops, its consequences will last for years. Do not stop with one-off actions,\nand keep on providing help as necessary.</li>\n</ul>\n","contentSnippet":"The attack on Ukraine has shocked the entire world, but in Poland it is making especially big waves. Not just due to geographical proximity - Ukrainians are one of the largest minorities in Poland and simply put it is affecting people we know personally.\nWhile the fighting continues, here’s what Allegro is doing, and what you can do, too, to help\nhumanitarian efforts.\nIf you know any Ukrainians, your coworkers in particular, talk to them and show your support. Even minor gestures are\nimportant. Ask directly what kind of help they might need rather than trying to guess.\nDo not marginalize Russians and Belarussians. People are not the same as their governments, and often do not support\ntheir states’ actions.\nWork with your HR people and consider what kind of help you can offer as a company. Some examples would be extra days\noff, legal and financial support for bringing families to safety, or offering psychological support.\nAsk if the company can donate directly, make donations by others easier [PL],\nprovide means of communication, etc., depending on the industry.\nOn a personal level, consider supporting one of the trustworthy humanitarian organizations. You can support them\nwith cash, volunteer work, or donate necessary items which are being collected in most cities.\nBe extremely cautious of fake fundraising campaigns that are popping up on every fundraising platform. Carefully\ncheck the fundraiser.\nIf you work in tech, you are likely an authority on IT matters for your family and friends. Make them aware of\nthe issue of disinformation, and encourage them to use only reliable information sources. Due to the threat of\ncyberattacks, encourage them to upgrade their systems and make backups.\nYou might also be able to apply your tech skills directly.\nRegardless of how the situation develops, its consequences will last for years. Do not stop with one-off actions,\nand keep on providing help as necessary.","guid":"https://blog.allegro.tech/2022/03/war-in-ukraine.html","categories":["tech","soft skills","helping"],"isoDate":"2022-02-28T23:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Make your tests readable by example","link":"https://blog.allegro.tech/2022/02/readable-tests-by-example.html","pubDate":"Tue, 22 Feb 2022 00:00:00 +0100","authors":{"author":[{"name":["Kamil Jędrzejuk"],"photo":["https://blog.allegro.tech/img/authors/kamil.jedrzejuk.jpg"],"url":["https://blog.allegro.tech/authors/kamil.jedrzejuk"]}]},"content":"<p>Have you ever worked on a project where after downloading the code from the repository you start to wonder what business\nrequirements are hidden under the layer of unreadable tests? <br />\nOr maybe you are currently wondering how to test a new feature that you have been entrusted to implement?</p>\n\n<p>Nothing is more frustrating than code that we cannot control, and over time it becomes so troublesome that no one\nbothers about it too much. People do not pay enough attention to such a project and subsequent tests, if any, duplicate\nthe shortcomings of all the previous ones in the legacy.</p>\n\n<p>In this article I will show you how to disenchant this miserable state of affairs with a few simple tips. I invite\nyou to approach the tests in a completely different way to create their new version.</p>\n\n<h2 id=\"hello-domain\">Hello domain!</h2>\n\n<p>The domain that will serve us as a background will not be too complicated, but at the same time not simple enough to\nactually be able to capture the benefit for which it is worth investing more time and effort in writing tests that are\nclear and easy to develop further.</p>\n\n<p>For the purpose of presenting to you a domain that is neither too complicated nor too trivial, I will use a model of a\nvinyl records online shop (I tried to create a domain which is universal and intuitive at the same time).</p>\n\n<p>Let’s assume that we have the following very preliminary and explicitly written general business assumptions.</p>\n\n<div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>An online store sells vinyl records. Each order is delivered by a courier company cooperating with the store.\n\nThe cost of delivery is charged when the customer pays for the order.\n\nThe cost of delivery is always collected from the supplier’s system (the courier’s system).\n\nIn the event of its unavailability (e.g. when the external courier system cannot provide the cost amount),\nwe can assume that the cost of delivery is always a fixed amount of EUR 20.\n\nWe distinguish between two types of clients: STANDARD and VIP.\n\nIf the order is processed for a customer with a VIP status or the value of the order exceeds a certain amount\naccording to the running promotional campaign (current price list configuration), the order will be delivered free\nof charge.\n\nAdditionally, for the VIP customer, a free music track should be sent to their mailbox after the payment of the order.\n\nAfter paying for the order, no modifications can be made.\n</code></pre></div></div>\n\n<p>Such assumptions can be translated into one of the BDD-style scenarios:</p>\n\n<div class=\"language-gherkin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kn\">Scenario</span><span class=\"p\">:</span> 1.1 (The VIP client pays for the order)\n   <span class=\"nf\">Given </span>there is an unpaid order\n   <span class=\"nf\">And </span>the client is a VIP\n   <span class=\"nf\">When </span>the client makes the payment\n   <span class=\"nf\">Then </span>payment succeeded\n   <span class=\"nf\">And </span>the client did not pay for delivery\n   <span class=\"nf\">And </span>free music track was sent to the client\n</code></pre></div></div>\n\n<h3 id=\"architecture\">Architecture</h3>\n\n<p>The structure of the code reflects the architecture that was adopted during the implementation works. The application is\na modular monolith written based on the architectural style\nof <a href=\"https://blog.allegro.tech/2020/05/hexagonal-architecture-by-example.html\">Ports &amp; Adapter</a>, as well as\nthe <a href=\"https://www.dddcommunity.org/learning-ddd/what_is_ddd/\">Domain Driven Design</a> approach.</p>\n\n<p><img alt=\"API package structure\" src=\"/img/articles/2022-02-22-readable-tests-by-example/1.png\" /></p>\n\n<p>We can distinguish the following packages:</p>\n\n<ul>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">catalogue</code>: reflects the catalogue of products with their unit prices</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">client</code>: provides information on client scoring (VIP, STANDARD)</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">common</code>: contains common concepts, objects that appear in other contexts, e.g. the Money class</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">delivery</code>: calculates the delivery price based on the defined policy</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">order</code>: keeps the logic related to the user’s order, such as the amount of payment, or the ability\nto find them among other orders</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">sales</code>: provides information on types promotions (e.g. price list configuration), especially the minimum value order\nneeded for free delivery</p>\n  </li>\n</ul>\n\n<p>As the order-related domain is the most complex, it actually coordinates the entire purchasing process, and thus it\nshould provide a comprehensive example for our further consideration.</p>\n\n<h2 id=\"how-can-we-test-such-code\">How can we test such code?</h2>\n\n<p>Each design must feature certain guidelines, which is also the case in choosing the testing methodology. In IT\nliterature, we can probably find many interesting references to how we should test an application code, nevertheless, in\nthis article I am going to show you how, on a daily basis, me and other teams at Allegro approach this issue in our\nwork.</p>\n\n<p>Below I have listed the main assumptions that will guide us throughout the rest of the article:</p>\n\n<ul>\n  <li>\n    <p>Tests should be a living documentation describing the real requirements in the form of clear scenarios and should be\neasy to understand for every person who joins the project;</p>\n  </li>\n  <li>\n    <p>Application will be tested through a black-box approach that examines the functionality of the application without\nlooking into its internal structures or behavior. Thanks to this we focus on the functionality of what we are testing\nand not on the details of the implementation itself;</p>\n  </li>\n  <li>\n    <p>Adding a new test to the existing scenario should not be difficult, and should be based on the existing ready-to-use\nconcepts which can also be easily modified.</p>\n  </li>\n</ul>\n\n<h2 id=\"naive-approach--or-how-not-to-write-tests\">Naive approach — or how not to write tests</h2>\n\n<p>As I mentioned earlier, tests should be a living documentation of business requirements. It is typical of each\ndocumentation that you have to read and understand it first. It’s easy to guess that this shouldn’t be too much of a\nproblem for a potentially new person on the team.</p>\n\n<p>Let’s take a closer look at <code class=\"language-plaintext highlighter-rouge\">Scenario 1.1</code>, at the very beginning of our article, implemented in the form of an\nacceptance test. This is of course sample code that could be created in projects where no special attention is paid to\nthe quality of the provided test code. I would not recommend this type of testing.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kt\">def</span> <span class=\"s2\">\"shouldn’t charge for delivery when the client has a VIP status\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nl\">given:</span>\n        <span class=\"kt\">def</span> <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n          {\n             \"clientId\":\"${CLIENT_ID_1}\",\n             \"items\":[\n                {\n                   \"itemUnitPrice\":{\n                      \"productId\":\"${PRODUCT_ID_1}\",\n                      \"price\":{\n                         \"amount\":\"40.00\",\n                         \"currency\":\"EUR\"\n                      }\n                   },\n                   \"quantity\":1\n                }\n             ]\n          }\n        \"\"\"</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">()</span>\n        <span class=\"kt\">def</span> <span class=\"n\">requestEntity</span> <span class=\"o\">=</span> <span class=\"n\">buildHttpEntity</span><span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">,</span> <span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(),</span> <span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">())</span>\n        <span class=\"kt\">def</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">restTemplate</span><span class=\"o\">.</span><span class=\"na\">exchange</span><span class=\"o\">(</span><span class=\"n\">localUrl</span><span class=\"o\">(</span><span class=\"s2\">\"/orders/$ORDER_ID_1\"</span><span class=\"o\">),</span> <span class=\"n\">PUT</span><span class=\"o\">,</span> <span class=\"n\">requestEntity</span><span class=\"o\">,</span> <span class=\"n\">Map</span><span class=\"o\">)</span>\n    <span class=\"nl\">and:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"na\">statusCode</span> <span class=\"o\">==</span> <span class=\"n\">HttpStatus</span><span class=\"o\">.</span><span class=\"na\">CREATED</span>\n\n    <span class=\"nl\">and:</span>\n        <span class=\"n\">wireMockServer</span><span class=\"o\">.</span><span class=\"na\">stubFor</span><span class=\"o\">(</span>\n            <span class=\"n\">get</span><span class=\"o\">(</span><span class=\"s2\">\"/reputation/${CLIENT_ID_1}\"</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">withHeader</span><span class=\"o\">(</span><span class=\"n\">ACCEPT</span><span class=\"o\">,</span> <span class=\"n\">equalTo</span><span class=\"o\">(</span><span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">()))</span>\n                <span class=\"o\">.</span><span class=\"na\">willReturn</span><span class=\"o\">(</span><span class=\"n\">aResponse</span><span class=\"o\">()</span>\n                    <span class=\"o\">.</span><span class=\"na\">withBody</span><span class=\"o\">(</span><span class=\"s2\">\"\"\"{\n                                   \"reputation\": \"VIP\",\n                                   \"clientId\": \"${CLIENT_ID_1}\"\n                                 }\"\"\"</span><span class=\"o\">)</span>\n                    <span class=\"o\">.</span><span class=\"na\">withHeader</span><span class=\"o\">(</span><span class=\"n\">CONTENT_TYPE</span><span class=\"o\">,</span> <span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">())</span>\n                <span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n    <span class=\"nl\">when:</span>\n        <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n          {\n             \"clientId\": \"${CLIENT_ID_1}\",\n             \"cost\": { \"amount\": \"40.00\", \"currency\": \"EUR\" }\n          }\n          \"\"\"</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">()</span>\n        <span class=\"n\">requestEntity</span> <span class=\"o\">=</span> <span class=\"n\">buildHttpEntity</span><span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">,</span> <span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(),</span> <span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">())</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">restTemplate</span><span class=\"o\">.</span><span class=\"na\">exchange</span><span class=\"o\">(</span><span class=\"n\">localUrl</span><span class=\"o\">(</span><span class=\"s2\">\"/orders/$ORDER_ID_1/payment\"</span><span class=\"o\">),</span> <span class=\"n\">PUT</span><span class=\"o\">,</span> <span class=\"n\">requestEntity</span><span class=\"o\">,</span> <span class=\"n\">Map</span><span class=\"o\">)</span>\n\n    <span class=\"nl\">then:</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"na\">statusCode</span> <span class=\"o\">==</span> <span class=\"n\">HttpStatus</span><span class=\"o\">.</span><span class=\"na\">ACCEPTED</span>\n\n    <span class=\"nl\">and:</span>\n        <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">domainEventPublisher</span><span class=\"o\">.</span><span class=\"na\">publish</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"k\">as</span> <span class=\"n\">Events</span><span class=\"o\">.</span><span class=\"na\">OrderPaid</span><span class=\"o\">)</span>\n\n    <span class=\"nl\">and:</span>\n        <span class=\"n\">pollingConditions</span><span class=\"o\">.</span><span class=\"na\">eventually</span> <span class=\"o\">{</span>\n            <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">freeMusicTrackSender</span><span class=\"o\">.</span><span class=\"na\">send</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">ClientId</span><span class=\"o\">(</span><span class=\"n\">CLIENT_ID_1</span><span class=\"o\">))</span>\n        <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">// some code omitted</span>\n</code></pre></div></div>\n\n<p>The above code is not easy to analyze as it requires the reader to focus on too many technical and implementation\ndetails, such as:</p>\n\n<ul>\n  <li>data exchange format JSON,</li>\n  <li>HTTP data exchange protocol: PUT method, response code,</li>\n  <li>REST architectural style,</li>\n  <li>classes derived from frameworks such as RestTemplate, PollingConditions.</li>\n</ul>\n\n<p>Undoubtedly, it is far from the appearance of the original <code class=\"language-plaintext highlighter-rouge\">Scenario 1.1</code>. It contains many concepts that do not belong\nto the domain language that obscure the presence of natural expressions that we use in conversations with business\nstakeholders, for instance “event publisher” or “mock server”.</p>\n\n<p>Another disadvantage of this code is that it is not easily adaptable to further development, e.g. in the event of a\nchange in business requirements when it is necessary to modify or add another test.</p>\n\n<p>The conscious reader might notice that the example of our imperfect test is maybe too exaggerated and that each section\nof the ‘given’/‘when’/’then’ blocks, etc. could be extracted by the use of a separate private method. Certainly, this\nprocedure may result in some improvement of the code quality, but nevertheless such an approach still has many\ndrawbacks:</p>\n\n<ul>\n  <li>the test class still contains code related to the technical implementation;</li>\n  <li>if another test class uses a similar subset of functionalities, then sooner or later, there will be a need to copy\nsuch a method;</li>\n  <li>what if I would like to change, for example, the library for mocking calls to another type of library?</li>\n</ul>\n\n<p>Let’s take a closer look at a unit test this time. It covers a narrower range of requirements because, e.g., it does not\ncheck whether the client has been sent a free music track. Try to find similar defects in it as in the acceptance test.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"n\">Money</span> <span class=\"n\">EUR_40</span> <span class=\"o\">=</span> <span class=\"n\">Money</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"s2\">\"40.00\"</span><span class=\"o\">,</span> <span class=\"s2\">\"EUR\"</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">ClientId</span> <span class=\"n\">CLIENT_ID</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ClientId</span><span class=\"o\">(</span><span class=\"s2\">\"1\"</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">Vinyl</span> <span class=\"n\">VINYL_1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Vinyl</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">VinylId</span><span class=\"o\">(</span><span class=\"s2\">\"1\"</span><span class=\"o\">),</span> <span class=\"n\">EUR_40</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">Quantity</span> <span class=\"n\">ONE</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Quantity</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">OrderId</span> <span class=\"n\">ORDER_ID</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">OrderId</span><span class=\"o\">(</span><span class=\"s2\">\"1\"</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">OrderDataSnapshot</span> <span class=\"n\">UNPAID_ORDER_EUR_40</span> <span class=\"o\">=</span> <span class=\"n\">orderFactory</span><span class=\"o\">.</span><span class=\"na\">create</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">,</span> <span class=\"n\">CLIENT_ID</span><span class=\"o\">,</span> <span class=\"n\">Maps</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">VINYL_1</span><span class=\"o\">,</span> <span class=\"n\">ONE</span><span class=\"o\">),</span> <span class=\"kc\">true</span><span class=\"o\">)</span>\n    <span class=\"o\">.</span><span class=\"na\">toSnapshot</span><span class=\"o\">()</span>\n<span class=\"kd\">final</span> <span class=\"n\">ClientReputation</span> <span class=\"n\">VIP</span> <span class=\"o\">=</span> <span class=\"n\">ClientReputation</span><span class=\"o\">.</span><span class=\"na\">vip</span><span class=\"o\">(</span><span class=\"n\">CLIENT_ID</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">PayOrderCommand</span> <span class=\"n\">PAY_FOR_ORDER_EUR_40</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PayOrderCommand</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">,</span> <span class=\"n\">EUR_40</span><span class=\"o\">)</span>\n\n<span class=\"kt\">def</span> <span class=\"s2\">\"shouldn’t charge for delivery when the client has a VIP status\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nl\">given:</span>\n        <span class=\"n\">orderRepository</span><span class=\"o\">.</span><span class=\"na\">findBy</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">Optional</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">UNPAID_ORDER_EUR_40</span><span class=\"o\">)</span>\n\n    <span class=\"nl\">and:</span>\n        <span class=\"n\">clientReputationProvider</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">CLIENT_ID</span><span class=\"o\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">VIP</span>\n\n    <span class=\"nl\">when:</span>\n        <span class=\"kt\">def</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">paymentHandler</span><span class=\"o\">.</span><span class=\"na\">handle</span><span class=\"o\">(</span><span class=\"n\">PAY_FOR_ORDER_EUR_40</span><span class=\"o\">)</span>\n\n    <span class=\"nl\">then:</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">isSuccess</span><span class=\"o\">()</span>\n\n    <span class=\"nl\">and:</span>\n        <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">domainEventPublisher</span><span class=\"o\">.</span><span class=\"na\">publish</span><span class=\"o\">({</span> <span class=\"n\">OrderPaid</span> <span class=\"n\">event</span> <span class=\"o\">-&gt;</span>\n            <span class=\"k\">assert</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"na\">orderId</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">ORDER_ID</span>\n            <span class=\"k\">assert</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"na\">amount</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">EUR_40</span>\n            <span class=\"k\">assert</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"na\">delivery</span><span class=\"o\">().</span><span class=\"na\">cost</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">Money</span><span class=\"o\">.</span><span class=\"na\">ZERO</span>\n            <span class=\"k\">assert</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"na\">when</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">CURRENT_DATE</span>\n        <span class=\"o\">})</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>In this case, it may seem that test is much better, because it is simpler and easier to read, but with a more in-depth\nanalysis it turns out that it still does not meet the expected requirements from the “How can we test such\ncode?” section, because:</p>\n\n<ul>\n  <li>it uses concepts such as repository, provider, event publisher, handler, which were not mentioned in the written business\nscenarios — these are technical implementation details;</li>\n  <li>all the variables used are within the specification, which in the case of a multitude of tests may constitute\nadditional complexity in their maintenance. Besides, it is not difficult to make a mistake here, e.g. by introducing a\nnew variable that is already defined somewhere under a different name;</li>\n  <li>it is not easy to add further tests outside the specification that would need similar functionality — unfortunately, it\nwill require multiple repetition of fragments of the code.</li>\n</ul>\n\n<p>I have used the two examples of tests above to quickly highlight how many flaws the naive solution\nhas adopted, even though the business requirement was not too complicated. In summary, in each of the tests we have had\nto take extra care of:</p>\n\n<ul>\n  <li>manually creating objects using a constructor. This is not comfortable and additionally, with the large number of\nparameters, difficult to read; it also makes the tests messy and hard to maintain because changing the constructor\nmakes them very fragile;</li>\n  <li>creating body HTTP requests using text blocks, which in the case of larger objects leads to the creation of structures\noccupying a large part of the specification;</li>\n  <li>mocking or stubbing external dependencies using mechanisms from the framework as Stub or Mock, which can be\ncomfortable but does not necessarily improve the readability of the code and its further development;</li>\n  <li>stubbing the response to external services using the library Wiremock class directly in our code’s test;</li>\n  <li>checking the final state of an object by referring directly to its content in the test. With complex structures it can\nbe very inconvenient and unreadable.</li>\n</ul>\n\n<p>In the next section, I will focus on eliminating these shortcomings with a few simple solutions.</p>\n\n<h2 id=\"fixing-the-state-of-affairs\">Fixing the state of affairs</h2>\n\n<p>Let’s look at the first test again, which was presented in the previous section “Naive Approach”. It is not too hard to\nnotice that the vocabulary here resembles a more natural language, used by domain experts who do not use purely\ntechnical terms.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">OrderPaymentAcceptanceSpec</span> <span class=\"kd\">extends</span> <span class=\"n\">BaseIntegrationTest</span> <span class=\"kd\">implements</span>\n    <span class=\"n\">CreateOrderAbility</span><span class=\"o\">,</span>\n    <span class=\"n\">ClientReputationAbility</span><span class=\"o\">,</span>\n    <span class=\"n\">SpecialPriceProviderAbility</span><span class=\"o\">,</span>\n    <span class=\"n\">CourierSystemAbility</span><span class=\"o\">,</span>\n    <span class=\"n\">OrderPaymentAbility</span><span class=\"o\">,</span>\n    <span class=\"n\">FreeMusicTrackSenderAbility</span> <span class=\"o\">{</span>\n\n    <span class=\"kt\">def</span> <span class=\"s2\">\"shouldn’t charge for delivery when the client has a VIP status\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nl\">given:</span>\n            <span class=\"n\">thereIs</span><span class=\"o\">(</span><span class=\"n\">anUnpaidOrder</span><span class=\"o\">())</span>\n\n        <span class=\"nl\">and:</span>\n            <span class=\"n\">clientIsVip</span><span class=\"o\">()</span>\n\n        <span class=\"nl\">when:</span>\n            <span class=\"kt\">def</span> <span class=\"n\">payment</span> <span class=\"o\">=</span> <span class=\"n\">clientMakesThe</span><span class=\"o\">(</span><span class=\"n\">aPayment</span><span class=\"o\">())</span>\n\n        <span class=\"nl\">then:</span>\n            <span class=\"n\">assertThat</span><span class=\"o\">(</span><span class=\"n\">payment</span><span class=\"o\">).</span><span class=\"na\">succeeded</span><span class=\"o\">()</span>\n\n        <span class=\"nl\">and:</span>\n            <span class=\"n\">assertThatClientDidNotPayForDelivery</span><span class=\"o\">()</span>\n\n        <span class=\"nl\">and:</span>\n            <span class=\"n\">assertThatFreeMusicTrackWasSentToTheClient</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n<span class=\"c1\">// other tests omitted</span>\n</code></pre></div></div>\n\n<p>In the following part of this section, I will show you how in a few steps you can use simple concepts to arrive at this\nmodel.</p>\n\n<h3 id=\"test-data-builder\">Test Data Builder</h3>\n\n<p>Test Data Builder provides ready-made objects with sample data. It significantly improves the readability of the code by\nreplacing setter methods or invoking constructors with many parameters.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Builder</span><span class=\"o\">(</span><span class=\"n\">builderStrategy</span> <span class=\"o\">=</span> <span class=\"n\">SimpleStrategy</span><span class=\"o\">,</span> <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"with\"</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"nc\">CreateOrderJsonBuilder</span> <span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"n\">orderId</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">ORDER_ID</span>\n    <span class=\"n\">String</span> <span class=\"n\">clientId</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">CLIENT_ID</span>\n    <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">ItemJsonBuilder</span><span class=\"o\">&gt;</span> <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">anItem</span><span class=\"o\">().</span><span class=\"na\">withProductId</span><span class=\"o\">(</span><span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">CZESLAW_NIEMEN_ALBUM_ID</span><span class=\"o\">).</span><span class=\"na\">withUnitPrice</span><span class=\"o\">(</span><span class=\"n\">euro</span><span class=\"o\">(</span><span class=\"mf\">40.00</span><span class=\"o\">))]</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">CreateOrderJsonBuilder</span> <span class=\"nf\">anUnpaidOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">CreateOrderJsonBuilder</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">// some code omitted</span>\n    <span class=\"n\">CreateOrderJsonBuilder</span> <span class=\"nf\">withAmount</span><span class=\"o\">(</span><span class=\"n\">MoneyJsonBuilder</span> <span class=\"n\">anAmount</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">anItem</span><span class=\"o\">().</span><span class=\"na\">withProductId</span><span class=\"o\">(</span><span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">CZESLAW_NIEMEN_ALBUM_ID</span><span class=\"o\">).</span><span class=\"na\">withUnitPrice</span><span class=\"o\">(</span><span class=\"n\">anAmount</span><span class=\"o\">)]</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">Map</span> <span class=\"nf\">toMap</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">[</span>\n            <span class=\"nl\">clientId:</span> <span class=\"n\">clientId</span><span class=\"o\">,</span>\n            <span class=\"n\">items</span>   <span class=\"o\">:</span> <span class=\"n\">items</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">items</span><span class=\"o\">.</span><span class=\"na\">collect</span> <span class=\"o\">{</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"na\">toMap</span><span class=\"o\">()</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kc\">null</span>\n        <span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>In the above example, the <code class=\"language-plaintext highlighter-rouge\">toMap</code> method returns a map, which can then be turned into a body of the HTTP request in JSON\nformat.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">Test Data Builder</code> can be used both for constructing input data at the controller level and at the level of unit\ntests, e.g. by creating an object representing the initial state of the database. There is nothing to prevent us from\nusing this pattern, also for the construction of objects on which we make assertions.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Builder</span><span class=\"o\">(</span><span class=\"n\">builderStrategy</span> <span class=\"o\">=</span> <span class=\"n\">SimpleStrategy</span><span class=\"o\">,</span> <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"with\"</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"nc\">OrderPaidEventBuilder</span> <span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"n\">clientId</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">CLIENT_ID</span>\n    <span class=\"n\">String</span> <span class=\"n\">orderId</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">ORDER_ID</span>\n    <span class=\"n\">Instant</span> <span class=\"n\">when</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">DEFAULT_CURRENT_DATE</span>\n    <span class=\"n\">Money</span> <span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">EUR_40</span>\n    <span class=\"n\">Delivery</span> <span class=\"n\">delivery</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">OrderPaidEventBuilder</span> <span class=\"nf\">anOrderPaidEventWithFreeDelivery</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">anOrderPaidEvent</span><span class=\"o\">().</span><span class=\"na\">withFreeDelivery</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">OrderPaidEventBuilder</span> <span class=\"nf\">anOrderPaidEvent</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">OrderPaidEventBuilder</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">OrderPaidEventBuilder</span> <span class=\"nf\">withFreeDelivery</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">delivery</span> <span class=\"o\">=</span> <span class=\"n\">Delivery</span><span class=\"o\">.</span><span class=\"na\">freeDelivery</span><span class=\"o\">()</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">OrderPaid</span> <span class=\"nf\">build</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">OrderPaid</span><span class=\"o\">(</span>\n            <span class=\"k\">new</span> <span class=\"nf\">ClientId</span><span class=\"o\">(</span><span class=\"n\">clientId</span><span class=\"o\">),</span>\n            <span class=\"k\">new</span> <span class=\"nf\">OrderId</span><span class=\"o\">(</span><span class=\"n\">orderId</span><span class=\"o\">),</span>\n            <span class=\"n\">when</span><span class=\"o\">,</span>\n            <span class=\"n\">amount</span><span class=\"o\">,</span>\n            <span class=\"n\">delivery</span>\n        <span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>What is worth mentioning, we use the same constants in many places, which may seem a controversial idea for many\nreaders. However, I decided to split them into a separate <code class=\"language-plaintext highlighter-rouge\">TestData</code> class and based on the assumption that the class\nbuilders are assigned default values. Thanks to this I can focus on data relevant to a given test case only. It does not\nmake sense to introduce unnecessary noise into the test, as it should be set up with a minimal required data set.</p>\n\n<p>This pattern is also described by Nat Pryce on his <a href=\"http://www.natpryce.com/articles/000714.html\">blog</a>, where you can\nfind a more detailed explanation.</p>\n\n<h3 id=\"ability-pattern\">Ability Pattern</h3>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">OrderPaymentAcceptanceSpec</code> class implements several traits with similar names ending with the word Ability. This\nis another concept that I want to discuss. As we understand it, and so it is giving certain abilities to the test\nscenario. As a result, with this approach, we can expand small blocks more and more.</p>\n\n<p>Now, it is easy to imagine another test that needs the same ability or skill, by which we can get rid of duplicate code\nbetween different classes of tests.</p>\n\n<p>Let’s analyse an example implementation of a trait named: <code class=\"language-plaintext highlighter-rouge\">CreateOrderAbility</code></p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">trait</span> <span class=\"nc\">CreateOrderAbility</span> <span class=\"kd\">implements</span> <span class=\"n\">MakeRequestAbility</span> <span class=\"o\">{</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">thereIs</span><span class=\"o\">(</span><span class=\"n\">CreateOrderJsonBuilder</span> <span class=\"n\">anUnpaidOrder</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">orderId</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">ORDER_ID</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">def</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">createWithGivenId</span><span class=\"o\">(</span><span class=\"nl\">anOrder:</span> <span class=\"n\">anUnpaidOrder</span><span class=\"o\">,</span> <span class=\"nl\">orderId:</span> <span class=\"n\">orderId</span><span class=\"o\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"na\">statusCode</span> <span class=\"o\">==</span> <span class=\"n\">HttpStatus</span><span class=\"o\">.</span><span class=\"na\">CREATED</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">ResponseEntity</span><span class=\"o\">&lt;</span><span class=\"n\">Map</span><span class=\"o\">&gt;</span> <span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">CreateOrderJsonBuilder</span> <span class=\"n\">anOrder</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">def</span> <span class=\"n\">jsonBody</span> <span class=\"o\">=</span> <span class=\"n\">toJson</span><span class=\"o\">(</span><span class=\"n\">anOrder</span><span class=\"o\">.</span><span class=\"na\">toMap</span><span class=\"o\">())</span>\n        <span class=\"k\">return</span> <span class=\"nf\">makeRequest</span><span class=\"o\">(</span>\n            <span class=\"nl\">url:</span> <span class=\"s2\">\"/orders\"</span><span class=\"o\">,</span>\n            <span class=\"nl\">method:</span> <span class=\"n\">HttpMethod</span><span class=\"o\">.</span><span class=\"na\">POST</span><span class=\"o\">,</span>\n            <span class=\"nl\">contentType:</span> <span class=\"s2\">\"application/json\"</span><span class=\"o\">,</span>\n            <span class=\"nl\">body:</span> <span class=\"n\">jsonBody</span><span class=\"o\">,</span>\n            <span class=\"nl\">accept:</span> <span class=\"s2\">\"application/json\"</span><span class=\"o\">,</span>\n        <span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>It extends the <code class=\"language-plaintext highlighter-rouge\">MakeRequestAbility</code> trait responsible for building and sending an HTTP request to a given URL, which is\nalready served by the Spring controller, hiding all technical aspects from the reader. Moreover, the methods it exposes\nin conjunction with the passed parameters invoking the static method of the test builder class, read almost like prose.\nThis simple procedure makes our code more expressive, making it look closer to the text from the\nrequirements <code class=\"language-plaintext highlighter-rouge\">Scenario 1.1</code>.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kt\">def</span> <span class=\"s2\">\"shouldn’t charge for delivery when the client has a VIP status\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nl\">given:</span>\n        <span class=\"n\">thereIs</span><span class=\"o\">(</span><span class=\"n\">anUnpaidOrder</span><span class=\"o\">())</span> <span class=\"c1\">// -&gt; there is an unpaid order</span>\n        <span class=\"c1\">// some code omitted</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>In the case of a unit test, such an ability may wrap the in-memory implementation of the repository.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">trait</span> <span class=\"nc\">OrderAbility</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">OrderRepository</span> <span class=\"n\">orderRepository</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">InMemoryOrderRepository</span><span class=\"o\">()</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">thereIs</span><span class=\"o\">(</span><span class=\"n\">OrderDataSnapshotBuilder</span> <span class=\"n\">anOrder</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">orderRepository</span><span class=\"o\">.</span><span class=\"na\">save</span><span class=\"o\">(</span><span class=\"n\">anOrder</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">())</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">// some code omitted</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>And this time we read the beginning of the test identically:</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">def</span> <span class=\"s2\">\"shouldn’t charge for delivery when the client has a VIP status\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nl\">given:</span>\n        <span class=\"n\">thereIs</span><span class=\"o\">(</span><span class=\"n\">anUnpaidOrder</span><span class=\"o\">())</span> <span class=\"c1\">// -&gt; there is an unpaid order</span>\n        <span class=\"c1\">// some code omitted</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>In some cases, the <code class=\"language-plaintext highlighter-rouge\">Ability pattern</code> can act as an assertion class, which I will mention later in the part regarding\ntailor-made assertions. Often in the case of black box tests, there is a need to check additional side effects, e.g.\nwhether an email was sent after the purchase of the order, or whether a service was asked with the data we want. We can\nthen split this logic into an appropriately named Ability class method.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">trait</span> <span class=\"nc\">OrderPaymentAbility</span> <span class=\"kd\">implements</span> <span class=\"n\">MakeRequestAbility</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@SpyBean</span>\n    <span class=\"kd\">private</span> <span class=\"n\">DomainEventPublisher</span> <span class=\"n\">domainEventPublisher</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">PollingConditions</span> <span class=\"n\">pollingConditions</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PollingConditions</span><span class=\"o\">(</span><span class=\"nl\">timeout:</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">// some code omitted</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">assertThatClientDidNotPayForDelivery</span><span class=\"o\">(</span><span class=\"kt\">def</span> <span class=\"n\">anEvent</span> <span class=\"o\">=</span> <span class=\"n\">anOrderPaidEvent</span><span class=\"o\">().</span><span class=\"na\">anOrderPaidEventWithFreeDelivery</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">pollingConditions</span><span class=\"o\">.</span><span class=\"na\">eventually</span> <span class=\"o\">{</span>\n            <span class=\"n\">Mockito</span><span class=\"o\">.</span><span class=\"na\">verify</span><span class=\"o\">(</span><span class=\"n\">domainEventPublisher</span><span class=\"o\">,</span> <span class=\"n\">times</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n                <span class=\"o\">.</span><span class=\"na\">publish</span><span class=\"o\">(</span><span class=\"n\">anEventBuilder</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">())</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">// some code omitted</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>The question is why we should make so much effort in creating our own solutions, and not use ready-made ones directly\nfrom the framework? Here are the arguments for:</p>\n\n<ul>\n  <li>reusability — we can use an ability written once in many places,</li>\n  <li>extensibility — in the case of changing the library, which, for example, is used to mock other services, it is enough\nto make changes in one place,</li>\n  <li>enriching the test with the language specific to our domain,</li>\n  <li>we are not limited by the capabilities of a given framework, e.g. Spock doesn’t allow you to mock final Java classes,\nthen we have to use an additional lib\nlike <a href=\"https://tinyurl.com/readeable-test-by-example\">spock-mockable</a>\n.</li>\n</ul>\n\n<h3 id=\"tailor-made-assertions\">Tailor-made assertions</h3>\n\n<p>The last concept that I want to discuss is dedicated assertion classes. An assertion class is nothing more than a simple\nclass exposing methods which allow checking the input object appropriately.</p>\n\n<p>In some scenarios, we would actually like to verify the data that, for example, was eventually saved in the database.\nSome of our objects can be so complex that it would be inconvenient to check them directly in the test, referencing the\nnested objects or iterating the collections.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kt\">def</span> <span class=\"s2\">\"should change the item quantity for unpaid order\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nl\">given:</span>\n        <span class=\"n\">thereIs</span><span class=\"o\">(</span><span class=\"n\">anUnpaidOrder</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">withId</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">withClientId</span><span class=\"o\">(</span><span class=\"n\">CLIENT_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">withItems</span><span class=\"o\">(</span>\n                <span class=\"n\">anItem</span><span class=\"o\">()</span>\n                    <span class=\"o\">.</span><span class=\"na\">withProductId</span><span class=\"o\">(</span><span class=\"n\">CZESLAW_NIEMEN_ALBUM_ID</span><span class=\"o\">)</span>\n                    <span class=\"o\">.</span><span class=\"na\">withUnitPrice</span><span class=\"o\">(</span><span class=\"n\">euro</span><span class=\"o\">(</span><span class=\"mf\">35.00</span><span class=\"o\">))</span>\n                    <span class=\"o\">.</span><span class=\"na\">withQuantity</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">),</span>\n                <span class=\"n\">anItem</span><span class=\"o\">()</span>\n                    <span class=\"o\">.</span><span class=\"na\">withProductId</span><span class=\"o\">(</span><span class=\"n\">BOHEMIAN_RHAPSODY_ALBUM_ID</span><span class=\"o\">)</span>\n                    <span class=\"o\">.</span><span class=\"na\">withUnitPrice</span><span class=\"o\">(</span><span class=\"n\">euro</span><span class=\"o\">(</span><span class=\"mf\">55.00</span><span class=\"o\">))</span>\n                    <span class=\"o\">.</span><span class=\"na\">withQuantity</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n            <span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n\n    <span class=\"nl\">when:</span>\n        <span class=\"n\">changeItemQuantity</span><span class=\"o\">(</span><span class=\"n\">anItemQuantityChange</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">withOrderId</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">withProductId</span><span class=\"o\">(</span><span class=\"n\">CZESLAW_NIEMEN_ALBUM_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">withQuantityChange</span><span class=\"o\">(</span><span class=\"mi\">20</span><span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n\n    <span class=\"nl\">then:</span>\n        <span class=\"n\">assertThatThereIsOrderWithId</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">hasClientId</span><span class=\"o\">(</span><span class=\"n\">CLIENT_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">hasItemWithIdThat</span><span class=\"o\">(</span><span class=\"n\">CZESLAW_NIEMEN_ALBUM_ID</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">hasUnitPrice</span><span class=\"o\">(</span><span class=\"n\">euro</span><span class=\"o\">(</span><span class=\"mf\">35.00</span><span class=\"o\">))</span>\n                <span class=\"o\">.</span><span class=\"na\">hasQuantity</span><span class=\"o\">(</span><span class=\"mi\">20</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">and</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">hasItemWithIdThat</span><span class=\"o\">(</span><span class=\"n\">BOHEMIAN_RHAPSODY_ALBUM_ID</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">hasUnitPrice</span><span class=\"o\">(</span><span class=\"n\">euro</span><span class=\"o\">(</span><span class=\"mf\">55.00</span><span class=\"o\">))</span>\n                <span class=\"o\">.</span><span class=\"na\">hasQuantity</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Apart from this, such an assertion can also be used in other places than just one test class.</p>\n\n<h2 id=\"the-end\">The end</h2>\n\n<p>I hope that by presenting the above example I have managed to show you how to use simple concepts to write or improve\ntests to be more readable. Consequently, they become a living documentation of our code, which undoubtedly is a great\nadded value to the project that we work on.</p>\n\n<p>However, if you are wondering whether it is always worth investing time in writing tests as suggested in this article,\nmy answer is “No”.</p>\n\n<p>I hold an opinion that not every project, or even part of it, e.g. a given module, requires this approach. In the case\nof simple applications with the complexity of the CRUD type, there is no need for sophisticated solutions. It is often\nenough to test such an application end to end, using the simplest solutions offered by a given framework.</p>\n\n<p>If you would like to have a look at the rest of the code from my example, you are welcome to have a look at\nthe <a href=\"https://github.com/CamilYed/readable-tests-by-example\">github repository</a>.</p>\n","contentSnippet":"Have you ever worked on a project where after downloading the code from the repository you start to wonder what business\nrequirements are hidden under the layer of unreadable tests? \nNothing is more frustrating than code that we cannot control, and over time it becomes so troublesome that no one\nbothers about it too much. People do not pay enough attention to such a project and subsequent tests, if any, duplicate\nthe shortcomings of all the previous ones in the legacy.\nIn this article I will show you how to disenchant this miserable state of affairs with a few simple tips. I invite\nyou to approach the tests in a completely different way to create their new version.\nHello domain!\nThe domain that will serve us as a background will not be too complicated, but at the same time not simple enough to\nactually be able to capture the benefit for which it is worth investing more time and effort in writing tests that are\nclear and easy to develop further.\nFor the purpose of presenting to you a domain that is neither too complicated nor too trivial, I will use a model of a\nvinyl records online shop (I tried to create a domain which is universal and intuitive at the same time).\nLet’s assume that we have the following very preliminary and explicitly written general business assumptions.\n\nAn online store sells vinyl records. Each order is delivered by a courier company cooperating with the store.\n\nThe cost of delivery is charged when the customer pays for the order.\n\nThe cost of delivery is always collected from the supplier’s system (the courier’s system).\n\nIn the event of its unavailability (e.g. when the external courier system cannot provide the cost amount),\nwe can assume that the cost of delivery is always a fixed amount of EUR 20.\n\nWe distinguish between two types of clients: STANDARD and VIP.\n\nIf the order is processed for a customer with a VIP status or the value of the order exceeds a certain amount\naccording to the running promotional campaign (current price list configuration), the order will be delivered free\nof charge.\n\nAdditionally, for the VIP customer, a free music track should be sent to their mailbox after the payment of the order.\n\nAfter paying for the order, no modifications can be made.\n\n\nSuch assumptions can be translated into one of the BDD-style scenarios:\n\n Scenario: 1.1 (The VIP client pays for the order)\n   Given there is an unpaid order\n   And the client is a VIP\n   When the client makes the payment\n   Then payment succeeded\n   And the client did not pay for delivery\n   And free music track was sent to the client\n\n\nArchitecture\nThe structure of the code reflects the architecture that was adopted during the implementation works. The application is\na modular monolith written based on the architectural style\nof Ports & Adapter, as well as\nthe Domain Driven Design approach.\n\nWe can distinguish the following packages:\ncatalogue: reflects the catalogue of products with their unit prices\nclient: provides information on client scoring (VIP, STANDARD)\ncommon: contains common concepts, objects that appear in other contexts, e.g. the Money class\ndelivery: calculates the delivery price based on the defined policy\norder: keeps the logic related to the user’s order, such as the amount of payment, or the ability\nto find them among other orders\nsales: provides information on types promotions (e.g. price list configuration), especially the minimum value order\nneeded for free delivery\nAs the order-related domain is the most complex, it actually coordinates the entire purchasing process, and thus it\nshould provide a comprehensive example for our further consideration.\nHow can we test such code?\nEach design must feature certain guidelines, which is also the case in choosing the testing methodology. In IT\nliterature, we can probably find many interesting references to how we should test an application code, nevertheless, in\nthis article I am going to show you how, on a daily basis, me and other teams at Allegro approach this issue in our\nwork.\nBelow I have listed the main assumptions that will guide us throughout the rest of the article:\nTests should be a living documentation describing the real requirements in the form of clear scenarios and should be\neasy to understand for every person who joins the project;\nApplication will be tested through a black-box approach that examines the functionality of the application without\nlooking into its internal structures or behavior. Thanks to this we focus on the functionality of what we are testing\nand not on the details of the implementation itself;\nAdding a new test to the existing scenario should not be difficult, and should be based on the existing ready-to-use\nconcepts which can also be easily modified.\nNaive approach — or how not to write tests\nAs I mentioned earlier, tests should be a living documentation of business requirements. It is typical of each\ndocumentation that you have to read and understand it first. It’s easy to guess that this shouldn’t be too much of a\nproblem for a potentially new person on the team.\nLet’s take a closer look at Scenario 1.1, at the very beginning of our article, implemented in the form of an\nacceptance test. This is of course sample code that could be created in projects where no special attention is paid to\nthe quality of the provided test code. I would not recommend this type of testing.\n\n def \"shouldn’t charge for delivery when the client has a VIP status\"() {\n    given:\n        def body = \"\"\"\n          {\n             \"clientId\":\"${CLIENT_ID_1}\",\n             \"items\":[\n                {\n                   \"itemUnitPrice\":{\n                      \"productId\":\"${PRODUCT_ID_1}\",\n                      \"price\":{\n                         \"amount\":\"40.00\",\n                         \"currency\":\"EUR\"\n                      }\n                   },\n                   \"quantity\":1\n                }\n             ]\n          }\n        \"\"\".toString()\n        def requestEntity = buildHttpEntity(body, APPLICATION_JSON.toString(), APPLICATION_JSON.toString())\n        def response = restTemplate.exchange(localUrl(\"/orders/$ORDER_ID_1\"), PUT, requestEntity, Map)\n    and:\n        assert response.statusCode == HttpStatus.CREATED\n\n    and:\n        wireMockServer.stubFor(\n            get(\"/reputation/${CLIENT_ID_1}\")\n                .withHeader(ACCEPT, equalTo(APPLICATION_JSON.toString()))\n                .willReturn(aResponse()\n                    .withBody(\"\"\"{\n                                   \"reputation\": \"VIP\",\n                                   \"clientId\": \"${CLIENT_ID_1}\"\n                                 }\"\"\")\n                    .withHeader(CONTENT_TYPE, APPLICATION_JSON.toString())\n                )\n        )\n    when:\n        body = \"\"\"\n          {\n             \"clientId\": \"${CLIENT_ID_1}\",\n             \"cost\": { \"amount\": \"40.00\", \"currency\": \"EUR\" }\n          }\n          \"\"\".toString()\n        requestEntity = buildHttpEntity(body, APPLICATION_JSON.toString(), APPLICATION_JSON.toString())\n        response = restTemplate.exchange(localUrl(\"/orders/$ORDER_ID_1/payment\"), PUT, requestEntity, Map)\n\n    then:\n        response.statusCode == HttpStatus.ACCEPTED\n\n    and:\n        1 * domainEventPublisher.publish(_ as Events.OrderPaid)\n\n    and:\n        pollingConditions.eventually {\n            1 * freeMusicTrackSender.send(new ClientId(CLIENT_ID_1))\n        }\n}\n// some code omitted\n\n\nThe above code is not easy to analyze as it requires the reader to focus on too many technical and implementation\ndetails, such as:\ndata exchange format JSON,\nHTTP data exchange protocol: PUT method, response code,\nREST architectural style,\nclasses derived from frameworks such as RestTemplate, PollingConditions.\nUndoubtedly, it is far from the appearance of the original Scenario 1.1. It contains many concepts that do not belong\nto the domain language that obscure the presence of natural expressions that we use in conversations with business\nstakeholders, for instance “event publisher” or “mock server”.\nAnother disadvantage of this code is that it is not easily adaptable to further development, e.g. in the event of a\nchange in business requirements when it is necessary to modify or add another test.\nThe conscious reader might notice that the example of our imperfect test is maybe too exaggerated and that each section\nof the ‘given’/‘when’/’then’ blocks, etc. could be extracted by the use of a separate private method. Certainly, this\nprocedure may result in some improvement of the code quality, but nevertheless such an approach still has many\ndrawbacks:\nthe test class still contains code related to the technical implementation;\nif another test class uses a similar subset of functionalities, then sooner or later, there will be a need to copy\nsuch a method;\nwhat if I would like to change, for example, the library for mocking calls to another type of library?\nLet’s take a closer look at a unit test this time. It covers a narrower range of requirements because, e.g., it does not\ncheck whether the client has been sent a free music track. Try to find similar defects in it as in the acceptance test.\n\nfinal Money EUR_40 = Money.of(\"40.00\", \"EUR\")\nfinal ClientId CLIENT_ID = new ClientId(\"1\")\nfinal Vinyl VINYL_1 = new Vinyl(new VinylId(\"1\"), EUR_40)\nfinal Quantity ONE = new Quantity(1)\nfinal OrderId ORDER_ID = new OrderId(\"1\")\nfinal OrderDataSnapshot UNPAID_ORDER_EUR_40 = orderFactory.create(ORDER_ID, CLIENT_ID, Maps.of(VINYL_1, ONE), true)\n    .toSnapshot()\nfinal ClientReputation VIP = ClientReputation.vip(CLIENT_ID)\nfinal PayOrderCommand PAY_FOR_ORDER_EUR_40 = new PayOrderCommand(ORDER_ID, EUR_40)\n\ndef \"shouldn’t charge for delivery when the client has a VIP status\"() {\n    given:\n        orderRepository.findBy(ORDER_ID) >> Optional.of(UNPAID_ORDER_EUR_40)\n\n    and:\n        clientReputationProvider.get(CLIENT_ID) >> VIP\n\n    when:\n        def result = paymentHandler.handle(PAY_FOR_ORDER_EUR_40)\n\n    then:\n        result.isSuccess()\n\n    and:\n        1 * domainEventPublisher.publish({ OrderPaid event ->\n            assert event.orderId() == ORDER_ID\n            assert event.amount() == EUR_40\n            assert event.delivery().cost() == Money.ZERO\n            assert event.when() == CURRENT_DATE\n        })\n}\n\n\nIn this case, it may seem that test is much better, because it is simpler and easier to read, but with a more in-depth\nanalysis it turns out that it still does not meet the expected requirements from the “How can we test such\ncode?” section, because:\nit uses concepts such as repository, provider, event publisher, handler, which were not mentioned in the written business\nscenarios — these are technical implementation details;\nall the variables used are within the specification, which in the case of a multitude of tests may constitute\nadditional complexity in their maintenance. Besides, it is not difficult to make a mistake here, e.g. by introducing a\nnew variable that is already defined somewhere under a different name;\nit is not easy to add further tests outside the specification that would need similar functionality — unfortunately, it\nwill require multiple repetition of fragments of the code.\nI have used the two examples of tests above to quickly highlight how many flaws the naive solution\nhas adopted, even though the business requirement was not too complicated. In summary, in each of the tests we have had\nto take extra care of:\nmanually creating objects using a constructor. This is not comfortable and additionally, with the large number of\nparameters, difficult to read; it also makes the tests messy and hard to maintain because changing the constructor\nmakes them very fragile;\ncreating body HTTP requests using text blocks, which in the case of larger objects leads to the creation of structures\noccupying a large part of the specification;\nmocking or stubbing external dependencies using mechanisms from the framework as Stub or Mock, which can be\ncomfortable but does not necessarily improve the readability of the code and its further development;\nstubbing the response to external services using the library Wiremock class directly in our code’s test;\nchecking the final state of an object by referring directly to its content in the test. With complex structures it can\nbe very inconvenient and unreadable.\nIn the next section, I will focus on eliminating these shortcomings with a few simple solutions.\nFixing the state of affairs\nLet’s look at the first test again, which was presented in the previous section “Naive Approach”. It is not too hard to\nnotice that the vocabulary here resembles a more natural language, used by domain experts who do not use purely\ntechnical terms.\n\nclass OrderPaymentAcceptanceSpec extends BaseIntegrationTest implements\n    CreateOrderAbility,\n    ClientReputationAbility,\n    SpecialPriceProviderAbility,\n    CourierSystemAbility,\n    OrderPaymentAbility,\n    FreeMusicTrackSenderAbility {\n\n    def \"shouldn’t charge for delivery when the client has a VIP status\"() {\n        given:\n            thereIs(anUnpaidOrder())\n\n        and:\n            clientIsVip()\n\n        when:\n            def payment = clientMakesThe(aPayment())\n\n        then:\n            assertThat(payment).succeeded()\n\n        and:\n            assertThatClientDidNotPayForDelivery()\n\n        and:\n            assertThatFreeMusicTrackWasSentToTheClient()\n    }\n// other tests omitted\n\n\nIn the following part of this section, I will show you how in a few steps you can use simple concepts to arrive at this\nmodel.\nTest Data Builder\nTest Data Builder provides ready-made objects with sample data. It significantly improves the readability of the code by\nreplacing setter methods or invoking constructors with many parameters.\n\n@Builder(builderStrategy = SimpleStrategy, prefix = \"with\")\nclass CreateOrderJsonBuilder {\n    String orderId = TestData.ORDER_ID\n    String clientId = TestData.CLIENT_ID\n    List<ItemJsonBuilder> items = [anItem().withProductId(TestData.CZESLAW_NIEMEN_ALBUM_ID).withUnitPrice(euro(40.00))]\n\n    static CreateOrderJsonBuilder anUnpaidOrder() {\n        return new CreateOrderJsonBuilder()\n    }\n    // some code omitted\n    CreateOrderJsonBuilder withAmount(MoneyJsonBuilder anAmount) {\n        items = [anItem().withProductId(TestData.CZESLAW_NIEMEN_ALBUM_ID).withUnitPrice(anAmount)]\n        return this\n    }\n\n    Map toMap() {\n        return [\n            clientId: clientId,\n            items   : items != null ? items.collect { it.toMap() } : null\n        ]\n    }\n}\n\n\nIn the above example, the toMap method returns a map, which can then be turned into a body of the HTTP request in JSON\nformat.\nThe Test Data Builder can be used both for constructing input data at the controller level and at the level of unit\ntests, e.g. by creating an object representing the initial state of the database. There is nothing to prevent us from\nusing this pattern, also for the construction of objects on which we make assertions.\n\n@Builder(builderStrategy = SimpleStrategy, prefix = \"with\")\nclass OrderPaidEventBuilder {\n    String clientId = TestData.CLIENT_ID\n    String orderId = TestData.ORDER_ID\n    Instant when = TestData.DEFAULT_CURRENT_DATE\n    Money amount = TestData.EUR_40\n    Delivery delivery\n\n    static OrderPaidEventBuilder anOrderPaidEventWithFreeDelivery() {\n        anOrderPaidEvent().withFreeDelivery()\n    }\n\n    static OrderPaidEventBuilder anOrderPaidEvent() {\n        return new OrderPaidEventBuilder()\n    }\n\n    OrderPaidEventBuilder withFreeDelivery() {\n        delivery = Delivery.freeDelivery()\n        return this\n    }\n\n    OrderPaid build() {\n        return new OrderPaid(\n            new ClientId(clientId),\n            new OrderId(orderId),\n            when,\n            amount,\n            delivery\n        )\n    }\n}\n\n\nWhat is worth mentioning, we use the same constants in many places, which may seem a controversial idea for many\nreaders. However, I decided to split them into a separate TestData class and based on the assumption that the class\nbuilders are assigned default values. Thanks to this I can focus on data relevant to a given test case only. It does not\nmake sense to introduce unnecessary noise into the test, as it should be set up with a minimal required data set.\nThis pattern is also described by Nat Pryce on his blog, where you can\nfind a more detailed explanation.\nAbility Pattern\nThe OrderPaymentAcceptanceSpec class implements several traits with similar names ending with the word Ability. This\nis another concept that I want to discuss. As we understand it, and so it is giving certain abilities to the test\nscenario. As a result, with this approach, we can expand small blocks more and more.\nNow, it is easy to imagine another test that needs the same ability or skill, by which we can get rid of duplicate code\nbetween different classes of tests.\nLet’s analyse an example implementation of a trait named: CreateOrderAbility\n\ntrait CreateOrderAbility implements MakeRequestAbility {\n\n    void thereIs(CreateOrderJsonBuilder anUnpaidOrder, String orderId = TestData.ORDER_ID) {\n        def response = createWithGivenId(anOrder: anUnpaidOrder, orderId: orderId)\n        assert response.statusCode == HttpStatus.CREATED\n    }\n\n    ResponseEntity<Map> create(CreateOrderJsonBuilder anOrder) {\n        def jsonBody = toJson(anOrder.toMap())\n        return makeRequest(\n            url: \"/orders\",\n            method: HttpMethod.POST,\n            contentType: \"application/json\",\n            body: jsonBody,\n            accept: \"application/json\",\n        )\n    }\n}\n\n\nIt extends the MakeRequestAbility trait responsible for building and sending an HTTP request to a given URL, which is\nalready served by the Spring controller, hiding all technical aspects from the reader. Moreover, the methods it exposes\nin conjunction with the passed parameters invoking the static method of the test builder class, read almost like prose.\nThis simple procedure makes our code more expressive, making it look closer to the text from the\nrequirements Scenario 1.1.\n\n  def \"shouldn’t charge for delivery when the client has a VIP status\"() {\n    given:\n        thereIs(anUnpaidOrder()) // -> there is an unpaid order\n        // some code omitted\n}\n\n\nIn the case of a unit test, such an ability may wrap the in-memory implementation of the repository.\n\ntrait OrderAbility {\n\n    static final OrderRepository orderRepository = new InMemoryOrderRepository()\n\n    void thereIs(OrderDataSnapshotBuilder anOrder) {\n        orderRepository.save(anOrder.build())\n    }\n    // some code omitted\n}\n\n\nAnd this time we read the beginning of the test identically:\n\ndef \"shouldn’t charge for delivery when the client has a VIP status\"() {\n    given:\n        thereIs(anUnpaidOrder()) // -> there is an unpaid order\n        // some code omitted\n}\n\n\nIn some cases, the Ability pattern can act as an assertion class, which I will mention later in the part regarding\ntailor-made assertions. Often in the case of black box tests, there is a need to check additional side effects, e.g.\nwhether an email was sent after the purchase of the order, or whether a service was asked with the data we want. We can\nthen split this logic into an appropriately named Ability class method.\n\ntrait OrderPaymentAbility implements MakeRequestAbility {\n\n    @SpyBean\n    private DomainEventPublisher domainEventPublisher\n\n    private PollingConditions pollingConditions = new PollingConditions(timeout: 5)\n\n    // some code omitted\n    void assertThatClientDidNotPayForDelivery(def anEvent = anOrderPaidEvent().anOrderPaidEventWithFreeDelivery()) {\n        pollingConditions.eventually {\n            Mockito.verify(domainEventPublisher, times(1))\n                .publish(anEventBuilder.build())\n        }\n    }\n    // some code omitted\n}\n\n\nThe question is why we should make so much effort in creating our own solutions, and not use ready-made ones directly\nfrom the framework? Here are the arguments for:\nreusability — we can use an ability written once in many places,\nextensibility — in the case of changing the library, which, for example, is used to mock other services, it is enough\nto make changes in one place,\nenriching the test with the language specific to our domain,\nwe are not limited by the capabilities of a given framework, e.g. Spock doesn’t allow you to mock final Java classes,\nthen we have to use an additional lib\nlike spock-mockable\n.\nTailor-made assertions\nThe last concept that I want to discuss is dedicated assertion classes. An assertion class is nothing more than a simple\nclass exposing methods which allow checking the input object appropriately.\nIn some scenarios, we would actually like to verify the data that, for example, was eventually saved in the database.\nSome of our objects can be so complex that it would be inconvenient to check them directly in the test, referencing the\nnested objects or iterating the collections.\n\n  def \"should change the item quantity for unpaid order\"() {\n    given:\n        thereIs(anUnpaidOrder()\n            .withId(ORDER_ID)\n            .withClientId(CLIENT_ID)\n            .withItems(\n                anItem()\n                    .withProductId(CZESLAW_NIEMEN_ALBUM_ID)\n                    .withUnitPrice(euro(35.00))\n                    .withQuantity(10),\n                anItem()\n                    .withProductId(BOHEMIAN_RHAPSODY_ALBUM_ID)\n                    .withUnitPrice(euro(55.00))\n                    .withQuantity(1)\n            )\n        )\n\n    when:\n        changeItemQuantity(anItemQuantityChange()\n            .withOrderId(ORDER_ID)\n            .withProductId(CZESLAW_NIEMEN_ALBUM_ID)\n            .withQuantityChange(20)\n        )\n\n    then:\n        assertThatThereIsOrderWithId(ORDER_ID)\n            .hasClientId(CLIENT_ID)\n            .hasItemWithIdThat(CZESLAW_NIEMEN_ALBUM_ID)\n                .hasUnitPrice(euro(35.00))\n                .hasQuantity(20)\n            .and()\n            .hasItemWithIdThat(BOHEMIAN_RHAPSODY_ALBUM_ID)\n                .hasUnitPrice(euro(55.00))\n                .hasQuantity(1)\n}\n\n\nApart from this, such an assertion can also be used in other places than just one test class.\nThe end\nI hope that by presenting the above example I have managed to show you how to use simple concepts to write or improve\ntests to be more readable. Consequently, they become a living documentation of our code, which undoubtedly is a great\nadded value to the project that we work on.\nHowever, if you are wondering whether it is always worth investing time in writing tests as suggested in this article,\nmy answer is “No”.\nI hold an opinion that not every project, or even part of it, e.g. a given module, requires this approach. In the case\nof simple applications with the complexity of the CRUD type, there is no need for sophisticated solutions. It is often\nenough to test such an application end to end, using the simplest solutions offered by a given framework.\nIf you would like to have a look at the rest of the code from my example, you are welcome to have a look at\nthe github repository.","guid":"https://blog.allegro.tech/2022/02/readable-tests-by-example.html","categories":["tech","backend","testing","tdd","bdd","java","groovy","ddd"],"isoDate":"2022-02-21T23:00:00.000Z","thumbnail":"images/post-headers/java.png"}],"jobs":[{"id":"743999810853837","name":"Research Engineer - Machine Learning (Computer Vision)","uuid":"98abcad8-b820-4402-85a6-b6b6e03cfdaa","refNumber":"REF2880R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2022-03-09T12:55:28.000Z","location":{"city":"Warszawa, Kraków, Poznań, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"606235fe248e6f5bea0815ed","fieldLabel":"Katowice","valueId":"185eb5a9-b884-4ee8-8ebc-0e5f3e852b27","valueLabel":"Tak"},{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"606235bcefbac7156d6a470a","fieldLabel":"Łódź","valueId":"7d33e23d-3fa7-4d7d-86ae-7d7caff54fa9","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"6165609ee6b46b6506c66b63","fieldLabel":"Gdańsk","valueId":"cde0f8e7-5c9d-4d78-9f5c-e1c17ee499a8","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"61656102a169ed164d546c31","fieldLabel":"Lublin","valueId":"02d54f00-48b9-4669-b7b3-10c16ac4bada","valueLabel":"Tak"},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"CV, Computer Vision, ML, AI, DS, Machine Learning, PyTorch, Python, Deep Learning"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999810853837","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999785422127","name":"Research Engineer - Machine Learning (Reinforcement Learning)","uuid":"229d607a-333b-431b-9abe-78137730f5fd","refNumber":"REF2881V","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-11-08T09:56:17.000Z","location":{"city":"Warszawa, Kraków, Poznań, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"606235fe248e6f5bea0815ed","fieldLabel":"Katowice","valueId":"185eb5a9-b884-4ee8-8ebc-0e5f3e852b27","valueLabel":"Tak"},{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"606235bcefbac7156d6a470a","fieldLabel":"Łódź","valueId":"7d33e23d-3fa7-4d7d-86ae-7d7caff54fa9","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"6165609ee6b46b6506c66b63","fieldLabel":"Gdańsk","valueId":"cde0f8e7-5c9d-4d78-9f5c-e1c17ee499a8","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"61656102a169ed164d546c31","fieldLabel":"Lublin","valueId":"02d54f00-48b9-4669-b7b3-10c16ac4bada","valueLabel":"Tak"},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, Machine Learning, Python, Deep Learning, AI, Artificial Intelligence"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999785422127","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999785421861","name":"Research Engineer - Machine Learning (Ranking and Recommendations)","uuid":"a6b2b59e-28e3-4bfa-89ab-b13ab97f06c8","refNumber":"REF2990T","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-11-08T09:54:52.000Z","location":{"city":"Warszawa, Poznań, Kraków, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"b8a4596e-d9ce-42bb-8de5-10995e9ccf99","valueLabel":"IT - Machine Learning"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, AI, Ranking, Research, Machine Learning"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999785421861","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999779448775","name":"Research Engineer - Machine Learning (Reinforcement Learning)","uuid":"c8e577cc-c93a-43e7-8e73-e430989798d7","refNumber":"REF2881V","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-10-14T10:29:36.000Z","location":{"city":"Warszawa, Kraków, Poznań, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"606235fe248e6f5bea0815ed","fieldLabel":"Katowice","valueId":"185eb5a9-b884-4ee8-8ebc-0e5f3e852b27","valueLabel":"Tak"},{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"606235bcefbac7156d6a470a","fieldLabel":"Łódź","valueId":"7d33e23d-3fa7-4d7d-86ae-7d7caff54fa9","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"6165609ee6b46b6506c66b63","fieldLabel":"Gdańsk","valueId":"cde0f8e7-5c9d-4d78-9f5c-e1c17ee499a8","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"61656102a169ed164d546c31","fieldLabel":"Lublin","valueId":"02d54f00-48b9-4669-b7b3-10c16ac4bada","valueLabel":"Tak"},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, Machine Learning, Python, Deep Learning, AI, Artificial Intelligence"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999779448775","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999779448676","name":"Research Engineer - Machine Learning (Ranking and Recommendations)","uuid":"7cb35dfc-f53c-4b51-81ac-61b683060f4c","refNumber":"REF2990T","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-10-14T10:29:00.000Z","location":{"city":"Warszawa, Poznań, Kraków, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"b8a4596e-d9ce-42bb-8de5-10995e9ccf99","valueLabel":"IT - Machine Learning"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, AI, Ranking, Research, Machine Learning"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999779448676","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}}],"events":[{"created":1648205510000,"duration":5400000,"id":"284843205","name":"Allegro Tech Live #26 - Summer e-Xperience 2022 - Praca na start","date_in_series_pattern":false,"status":"upcoming","time":1649347200000,"local_date":"2022-04-07","local_time":"18:00","updated":1648205510000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":9,"venue":{"id":26906060,"name":"Online event","repinned":false,"country":"","localized_country_name":""},"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/284843205/","description":"OBOWIĄZUJE REJESTRACJA NA WYDARZENIE: [https://app.evenea.pl/event/allegro-tech-live-26/](https://app.evenea.pl/event/allegro-tech-live-26/?fbclid=IwAR0b1mViAvW5FnJYTRmstdxOtMA_7jlWRYIAtortrhPFJk1PtHw1xIw5rBk) Allegro Tech Live to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Kiedyś spotykaliśmy się w naszych biurach, a…","how_to_find_us":"https://app.evenea.pl/event/allegro-tech-live-26/","visibility":"public","member_pay_fee":false},{"created":1646677211000,"duration":7200000,"id":"284469437","name":"Allegro Tech Live #25 - Przetwarzanie danych w ogromnej skali","date_in_series_pattern":false,"status":"past","time":1647536400000,"local_date":"2022-03-17","local_time":"18:00","updated":1647544907000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":56,"is_online_event":false,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/284469437/","description":"Wydarzenie przełożone z 24 lutego. OBOWIĄZUJE REJESTRACJA: https://app.evenea.pl/event/allegro-tech-live-25/ Allegro Tech Live to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Kiedyś spotykaliśmy się…","visibility":"public","member_pay_fee":false},{"created":1644580206000,"duration":7200000,"id":"283913049","name":"Allegro Tech Live #25 - Przetwarzanie danych w ogromnej skali","date_in_series_pattern":false,"status":"past","time":1645722000000,"local_date":"2022-02-24","local_time":"18:00","updated":1645733471000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":104,"is_online_event":false,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/283913049/","description":"Ze względu na obecną sytuację polityczną pewnie dzisiaj wszyscy jesteśmy myślami z mieszkańcami Ukrainy, dlatego postanowiliśmy odwołać dzisiejszy Allegro Tech Live. Obiecujemy, że wrócimy z…","visibility":"public","member_pay_fee":false},{"created":1642501324000,"duration":5400000,"id":"283335598","name":"Allegro Tech Live #24 - Automatyzacja i usługi biznesowe w Allegro","date_in_series_pattern":false,"status":"past","time":1643907600000,"local_date":"2022-02-03","local_time":"18:00","updated":1643914840000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":56,"venue":{"id":26906060,"name":"Online event","repinned":false,"country":"","localized_country_name":""},"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/283335598/","description":"REJESTRACJA NA WYDARZENIE ---&gt; https://app.evenea.pl/event/allegro-tech-live-24/ Allegro Tech Live to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Kiedyś spotykaliśmy się w naszych biurach,…","how_to_find_us":"https://app.evenea.pl/event/allegro-tech-live-24/","visibility":"public","member_pay_fee":false}],"podcasts":[{"title":"S02E12 - Piotr Betkier - Rola architekta w Allegro","link":"https://podcast.allegro.tech/rola_architekta_w_allegro/","pubDate":"Wed, 16 Jun 2021 00:00:00 GMT","content":"Od kodowania do tworzenia strategii technicznej... Jak wygląda rola architekta w Allegro? Ile takich osób pracuje w naszej firmie i dlaczego ta rola jest tak różnorodna? Czym jest Andamio i jak rozwijamy naszą platformę – o tym wszystkim opowie Piotr Betkier – Inżynier, Architekt Platformy Technicznej w Allegro oraz twórca piosenek o IT :)","contentSnippet":"Od kodowania do tworzenia strategii technicznej... Jak wygląda rola architekta w Allegro? Ile takich osób pracuje w naszej firmie i dlaczego ta rola jest tak różnorodna? Czym jest Andamio i jak rozwijamy naszą platformę – o tym wszystkim opowie Piotr Betkier – Inżynier, Architekt Platformy Technicznej w Allegro oraz twórca piosenek o IT :)","guid":"https://podcast.allegro.tech/rola_architekta_w_allegro/","isoDate":"2021-06-16T00:00:00.000Z"},{"title":"S02E11 - Piotr Michoński - Infrastruktura Allegro","link":"https://podcast.allegro.tech/infrastruktura_Allegro/","pubDate":"Tue, 01 Jun 2021 00:00:00 GMT","content":"Jak jest zbudowane środowisko uruchomienia aplikacji Allegro? Jak działają serwerownie firmy i ile ich potrzeba, a które elementy Allegro działają w chmurze publicznej? Jak przebiegała transformacja w Allegro i co zmieniało się przez lata? Jak wzrost biznesu wpływa na wielkość infrastruktury i jak infrastruktura Allegro odczuła przyjście pandemii? O tym, a także o rozwoju liderów technologii w Allegro oraz o historii powstania dżingla do naszych podcastów, opowie Piotr Michoński - menadżer Zespołów tworzących infrastrukturę Allegro.","contentSnippet":"Jak jest zbudowane środowisko uruchomienia aplikacji Allegro? Jak działają serwerownie firmy i ile ich potrzeba, a które elementy Allegro działają w chmurze publicznej? Jak przebiegała transformacja w Allegro i co zmieniało się przez lata? Jak wzrost biznesu wpływa na wielkość infrastruktury i jak infrastruktura Allegro odczuła przyjście pandemii? O tym, a także o rozwoju liderów technologii w Allegro oraz o historii powstania dżingla do naszych podcastów, opowie Piotr Michoński - menadżer Zespołów tworzących infrastrukturę Allegro.","guid":"https://podcast.allegro.tech/infrastruktura_Allegro/","isoDate":"2021-06-01T00:00:00.000Z"},{"title":"S02E10 - Dariusz Eliasz - Praca architekta ekosystemu big data w Allegro","link":"https://podcast.allegro.tech/praca_architekta_ekosystemu_big_data_w_Allegro/","pubDate":"Thu, 20 May 2021 00:00:00 GMT","content":"Jak wygląda praca architekta ekosystemu big data w Allegro? Jakie zadania realizuje nasz zespół odpowiedzialny za narzędzia i infrastrukturę dla przetwarzania danych? Kiedy możemy mówić o dużych danych i ile petabajtów przetwarza Allegro? Skąd pochodzą dane Allegro i dlaczego jest ich tak dużo oraz z jakiego powodu dopiero teraz przenosimy się do chmury? O tym wszystkim opowie zdobywca statuetki Allegro Tech Hero - Dariusz Eliasz – Team Manager & Platform Architect w Allegro.","contentSnippet":"Jak wygląda praca architekta ekosystemu big data w Allegro? Jakie zadania realizuje nasz zespół odpowiedzialny za narzędzia i infrastrukturę dla przetwarzania danych? Kiedy możemy mówić o dużych danych i ile petabajtów przetwarza Allegro? Skąd pochodzą dane Allegro i dlaczego jest ich tak dużo oraz z jakiego powodu dopiero teraz przenosimy się do chmury? O tym wszystkim opowie zdobywca statuetki Allegro Tech Hero - Dariusz Eliasz – Team Manager & Platform Architect w Allegro.","guid":"https://podcast.allegro.tech/praca_architekta_ekosystemu_big_data_w_Allegro/","isoDate":"2021-05-20T00:00:00.000Z"},{"title":"S02E09 - Bartosz Gałek - Od inżyniera do lidera w Allegro","link":"https://podcast.allegro.tech/od_inzyniera_do_lidera_w_allegro/","pubDate":"Thu, 06 May 2021 00:00:00 GMT","content":"Czym jest Opbox i jakie wyzwania przed nim stoją? Jak w Allegro angażujemy się w rozwój kultury Open Source? Ile mamy projektów na GitHubie i jak świętujemy Hacktoberfest? W jaki sposób można rozwinąć się od inżyniera do lidera? Na te pytania w najnowszym Allegro Tech Podcast odpowie Bartek Gałek, Team Leader w Allegro.","contentSnippet":"Czym jest Opbox i jakie wyzwania przed nim stoją? Jak w Allegro angażujemy się w rozwój kultury Open Source? Ile mamy projektów na GitHubie i jak świętujemy Hacktoberfest? W jaki sposób można rozwinąć się od inżyniera do lidera? Na te pytania w najnowszym Allegro Tech Podcast odpowie Bartek Gałek, Team Leader w Allegro.","guid":"https://podcast.allegro.tech/od_inzyniera_do_lidera_w_allegro/","isoDate":"2021-05-06T00:00:00.000Z"}]},"__N_SSG":true}