{"pageProps":{"posts":[{"title":"Make your tests readable by example","link":"https://blog.allegro.tech/2022/02/readable-tests-by-example.html","pubDate":"Tue, 22 Feb 2022 00:00:00 +0100","authors":{"author":[{"name":["Kamil Jędrzejuk"],"photo":["https://blog.allegro.tech/img/authors/kamil.jedrzejuk.jpg"],"url":["https://blog.allegro.tech/authors/kamil.jedrzejuk"]}]},"content":"<p>Have you ever worked on a project where after downloading the code from the repository you start to wonder what business\nrequirements are hidden under the layer of unreadable tests? <br />\nOr maybe you are currently wondering how to test a new feature that you have been entrusted to implement?</p>\n\n<p>Nothing is more frustrating than code that we cannot control, and over time it becomes so troublesome that no one\nbothers about it too much. People do not pay enough attention to such a project and subsequent tests, if any, duplicate\nthe shortcomings of all the previous ones in the legacy.</p>\n\n<p>In this article I will show you how to disenchant this miserable state of affairs with a few simple tips. I invite\nyou to approach the tests in a completely different way to create their new version.</p>\n\n<h2 id=\"hello-domain\">Hello domain!</h2>\n\n<p>The domain that will serve us as a background will not be too complicated, but at the same time not simple enough to\nactually be able to capture the benefit for which it is worth investing more time and effort in writing tests that are\nclear and easy to develop further.</p>\n\n<p>For the purpose of presenting to you a domain that is neither too complicated nor too trivial, I will use a model of a\nvinyl records online shop (I tried to create a domain which is universal and intuitive at the same time).</p>\n\n<p>Let’s assume that we have the following very preliminary and explicitly written general business assumptions.</p>\n\n<div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>An online store sells vinyl records. Each order is delivered by a courier company cooperating with the store.\n\nThe cost of delivery is charged when the customer pays for the order.\n\nThe cost of delivery is always collected from the supplier’s system (the courier’s system).\n\nIn the event of its unavailability (e.g. when the external courier system cannot provide the cost amount),\nwe can assume that the cost of delivery is always a fixed amount of EUR 20.\n\nWe distinguish between two types of clients: STANDARD and VIP.\n\nIf the order is processed for a customer with a VIP status or the value of the order exceeds a certain amount\naccording to the running promotional campaign (current price list configuration), the order will be delivered free\nof charge.\n\nAdditionally, for the VIP customer, a free music track should be sent to their mailbox after the payment of the order.\n\nAfter paying for the order, no modifications can be made.\n</code></pre></div></div>\n\n<p>Such assumptions can be translated into one of the BDD-style scenarios:</p>\n\n<div class=\"language-gherkin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kn\">Scenario</span><span class=\"p\">:</span> 1.1 (The VIP client pays for the order)\n   <span class=\"nf\">Given </span>there is an unpaid order\n   <span class=\"nf\">And </span>the client is a VIP\n   <span class=\"nf\">When </span>the client makes the payment\n   <span class=\"nf\">Then </span>payment succeeded\n   <span class=\"nf\">And </span>the client did not pay for delivery\n   <span class=\"nf\">And </span>free music track was sent to the client\n</code></pre></div></div>\n\n<h3 id=\"architecture\">Architecture</h3>\n\n<p>The structure of the code reflects the architecture that was adopted during the implementation works. The application is\na modular monolith written based on the architectural style\nof <a href=\"https://blog.allegro.tech/2020/05/hexagonal-architecture-by-example.html\">Ports &amp; Adapter</a>, as well as\nthe <a href=\"https://www.dddcommunity.org/learning-ddd/what_is_ddd/\">Domain Driven Design</a> approach.</p>\n\n<p><img alt=\"API package structure\" src=\"/img/articles/2022-02-22-readable-tests-by-example/1.png\" /></p>\n\n<p>We can distinguish the following packages:</p>\n\n<ul>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">catalogue</code>: reflects the catalogue of products with their unit prices</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">client</code>: provides information on client scoring (VIP, STANDARD)</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">common</code>: contains common concepts, objects that appear in other contexts, e.g. the Money class</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">delivery</code>: calculates the delivery price based on the defined policy</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">order</code>: keeps the logic related to the user’s order, such as the amount of payment, or the ability\nto find them among other orders</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">sales</code>: provides information on types promotions (e.g. price list configuration), especially the minimum value order\nneeded for free delivery</p>\n  </li>\n</ul>\n\n<p>As the order-related domain is the most complex, it actually coordinates the entire purchasing process, and thus it\nshould provide a comprehensive example for our further consideration.</p>\n\n<h2 id=\"how-can-we-test-such-code\">How can we test such code?</h2>\n\n<p>Each design must feature certain guidelines, which is also the case in choosing the testing methodology. In IT\nliterature, we can probably find many interesting references to how we should test an application code, nevertheless, in\nthis article I am going to show you how, on a daily basis, me and other teams at Allegro approach this issue in our\nwork.</p>\n\n<p>Below I have listed the main assumptions that will guide us throughout the rest of the article:</p>\n\n<ul>\n  <li>\n    <p>Tests should be a living documentation describing the real requirements in the form of clear scenarios and should be\neasy to understand for every person who joins the project;</p>\n  </li>\n  <li>\n    <p>Application will be tested through a black-box approach that examines the functionality of the application without\nlooking into its internal structures or behavior. Thanks to this we focus on the functionality of what we are testing\nand not on the details of the implementation itself;</p>\n  </li>\n  <li>\n    <p>Adding a new test to the existing scenario should not be difficult, and should be based on the existing ready-to-use\nconcepts which can also be easily modified.</p>\n  </li>\n</ul>\n\n<h2 id=\"naive-approach--or-how-not-to-write-tests\">Naive approach — or how not to write tests</h2>\n\n<p>As I mentioned earlier, tests should be a living documentation of business requirements. It is typical of each\ndocumentation that you have to read and understand it first. It’s easy to guess that this shouldn’t be too much of a\nproblem for a potentially new person on the team.</p>\n\n<p>Let’s take a closer look at <code class=\"language-plaintext highlighter-rouge\">Scenario 1.1</code>, at the very beginning of our article, implemented in the form of an\nacceptance test. This is of course sample code that could be created in projects where no special attention is paid to\nthe quality of the provided test code. I would not recommend this type of testing.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kt\">def</span> <span class=\"s2\">\"shouldn’t charge for delivery when the client has a VIP status\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nl\">given:</span>\n        <span class=\"kt\">def</span> <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n          {\n             \"clientId\":\"${CLIENT_ID_1}\",\n             \"items\":[\n                {\n                   \"itemUnitPrice\":{\n                      \"productId\":\"${PRODUCT_ID_1}\",\n                      \"price\":{\n                         \"amount\":\"40.00\",\n                         \"currency\":\"EUR\"\n                      }\n                   },\n                   \"quantity\":1\n                }\n             ]\n          }\n        \"\"\"</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">()</span>\n        <span class=\"kt\">def</span> <span class=\"n\">requestEntity</span> <span class=\"o\">=</span> <span class=\"n\">buildHttpEntity</span><span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">,</span> <span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(),</span> <span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">())</span>\n        <span class=\"kt\">def</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">restTemplate</span><span class=\"o\">.</span><span class=\"na\">exchange</span><span class=\"o\">(</span><span class=\"n\">localUrl</span><span class=\"o\">(</span><span class=\"s2\">\"/orders/$ORDER_ID_1\"</span><span class=\"o\">),</span> <span class=\"n\">PUT</span><span class=\"o\">,</span> <span class=\"n\">requestEntity</span><span class=\"o\">,</span> <span class=\"n\">Map</span><span class=\"o\">)</span>\n    <span class=\"nl\">and:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"na\">statusCode</span> <span class=\"o\">==</span> <span class=\"n\">HttpStatus</span><span class=\"o\">.</span><span class=\"na\">CREATED</span>\n\n    <span class=\"nl\">and:</span>\n        <span class=\"n\">wireMockServer</span><span class=\"o\">.</span><span class=\"na\">stubFor</span><span class=\"o\">(</span>\n            <span class=\"n\">get</span><span class=\"o\">(</span><span class=\"s2\">\"/reputation/${CLIENT_ID_1}\"</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">withHeader</span><span class=\"o\">(</span><span class=\"n\">ACCEPT</span><span class=\"o\">,</span> <span class=\"n\">equalTo</span><span class=\"o\">(</span><span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">()))</span>\n                <span class=\"o\">.</span><span class=\"na\">willReturn</span><span class=\"o\">(</span><span class=\"n\">aResponse</span><span class=\"o\">()</span>\n                    <span class=\"o\">.</span><span class=\"na\">withBody</span><span class=\"o\">(</span><span class=\"s2\">\"\"\"{\n                                   \"reputation\": \"VIP\",\n                                   \"clientId\": \"${CLIENT_ID_1}\"\n                                 }\"\"\"</span><span class=\"o\">)</span>\n                    <span class=\"o\">.</span><span class=\"na\">withHeader</span><span class=\"o\">(</span><span class=\"n\">CONTENT_TYPE</span><span class=\"o\">,</span> <span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">())</span>\n                <span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n    <span class=\"nl\">when:</span>\n        <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n          {\n             \"clientId\": \"${CLIENT_ID_1}\",\n             \"cost\": { \"amount\": \"40.00\", \"currency\": \"EUR\" }\n          }\n          \"\"\"</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">()</span>\n        <span class=\"n\">requestEntity</span> <span class=\"o\">=</span> <span class=\"n\">buildHttpEntity</span><span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">,</span> <span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(),</span> <span class=\"n\">APPLICATION_JSON</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">())</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">restTemplate</span><span class=\"o\">.</span><span class=\"na\">exchange</span><span class=\"o\">(</span><span class=\"n\">localUrl</span><span class=\"o\">(</span><span class=\"s2\">\"/orders/$ORDER_ID_1/payment\"</span><span class=\"o\">),</span> <span class=\"n\">PUT</span><span class=\"o\">,</span> <span class=\"n\">requestEntity</span><span class=\"o\">,</span> <span class=\"n\">Map</span><span class=\"o\">)</span>\n\n    <span class=\"nl\">then:</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"na\">statusCode</span> <span class=\"o\">==</span> <span class=\"n\">HttpStatus</span><span class=\"o\">.</span><span class=\"na\">ACCEPTED</span>\n\n    <span class=\"nl\">and:</span>\n        <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">domainEventPublisher</span><span class=\"o\">.</span><span class=\"na\">publish</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"k\">as</span> <span class=\"n\">Events</span><span class=\"o\">.</span><span class=\"na\">OrderPaid</span><span class=\"o\">)</span>\n\n    <span class=\"nl\">and:</span>\n        <span class=\"n\">pollingConditions</span><span class=\"o\">.</span><span class=\"na\">eventually</span> <span class=\"o\">{</span>\n            <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">freeMusicTrackSender</span><span class=\"o\">.</span><span class=\"na\">send</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">ClientId</span><span class=\"o\">(</span><span class=\"n\">CLIENT_ID_1</span><span class=\"o\">))</span>\n        <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">// some code omitted</span>\n</code></pre></div></div>\n\n<p>The above code is not easy to analyze as it requires the reader to focus on too many technical and implementation\ndetails, such as:</p>\n\n<ul>\n  <li>data exchange format JSON,</li>\n  <li>HTTP data exchange protocol: PUT method, response code,</li>\n  <li>REST architectural style,</li>\n  <li>classes derived from frameworks such as RestTemplate, PollingConditions.</li>\n</ul>\n\n<p>Undoubtedly, it is far from the appearance of the original <code class=\"language-plaintext highlighter-rouge\">Scenario 1.1</code>. It contains many concepts that do not belong\nto the domain language that obscure the presence of natural expressions that we use in conversations with business\nstakeholders, for instance “event publisher” or “mock server”.</p>\n\n<p>Another disadvantage of this code is that it is not easily adaptable to further development, e.g. in the event of a\nchange in business requirements when it is necessary to modify or add another test.</p>\n\n<p>The conscious reader might notice that the example of our imperfect test is maybe too exaggerated and that each section\nof the ‘given’/‘when’/’then’ blocks, etc. could be extracted by the use of a separate private method. Certainly, this\nprocedure may result in some improvement of the code quality, but nevertheless such an approach still has many\ndrawbacks:</p>\n\n<ul>\n  <li>the test class still contains code related to the technical implementation;</li>\n  <li>if another test class uses a similar subset of functionalities, then sooner or later, there will be a need to copy\nsuch a method;</li>\n  <li>what if I would like to change, for example, the library for mocking calls to another type of library?</li>\n</ul>\n\n<p>Let’s take a closer look at a unit test this time. It covers a narrower range of requirements because, e.g., it does not\ncheck whether the client has been sent a free music track. Try to find similar defects in it as in the acceptance test.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"n\">Money</span> <span class=\"n\">EUR_40</span> <span class=\"o\">=</span> <span class=\"n\">Money</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"s2\">\"40.00\"</span><span class=\"o\">,</span> <span class=\"s2\">\"EUR\"</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">ClientId</span> <span class=\"n\">CLIENT_ID</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ClientId</span><span class=\"o\">(</span><span class=\"s2\">\"1\"</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">Vinyl</span> <span class=\"n\">VINYL_1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Vinyl</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">VinylId</span><span class=\"o\">(</span><span class=\"s2\">\"1\"</span><span class=\"o\">),</span> <span class=\"n\">EUR_40</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">Quantity</span> <span class=\"n\">ONE</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Quantity</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">OrderId</span> <span class=\"n\">ORDER_ID</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">OrderId</span><span class=\"o\">(</span><span class=\"s2\">\"1\"</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">OrderDataSnapshot</span> <span class=\"n\">UNPAID_ORDER_EUR_40</span> <span class=\"o\">=</span> <span class=\"n\">orderFactory</span><span class=\"o\">.</span><span class=\"na\">create</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">,</span> <span class=\"n\">CLIENT_ID</span><span class=\"o\">,</span> <span class=\"n\">Maps</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">VINYL_1</span><span class=\"o\">,</span> <span class=\"n\">ONE</span><span class=\"o\">),</span> <span class=\"kc\">true</span><span class=\"o\">)</span>\n    <span class=\"o\">.</span><span class=\"na\">toSnapshot</span><span class=\"o\">()</span>\n<span class=\"kd\">final</span> <span class=\"n\">ClientReputation</span> <span class=\"n\">VIP</span> <span class=\"o\">=</span> <span class=\"n\">ClientReputation</span><span class=\"o\">.</span><span class=\"na\">vip</span><span class=\"o\">(</span><span class=\"n\">CLIENT_ID</span><span class=\"o\">)</span>\n<span class=\"kd\">final</span> <span class=\"n\">PayOrderCommand</span> <span class=\"n\">PAY_FOR_ORDER_EUR_40</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PayOrderCommand</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">,</span> <span class=\"n\">EUR_40</span><span class=\"o\">)</span>\n\n<span class=\"kt\">def</span> <span class=\"s2\">\"shouldn’t charge for delivery when the client has a VIP status\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nl\">given:</span>\n        <span class=\"n\">orderRepository</span><span class=\"o\">.</span><span class=\"na\">findBy</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">Optional</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">UNPAID_ORDER_EUR_40</span><span class=\"o\">)</span>\n\n    <span class=\"nl\">and:</span>\n        <span class=\"n\">clientReputationProvider</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">CLIENT_ID</span><span class=\"o\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">VIP</span>\n\n    <span class=\"nl\">when:</span>\n        <span class=\"kt\">def</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">paymentHandler</span><span class=\"o\">.</span><span class=\"na\">handle</span><span class=\"o\">(</span><span class=\"n\">PAY_FOR_ORDER_EUR_40</span><span class=\"o\">)</span>\n\n    <span class=\"nl\">then:</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">isSuccess</span><span class=\"o\">()</span>\n\n    <span class=\"nl\">and:</span>\n        <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">domainEventPublisher</span><span class=\"o\">.</span><span class=\"na\">publish</span><span class=\"o\">({</span> <span class=\"n\">OrderPaid</span> <span class=\"n\">event</span> <span class=\"o\">-&gt;</span>\n            <span class=\"k\">assert</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"na\">orderId</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">ORDER_ID</span>\n            <span class=\"k\">assert</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"na\">amount</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">EUR_40</span>\n            <span class=\"k\">assert</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"na\">delivery</span><span class=\"o\">().</span><span class=\"na\">cost</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">Money</span><span class=\"o\">.</span><span class=\"na\">ZERO</span>\n            <span class=\"k\">assert</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"na\">when</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">CURRENT_DATE</span>\n        <span class=\"o\">})</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>In this case, it may seem that test is much better, because it is simpler and easier to read, but with a more in-depth\nanalysis it turns out that it still does not meet the expected requirements from the “How can we test such\ncode?” section, because:</p>\n\n<ul>\n  <li>it uses concepts such as repository, provider, event publisher, handler, which were not mentioned in the written business\nscenarios — these are technical implementation details;</li>\n  <li>all the variables used are within the specification, which in the case of a multitude of tests may constitute\nadditional complexity in their maintenance. Besides, it is not difficult to make a mistake here, e.g. by introducing a\nnew variable that is already defined somewhere under a different name;</li>\n  <li>it is not easy to add further tests outside the specification that would need similar functionality — unfortunately, it\nwill require multiple repetition of fragments of the code.</li>\n</ul>\n\n<p>I have used the two examples of tests above to quickly highlight how many flaws the naive solution\nhas adopted, even though the business requirement was not too complicated. In summary, in each of the tests we have had\nto take extra care of:</p>\n\n<ul>\n  <li>manually creating objects using a constructor. This is not comfortable and additionally, with the large number of\nparameters, difficult to read; it also makes the tests messy and hard to maintain because changing the constructor\nmakes them very fragile;</li>\n  <li>creating body HTTP requests using text blocks, which in the case of larger objects leads to the creation of structures\noccupying a large part of the specification;</li>\n  <li>mocking or stubbing external dependencies using mechanisms from the framework as Stub or Mock, which can be\ncomfortable but does not necessarily improve the readability of the code and its further development;</li>\n  <li>stubbing the response to external services using the library Wiremock class directly in our code’s test;</li>\n  <li>checking the final state of an object by referring directly to its content in the test. With complex structures it can\nbe very inconvenient and unreadable.</li>\n</ul>\n\n<p>In the next section, I will focus on eliminating these shortcomings with a few simple solutions.</p>\n\n<h2 id=\"fixing-the-state-of-affairs\">Fixing the state of affairs</h2>\n\n<p>Let’s look at the first test again, which was presented in the previous section “Naive Approach”. It is not too hard to\nnotice that the vocabulary here resembles a more natural language, used by domain experts who do not use purely\ntechnical terms.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">OrderPaymentAcceptanceSpec</span> <span class=\"kd\">extends</span> <span class=\"n\">BaseIntegrationTest</span> <span class=\"kd\">implements</span>\n    <span class=\"n\">CreateOrderAbility</span><span class=\"o\">,</span>\n    <span class=\"n\">ClientReputationAbility</span><span class=\"o\">,</span>\n    <span class=\"n\">SpecialPriceProviderAbility</span><span class=\"o\">,</span>\n    <span class=\"n\">CourierSystemAbility</span><span class=\"o\">,</span>\n    <span class=\"n\">OrderPaymentAbility</span><span class=\"o\">,</span>\n    <span class=\"n\">FreeMusicTrackSenderAbility</span> <span class=\"o\">{</span>\n\n    <span class=\"kt\">def</span> <span class=\"s2\">\"shouldn’t charge for delivery when the client has a VIP status\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nl\">given:</span>\n            <span class=\"n\">thereIs</span><span class=\"o\">(</span><span class=\"n\">anUnpaidOrder</span><span class=\"o\">())</span>\n\n        <span class=\"nl\">and:</span>\n            <span class=\"n\">clientIsVip</span><span class=\"o\">()</span>\n\n        <span class=\"nl\">when:</span>\n            <span class=\"kt\">def</span> <span class=\"n\">payment</span> <span class=\"o\">=</span> <span class=\"n\">clientMakesThe</span><span class=\"o\">(</span><span class=\"n\">aPayment</span><span class=\"o\">())</span>\n\n        <span class=\"nl\">then:</span>\n            <span class=\"n\">assertThat</span><span class=\"o\">(</span><span class=\"n\">payment</span><span class=\"o\">).</span><span class=\"na\">succeeded</span><span class=\"o\">()</span>\n\n        <span class=\"nl\">and:</span>\n            <span class=\"n\">assertThatClientDidNotPayForDelivery</span><span class=\"o\">()</span>\n\n        <span class=\"nl\">and:</span>\n            <span class=\"n\">assertThatFreeMusicTrackWasSentToTheClient</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n<span class=\"c1\">// other tests omitted</span>\n</code></pre></div></div>\n\n<p>In the following part of this section, I will show you how in a few steps you can use simple concepts to arrive at this\nmodel.</p>\n\n<h3 id=\"test-data-builder\">Test Data Builder</h3>\n\n<p>Test Data Builder provides ready-made objects with sample data. It significantly improves the readability of the code by\nreplacing setter methods or invoking constructors with many parameters.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Builder</span><span class=\"o\">(</span><span class=\"n\">builderStrategy</span> <span class=\"o\">=</span> <span class=\"n\">SimpleStrategy</span><span class=\"o\">,</span> <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"with\"</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"nc\">CreateOrderJsonBuilder</span> <span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"n\">orderId</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">ORDER_ID</span>\n    <span class=\"n\">String</span> <span class=\"n\">clientId</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">CLIENT_ID</span>\n    <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">ItemJsonBuilder</span><span class=\"o\">&gt;</span> <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">anItem</span><span class=\"o\">().</span><span class=\"na\">withProductId</span><span class=\"o\">(</span><span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">CZESLAW_NIEMEN_ALBUM_ID</span><span class=\"o\">).</span><span class=\"na\">withUnitPrice</span><span class=\"o\">(</span><span class=\"n\">euro</span><span class=\"o\">(</span><span class=\"mf\">40.00</span><span class=\"o\">))]</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">CreateOrderJsonBuilder</span> <span class=\"nf\">anUnpaidOrder</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">CreateOrderJsonBuilder</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">// some code omitted</span>\n    <span class=\"n\">CreateOrderJsonBuilder</span> <span class=\"nf\">withAmount</span><span class=\"o\">(</span><span class=\"n\">MoneyJsonBuilder</span> <span class=\"n\">anAmount</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">anItem</span><span class=\"o\">().</span><span class=\"na\">withProductId</span><span class=\"o\">(</span><span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">CZESLAW_NIEMEN_ALBUM_ID</span><span class=\"o\">).</span><span class=\"na\">withUnitPrice</span><span class=\"o\">(</span><span class=\"n\">anAmount</span><span class=\"o\">)]</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">Map</span> <span class=\"nf\">toMap</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">[</span>\n            <span class=\"nl\">clientId:</span> <span class=\"n\">clientId</span><span class=\"o\">,</span>\n            <span class=\"n\">items</span>   <span class=\"o\">:</span> <span class=\"n\">items</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">?</span> <span class=\"n\">items</span><span class=\"o\">.</span><span class=\"na\">collect</span> <span class=\"o\">{</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"na\">toMap</span><span class=\"o\">()</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kc\">null</span>\n        <span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>In the above example, the <code class=\"language-plaintext highlighter-rouge\">toMap</code> method returns a map, which can then be turned into a body of the HTTP request in JSON\nformat.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">Test Data Builder</code> can be used both for constructing input data at the controller level and at the level of unit\ntests, e.g. by creating an object representing the initial state of the database. There is nothing to prevent us from\nusing this pattern, also for the construction of objects on which we make assertions.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Builder</span><span class=\"o\">(</span><span class=\"n\">builderStrategy</span> <span class=\"o\">=</span> <span class=\"n\">SimpleStrategy</span><span class=\"o\">,</span> <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"with\"</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"nc\">OrderPaidEventBuilder</span> <span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"n\">clientId</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">CLIENT_ID</span>\n    <span class=\"n\">String</span> <span class=\"n\">orderId</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">ORDER_ID</span>\n    <span class=\"n\">Instant</span> <span class=\"n\">when</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">DEFAULT_CURRENT_DATE</span>\n    <span class=\"n\">Money</span> <span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">EUR_40</span>\n    <span class=\"n\">Delivery</span> <span class=\"n\">delivery</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">OrderPaidEventBuilder</span> <span class=\"nf\">anOrderPaidEventWithFreeDelivery</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">anOrderPaidEvent</span><span class=\"o\">().</span><span class=\"na\">withFreeDelivery</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">OrderPaidEventBuilder</span> <span class=\"nf\">anOrderPaidEvent</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">OrderPaidEventBuilder</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">OrderPaidEventBuilder</span> <span class=\"nf\">withFreeDelivery</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">delivery</span> <span class=\"o\">=</span> <span class=\"n\">Delivery</span><span class=\"o\">.</span><span class=\"na\">freeDelivery</span><span class=\"o\">()</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">OrderPaid</span> <span class=\"nf\">build</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">OrderPaid</span><span class=\"o\">(</span>\n            <span class=\"k\">new</span> <span class=\"nf\">ClientId</span><span class=\"o\">(</span><span class=\"n\">clientId</span><span class=\"o\">),</span>\n            <span class=\"k\">new</span> <span class=\"nf\">OrderId</span><span class=\"o\">(</span><span class=\"n\">orderId</span><span class=\"o\">),</span>\n            <span class=\"n\">when</span><span class=\"o\">,</span>\n            <span class=\"n\">amount</span><span class=\"o\">,</span>\n            <span class=\"n\">delivery</span>\n        <span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>What is worth mentioning, we use the same constants in many places, which may seem a controversial idea for many\nreaders. However, I decided to split them into a separate <code class=\"language-plaintext highlighter-rouge\">TestData</code> class and based on the assumption that the class\nbuilders are assigned default values. Thanks to this I can focus on data relevant to a given test case only. It does not\nmake sense to introduce unnecessary noise into the test, as it should be set up with a minimal required data set.</p>\n\n<p>This pattern is also described by Nat Pryce on his <a href=\"http://www.natpryce.com/articles/000714.html\">blog</a>, where you can\nfind a more detailed explanation.</p>\n\n<h3 id=\"ability-pattern\">Ability Pattern</h3>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">OrderPaymentAcceptanceSpec</code> class implements several traits with similar names ending with the word Ability. This\nis another concept that I want to discuss. As we understand it, and so it is giving certain abilities to the test\nscenario. As a result, with this approach, we can expand small blocks more and more.</p>\n\n<p>Now, it is easy to imagine another test that needs the same ability or skill, by which we can get rid of duplicate code\nbetween different classes of tests.</p>\n\n<p>Let’s analyse an example implementation of a trait named: <code class=\"language-plaintext highlighter-rouge\">CreateOrderAbility</code></p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">trait</span> <span class=\"nc\">CreateOrderAbility</span> <span class=\"kd\">implements</span> <span class=\"n\">MakeRequestAbility</span> <span class=\"o\">{</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">thereIs</span><span class=\"o\">(</span><span class=\"n\">CreateOrderJsonBuilder</span> <span class=\"n\">anUnpaidOrder</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">orderId</span> <span class=\"o\">=</span> <span class=\"n\">TestData</span><span class=\"o\">.</span><span class=\"na\">ORDER_ID</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">def</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">createWithGivenId</span><span class=\"o\">(</span><span class=\"nl\">anOrder:</span> <span class=\"n\">anUnpaidOrder</span><span class=\"o\">,</span> <span class=\"nl\">orderId:</span> <span class=\"n\">orderId</span><span class=\"o\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"na\">statusCode</span> <span class=\"o\">==</span> <span class=\"n\">HttpStatus</span><span class=\"o\">.</span><span class=\"na\">CREATED</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">ResponseEntity</span><span class=\"o\">&lt;</span><span class=\"n\">Map</span><span class=\"o\">&gt;</span> <span class=\"n\">create</span><span class=\"o\">(</span><span class=\"n\">CreateOrderJsonBuilder</span> <span class=\"n\">anOrder</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">def</span> <span class=\"n\">jsonBody</span> <span class=\"o\">=</span> <span class=\"n\">toJson</span><span class=\"o\">(</span><span class=\"n\">anOrder</span><span class=\"o\">.</span><span class=\"na\">toMap</span><span class=\"o\">())</span>\n        <span class=\"k\">return</span> <span class=\"nf\">makeRequest</span><span class=\"o\">(</span>\n            <span class=\"nl\">url:</span> <span class=\"s2\">\"/orders\"</span><span class=\"o\">,</span>\n            <span class=\"nl\">method:</span> <span class=\"n\">HttpMethod</span><span class=\"o\">.</span><span class=\"na\">POST</span><span class=\"o\">,</span>\n            <span class=\"nl\">contentType:</span> <span class=\"s2\">\"application/json\"</span><span class=\"o\">,</span>\n            <span class=\"nl\">body:</span> <span class=\"n\">jsonBody</span><span class=\"o\">,</span>\n            <span class=\"nl\">accept:</span> <span class=\"s2\">\"application/json\"</span><span class=\"o\">,</span>\n        <span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>It extends the <code class=\"language-plaintext highlighter-rouge\">MakeRequestAbility</code> trait responsible for building and sending an HTTP request to a given URL, which is\nalready served by the Spring controller, hiding all technical aspects from the reader. Moreover, the methods it exposes\nin conjunction with the passed parameters invoking the static method of the test builder class, read almost like prose.\nThis simple procedure makes our code more expressive, making it look closer to the text from the\nrequirements <code class=\"language-plaintext highlighter-rouge\">Scenario 1.1</code>.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kt\">def</span> <span class=\"s2\">\"shouldn’t charge for delivery when the client has a VIP status\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nl\">given:</span>\n        <span class=\"n\">thereIs</span><span class=\"o\">(</span><span class=\"n\">anUnpaidOrder</span><span class=\"o\">())</span> <span class=\"c1\">// -&gt; there is an unpaid order</span>\n        <span class=\"c1\">// some code omitted</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>In the case of a unit test, such an ability may wrap the in-memory implementation of the repository.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">trait</span> <span class=\"nc\">OrderAbility</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">OrderRepository</span> <span class=\"n\">orderRepository</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">InMemoryOrderRepository</span><span class=\"o\">()</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">thereIs</span><span class=\"o\">(</span><span class=\"n\">OrderDataSnapshotBuilder</span> <span class=\"n\">anOrder</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">orderRepository</span><span class=\"o\">.</span><span class=\"na\">save</span><span class=\"o\">(</span><span class=\"n\">anOrder</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">())</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">// some code omitted</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>And this time we read the beginning of the test identically:</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">def</span> <span class=\"s2\">\"shouldn’t charge for delivery when the client has a VIP status\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nl\">given:</span>\n        <span class=\"n\">thereIs</span><span class=\"o\">(</span><span class=\"n\">anUnpaidOrder</span><span class=\"o\">())</span> <span class=\"c1\">// -&gt; there is an unpaid order</span>\n        <span class=\"c1\">// some code omitted</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>In some cases, the <code class=\"language-plaintext highlighter-rouge\">Ability pattern</code> can act as an assertion class, which I will mention later in the part regarding\ntailor-made assertions. Often in the case of black box tests, there is a need to check additional side effects, e.g.\nwhether an email was sent after the purchase of the order, or whether a service was asked with the data we want. We can\nthen split this logic into an appropriately named Ability class method.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">trait</span> <span class=\"nc\">OrderPaymentAbility</span> <span class=\"kd\">implements</span> <span class=\"n\">MakeRequestAbility</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@SpyBean</span>\n    <span class=\"kd\">private</span> <span class=\"n\">DomainEventPublisher</span> <span class=\"n\">domainEventPublisher</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">PollingConditions</span> <span class=\"n\">pollingConditions</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">PollingConditions</span><span class=\"o\">(</span><span class=\"nl\">timeout:</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">// some code omitted</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">assertThatClientDidNotPayForDelivery</span><span class=\"o\">(</span><span class=\"kt\">def</span> <span class=\"n\">anEvent</span> <span class=\"o\">=</span> <span class=\"n\">anOrderPaidEvent</span><span class=\"o\">().</span><span class=\"na\">anOrderPaidEventWithFreeDelivery</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">pollingConditions</span><span class=\"o\">.</span><span class=\"na\">eventually</span> <span class=\"o\">{</span>\n            <span class=\"n\">Mockito</span><span class=\"o\">.</span><span class=\"na\">verify</span><span class=\"o\">(</span><span class=\"n\">domainEventPublisher</span><span class=\"o\">,</span> <span class=\"n\">times</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n                <span class=\"o\">.</span><span class=\"na\">publish</span><span class=\"o\">(</span><span class=\"n\">anEventBuilder</span><span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">())</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">// some code omitted</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>The question is why we should make so much effort in creating our own solutions, and not use ready-made ones directly\nfrom the framework? Here are the arguments for:</p>\n\n<ul>\n  <li>reusability — we can use an ability written once in many places,</li>\n  <li>extensibility — in the case of changing the library, which, for example, is used to mock other services, it is enough\nto make changes in one place,</li>\n  <li>enriching the test with the language specific to our domain,</li>\n  <li>we are not limited by the capabilities of a given framework, e.g. Spock doesn’t allow you to mock final Java classes,\nthen we have to use an additional lib\nlike <a href=\"https://tinyurl.com/readeable-test-by-example\">spock-mockable</a>\n.</li>\n</ul>\n\n<h3 id=\"tailor-made-assertions\">Tailor-made assertions</h3>\n\n<p>The last concept that I want to discuss is dedicated assertion classes. An assertion class is nothing more than a simple\nclass exposing methods which allow checking the input object appropriately.</p>\n\n<p>In some scenarios, we would actually like to verify the data that, for example, was eventually saved in the database.\nSome of our objects can be so complex that it would be inconvenient to check them directly in the test, referencing the\nnested objects or iterating the collections.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kt\">def</span> <span class=\"s2\">\"should change the item quantity for unpaid order\"</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nl\">given:</span>\n        <span class=\"n\">thereIs</span><span class=\"o\">(</span><span class=\"n\">anUnpaidOrder</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">withId</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">withClientId</span><span class=\"o\">(</span><span class=\"n\">CLIENT_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">withItems</span><span class=\"o\">(</span>\n                <span class=\"n\">anItem</span><span class=\"o\">()</span>\n                    <span class=\"o\">.</span><span class=\"na\">withProductId</span><span class=\"o\">(</span><span class=\"n\">CZESLAW_NIEMEN_ALBUM_ID</span><span class=\"o\">)</span>\n                    <span class=\"o\">.</span><span class=\"na\">withUnitPrice</span><span class=\"o\">(</span><span class=\"n\">euro</span><span class=\"o\">(</span><span class=\"mf\">35.00</span><span class=\"o\">))</span>\n                    <span class=\"o\">.</span><span class=\"na\">withQuantity</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">),</span>\n                <span class=\"n\">anItem</span><span class=\"o\">()</span>\n                    <span class=\"o\">.</span><span class=\"na\">withProductId</span><span class=\"o\">(</span><span class=\"n\">BOHEMIAN_RHAPSODY_ALBUM_ID</span><span class=\"o\">)</span>\n                    <span class=\"o\">.</span><span class=\"na\">withUnitPrice</span><span class=\"o\">(</span><span class=\"n\">euro</span><span class=\"o\">(</span><span class=\"mf\">55.00</span><span class=\"o\">))</span>\n                    <span class=\"o\">.</span><span class=\"na\">withQuantity</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n            <span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n\n    <span class=\"nl\">when:</span>\n        <span class=\"n\">changeItemQuantity</span><span class=\"o\">(</span><span class=\"n\">anItemQuantityChange</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">withOrderId</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">withProductId</span><span class=\"o\">(</span><span class=\"n\">CZESLAW_NIEMEN_ALBUM_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">withQuantityChange</span><span class=\"o\">(</span><span class=\"mi\">20</span><span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n\n    <span class=\"nl\">then:</span>\n        <span class=\"n\">assertThatThereIsOrderWithId</span><span class=\"o\">(</span><span class=\"n\">ORDER_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">hasClientId</span><span class=\"o\">(</span><span class=\"n\">CLIENT_ID</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">hasItemWithIdThat</span><span class=\"o\">(</span><span class=\"n\">CZESLAW_NIEMEN_ALBUM_ID</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">hasUnitPrice</span><span class=\"o\">(</span><span class=\"n\">euro</span><span class=\"o\">(</span><span class=\"mf\">35.00</span><span class=\"o\">))</span>\n                <span class=\"o\">.</span><span class=\"na\">hasQuantity</span><span class=\"o\">(</span><span class=\"mi\">20</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">and</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">hasItemWithIdThat</span><span class=\"o\">(</span><span class=\"n\">BOHEMIAN_RHAPSODY_ALBUM_ID</span><span class=\"o\">)</span>\n                <span class=\"o\">.</span><span class=\"na\">hasUnitPrice</span><span class=\"o\">(</span><span class=\"n\">euro</span><span class=\"o\">(</span><span class=\"mf\">55.00</span><span class=\"o\">))</span>\n                <span class=\"o\">.</span><span class=\"na\">hasQuantity</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Apart from this, such an assertion can also be used in other places than just one test class.</p>\n\n<h2 id=\"the-end\">The end</h2>\n\n<p>I hope that by presenting the above example I have managed to show you how to use simple concepts to write or improve\ntests to be more readable. Consequently, they become a living documentation of our code, which undoubtedly is a great\nadded value to the project that we work on.</p>\n\n<p>However, if you are wondering whether it is always worth investing time in writing tests as suggested in this article,\nmy answer is “No”.</p>\n\n<p>I hold an opinion that not every project, or even part of it, e.g. a given module, requires this approach. In the case\nof simple applications with the complexity of the CRUD type, there is no need for sophisticated solutions. It is often\nenough to test such an application end to end, using the simplest solutions offered by a given framework.</p>\n\n<p>If you would like to have a look at the rest of the code from my example, you are welcome to have a look at\nthe <a href=\"https://github.com/CamilYed/readable-tests-by-example\">github repository</a>.</p>\n","contentSnippet":"Have you ever worked on a project where after downloading the code from the repository you start to wonder what business\nrequirements are hidden under the layer of unreadable tests? \nNothing is more frustrating than code that we cannot control, and over time it becomes so troublesome that no one\nbothers about it too much. People do not pay enough attention to such a project and subsequent tests, if any, duplicate\nthe shortcomings of all the previous ones in the legacy.\nIn this article I will show you how to disenchant this miserable state of affairs with a few simple tips. I invite\nyou to approach the tests in a completely different way to create their new version.\nHello domain!\nThe domain that will serve us as a background will not be too complicated, but at the same time not simple enough to\nactually be able to capture the benefit for which it is worth investing more time and effort in writing tests that are\nclear and easy to develop further.\nFor the purpose of presenting to you a domain that is neither too complicated nor too trivial, I will use a model of a\nvinyl records online shop (I tried to create a domain which is universal and intuitive at the same time).\nLet’s assume that we have the following very preliminary and explicitly written general business assumptions.\n\nAn online store sells vinyl records. Each order is delivered by a courier company cooperating with the store.\n\nThe cost of delivery is charged when the customer pays for the order.\n\nThe cost of delivery is always collected from the supplier’s system (the courier’s system).\n\nIn the event of its unavailability (e.g. when the external courier system cannot provide the cost amount),\nwe can assume that the cost of delivery is always a fixed amount of EUR 20.\n\nWe distinguish between two types of clients: STANDARD and VIP.\n\nIf the order is processed for a customer with a VIP status or the value of the order exceeds a certain amount\naccording to the running promotional campaign (current price list configuration), the order will be delivered free\nof charge.\n\nAdditionally, for the VIP customer, a free music track should be sent to their mailbox after the payment of the order.\n\nAfter paying for the order, no modifications can be made.\n\n\nSuch assumptions can be translated into one of the BDD-style scenarios:\n\n Scenario: 1.1 (The VIP client pays for the order)\n   Given there is an unpaid order\n   And the client is a VIP\n   When the client makes the payment\n   Then payment succeeded\n   And the client did not pay for delivery\n   And free music track was sent to the client\n\n\nArchitecture\nThe structure of the code reflects the architecture that was adopted during the implementation works. The application is\na modular monolith written based on the architectural style\nof Ports & Adapter, as well as\nthe Domain Driven Design approach.\n\nWe can distinguish the following packages:\ncatalogue: reflects the catalogue of products with their unit prices\nclient: provides information on client scoring (VIP, STANDARD)\ncommon: contains common concepts, objects that appear in other contexts, e.g. the Money class\ndelivery: calculates the delivery price based on the defined policy\norder: keeps the logic related to the user’s order, such as the amount of payment, or the ability\nto find them among other orders\nsales: provides information on types promotions (e.g. price list configuration), especially the minimum value order\nneeded for free delivery\nAs the order-related domain is the most complex, it actually coordinates the entire purchasing process, and thus it\nshould provide a comprehensive example for our further consideration.\nHow can we test such code?\nEach design must feature certain guidelines, which is also the case in choosing the testing methodology. In IT\nliterature, we can probably find many interesting references to how we should test an application code, nevertheless, in\nthis article I am going to show you how, on a daily basis, me and other teams at Allegro approach this issue in our\nwork.\nBelow I have listed the main assumptions that will guide us throughout the rest of the article:\nTests should be a living documentation describing the real requirements in the form of clear scenarios and should be\neasy to understand for every person who joins the project;\nApplication will be tested through a black-box approach that examines the functionality of the application without\nlooking into its internal structures or behavior. Thanks to this we focus on the functionality of what we are testing\nand not on the details of the implementation itself;\nAdding a new test to the existing scenario should not be difficult, and should be based on the existing ready-to-use\nconcepts which can also be easily modified.\nNaive approach — or how not to write tests\nAs I mentioned earlier, tests should be a living documentation of business requirements. It is typical of each\ndocumentation that you have to read and understand it first. It’s easy to guess that this shouldn’t be too much of a\nproblem for a potentially new person on the team.\nLet’s take a closer look at Scenario 1.1, at the very beginning of our article, implemented in the form of an\nacceptance test. This is of course sample code that could be created in projects where no special attention is paid to\nthe quality of the provided test code. I would not recommend this type of testing.\n\n def \"shouldn’t charge for delivery when the client has a VIP status\"() {\n    given:\n        def body = \"\"\"\n          {\n             \"clientId\":\"${CLIENT_ID_1}\",\n             \"items\":[\n                {\n                   \"itemUnitPrice\":{\n                      \"productId\":\"${PRODUCT_ID_1}\",\n                      \"price\":{\n                         \"amount\":\"40.00\",\n                         \"currency\":\"EUR\"\n                      }\n                   },\n                   \"quantity\":1\n                }\n             ]\n          }\n        \"\"\".toString()\n        def requestEntity = buildHttpEntity(body, APPLICATION_JSON.toString(), APPLICATION_JSON.toString())\n        def response = restTemplate.exchange(localUrl(\"/orders/$ORDER_ID_1\"), PUT, requestEntity, Map)\n    and:\n        assert response.statusCode == HttpStatus.CREATED\n\n    and:\n        wireMockServer.stubFor(\n            get(\"/reputation/${CLIENT_ID_1}\")\n                .withHeader(ACCEPT, equalTo(APPLICATION_JSON.toString()))\n                .willReturn(aResponse()\n                    .withBody(\"\"\"{\n                                   \"reputation\": \"VIP\",\n                                   \"clientId\": \"${CLIENT_ID_1}\"\n                                 }\"\"\")\n                    .withHeader(CONTENT_TYPE, APPLICATION_JSON.toString())\n                )\n        )\n    when:\n        body = \"\"\"\n          {\n             \"clientId\": \"${CLIENT_ID_1}\",\n             \"cost\": { \"amount\": \"40.00\", \"currency\": \"EUR\" }\n          }\n          \"\"\".toString()\n        requestEntity = buildHttpEntity(body, APPLICATION_JSON.toString(), APPLICATION_JSON.toString())\n        response = restTemplate.exchange(localUrl(\"/orders/$ORDER_ID_1/payment\"), PUT, requestEntity, Map)\n\n    then:\n        response.statusCode == HttpStatus.ACCEPTED\n\n    and:\n        1 * domainEventPublisher.publish(_ as Events.OrderPaid)\n\n    and:\n        pollingConditions.eventually {\n            1 * freeMusicTrackSender.send(new ClientId(CLIENT_ID_1))\n        }\n}\n// some code omitted\n\n\nThe above code is not easy to analyze as it requires the reader to focus on too many technical and implementation\ndetails, such as:\ndata exchange format JSON,\nHTTP data exchange protocol: PUT method, response code,\nREST architectural style,\nclasses derived from frameworks such as RestTemplate, PollingConditions.\nUndoubtedly, it is far from the appearance of the original Scenario 1.1. It contains many concepts that do not belong\nto the domain language that obscure the presence of natural expressions that we use in conversations with business\nstakeholders, for instance “event publisher” or “mock server”.\nAnother disadvantage of this code is that it is not easily adaptable to further development, e.g. in the event of a\nchange in business requirements when it is necessary to modify or add another test.\nThe conscious reader might notice that the example of our imperfect test is maybe too exaggerated and that each section\nof the ‘given’/‘when’/’then’ blocks, etc. could be extracted by the use of a separate private method. Certainly, this\nprocedure may result in some improvement of the code quality, but nevertheless such an approach still has many\ndrawbacks:\nthe test class still contains code related to the technical implementation;\nif another test class uses a similar subset of functionalities, then sooner or later, there will be a need to copy\nsuch a method;\nwhat if I would like to change, for example, the library for mocking calls to another type of library?\nLet’s take a closer look at a unit test this time. It covers a narrower range of requirements because, e.g., it does not\ncheck whether the client has been sent a free music track. Try to find similar defects in it as in the acceptance test.\n\nfinal Money EUR_40 = Money.of(\"40.00\", \"EUR\")\nfinal ClientId CLIENT_ID = new ClientId(\"1\")\nfinal Vinyl VINYL_1 = new Vinyl(new VinylId(\"1\"), EUR_40)\nfinal Quantity ONE = new Quantity(1)\nfinal OrderId ORDER_ID = new OrderId(\"1\")\nfinal OrderDataSnapshot UNPAID_ORDER_EUR_40 = orderFactory.create(ORDER_ID, CLIENT_ID, Maps.of(VINYL_1, ONE), true)\n    .toSnapshot()\nfinal ClientReputation VIP = ClientReputation.vip(CLIENT_ID)\nfinal PayOrderCommand PAY_FOR_ORDER_EUR_40 = new PayOrderCommand(ORDER_ID, EUR_40)\n\ndef \"shouldn’t charge for delivery when the client has a VIP status\"() {\n    given:\n        orderRepository.findBy(ORDER_ID) >> Optional.of(UNPAID_ORDER_EUR_40)\n\n    and:\n        clientReputationProvider.get(CLIENT_ID) >> VIP\n\n    when:\n        def result = paymentHandler.handle(PAY_FOR_ORDER_EUR_40)\n\n    then:\n        result.isSuccess()\n\n    and:\n        1 * domainEventPublisher.publish({ OrderPaid event ->\n            assert event.orderId() == ORDER_ID\n            assert event.amount() == EUR_40\n            assert event.delivery().cost() == Money.ZERO\n            assert event.when() == CURRENT_DATE\n        })\n}\n\n\nIn this case, it may seem that test is much better, because it is simpler and easier to read, but with a more in-depth\nanalysis it turns out that it still does not meet the expected requirements from the “How can we test such\ncode?” section, because:\nit uses concepts such as repository, provider, event publisher, handler, which were not mentioned in the written business\nscenarios — these are technical implementation details;\nall the variables used are within the specification, which in the case of a multitude of tests may constitute\nadditional complexity in their maintenance. Besides, it is not difficult to make a mistake here, e.g. by introducing a\nnew variable that is already defined somewhere under a different name;\nit is not easy to add further tests outside the specification that would need similar functionality — unfortunately, it\nwill require multiple repetition of fragments of the code.\nI have used the two examples of tests above to quickly highlight how many flaws the naive solution\nhas adopted, even though the business requirement was not too complicated. In summary, in each of the tests we have had\nto take extra care of:\nmanually creating objects using a constructor. This is not comfortable and additionally, with the large number of\nparameters, difficult to read; it also makes the tests messy and hard to maintain because changing the constructor\nmakes them very fragile;\ncreating body HTTP requests using text blocks, which in the case of larger objects leads to the creation of structures\noccupying a large part of the specification;\nmocking or stubbing external dependencies using mechanisms from the framework as Stub or Mock, which can be\ncomfortable but does not necessarily improve the readability of the code and its further development;\nstubbing the response to external services using the library Wiremock class directly in our code’s test;\nchecking the final state of an object by referring directly to its content in the test. With complex structures it can\nbe very inconvenient and unreadable.\nIn the next section, I will focus on eliminating these shortcomings with a few simple solutions.\nFixing the state of affairs\nLet’s look at the first test again, which was presented in the previous section “Naive Approach”. It is not too hard to\nnotice that the vocabulary here resembles a more natural language, used by domain experts who do not use purely\ntechnical terms.\n\nclass OrderPaymentAcceptanceSpec extends BaseIntegrationTest implements\n    CreateOrderAbility,\n    ClientReputationAbility,\n    SpecialPriceProviderAbility,\n    CourierSystemAbility,\n    OrderPaymentAbility,\n    FreeMusicTrackSenderAbility {\n\n    def \"shouldn’t charge for delivery when the client has a VIP status\"() {\n        given:\n            thereIs(anUnpaidOrder())\n\n        and:\n            clientIsVip()\n\n        when:\n            def payment = clientMakesThe(aPayment())\n\n        then:\n            assertThat(payment).succeeded()\n\n        and:\n            assertThatClientDidNotPayForDelivery()\n\n        and:\n            assertThatFreeMusicTrackWasSentToTheClient()\n    }\n// other tests omitted\n\n\nIn the following part of this section, I will show you how in a few steps you can use simple concepts to arrive at this\nmodel.\nTest Data Builder\nTest Data Builder provides ready-made objects with sample data. It significantly improves the readability of the code by\nreplacing setter methods or invoking constructors with many parameters.\n\n@Builder(builderStrategy = SimpleStrategy, prefix = \"with\")\nclass CreateOrderJsonBuilder {\n    String orderId = TestData.ORDER_ID\n    String clientId = TestData.CLIENT_ID\n    List<ItemJsonBuilder> items = [anItem().withProductId(TestData.CZESLAW_NIEMEN_ALBUM_ID).withUnitPrice(euro(40.00))]\n\n    static CreateOrderJsonBuilder anUnpaidOrder() {\n        return new CreateOrderJsonBuilder()\n    }\n    // some code omitted\n    CreateOrderJsonBuilder withAmount(MoneyJsonBuilder anAmount) {\n        items = [anItem().withProductId(TestData.CZESLAW_NIEMEN_ALBUM_ID).withUnitPrice(anAmount)]\n        return this\n    }\n\n    Map toMap() {\n        return [\n            clientId: clientId,\n            items   : items != null ? items.collect { it.toMap() } : null\n        ]\n    }\n}\n\n\nIn the above example, the toMap method returns a map, which can then be turned into a body of the HTTP request in JSON\nformat.\nThe Test Data Builder can be used both for constructing input data at the controller level and at the level of unit\ntests, e.g. by creating an object representing the initial state of the database. There is nothing to prevent us from\nusing this pattern, also for the construction of objects on which we make assertions.\n\n@Builder(builderStrategy = SimpleStrategy, prefix = \"with\")\nclass OrderPaidEventBuilder {\n    String clientId = TestData.CLIENT_ID\n    String orderId = TestData.ORDER_ID\n    Instant when = TestData.DEFAULT_CURRENT_DATE\n    Money amount = TestData.EUR_40\n    Delivery delivery\n\n    static OrderPaidEventBuilder anOrderPaidEventWithFreeDelivery() {\n        anOrderPaidEvent().withFreeDelivery()\n    }\n\n    static OrderPaidEventBuilder anOrderPaidEvent() {\n        return new OrderPaidEventBuilder()\n    }\n\n    OrderPaidEventBuilder withFreeDelivery() {\n        delivery = Delivery.freeDelivery()\n        return this\n    }\n\n    OrderPaid build() {\n        return new OrderPaid(\n            new ClientId(clientId),\n            new OrderId(orderId),\n            when,\n            amount,\n            delivery\n        )\n    }\n}\n\n\nWhat is worth mentioning, we use the same constants in many places, which may seem a controversial idea for many\nreaders. However, I decided to split them into a separate TestData class and based on the assumption that the class\nbuilders are assigned default values. Thanks to this I can focus on data relevant to a given test case only. It does not\nmake sense to introduce unnecessary noise into the test, as it should be set up with a minimal required data set.\nThis pattern is also described by Nat Pryce on his blog, where you can\nfind a more detailed explanation.\nAbility Pattern\nThe OrderPaymentAcceptanceSpec class implements several traits with similar names ending with the word Ability. This\nis another concept that I want to discuss. As we understand it, and so it is giving certain abilities to the test\nscenario. As a result, with this approach, we can expand small blocks more and more.\nNow, it is easy to imagine another test that needs the same ability or skill, by which we can get rid of duplicate code\nbetween different classes of tests.\nLet’s analyse an example implementation of a trait named: CreateOrderAbility\n\ntrait CreateOrderAbility implements MakeRequestAbility {\n\n    void thereIs(CreateOrderJsonBuilder anUnpaidOrder, String orderId = TestData.ORDER_ID) {\n        def response = createWithGivenId(anOrder: anUnpaidOrder, orderId: orderId)\n        assert response.statusCode == HttpStatus.CREATED\n    }\n\n    ResponseEntity<Map> create(CreateOrderJsonBuilder anOrder) {\n        def jsonBody = toJson(anOrder.toMap())\n        return makeRequest(\n            url: \"/orders\",\n            method: HttpMethod.POST,\n            contentType: \"application/json\",\n            body: jsonBody,\n            accept: \"application/json\",\n        )\n    }\n}\n\n\nIt extends the MakeRequestAbility trait responsible for building and sending an HTTP request to a given URL, which is\nalready served by the Spring controller, hiding all technical aspects from the reader. Moreover, the methods it exposes\nin conjunction with the passed parameters invoking the static method of the test builder class, read almost like prose.\nThis simple procedure makes our code more expressive, making it look closer to the text from the\nrequirements Scenario 1.1.\n\n  def \"shouldn’t charge for delivery when the client has a VIP status\"() {\n    given:\n        thereIs(anUnpaidOrder()) // -> there is an unpaid order\n        // some code omitted\n}\n\n\nIn the case of a unit test, such an ability may wrap the in-memory implementation of the repository.\n\ntrait OrderAbility {\n\n    static final OrderRepository orderRepository = new InMemoryOrderRepository()\n\n    void thereIs(OrderDataSnapshotBuilder anOrder) {\n        orderRepository.save(anOrder.build())\n    }\n    // some code omitted\n}\n\n\nAnd this time we read the beginning of the test identically:\n\ndef \"shouldn’t charge for delivery when the client has a VIP status\"() {\n    given:\n        thereIs(anUnpaidOrder()) // -> there is an unpaid order\n        // some code omitted\n}\n\n\nIn some cases, the Ability pattern can act as an assertion class, which I will mention later in the part regarding\ntailor-made assertions. Often in the case of black box tests, there is a need to check additional side effects, e.g.\nwhether an email was sent after the purchase of the order, or whether a service was asked with the data we want. We can\nthen split this logic into an appropriately named Ability class method.\n\ntrait OrderPaymentAbility implements MakeRequestAbility {\n\n    @SpyBean\n    private DomainEventPublisher domainEventPublisher\n\n    private PollingConditions pollingConditions = new PollingConditions(timeout: 5)\n\n    // some code omitted\n    void assertThatClientDidNotPayForDelivery(def anEvent = anOrderPaidEvent().anOrderPaidEventWithFreeDelivery()) {\n        pollingConditions.eventually {\n            Mockito.verify(domainEventPublisher, times(1))\n                .publish(anEventBuilder.build())\n        }\n    }\n    // some code omitted\n}\n\n\nThe question is why we should make so much effort in creating our own solutions, and not use ready-made ones directly\nfrom the framework? Here are the arguments for:\nreusability — we can use an ability written once in many places,\nextensibility — in the case of changing the library, which, for example, is used to mock other services, it is enough\nto make changes in one place,\nenriching the test with the language specific to our domain,\nwe are not limited by the capabilities of a given framework, e.g. Spock doesn’t allow you to mock final Java classes,\nthen we have to use an additional lib\nlike spock-mockable\n.\nTailor-made assertions\nThe last concept that I want to discuss is dedicated assertion classes. An assertion class is nothing more than a simple\nclass exposing methods which allow checking the input object appropriately.\nIn some scenarios, we would actually like to verify the data that, for example, was eventually saved in the database.\nSome of our objects can be so complex that it would be inconvenient to check them directly in the test, referencing the\nnested objects or iterating the collections.\n\n  def \"should change the item quantity for unpaid order\"() {\n    given:\n        thereIs(anUnpaidOrder()\n            .withId(ORDER_ID)\n            .withClientId(CLIENT_ID)\n            .withItems(\n                anItem()\n                    .withProductId(CZESLAW_NIEMEN_ALBUM_ID)\n                    .withUnitPrice(euro(35.00))\n                    .withQuantity(10),\n                anItem()\n                    .withProductId(BOHEMIAN_RHAPSODY_ALBUM_ID)\n                    .withUnitPrice(euro(55.00))\n                    .withQuantity(1)\n            )\n        )\n\n    when:\n        changeItemQuantity(anItemQuantityChange()\n            .withOrderId(ORDER_ID)\n            .withProductId(CZESLAW_NIEMEN_ALBUM_ID)\n            .withQuantityChange(20)\n        )\n\n    then:\n        assertThatThereIsOrderWithId(ORDER_ID)\n            .hasClientId(CLIENT_ID)\n            .hasItemWithIdThat(CZESLAW_NIEMEN_ALBUM_ID)\n                .hasUnitPrice(euro(35.00))\n                .hasQuantity(20)\n            .and()\n            .hasItemWithIdThat(BOHEMIAN_RHAPSODY_ALBUM_ID)\n                .hasUnitPrice(euro(55.00))\n                .hasQuantity(1)\n}\n\n\nApart from this, such an assertion can also be used in other places than just one test class.\nThe end\nI hope that by presenting the above example I have managed to show you how to use simple concepts to write or improve\ntests to be more readable. Consequently, they become a living documentation of our code, which undoubtedly is a great\nadded value to the project that we work on.\nHowever, if you are wondering whether it is always worth investing time in writing tests as suggested in this article,\nmy answer is “No”.\nI hold an opinion that not every project, or even part of it, e.g. a given module, requires this approach. In the case\nof simple applications with the complexity of the CRUD type, there is no need for sophisticated solutions. It is often\nenough to test such an application end to end, using the simplest solutions offered by a given framework.\nIf you would like to have a look at the rest of the code from my example, you are welcome to have a look at\nthe github repository.","guid":"https://blog.allegro.tech/2022/02/readable-tests-by-example.html","categories":["tech","backend","testing","tdd","bdd","java","groovy","ddd"],"isoDate":"2022-02-21T23:00:00.000Z","thumbnail":"images/post-headers/java.png"},{"title":"Why should we rewrite enzyme.js to react-testing-library and how to do that?","link":"https://blog.allegro.tech/2022/02/why-we-should-rewrite-enzymejs-to-rtl-and-how-to-do-that.html","pubDate":"Thu, 10 Feb 2022 00:00:00 +0100","authors":{"author":[{"name":["Magdalena Mazur"],"photo":["https://blog.allegro.tech/img/authors/magdalena.mazur.jpg"],"url":["https://blog.allegro.tech/authors/magdalena.mazur"]}]},"content":"<p>Everyone repeats like a mantra that tests are an indispensable element of development work. Is there anything to it?\nWell, I need to admit that as a developer, I rather often want to skip the test writing stage. I assume I’m not the\nonly one. I’m aware that it’s a mistake, even with testers on board. Effective and efficient testing of your own\ncode can help with catching bugs in new functionalities, as well as in changes to already existing ones. It cannot\nbe questioned. Sometimes tests also help to understand how some long-unused functionality or component works. And\nthat’s a small bonus too. <strong>Can a large project cope without testing? Probably so. But the number of errors and\ntheir severity will probably be much higher.</strong> That’s why in Allegro Ads we pay attention to writing tests.</p>\n\n<h2 id=\"frameworks\">Frameworks</h2>\n<p>We have a fairly large number of frameworks that are used to write tests in JavaScript. We can list tools like:\n<a href=\"https://mochajs.org/\">MochaJS</a>, <a href=\"https://jestjs.io/\">Jest</a>, <a href=\"https://karma-runner.github.io\">Karma</a>,\n<a href=\"https://jasmine.github.io/\">Jasmine</a>, <a href=\"https://www.cypress.io/\">Cypress</a>. However, in this article, we will pay\nspecial attention and compare two javascript testing libraries: <a href=\"https://enzymejs.github.io/enzyme/\">Enzyme.js</a>\nand <a href=\"https://testing-library.com/docs/react-testing-library/intro/\">React Testing Library</a> (often called RTL).</p>\n\n<p><img src=\"/img/articles/2022-02-10-why-we-should-rewrite-enzymejs-to-rtl-and-how-to-do-that/01.png\" alt=\"npm trends screen\" />\n<em>Source <a href=\"https://www.npmtrends.com/@testing-library/react-vs-enzyme\">npm trends</a></em></p>\n\n<h2 id=\"enzymejs\">EnzymeJS</h2>\n<p>From the Enzyme documentation we can read a short description:</p>\n\n<blockquote>\n  <p>Enzyme is a JavaScript Testing utility for React that makes it easier to test your React Components’ output.\nYou can also manipulate, traverse, and in some ways simulate runtime given the output.</p>\n</blockquote>\n\n<p>Enzyme was released in <strong>2015 by AirBnB</strong>. And let’s face it, Enzyme has gained a lot of popularity. Last year, the\nlibrary was moved from AirBnB space to external Github space as a separate independent organization. This step was\nintended to encourage the community to further develop the library.</p>\n\n<p><img src=\"/img/articles/2022-02-10-why-we-should-rewrite-enzymejs-to-rtl-and-how-to-do-that/02.png\" alt=\"commit diffrences\" /></p>\n\n<p><img src=\"/img/articles/2022-02-10-why-we-should-rewrite-enzymejs-to-rtl-and-how-to-do-that/03.png\" alt=\"commit diffrences\" />\n<em>Source <a href=\"https://github.com/enzymejs/enzyme/commit/b06750bb5f6248ceb9c3fae903a71d0747a420d6\">Enzyme github</a></em></p>\n\n<p>When it comes to raw data, the latest version of <strong>Enzyme 3.11.0</strong> has a bundle size of <strong>463.2kB minified (127.5 kB\nminified + gzipped)</strong> and was released on <strong>20 December 2019</strong>. Currently it has 258\n<a href=\"https://github.com/enzymejs/enzyme/issues\">open issues</a> and 31 open PR’s.</p>\n\n<p><img src=\"/img/articles/2022-02-10-why-we-should-rewrite-enzymejs-to-rtl-and-how-to-do-that/04.png\" alt=\"bundlephobia Enzyme sreen\" />\n<em>Source <a href=\"https://bundlephobia.com/package/enzyme@3.11.0\">Bundle Phobia</a></em></p>\n\n<p>Interesting fact:</p>\n<ul>\n  <li>There are also Enzyme Adapter Packages for React. So you need to install adapter package and its dependencies\nrelated to the version of React that you are using. For example, for version 16, it also needs\n<code class=\"language-plaintext highlighter-rouge\">enzyme-adapter-react-16</code> to be installed. Unfortunately, it does not support all features completely.\nIt should be mentioned that there is not offical adapter for React 17 yet, which has been released in\nOctober 2020 (so it is more than a year!). If you don’t want to use community version you are still blocked and you\ncannot use the new React features.</li>\n</ul>\n\n<h2 id=\"react-testing-library-often-called-rtl\">React Testing Library (often called RTL)</h2>\n<p>RTL says about itself:</p>\n\n<blockquote>\n  <p>The React Testing Library is a very light-weight solution for testing React components. It provides light utility\n functions on top of <code class=\"language-plaintext highlighter-rouge\">react-dom</code> and <code class=\"language-plaintext highlighter-rouge\">react-dom/test-utils</code>, in a way that encourages better testing practices.</p>\n</blockquote>\n\n<p>Released in <strong>April 2018 by Kent C. Dodds</strong>. The latest stable version <strong>12.1.2</strong> of RTL has a bundle size of <strong>215.8kB\nminified (47.3kB minified + gzipped)</strong> . The RTL repository has 26\n<a href=\"https://github.com/enzymejs/enzyme/issues\">open issues</a> and 2 open PR’s.</p>\n\n<p><img src=\"/img/articles/2022-02-10-why-we-should-rewrite-enzymejs-to-rtl-and-how-to-do-that/05.png\" alt=\"bundlephobia RTL screen\" />\n<em>Source <a href=\"https://bundlephobia.com/package/@testing-library/react@12.1.2\">Bundle Phobia</a></em></p>\n\n<p>Interesting facts:</p>\n<ul>\n  <li>When you create a project by Create React App, you will get support for React Testing Library right away.</li>\n  <li>Jest documentation links to the RTL website in the\n<a href=\"https://jestjs.io/docs/testing-frameworks#react\"><em>Testing Web Framework</em></a> section as well as React documentation in\nthe <a href=\"https://reactjs.org/docs/testing.html#tools\"><em>Recommended Tools</em></a>.</li>\n  <li>Testing library allows us to test with the same API not only React but also other frameworks like Vue\n(<code class=\"language-plaintext highlighter-rouge\">testing-library/vue</code>), Angular (<code class=\"language-plaintext highlighter-rouge\">testing-library/angular</code>), Svelte (<code class=\"language-plaintext highlighter-rouge\">testing-library/svelte</code>) etc. This could bring\nsome advantage for people working on several projects in different technologies. There is also\n<code class=\"language-plaintext highlighter-rouge\">dom-testing-library</code> which allows writing tests without any framework!</li>\n</ul>\n\n<h2 id=\"basic-differences\">Basic differences</h2>\n\n<p>The main differences between the two libraries that I can notice:</p>\n<ol>\n  <li><strong>Different approaches to testing</strong></li>\n</ol>\n\n<p>What distinguishes RTL is that we find elements by their labels or texts, almost like a user would. The point is to\nreplicate and simulate the user’s behavior. RTL renders components to the DOM and doesn’t give us access\ndirectly to the component’s internals. While Enzyme uses shallow rendering (or sometimes deep rendering) and\nencourages us to test the components instance using its state and props. Enzyme also allows full rendering of DOM\nbut it is not the basic assumption of the library’s operation.</p>\n<ol>\n  <li><strong>Age</strong></li>\n</ol>\n\n<p>Enzyme is 6 years old, RTL is 3 years old</p>\n\n<h2 id=\"comparison-of-downloads\">Comparison of downloads</h2>\n\n<p>Below we can see a comparison of the number of downloads of both libraries in the last 5 years. Between August and\nSeptember 2020, the number of RTL downloads exceeded the number of Enzyme downloads.</p>\n\n<p><img src=\"/img/articles/2022-02-10-why-we-should-rewrite-enzymejs-to-rtl-and-how-to-do-that/06.png\" alt=\"Enzyme and RTL dowloands graph\" />\n<em>Source <a href=\"https://www.npmtrends.com/@testing-library/react-vs-enzyme\">npm trends</a></em></p>\n\n<p>In the case of RTL, it is clear that the number of downloads is still growing strongly. On the other hand, it can be\nsuspected that the highest peak of Enzyme downloads is already behind.</p>\n\n<h2 id=\"reasons-to-change-the-testing-library\">Reasons to change the testing library</h2>\n\n<p>Well, let’s be honest, Enzyme.js is a powerful library which has helped us test our React Components in an easier way\nfor a long time. But maybe… too long? The first official release was in December 2015. Do not get me wrong, I don’t\nwant to say that everything old is bad. But the frontend world is changing constantly, just as the approach to\ntesting it. I know that the Enzyme.js library hasn’t been deprecated yet, but there are a lot of reasons to switch\nyour test library right now. <strong>If you haven’t read it I highly recommend you to take a look at\n<a href=\"https://www.piotrstaniow.pl/goodbye-enzyme\">this article</a> by Piotr Staniów</strong> (it takes about 10 minutes to read).</p>\n\n<p>The main reasons for me to think about slowly rewriting my tests and switching to another library from this article\nare:</p>\n<ul>\n  <li>one developer maintaining the entire Enzyme package,</li>\n  <li>not keeping up with React changes.</li>\n</ul>\n\n<p>If you ask me, these are big blockers in using this tool.</p>\n\n<h2 id=\"case-study-of-rewriting\">Case study of rewriting</h2>\n\n<p>Below I will present my own example created for the purposes of this article. It should present the minimal effort to\nrewrite tests from one library to another.</p>\n\n<h3 id=\"component\">Component:</h3>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">Test</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">defaultCounter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">header</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">Default header</span><span class=\"dl\">'</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">counter</span><span class=\"p\">,</span> <span class=\"nx\">setCounter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"nx\">defaultCounter</span><span class=\"p\">)</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">increment</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setCounter</span><span class=\"p\">(</span><span class=\"nx\">counter</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">decrement</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setCounter</span><span class=\"p\">(</span><span class=\"nx\">counter</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">header</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/h1</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"nx\">p</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">counter</span><span class=\"dl\">'</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">counter</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/p</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">increment</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Increment</span> <span class=\"nx\">counter</span><span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">decrement</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Decrement</span> <span class=\"nx\">counter</span><span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>    <span class=\"p\">)</span>\n<span class=\"p\">};</span>\n\n</code></pre></div></div>\n\n<h3 id=\"enzyme-example\">Enzyme example:</h3>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">mount</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">enzyme</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Test</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../Test</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">&lt;Test /&gt;</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should render default header</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// when</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">mount</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Default header</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should render header from props</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// when</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">mount</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"nx\">header</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">My simple calculator</span><span class=\"dl\">\"</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">My simple calculator</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Default header</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should render default defaultCounter</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// when</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">mount</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.counter</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">0</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should render defaultCounter from props</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// when</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">mount</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"nx\">defaultCounter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">100</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;\n</span>\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.counter</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">100</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should increment counter on click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// given</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">mount</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"nx\">defaultCounter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">100</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;\n</span>    <span class=\"kd\">const</span> <span class=\"nx\">button</span> <span class=\"o\">=</span> <span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">button</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">at</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// when</span>\n    <span class=\"nx\">button</span><span class=\"p\">.</span><span class=\"nx\">simulate</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.counter</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">101</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should decrement counter on click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// given</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">wrapper</span> <span class=\"o\">=</span> <span class=\"nx\">mount</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"nx\">defaultCounter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">100</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;\n</span>    <span class=\"kd\">const</span> <span class=\"nx\">button</span> <span class=\"o\">=</span> <span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">button</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">at</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// when</span>\n    <span class=\"nx\">button</span><span class=\"p\">.</span><span class=\"nx\">simulate</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">wrapper</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.counter</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">()).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">99</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<h3 id=\"what-needs-to-be-changed\">What needs to be changed:</h3>\n<ul>\n  <li>remove <code class=\"language-plaintext highlighter-rouge\">mount</code> and use <code class=\"language-plaintext highlighter-rouge\">render</code> instead</li>\n  <li>remove <code class=\"language-plaintext highlighter-rouge\">wrapper</code> variable and use <code class=\"language-plaintext highlighter-rouge\">screen</code> to get elements</li>\n  <li>replace <code class=\"language-plaintext highlighter-rouge\">simulate(’click’)</code> with <code class=\"language-plaintext highlighter-rouge\">userEvent</code></li>\n</ul>\n\n<h3 id=\"react-testing-library-example\">React Testing Library example:</h3>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@testing-library/react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">userEvent</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@testing-library/user-event</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Test</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../Test</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">&lt;Test /&gt;</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should render default header</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// when</span>\n    <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByRole</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">heading</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Default header</span><span class=\"dl\">'</span> <span class=\"p\">})).</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should render header from props</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// when</span>\n    <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"nx\">header</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">My simple calculator</span><span class=\"dl\">\"</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByRole</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">heading</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">My simple calculator</span><span class=\"dl\">'</span> <span class=\"p\">})).</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">();</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">queryByText</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Default header</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should render default defaultCounter</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// when</span>\n    <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"o\">/&gt;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByText</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">0</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should render defaultCounter from props</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// when</span>\n    <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"nx\">defaultCounter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">100</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;\n</span>\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByText</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">100</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should increment counter on click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// given</span>\n    <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"nx\">defaultCounter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">100</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;\n</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">button</span> <span class=\"o\">=</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByRole</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">button</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Increment counter</span><span class=\"dl\">'</span> <span class=\"p\">});</span>\n\n    <span class=\"c1\">// when</span>\n    <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByText</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">101</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should decrement counter on click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// given</span>\n    <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Test</span> <span class=\"nx\">defaultCounter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">100</span><span class=\"p\">}</span> <span class=\"sr\">/&gt;</span><span class=\"se\">)</span><span class=\"err\">;\n</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">button</span> <span class=\"o\">=</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByRole</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">button</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Decrement counter</span><span class=\"dl\">'</span> <span class=\"p\">});</span>\n\n    <span class=\"c1\">// when</span>\n    <span class=\"nx\">userEvent</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// then</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByText</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">99</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n</code></pre></div></div>\n\n<h2 id=\"enzyme-and-rtl-in-allegro-ads\">Enzyme and RTL in Allegro Ads</h2>\n\n<p>My team is currently working on the development of <a href=\"https://allegro.pl/ads\">Allegro Ads</a>, which is an advertising tool\nfor our e-commerce platform sellers. It is a whole panel for viewing statistics, displaying advertising campaigns. We\nprovide sponsored offers for our Allegro site, Facebook, Google and recently even the partner websites. Our sellers\npay us for the opportunity to advertise their products, and at the same time we strive to ensure that these ads\naccurately reach people potentially interested in buying, thereby generating profits for sellers.</p>\n\n<p>The main technology stack is standard and still pretty cool. The core of the project is written in React, and\nsignificant parts have been rewritten to TypeScript. For testing purposes, we use Jest. In my opinion this is a very\ngood and stable tool, easy to work with. It has quite a low entry barrier, even if someone hasn’t had too much\nexperience with tests before. The main advantages of Jest for me are minimal configuration and quite good\ndocumentation. But for testing React components we currently have two libraries and I’ll explain why in a moment.</p>\n\n<p>The 2.0 version of platform Allegro Ads was released about 6 years ago. A year ago\nthe team added React Testing Library to <code class=\"language-plaintext highlighter-rouge\">package.json</code>. We have both packages so far. <strong>Recently we officially\ndecided to slowly rewrite the Enzyme tests and get rid of the library for good.</strong> We added the rule to our\nDeclaration of Code Convention that the new components are tested just in RTL, the old ones will be rewritten\nduring the development of specific parts.</p>\n\n<h2 id=\"migration-effects-so-far\">Migration effects so far</h2>\n\n<p>Currently we have got <strong>592 test files</strong> (counting after the file names with “spec” phrase). In these files we can also\nfind <strong>709 of unique “describe”</strong> usage, and <strong>1796 unique test cases</strong>. Half of tests\nare written only in Jest, but a significant number of tests for better testing use extra libraries.</p>\n\n<p>React Testing Library is used in <strong>131 files</strong>, which is around <strong>22% of all test files</strong>.\nEnzyme tests are in <strong>137 files</strong> which is around <strong>23%</strong>.</p>\n\n<p>So Enzyme is still used more often. However, keep in mind that we have been using Enzyme in this project from the\nbeginning and RTL for a year. So I’m quite stunned by these numbers. I did not think that the use of RTL would\nincrease so significantly in a year. Of course, there is still a long way to completely eliminate Enzyme, especially\namong other project priorities, but now I’m convinced that small steps will be enough to do that.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>Hopefully this article showed you that switching from one library to another doesn’t have to be difficult. As\nprogrammers, we will encounter such situations frequently. I think that the effort put into replacing old libraries\nwith newer ones and keeping your code free of technological debt will bring tangible results for developers, project\nand, finally, users.</p>\n\n<p>I hope that I was able to show you why we rewrite the Enzyme tests to RTL, how we do it and what stage we are at.\nProbably it is not the end. What are we going to replace RTL with in the future? We’ll see. :)</p>\n","contentSnippet":"Everyone repeats like a mantra that tests are an indispensable element of development work. Is there anything to it?\nWell, I need to admit that as a developer, I rather often want to skip the test writing stage. I assume I’m not the\nonly one. I’m aware that it’s a mistake, even with testers on board. Effective and efficient testing of your own\ncode can help with catching bugs in new functionalities, as well as in changes to already existing ones. It cannot\nbe questioned. Sometimes tests also help to understand how some long-unused functionality or component works. And\nthat’s a small bonus too. Can a large project cope without testing? Probably so. But the number of errors and\ntheir severity will probably be much higher. That’s why in Allegro Ads we pay attention to writing tests.\nFrameworks\nWe have a fairly large number of frameworks that are used to write tests in JavaScript. We can list tools like:\nMochaJS, Jest, Karma,\nJasmine, Cypress. However, in this article, we will pay\nspecial attention and compare two javascript testing libraries: Enzyme.js\nand React Testing Library (often called RTL).\n\nSource npm trends\nEnzymeJS\nFrom the Enzyme documentation we can read a short description:\nEnzyme is a JavaScript Testing utility for React that makes it easier to test your React Components’ output.\nYou can also manipulate, traverse, and in some ways simulate runtime given the output.\nEnzyme was released in 2015 by AirBnB. And let’s face it, Enzyme has gained a lot of popularity. Last year, the\nlibrary was moved from AirBnB space to external Github space as a separate independent organization. This step was\nintended to encourage the community to further develop the library.\n\n\nSource Enzyme github\nWhen it comes to raw data, the latest version of Enzyme 3.11.0 has a bundle size of 463.2kB minified (127.5 kB\nminified + gzipped) and was released on 20 December 2019. Currently it has 258\nopen issues and 31 open PR’s.\n\nSource Bundle Phobia\nInteresting fact:\nThere are also Enzyme Adapter Packages for React. So you need to install adapter package and its dependencies\nrelated to the version of React that you are using. For example, for version 16, it also needs\nenzyme-adapter-react-16 to be installed. Unfortunately, it does not support all features completely.\nIt should be mentioned that there is not offical adapter for React 17 yet, which has been released in\nOctober 2020 (so it is more than a year!). If you don’t want to use community version you are still blocked and you\ncannot use the new React features.\nReact Testing Library (often called RTL)\nRTL says about itself:\nThe React Testing Library is a very light-weight solution for testing React components. It provides light utility\n functions on top of react-dom and react-dom/test-utils, in a way that encourages better testing practices.\nReleased in April 2018 by Kent C. Dodds. The latest stable version 12.1.2 of RTL has a bundle size of 215.8kB\nminified (47.3kB minified + gzipped) . The RTL repository has 26\nopen issues and 2 open PR’s.\n\nSource Bundle Phobia\nInteresting facts:\nWhen you create a project by Create React App, you will get support for React Testing Library right away.\nJest documentation links to the RTL website in the\nTesting Web Framework section as well as React documentation in\nthe Recommended Tools.\nTesting library allows us to test with the same API not only React but also other frameworks like Vue\n(testing-library/vue), Angular (testing-library/angular), Svelte (testing-library/svelte) etc. This could bring\nsome advantage for people working on several projects in different technologies. There is also\ndom-testing-library which allows writing tests without any framework!\nBasic differences\nThe main differences between the two libraries that I can notice:\nDifferent approaches to testing\nWhat distinguishes RTL is that we find elements by their labels or texts, almost like a user would. The point is to\nreplicate and simulate the user’s behavior. RTL renders components to the DOM and doesn’t give us access\ndirectly to the component’s internals. While Enzyme uses shallow rendering (or sometimes deep rendering) and\nencourages us to test the components instance using its state and props. Enzyme also allows full rendering of DOM\nbut it is not the basic assumption of the library’s operation.\nAge\nEnzyme is 6 years old, RTL is 3 years old\nComparison of downloads\nBelow we can see a comparison of the number of downloads of both libraries in the last 5 years. Between August and\nSeptember 2020, the number of RTL downloads exceeded the number of Enzyme downloads.\n\nSource npm trends\nIn the case of RTL, it is clear that the number of downloads is still growing strongly. On the other hand, it can be\nsuspected that the highest peak of Enzyme downloads is already behind.\nReasons to change the testing library\nWell, let’s be honest, Enzyme.js is a powerful library which has helped us test our React Components in an easier way\nfor a long time. But maybe… too long? The first official release was in December 2015. Do not get me wrong, I don’t\nwant to say that everything old is bad. But the frontend world is changing constantly, just as the approach to\ntesting it. I know that the Enzyme.js library hasn’t been deprecated yet, but there are a lot of reasons to switch\nyour test library right now. If you haven’t read it I highly recommend you to take a look at\nthis article by Piotr Staniów (it takes about 10 minutes to read).\nThe main reasons for me to think about slowly rewriting my tests and switching to another library from this article\nare:\none developer maintaining the entire Enzyme package,\nnot keeping up with React changes.\nIf you ask me, these are big blockers in using this tool.\nCase study of rewriting\nBelow I will present my own example created for the purposes of this article. It should present the minimal effort to\nrewrite tests from one library to another.\nComponent:\n\nimport React, { useState } from 'react';\n\nexport const Test = ({ defaultCounter = 0, header = 'Default header' }) => {\n    const [counter, setCounter] = useState(defaultCounter)\n    const increment = () => setCounter(counter + 1)\n    const decrement = () => setCounter(counter - 1)\n\n    return (\n        <div>\n            <h1>{header}</h1>\n            <p className='counter'>{counter}</p>\n            <button onClick={increment}>Increment counter</button>\n            <button onClick={decrement}>Decrement counter</button>\n        </div>\n    )\n};\n\n\n\nEnzyme example:\n\nimport React from 'react';\nimport { mount } from 'enzyme';\n\nimport { Test } from '../Test';\n\ndescribe('<Test />', () => {\n  it('should render default header', () => {\n    // when\n    const wrapper = mount(<Test />);\n\n    // then\n    expect(wrapper.text()).toContain('Default header');\n  });\n\n  it('should render header from props', () => {\n    // when\n    const wrapper = mount(<Test header=\"My simple calculator\" />);\n\n    // then\n    expect(wrapper.text()).toContain('My simple calculator');\n    expect(wrapper.text()).not.toContain('Default header');\n  });\n\n  it('should render default defaultCounter', () => {\n    // when\n    const wrapper = mount(<Test />);\n\n    // then\n    expect(wrapper.find('.counter').text()).toBe('0');\n  });\n\n  it('should render defaultCounter from props', () => {\n    // when\n    const wrapper = mount(<Test defaultCounter={100} />);\n\n    // then\n    expect(wrapper.find('.counter').text()).toBe('100');\n  });\n\n  it('should increment counter on click', () => {\n    // given\n    const wrapper = mount(<Test defaultCounter={100} />);\n    const button = wrapper.find('button').at(0);\n\n    // when\n    button.simulate('click');\n\n    // then\n    expect(wrapper.find('.counter').text()).toBe('101');\n  });\n\n  it('should decrement counter on click', () => {\n    // given\n    const wrapper = mount(<Test defaultCounter={100} />);\n    const button = wrapper.find('button').at(1);\n\n    // when\n    button.simulate('click');\n\n    // then\n    expect(wrapper.find('.counter').text()).toBe('99');\n  });\n});\n\n\nWhat needs to be changed:\nremove mount and use render instead\nremove wrapper variable and use screen to get elements\nreplace simulate(’click’) with userEvent\nReact Testing Library example:\n\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { Test } from '../Test';\n\ndescribe('<Test />', () => {\n  it('should render default header', () => {\n    // when\n    render(<Test />);\n\n    // then\n    expect(screen.getByRole('heading', { name: 'Default header' })).toBeInTheDocument();\n  });\n\n  it('should render header from props', () => {\n    // when\n    render(<Test header=\"My simple calculator\" />);\n\n    // then\n    expect(screen.getByRole('heading', { name: 'My simple calculator' })).toBeInTheDocument();\n    expect(screen.queryByText('Default header')).not.toBeInTheDocument();\n  });\n\n  it('should render default defaultCounter', () => {\n    // when\n    render(<Test />);\n\n    // then\n    expect(screen.getByText('0')).toBeInTheDocument();\n  });\n\n  it('should render defaultCounter from props', () => {\n    // when\n    render(<Test defaultCounter={100} />);\n\n    // then\n    expect(screen.getByText('100')).toBeInTheDocument();\n  });\n\n  it('should increment counter on click', () => {\n    // given\n    render(<Test defaultCounter={100} />);\n\n    const button = screen.getByRole('button', { name: 'Increment counter' });\n\n    // when\n    userEvent.click(button);\n\n    // then\n    expect(screen.getByText('101')).toBeInTheDocument();\n  });\n\n  it('should decrement counter on click', () => {\n    // given\n    render(<Test defaultCounter={100} />);\n\n    const button = screen.getByRole('button', { name: 'Decrement counter' });\n\n    // when\n    userEvent.click(button);\n\n    // then\n    expect(screen.getByText('99')).toBeInTheDocument();\n  });\n});\n\n\n\nEnzyme and RTL in Allegro Ads\nMy team is currently working on the development of Allegro Ads, which is an advertising tool\nfor our e-commerce platform sellers. It is a whole panel for viewing statistics, displaying advertising campaigns. We\nprovide sponsored offers for our Allegro site, Facebook, Google and recently even the partner websites. Our sellers\npay us for the opportunity to advertise their products, and at the same time we strive to ensure that these ads\naccurately reach people potentially interested in buying, thereby generating profits for sellers.\nThe main technology stack is standard and still pretty cool. The core of the project is written in React, and\nsignificant parts have been rewritten to TypeScript. For testing purposes, we use Jest. In my opinion this is a very\ngood and stable tool, easy to work with. It has quite a low entry barrier, even if someone hasn’t had too much\nexperience with tests before. The main advantages of Jest for me are minimal configuration and quite good\ndocumentation. But for testing React components we currently have two libraries and I’ll explain why in a moment.\nThe 2.0 version of platform Allegro Ads was released about 6 years ago. A year ago\nthe team added React Testing Library to package.json. We have both packages so far. Recently we officially\ndecided to slowly rewrite the Enzyme tests and get rid of the library for good. We added the rule to our\nDeclaration of Code Convention that the new components are tested just in RTL, the old ones will be rewritten\nduring the development of specific parts.\nMigration effects so far\nCurrently we have got 592 test files (counting after the file names with “spec” phrase). In these files we can also\nfind 709 of unique “describe” usage, and 1796 unique test cases. Half of tests\nare written only in Jest, but a significant number of tests for better testing use extra libraries.\nReact Testing Library is used in 131 files, which is around 22% of all test files.\nEnzyme tests are in 137 files which is around 23%.\nSo Enzyme is still used more often. However, keep in mind that we have been using Enzyme in this project from the\nbeginning and RTL for a year. So I’m quite stunned by these numbers. I did not think that the use of RTL would\nincrease so significantly in a year. Of course, there is still a long way to completely eliminate Enzyme, especially\namong other project priorities, but now I’m convinced that small steps will be enough to do that.\nSummary\nHopefully this article showed you that switching from one library to another doesn’t have to be difficult. As\nprogrammers, we will encounter such situations frequently. I think that the effort put into replacing old libraries\nwith newer ones and keeping your code free of technological debt will bring tangible results for developers, project\nand, finally, users.\nI hope that I was able to show you why we rewrite the Enzyme tests to RTL, how we do it and what stage we are at.\nProbably it is not the end. What are we going to replace RTL with in the future? We’ll see. :)","guid":"https://blog.allegro.tech/2022/02/why-we-should-rewrite-enzymejs-to-rtl-and-how-to-do-that.html","categories":["tech","frontend","javascript","jest","enzyme","react-testing-library","rtl","react"],"isoDate":"2022-02-09T23:00:00.000Z","thumbnail":"images/post-headers/javascript.png"},{"title":"How do coroutines work internally in Python?","link":"https://blog.allegro.tech/2022/01/how-do-coroutines-work-internally-in-python.html","pubDate":"Mon, 24 Jan 2022 00:00:00 +0100","authors":{"author":[{"name":["Tomasz Szewczyk"],"photo":["https://blog.allegro.tech/img/authors/tomasz.szewczyk.jpg"],"url":["https://blog.allegro.tech/authors/tomasz.szewczyk"]}]},"content":"<p>Most of applications we create are basically loops. An average program waits\nfor an event, then processes it following some business logic. Afterwards it\nbegins waiting for another event to arrive. Java Servlets work this way too.\nPopular frameworks such as Spring allow us to only care about the business logic,\nwhile the framework takes care of the application main loop.</p>\n\n<h3 id=\"the-problem-with-blocking-operations\">The problem with blocking operations</h3>\n<p>Imagine a very simple web application whose task is to calculate currency\nexchange rates. It uses no framework, only operating system API or methods from\nyour favourite language standard library. It waits for a request with the amount,\nbase and target currencies and responds with a calculated output. In its simplest\nform it could have all the exchange rates hardcoded, so the operation is very\nfast and efficient. We can assume that such an application uses all the\navailable processing power when handling requests.</p>\n\n<p>But in the next iteration we want our app to query another service for current\nrates instead of relying on hardcoded values. We will soon discover our app is\nspending most of its time waiting for a response from the other service.</p>\n\n<p>Network communication is very slow after all. Let’s assume that a simple request\ntakes at least 1ms to complete. Modern processors have clock frequencies up to\n5GHz and, provided the data and code are already cached, they are capable of\nat least one simple operation per cycle. This means we could have done at least\n5 million simple operations while waiting for the request to complete! What a\nwaste of resources!</p>\n\n<h3 id=\"classic-approach-with-threads\">Classic approach with threads</h3>\n<p>The most obvious solution to this issue are threads. We could refactor our\napplication so that when it receives the request it passes it to a separate\nthread. This way we don’t have to worry about blocking operations in the\nbusiness logic. It is the operating system’s responsibility to allocate CPU to\nsomething meaningful while our thread is blocked waiting for the other service.\nFrom my experience this is how most of the applications work.</p>\n\n<p>Unfortunately this approach has some drawbacks as well. Threads consume a lot of\nresources and you can only create a limited number of them. Very soon you\ndiscover threads are a precious resource on their own and you can hardly afford\nthem sitting and waiting for a request to complete. You need to consider your\nthread pool allocation policy in order not to starve some part of your\napplication. Add race conditions and other concurrency related issues and it\nsuddenly gets overcomplicated.</p>\n\n<h3 id=\"how-about-we-dont-block\">How about we don’t block</h3>\n<p>Let’s assume you decide threads are too expensive, too cumbersome or they are\nsimply not available on your platform, because for example you are writing bare\nmetal applications and there is no operating system. When we decide not to use\nthreading we have to keep in mind we cannot afford having any blocking operations\nin our application, because they are wasting our resources. Having no threads\nmeans there is no way to use time when something blocks.</p>\n\n<p>The new idea for the program architecture is as follows:</p>\n<ul>\n  <li>Wait for an event to happen.</li>\n  <li>If the event is a new request arriving to an endpoint, then we only setup\nthe request to another service and return.</li>\n  <li>If the event is a response from the other service, then\nwe consume the received data and we setup a response to the original request.</li>\n</ul>\n\n<p>This way we don’t have any blocking operation in our application, hence it is\nvery efficient.</p>\n\n<h2 id=\"low-level-async-api\">Low level async API</h2>\n<p>Linux and similar operating systems provide us with a convenient API for many\nblocking operations. For example, the <code class=\"language-plaintext highlighter-rouge\">accept</code> system call is used to get an\nincoming TCP connection from a queue of pending connections or wait for one\nto show up. You can read more about <code class=\"language-plaintext highlighter-rouge\">accept</code> in <a href=\"https://man7.org/linux/man-pages/man2/accept.2.html\">the Linux manual</a>.</p>\n\n<p>Similarly <code class=\"language-plaintext highlighter-rouge\">write</code> and <code class=\"language-plaintext highlighter-rouge\">read</code> functions, defined by POSIX standard, are used\nto send and receive data over the created connection. Both can also block\nwaiting for the I/O operation to become possible. You can read more about these\nfunctions in the Linux manual: <a href=\"https://man7.org/linux/man-pages/man2/read.2.html\">read</a>,\n<a href=\"https://man7.org/linux/man-pages/man3/write.3p.html\">write</a>.</p>\n\n<p>As you may have already noticed, our asynchronous application only makes sense\nwhen there is only one blocking operation in the whole program. Earlier we\ncalled it “waiting for an event to happen”. In Linux we can achieve such a\nbehaviour using <code class=\"language-plaintext highlighter-rouge\">select</code> or <code class=\"language-plaintext highlighter-rouge\">poll</code> system calls. <code class=\"language-plaintext highlighter-rouge\">poll</code> is basically a more modern\nversion of <code class=\"language-plaintext highlighter-rouge\">select</code>. In practice we can provide them with a set of event\ndescriptors and they will block until one of expected events occurs. You can\nread more about these calls in the Linux manual: <a href=\"https://man7.org/linux/man-pages/man2/select.2.html\">select</a>,\n<a href=\"https://man7.org/linux/man-pages/man2/poll.2.html\">poll</a>.</p>\n\n<h2 id=\"select-in-python\">Select in Python</h2>\n<p>This API can be accessed in Python with a convenient wrapper provided by the\nPython standard library. It hides some complicated low level aspects of the\noperating system API which is good for this article. Read more about\n<code class=\"language-plaintext highlighter-rouge\">selectors</code> module in <a href=\"https://docs.python.org/3/library/selectors.html#module-selectors\">the Python documentation</a>.</p>\n\n<p>Firstly we can register an event we want to wait for using the <code class=\"language-plaintext highlighter-rouge\">register</code>\nmethod, then we wait for any registered event to happen using the <code class=\"language-plaintext highlighter-rouge\">select</code>\nmethod. Python standard library provides us with <code class=\"language-plaintext highlighter-rouge\">DefaultSelector</code> which is an\nalias for the most efficient implementation on the current platform, so that we\ndon’t have to dive into low level details if we don’t want to.</p>\n\n<h3 id=\"the-simplest-async-application\">The simplest async application</h3>\n<p>For the sake of simplicity of the examples I won’t use <code class=\"language-plaintext highlighter-rouge\">Selector</code> and I won’t\ntry to create an async http client from scratch. There are plainly too many\nunrelated low level details. Surprisingly, event the most common GET request consists\nof numerous blocking operations. Instead, I propose the most basic and most easily\ncontrollable blocking operation there is: waiting for user input.</p>\n\n<p>Let’s replace the complicated <code class=\"language-plaintext highlighter-rouge\">selector</code> with a simple <code class=\"language-plaintext highlighter-rouge\">input</code> function and\nmodel events with letters. Here is how such an app could look like:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">process_a</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Processing event A\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">process_b</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Processing event B\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">process_c</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Processing event C\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">app</span><span class=\"p\">():</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"&gt; \"</span><span class=\"p\">).</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"s\">\"A\"</span><span class=\"p\">:</span>\n            <span class=\"n\">process_a</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"s\">\"B\"</span><span class=\"p\">:</span>\n            <span class=\"n\">process_b</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"s\">\"C\"</span><span class=\"p\">:</span>\n            <span class=\"n\">process_c</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ python manual_async_simple.py\n&gt; A\nProcessing event A\n&gt; B\nProcessing event B\n&gt; C\nProcessing event C\n</code></pre></div></div>\n\n<p>As you can see we created an event loop listening for events (user input),\nthen it dispatches the event to the relevant handler. Note how the <code class=\"language-plaintext highlighter-rouge\">input</code>\nfunction inside the event loop is the only blocking operation in the whole\nprogram.</p>\n\n<h3 id=\"more-complex-flow-of-execution\">More complex flow of execution</h3>\n<p>As I already mentioned, creating asynchronous applications is easy as long as\nthere is no blocking operation while processing events. The aforementioned\nexample was so simple because there weren’t any. When there is some blocking\noperation we have to split our processing logic into parts, each one ending\nwhen there is a need for some blocking operation.</p>\n\n<p>For example imagine a <code class=\"language-plaintext highlighter-rouge\">Task</code> which is triggered with event A, but then it has\nto wait for events B and C in order to complete. You need separate chunks of\ncode to process each event and some way to hold the <code class=\"language-plaintext highlighter-rouge\">Task</code> state. One could\ncode it that way:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Task</span><span class=\"p\">:</span>\n    <span class=\"n\">COUNTER</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"s\">\"AWAITING A\"</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">COUNTER</span>\n        <span class=\"n\">Task</span><span class=\"p\">.</span><span class=\"n\">COUNTER</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_a</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s\"> Processing event A, blocking on B\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"s\">\"AWAITING B\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_b</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s\"> Processing event B, blocking on C\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"s\">\"AWAITING C\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_c</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s\"> Processing event C, task done\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"s\">\"DONE\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_new_event</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"s\">\"AWAITING A\"</span> <span class=\"ow\">and</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"s\">\"A\"</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">process_a</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"s\">\"AWAITING B\"</span> <span class=\"ow\">and</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"s\">\"B\"</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">process_b</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"s\">\"AWAITING C\"</span> <span class=\"ow\">and</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"s\">\"C\"</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">process_c</span><span class=\"p\">()</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">app</span><span class=\"p\">():</span>\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Task queue size </span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"&gt; \"</span><span class=\"p\">).</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"s\">\"A\"</span><span class=\"p\">:</span>\n            <span class=\"n\">tasks</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">())</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">tasks</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">process_new_event</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"s\">\"DONE\"</span><span class=\"p\">:</span>\n                    <span class=\"n\">tasks</span><span class=\"p\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ python manual_async_with_state.py\nTask queue size 0\n&gt; A\n0 Processing event A, blocking on B\nTask queue size 1\n&gt; A\n1 Processing event A, blocking on B\nTask queue size 2\n&gt; A\n2 Processing event A, blocking on B\nTask queue size 3\n&gt; B\n0 Processing event B, blocking on C\nTask queue size 3\n&gt; C\n0 Processing event C, task done\nTask queue size 2\n&gt; B\n1 Processing event B, blocking on C\nTask queue size 2\n&gt; C\n1 Processing event C, task done\nTask queue size 1\n&gt; B\n2 Processing event B, blocking on C\nTask queue size 1\n&gt; C\n2 Processing event C, task done\nTask queue size 0\n</code></pre></div></div>\n\n<p>Pay attention to how hard it is to extract the actual flow of the <code class=\"language-plaintext highlighter-rouge\">Task</code> from\nthe example. The <code class=\"language-plaintext highlighter-rouge\">Task</code> is split into three separate methods, each one\nresponsible for a part of the process. There is also a state persisted through\nconsecutive events.</p>\n\n<p>The bright side is the code actually works. You can go through a <code class=\"language-plaintext highlighter-rouge\">Task</code>\ntriggering events A, B and C, but you can also start a number of <em>Tasks</em> in\nparallel by sending a lot of A events in a row. You can then advance these\n<em>Tasks</em> by sending events they are waiting for.</p>\n\n<p>With classic threaded approach it would be most likely easy to saturate thread\npool even by hand. With our asynchronous example you can have a ton of <em>Tasks</em>\nin progress without any overhead, so the main goal is accomplished.</p>\n\n<h2 id=\"disadvantages-of-asynchronous-approach\">Disadvantages of asynchronous approach</h2>\n<p>We learned that asynchronous approach results in an efficient application, but\nalso has some drawbacks. For starters, your code does not reflect your program\nlogic directly. Instead, you have to manually control the flow, maintain state\nand pass requests’ context around which is cumbersome and error prone.</p>\n\n<p>Your application business logic is hidden under implementation details and the\narchitecture of your solution is determined by the way you decided to deal with\nasynchronous operations. You have to stick to a set of complicated rules when\ndeveloping new features.</p>\n\n<p>If only there were functions that could be easily suspended! We then could\ncreate our business logic in a convenient way and achieve asynchronous\nbehaviour at the same time. Instead of passing context around fragments of our\nprogram, we could just suspend the execution of a function while there is some\nblocking operation going on. That would be great, wouldn’t it?</p>\n\n<h2 id=\"generators\">Generators</h2>\n<p>According to the glossary of Python official documentation a generator is a\nfunction which contains <code class=\"language-plaintext highlighter-rouge\">yield</code> expressions. Each <code class=\"language-plaintext highlighter-rouge\">yield</code> temporarily suspends\nprocessing, remembering the location execution state. When the generator\nresumes, it picks up where it left off. It seems generators are indeed\nfunctions that can be easily suspended. That is exactly what we were looking\nfor!</p>\n\n<h3 id=\"a-closer-look-at-generators\">A closer look at generators</h3>\n<p>Let’s take a closer look at generators. How do they work and what is their\npurpose? First let’s write a function that prints Fibonacci numbers.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">print_fibonacci</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">b</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">print_fibonacci</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ python print_fibonnaci.py\n1\n1\n2\n3\n5\n</code></pre></div></div>\n\n<p>Next, replace the call to print function with <code class=\"language-plaintext highlighter-rouge\">yield</code> expressions and use our\nfunction as an iterable.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">yield_fibonacci</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"n\">a</span>\n        <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">b</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">yield_fibonacci</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ python yield_fibonnaci.py\n1\n1\n2\n3\n5\n</code></pre></div></div>\n\n<p>As you can see, the function became a generator when we used <code class=\"language-plaintext highlighter-rouge\">yield</code> expression\ninside it. When the program reaches <code class=\"language-plaintext highlighter-rouge\">yield</code> expression, the execution is suspended\nand a value is used as an output. From the outside, the generator behaves like\nan iterable or even like a stream, because the values we iterate over are not\nstored in memory. They are generated when needed.</p>\n\n<p>There can be multiple <code class=\"language-plaintext highlighter-rouge\">yield</code> expressions in the generator. When execution reaches\nthe end of the generator, the <code class=\"language-plaintext highlighter-rouge\">StopIteration</code> exception is thrown, just like\nwith iterators.</p>\n\n<h3 id=\"yield-from-and-return\">Yield from and return</h3>\n<p>You can embed one generator inside another with <code class=\"language-plaintext highlighter-rouge\">yield from</code> expression. In the\nfollowing example there is a generator using another generator twice to\ngenerate increasing and decreasing numbers.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">step_generator</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">):</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">step</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">stop</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">step</span> <span class=\"o\">*</span> <span class=\"n\">i</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">wrapper_generator</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">):</span>\n    <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"n\">step_generator</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"n\">step_generator</span><span class=\"p\">(</span><span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">wrapper_generator</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ python yield_twice.py\n0\n1\n2\n3\n4\n5\n4\n3\n2\n1\n</code></pre></div></div>\n\n<p>What is more, a generator can also have a return statement. The returned value\nwill be used as a payload to <code class=\"language-plaintext highlighter-rouge\">StopIteration</code> exception raised when the iteration\nis over or (much more usefully) it can be used as a result of <code class=\"language-plaintext highlighter-rouge\">yield from</code>\nexpression.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">step_generator</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">):</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">step</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">stop</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">step</span> <span class=\"o\">*</span> <span class=\"n\">i</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">i</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">wrapper_generator</span><span class=\"p\">():</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"n\">step_generator</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Generated </span><span class=\"si\">{</span><span class=\"n\">count</span><span class=\"si\">}</span><span class=\"s\"> numbers\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">wrapper_generator</span><span class=\"p\">():</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ python returning_generator.py\n0\n2\n4\n6\n8\nGenerated 5 numbers\n</code></pre></div></div>\n\n<h3 id=\"exceptions-inside-generators\">Exceptions inside generators</h3>\n<p>If an exception is raised within the generator it can be caught using the\nregular try/except statement in the wrapping generator.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">failing_generator</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"mi\">0</span>\n    <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"s\">\"Generator error\"</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">wrapper_generator</span><span class=\"p\">():</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"n\">failing_generator</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Something went wrong\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">wrapper_generator</span><span class=\"p\">():</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ python failing_generator.py\n0\nSomething went wrong\n</code></pre></div></div>\n\n<p>You can read more about generators in the <a href=\"https://docs.python.org/3/howto/functional.html#generators\">Python documentation</a>.</p>\n\n<h2 id=\"async-code-using-generators\">Async code using generators</h2>\n<p>So we know that generators superficially behave like a stream of values.\nOn the inside they look very similar to regular functions. Their execution\nflow is easy to understand, because they work just like our standard imperative\ncode. And we know they can be easily suspended. What if we model asynchronous\noperations as generators of events to be waited for? We could <code class=\"language-plaintext highlighter-rouge\">yield</code> all the\nevents from generators and still have readable and maintainable logic inside.</p>\n\n<p>Our generators could be kept in a map, connecting the generator to the event it\nis waiting for. When the event occurs we can simply take the next event from\nthe generator and again wait for it to happen.</p>\n\n<p>Inside the generator we can have any amount of logic among <code class=\"language-plaintext highlighter-rouge\">yield</code> expressions as\nlong as there are no blocking operations. Basically, we write our logic as if it\nwas synchronous code but instead of blocking on some operation we <em>yield</em> what we\nare waiting for.</p>\n\n<p>Let’s rewrite the example with tasks waiting for user input using the new\napproach.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">wait_for_b</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"s\">\"B\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">wait_for_c</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"s\">\"C\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">task_generator</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">counter</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">counter</span>\n    <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s\"> Processing event A, blocking on B\"</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"n\">wait_for_b</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s\"> Processing event B, blocking on C\"</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"k\">from</span> <span class=\"n\">wait_for_c</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s\"> Processing event C, task done\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">app</span><span class=\"p\">():</span>\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"A\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s\">\"B\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s\">\"C\"</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Task queue size </span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"s\">'A'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"s\">'B'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"s\">'C'</span><span class=\"p\">])</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"&gt; \"</span><span class=\"p\">).</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"s\">\"A\"</span><span class=\"p\">:</span>\n            <span class=\"n\">new_task</span> <span class=\"o\">=</span> <span class=\"n\">task_generator</span><span class=\"p\">()</span>\n            <span class=\"n\">waiting_for</span> <span class=\"o\">=</span> <span class=\"n\">new_task</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">waiting_for</span><span class=\"p\">].</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">new_task</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">event</span><span class=\"p\">]):</span>\n            <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">event</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">event</span><span class=\"p\">].</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">waiting_for</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n                <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">waiting_for</span><span class=\"p\">].</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"nb\">StopIteration</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ python yield_based_coroutines.py\nTask queue size 0\n&gt; A\n0 Processing event A, blocking on B\nTask queue size 1\n&gt; A\n1 Processing event A, blocking on B\nTask queue size 2\n&gt; A\n2 Processing event A, blocking on B\nTask queue size 3\n&gt; B\n0 Processing event B, blocking on C\nTask queue size 3\n&gt; B\n1 Processing event B, blocking on C\nTask queue size 3\n&gt; C\n0 Processing event C, task done\nTask queue size 2\n&gt; C\n1 Processing event C, task done\nTask queue size 1\n&gt; B\n2 Processing event B, blocking on C\nTask queue size 1\n&gt; C\n2 Processing event C, task done\nTask queue size 0\n</code></pre></div></div>\n\n<p>By simply replacing our complicated <code class=\"language-plaintext highlighter-rouge\">Task</code> class with a short generator\nfunction and queue of tasks with a map of generators and their previously\nyielded values we manage to get very convenient, yet still very efficient\nasynchronous code. Actually, these are called coroutines!</p>\n\n<h2 id=\"replace-yield-with-await\">Replace yield with await</h2>\n<p>Do you think I’m stretching reality a little bit by calling generators\ncoroutines? Let’s see. First replace all <code class=\"language-plaintext highlighter-rouge\">yield from</code> expressions with <code class=\"language-plaintext highlighter-rouge\">await</code>.\nNext add an <code class=\"language-plaintext highlighter-rouge\">async</code> keyword to the generator definition. Finally wrap the\nevents we await into classes with the <code class=\"language-plaintext highlighter-rouge\">__await__</code> operator method.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">WaitB</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__await__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"s\">\"B\"</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">WaitC</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__await__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"s\">\"C\"</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">coroutine</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">counter</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">counter</span>\n    <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s\"> Processing event A, blocking on B\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">WaitB</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s\"> Processing event B, blocking on C\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">WaitC</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s\"> Processing event C, task done\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">app</span><span class=\"p\">():</span>\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"A\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s\">\"B\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s\">\"C\"</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Task queue size </span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"s\">'A'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"s\">'B'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"s\">'C'</span><span class=\"p\">])</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"&gt; \"</span><span class=\"p\">).</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"s\">\"A\"</span><span class=\"p\">:</span>\n            <span class=\"n\">new_task</span> <span class=\"o\">=</span> <span class=\"n\">coroutine</span><span class=\"p\">()</span>\n            <span class=\"n\">waiting_for</span> <span class=\"o\">=</span> <span class=\"n\">new_task</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">waiting_for</span><span class=\"p\">].</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">new_task</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">event</span><span class=\"p\">]):</span>\n            <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">event</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">event</span><span class=\"p\">].</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">waiting_for</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n                <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">waiting_for</span><span class=\"p\">].</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"nb\">StopIteration</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ python yield_based_coroutines.py\nTask queue size 0\n&gt; A\n0 Processing event A, blocking on B\nTask queue size 1\n&gt; A\n1 Processing event A, blocking on B\nTask queue size 2\n&gt; A\n2 Processing event A, blocking on B\nTask queue size 3\n&gt; B\n0 Processing event B, blocking on C\nTask queue size 3\n&gt; B\n1 Processing event B, blocking on C\nTask queue size 3\n&gt; C\n0 Processing event C, task done\nTask queue size 2\n&gt; C\n1 Processing event C, task done\nTask queue size 1\n&gt; B\n2 Processing event B, blocking on C\nTask queue size 1\n&gt; C\n2 Processing event C, task done\nTask queue size 0\n</code></pre></div></div>\n\n<p>This code still runs OK! We can have a ton of opened tasks and we won’t\nsaturate any precious resource. What is more, you wouldn’t guess that\nwe had implemented this ourselves by looking at the actual coroutine.</p>\n\n<p>Now you can just replace <code class=\"language-plaintext highlighter-rouge\">input</code> with <code class=\"language-plaintext highlighter-rouge\">select</code> and <code class=\"language-plaintext highlighter-rouge\">yield</code> descriptors of\nactual blocking operations like reading from socket and you can create your own\nasynchronous HTTP application.</p>\n\n<h2 id=\"python-asyncio\">Python asyncio</h2>\n<p>In fact, the async/await syntax is present only since Python 3.7. Prior to 3.7\ncoroutines were actually written as generators with special annotation attached\nto them.</p>\n\n<p>Python standard library provides us with a ready-to-use event loop to run our\ncoroutines as well as a set of convenient awaitable operations covering all the\nlowest level blocking operations we usually deal with. If you want to learn more\nabout low level async API in Python,\n<a href=\"https://www.python.org/dev/peps/pep-3156/\">PEP3156</a> is a great place to start.</p>\n\n<p>Furthermore, there is a huge number of libraries making use of this low level\nAPI. They implement HTTP clients, web frameworks, database drivers and many\nothers. My favourite asynchronous libraries in Python are:\nasynchronous HTTP client <a href=\"https://docs.aiohttp.org/en/stable/\">aiohttp</a>,\nweb framework <a href=\"https://fastapi.tiangolo.com/\">FastAPI</a> and\nMongoDB driver <a href=\"https://motor.readthedocs.io/en/stable/\">Motor</a>.</p>\n\n<p>In reality, the Python event loop runs on futures, also known as promises\nin other languages. Coroutines are implemented with tasks which rely on\nfutures. Our implementation is actually simplified as it bypasses some abstraction\nlayers. You should remember that when looking into Python sources, \nso you don’t get confused!</p>\n\n<p>When I first started learning coroutines I had hard times trying to figure out\nall the strange behaviours myself. It was only the understanding of how things\nwork inside that helped me finally feel it. I hope my explanation will help you\nnot only understand how to use coroutines, but also let you gain\nconfidence and intuition about how asynchronous programming works.</p>\n\n<p>Happy coding!</p>\n","contentSnippet":"Most of applications we create are basically loops. An average program waits\nfor an event, then processes it following some business logic. Afterwards it\nbegins waiting for another event to arrive. Java Servlets work this way too.\nPopular frameworks such as Spring allow us to only care about the business logic,\nwhile the framework takes care of the application main loop.\nThe problem with blocking operations\nImagine a very simple web application whose task is to calculate currency\nexchange rates. It uses no framework, only operating system API or methods from\nyour favourite language standard library. It waits for a request with the amount,\nbase and target currencies and responds with a calculated output. In its simplest\nform it could have all the exchange rates hardcoded, so the operation is very\nfast and efficient. We can assume that such an application uses all the\navailable processing power when handling requests.\nBut in the next iteration we want our app to query another service for current\nrates instead of relying on hardcoded values. We will soon discover our app is\nspending most of its time waiting for a response from the other service.\nNetwork communication is very slow after all. Let’s assume that a simple request\ntakes at least 1ms to complete. Modern processors have clock frequencies up to\n5GHz and, provided the data and code are already cached, they are capable of\nat least one simple operation per cycle. This means we could have done at least\n5 million simple operations while waiting for the request to complete! What a\nwaste of resources!\nClassic approach with threads\nThe most obvious solution to this issue are threads. We could refactor our\napplication so that when it receives the request it passes it to a separate\nthread. This way we don’t have to worry about blocking operations in the\nbusiness logic. It is the operating system’s responsibility to allocate CPU to\nsomething meaningful while our thread is blocked waiting for the other service.\nFrom my experience this is how most of the applications work.\nUnfortunately this approach has some drawbacks as well. Threads consume a lot of\nresources and you can only create a limited number of them. Very soon you\ndiscover threads are a precious resource on their own and you can hardly afford\nthem sitting and waiting for a request to complete. You need to consider your\nthread pool allocation policy in order not to starve some part of your\napplication. Add race conditions and other concurrency related issues and it\nsuddenly gets overcomplicated.\nHow about we don’t block\nLet’s assume you decide threads are too expensive, too cumbersome or they are\nsimply not available on your platform, because for example you are writing bare\nmetal applications and there is no operating system. When we decide not to use\nthreading we have to keep in mind we cannot afford having any blocking operations\nin our application, because they are wasting our resources. Having no threads\nmeans there is no way to use time when something blocks.\nThe new idea for the program architecture is as follows:\nWait for an event to happen.\nIf the event is a new request arriving to an endpoint, then we only setup\nthe request to another service and return.\nIf the event is a response from the other service, then\nwe consume the received data and we setup a response to the original request.\nThis way we don’t have any blocking operation in our application, hence it is\nvery efficient.\nLow level async API\nLinux and similar operating systems provide us with a convenient API for many\nblocking operations. For example, the accept system call is used to get an\nincoming TCP connection from a queue of pending connections or wait for one\nto show up. You can read more about accept in the Linux manual.\nSimilarly write and read functions, defined by POSIX standard, are used\nto send and receive data over the created connection. Both can also block\nwaiting for the I/O operation to become possible. You can read more about these\nfunctions in the Linux manual: read,\nwrite.\nAs you may have already noticed, our asynchronous application only makes sense\nwhen there is only one blocking operation in the whole program. Earlier we\ncalled it “waiting for an event to happen”. In Linux we can achieve such a\nbehaviour using select or poll system calls. poll is basically a more modern\nversion of select. In practice we can provide them with a set of event\ndescriptors and they will block until one of expected events occurs. You can\nread more about these calls in the Linux manual: select,\npoll.\nSelect in Python\nThis API can be accessed in Python with a convenient wrapper provided by the\nPython standard library. It hides some complicated low level aspects of the\noperating system API which is good for this article. Read more about\nselectors module in the Python documentation.\nFirstly we can register an event we want to wait for using the register\nmethod, then we wait for any registered event to happen using the select\nmethod. Python standard library provides us with DefaultSelector which is an\nalias for the most efficient implementation on the current platform, so that we\ndon’t have to dive into low level details if we don’t want to.\nThe simplest async application\nFor the sake of simplicity of the examples I won’t use Selector and I won’t\ntry to create an async http client from scratch. There are plainly too many\nunrelated low level details. Surprisingly, event the most common GET request consists\nof numerous blocking operations. Instead, I propose the most basic and most easily\ncontrollable blocking operation there is: waiting for user input.\nLet’s replace the complicated selector with a simple input function and\nmodel events with letters. Here is how such an app could look like:\n\ndef process_a():\n    print(\"Processing event A\")\n\n\ndef process_b():\n    print(\"Processing event B\")\n\n\ndef process_c():\n    print(\"Processing event C\")\n\n\ndef app():\n    while True:\n        event = input(\"> \").strip()\n\n        if event == \"A\":\n            process_a()\n        elif event == \"B\":\n            process_b()\n        elif event == \"C\":\n            process_c()\n\n\nif __name__ == \"__main__\":\n    app()\n\n\n\n$ python manual_async_simple.py\n> A\nProcessing event A\n> B\nProcessing event B\n> C\nProcessing event C\n\n\nAs you can see we created an event loop listening for events (user input),\nthen it dispatches the event to the relevant handler. Note how the input\nfunction inside the event loop is the only blocking operation in the whole\nprogram.\nMore complex flow of execution\nAs I already mentioned, creating asynchronous applications is easy as long as\nthere is no blocking operation while processing events. The aforementioned\nexample was so simple because there weren’t any. When there is some blocking\noperation we have to split our processing logic into parts, each one ending\nwhen there is a need for some blocking operation.\nFor example imagine a Task which is triggered with event A, but then it has\nto wait for events B and C in order to complete. You need separate chunks of\ncode to process each event and some way to hold the Task state. One could\ncode it that way:\n\nclass Task:\n    COUNTER = 0\n\n    def __init__(self):\n        self.state = \"AWAITING A\"\n        self.id = Task.COUNTER\n        Task.COUNTER += 1\n\n    def process_a(self):\n        print(f\"{self.id} Processing event A, blocking on B\")\n        self.state = \"AWAITING B\"\n        return True\n\n    def process_b(self):\n        print(f\"{self.id} Processing event B, blocking on C\")\n        self.state = \"AWAITING C\"\n        return True\n\n    def process_c(self):\n        print(f\"{self.id} Processing event C, task done\")\n        self.state = \"DONE\"\n        return True\n\n    def process_new_event(self, event):\n        if self.state == \"AWAITING A\" and event == \"A\":\n            return self.process_a()\n\n        if self.state == \"AWAITING B\" and event == \"B\":\n            return self.process_b()\n\n        if self.state == \"AWAITING C\" and event == \"C\":\n            return self.process_c()\n\n        return False\n\n\ndef app():\n    tasks = []\n    while True:\n        print(f\"Task queue size {len(tasks)}\")\n        event = input(\"> \").strip()\n\n        if event == \"A\":\n            tasks.append(Task())\n\n        for task in tasks:\n            if task.process_new_event(event):\n                if task.state == \"DONE\":\n                    tasks.remove(task)\n                break\n\n\nif __name__ == \"__main__\":\n    app()\n\n\n\n$ python manual_async_with_state.py\nTask queue size 0\n> A\n0 Processing event A, blocking on B\nTask queue size 1\n> A\n1 Processing event A, blocking on B\nTask queue size 2\n> A\n2 Processing event A, blocking on B\nTask queue size 3\n> B\n0 Processing event B, blocking on C\nTask queue size 3\n> C\n0 Processing event C, task done\nTask queue size 2\n> B\n1 Processing event B, blocking on C\nTask queue size 2\n> C\n1 Processing event C, task done\nTask queue size 1\n> B\n2 Processing event B, blocking on C\nTask queue size 1\n> C\n2 Processing event C, task done\nTask queue size 0\n\n\nPay attention to how hard it is to extract the actual flow of the Task from\nthe example. The Task is split into three separate methods, each one\nresponsible for a part of the process. There is also a state persisted through\nconsecutive events.\nThe bright side is the code actually works. You can go through a Task\ntriggering events A, B and C, but you can also start a number of Tasks in\nparallel by sending a lot of A events in a row. You can then advance these\nTasks by sending events they are waiting for.\nWith classic threaded approach it would be most likely easy to saturate thread\npool even by hand. With our asynchronous example you can have a ton of Tasks\nin progress without any overhead, so the main goal is accomplished.\nDisadvantages of asynchronous approach\nWe learned that asynchronous approach results in an efficient application, but\nalso has some drawbacks. For starters, your code does not reflect your program\nlogic directly. Instead, you have to manually control the flow, maintain state\nand pass requests’ context around which is cumbersome and error prone.\nYour application business logic is hidden under implementation details and the\narchitecture of your solution is determined by the way you decided to deal with\nasynchronous operations. You have to stick to a set of complicated rules when\ndeveloping new features.\nIf only there were functions that could be easily suspended! We then could\ncreate our business logic in a convenient way and achieve asynchronous\nbehaviour at the same time. Instead of passing context around fragments of our\nprogram, we could just suspend the execution of a function while there is some\nblocking operation going on. That would be great, wouldn’t it?\nGenerators\nAccording to the glossary of Python official documentation a generator is a\nfunction which contains yield expressions. Each yield temporarily suspends\nprocessing, remembering the location execution state. When the generator\nresumes, it picks up where it left off. It seems generators are indeed\nfunctions that can be easily suspended. That is exactly what we were looking\nfor!\nA closer look at generators\nLet’s take a closer look at generators. How do they work and what is their\npurpose? First let’s write a function that prints Fibonacci numbers.\n\ndef print_fibonacci(i):\n    a, b = 1, 1\n    for _ in range(i):\n        print(a)\n        b, a = a + b, b\n\n\nif __name__ == \"__main__\":\n    print_fibonacci(5)\n\n\n\n$ python print_fibonnaci.py\n1\n1\n2\n3\n5\n\n\nNext, replace the call to print function with yield expressions and use our\nfunction as an iterable.\n\ndef yield_fibonacci(i):\n    a, b = 1, 1\n    for _ in range(i):\n        yield a\n        b, a = a + b, b\n\n\nif __name__ == \"__main__\":\n    for f in yield_fibonacci(5):\n        print(f)\n\n\n\n$ python yield_fibonnaci.py\n1\n1\n2\n3\n5\n\n\nAs you can see, the function became a generator when we used yield expression\ninside it. When the program reaches yield expression, the execution is suspended\nand a value is used as an output. From the outside, the generator behaves like\nan iterable or even like a stream, because the values we iterate over are not\nstored in memory. They are generated when needed.\nThere can be multiple yield expressions in the generator. When execution reaches\nthe end of the generator, the StopIteration exception is thrown, just like\nwith iterators.\nYield from and return\nYou can embed one generator inside another with yield from expression. In the\nfollowing example there is a generator using another generator twice to\ngenerate increasing and decreasing numbers.\n\ndef step_generator(start, stop, step):\n    i = 0\n    while start + step * i != stop:\n        yield start + step * i\n        i += 1\n\n\ndef wrapper_generator(start, stop):\n    yield from step_generator(start, stop, 1)\n    yield from step_generator(stop, start, -1)\n\n\nif __name__ == \"__main__\":\n    for f in wrapper_generator(0, 5):\n        print(f)\n\n\n\n$ python yield_twice.py\n0\n1\n2\n3\n4\n5\n4\n3\n2\n1\n\n\nWhat is more, a generator can also have a return statement. The returned value\nwill be used as a payload to StopIteration exception raised when the iteration\nis over or (much more usefully) it can be used as a result of yield from\nexpression.\n\ndef step_generator(start, stop, step):\n    i = 0\n    while start + step * i != stop:\n        yield start + step * i\n        i += 1\n    return i\n\n\ndef wrapper_generator():\n    count = yield from step_generator(0, 10, 2)\n    print(f\"Generated {count} numbers\")\n\n\nif __name__ == \"__main__\":\n    for f in wrapper_generator():\n        print(f)\n\n\n\n$ python returning_generator.py\n0\n2\n4\n6\n8\nGenerated 5 numbers\n\n\nExceptions inside generators\nIf an exception is raised within the generator it can be caught using the\nregular try/except statement in the wrapping generator.\n\ndef failing_generator():\n    yield 0\n    raise Exception(\"Generator error\")\n    yield 1\n\n\ndef wrapper_generator():\n    try:\n        yield from failing_generator()\n    except:\n        print(\"Something went wrong\")\n\n\nif __name__ == \"__main__\":\n    for f in wrapper_generator():\n        print(f)\n\n\n\n$ python failing_generator.py\n0\nSomething went wrong\n\n\nYou can read more about generators in the Python documentation.\nAsync code using generators\nSo we know that generators superficially behave like a stream of values.\nOn the inside they look very similar to regular functions. Their execution\nflow is easy to understand, because they work just like our standard imperative\ncode. And we know they can be easily suspended. What if we model asynchronous\noperations as generators of events to be waited for? We could yield all the\nevents from generators and still have readable and maintainable logic inside.\nOur generators could be kept in a map, connecting the generator to the event it\nis waiting for. When the event occurs we can simply take the next event from\nthe generator and again wait for it to happen.\nInside the generator we can have any amount of logic among yield expressions as\nlong as there are no blocking operations. Basically, we write our logic as if it\nwas synchronous code but instead of blocking on some operation we yield what we\nare waiting for.\nLet’s rewrite the example with tasks waiting for user input using the new\napproach.\n\ncounter = 0\n\n\ndef wait_for_b():\n    yield \"B\"\n\n\ndef wait_for_c():\n    yield \"C\"\n\n\ndef task_generator():\n    global counter\n    id = counter\n    counter += 1\n\n    print(f\"{id} Processing event A, blocking on B\")\n    yield from wait_for_b()\n    print(f\"{id} Processing event B, blocking on C\")\n    yield from wait_for_c()\n    print(f\"{id} Processing event C, task done\")\n\n\ndef app():\n    tasks = {\"A\": [], \"B\": [], \"C\": []}\n    while True:\n        print(f\"Task queue size {len(tasks['A'] + tasks['B'] + tasks['C'])}\")\n        event = input(\"> \").strip()\n\n        if event == \"A\":\n            new_task = task_generator()\n            waiting_for = new_task.send(None)\n            tasks[waiting_for].append(new_task)\n\n        if len(tasks[event]):\n            task = tasks[event][0]\n            tasks[event].remove(task)\n            try:\n                waiting_for = task.send(None)\n                tasks[waiting_for].append(task)\n            except StopIteration:\n                pass\n\n\nif __name__ == \"__main__\":\n    app()\n\n\n\n$ python yield_based_coroutines.py\nTask queue size 0\n> A\n0 Processing event A, blocking on B\nTask queue size 1\n> A\n1 Processing event A, blocking on B\nTask queue size 2\n> A\n2 Processing event A, blocking on B\nTask queue size 3\n> B\n0 Processing event B, blocking on C\nTask queue size 3\n> B\n1 Processing event B, blocking on C\nTask queue size 3\n> C\n0 Processing event C, task done\nTask queue size 2\n> C\n1 Processing event C, task done\nTask queue size 1\n> B\n2 Processing event B, blocking on C\nTask queue size 1\n> C\n2 Processing event C, task done\nTask queue size 0\n\n\nBy simply replacing our complicated Task class with a short generator\nfunction and queue of tasks with a map of generators and their previously\nyielded values we manage to get very convenient, yet still very efficient\nasynchronous code. Actually, these are called coroutines!\nReplace yield with await\nDo you think I’m stretching reality a little bit by calling generators\ncoroutines? Let’s see. First replace all yield from expressions with await.\nNext add an async keyword to the generator definition. Finally wrap the\nevents we await into classes with the __await__ operator method.\n\ncounter = 0\n\n\nclass WaitB:\n    def __await__(self):\n        yield \"B\"\n\n\nclass WaitC:\n    def __await__(self):\n        yield \"C\"\n\n\nasync def coroutine():\n    global counter\n    id = counter\n    counter += 1\n\n    print(f\"{id} Processing event A, blocking on B\")\n    await WaitB()\n    print(f\"{id} Processing event B, blocking on C\")\n    await WaitC()\n    print(f\"{id} Processing event C, task done\")\n\n\ndef app():\n    tasks = {\"A\": [], \"B\": [], \"C\": []}\n    while True:\n        print(f\"Task queue size {len(tasks['A'] + tasks['B'] + tasks['C'])}\")\n        event = input(\"> \").strip()\n\n        if event == \"A\":\n            new_task = coroutine()\n            waiting_for = new_task.send(None)\n            tasks[waiting_for].append(new_task)\n\n        if len(tasks[event]):\n            task = tasks[event][0]\n            tasks[event].remove(task)\n            try:\n                waiting_for = task.send(None)\n                tasks[waiting_for].append(task)\n            except StopIteration:\n                pass\n\n\nif __name__ == \"__main__\":\n    app()\n\n\n\n$ python yield_based_coroutines.py\nTask queue size 0\n> A\n0 Processing event A, blocking on B\nTask queue size 1\n> A\n1 Processing event A, blocking on B\nTask queue size 2\n> A\n2 Processing event A, blocking on B\nTask queue size 3\n> B\n0 Processing event B, blocking on C\nTask queue size 3\n> B\n1 Processing event B, blocking on C\nTask queue size 3\n> C\n0 Processing event C, task done\nTask queue size 2\n> C\n1 Processing event C, task done\nTask queue size 1\n> B\n2 Processing event B, blocking on C\nTask queue size 1\n> C\n2 Processing event C, task done\nTask queue size 0\n\n\nThis code still runs OK! We can have a ton of opened tasks and we won’t\nsaturate any precious resource. What is more, you wouldn’t guess that\nwe had implemented this ourselves by looking at the actual coroutine.\nNow you can just replace input with select and yield descriptors of\nactual blocking operations like reading from socket and you can create your own\nasynchronous HTTP application.\nPython asyncio\nIn fact, the async/await syntax is present only since Python 3.7. Prior to 3.7\ncoroutines were actually written as generators with special annotation attached\nto them.\nPython standard library provides us with a ready-to-use event loop to run our\ncoroutines as well as a set of convenient awaitable operations covering all the\nlowest level blocking operations we usually deal with. If you want to learn more\nabout low level async API in Python,\nPEP3156 is a great place to start.\nFurthermore, there is a huge number of libraries making use of this low level\nAPI. They implement HTTP clients, web frameworks, database drivers and many\nothers. My favourite asynchronous libraries in Python are:\nasynchronous HTTP client aiohttp,\nweb framework FastAPI and\nMongoDB driver Motor.\nIn reality, the Python event loop runs on futures, also known as promises\nin other languages. Coroutines are implemented with tasks which rely on\nfutures. Our implementation is actually simplified as it bypasses some abstraction\nlayers. You should remember that when looking into Python sources, \nso you don’t get confused!\nWhen I first started learning coroutines I had hard times trying to figure out\nall the strange behaviours myself. It was only the understanding of how things\nwork inside that helped me finally feel it. I hope my explanation will help you\nnot only understand how to use coroutines, but also let you gain\nconfidence and intuition about how asynchronous programming works.\nHappy coding!","guid":"https://blog.allegro.tech/2022/01/how-do-coroutines-work-internally-in-python.html","categories":["tech","python","async","coroutines"],"isoDate":"2022-01-23T23:00:00.000Z","thumbnail":"images/post-headers/python.png"},{"title":"Shrinking the size of a monorepo","link":"https://blog.allegro.tech/2022/01/shrinking-size-of-monorepo.html","pubDate":"Wed, 12 Jan 2022 00:00:00 +0100","authors":{"author":[{"name":["Maciej Piotrowski"],"photo":["https://blog.allegro.tech/img/authors/maciej.piotrowski.jpg"],"url":["https://blog.allegro.tech/authors/maciej.piotrowski"]}]},"content":"<p>The source code of Allegro iOS app for buyers used to be divided into separate modules hosted in multiple repositories\n(polyrepo). The\nsource code was migrated to a monorepo a few years back along with the history of all repos that constituted the app.\nUpdating source code of a module on one repository could affect another module hosted on a separate repository.\nVersioning modules and propagation of dependency update led to long release process of the entire application.\nOur main\nrepository for the iOS application thus became our monorepo. After 9 years of development of the app the repo size has\ngrown\nenormously and the <code class=\"language-plaintext highlighter-rouge\">git clone</code> command became a nightmare taking too much time. We had a possibility to shrink the\nproject size during the\nmigration from an on-premise to an external git repo hosting provider.</p>\n\n<h2 id=\"monorepo-scale\">Monorepo scale</h2>\n\n<h3 id=\"general-repo-scale\">General repo scale</h3>\n\n<p>The General scale of our old repository was as follows:</p>\n\n<ul>\n  <li>almost 9 years of history with <strong>91k +</strong> commits</li>\n  <li><strong>440k</strong> <a href=\"https://en.wikipedia.org/wiki/Binary_large_object\">BLOBs</a> were stored in the repo: multiple <code class=\"language-plaintext highlighter-rouge\">.png</code> and\n<code class=\"language-plaintext highlighter-rouge\">.jpeg</code> files, 3rd-party frameworks and toolset binaries. The unpacked size of the BLOBs would add up to <strong>36 GB</strong> and\nthe biggest BLOB stored was <strong>100+ MB</strong></li>\n  <li><strong>680k</strong> git <em>tree</em> objects</li>\n  <li>the unpacked repo size on the main development branch was <strong>8+ GB</strong> where the <code class=\"language-plaintext highlighter-rouge\">.git</code> dir size after a clone was\n<strong>7+ GB</strong>. The <code class=\"language-plaintext highlighter-rouge\">.git</code> directory contained compressed <code class=\"language-plaintext highlighter-rouge\">.png</code> (<strong>4.5+ GB</strong> 🤯) and <code class=\"language-plaintext highlighter-rouge\">.pbxproj</code> (<strong>600+ MB</strong>) files</li>\n</ul>\n\n<h3 id=\"new-repo-scale\">New repo scale</h3>\n\n<p>After the migration and history rewrite we shrank the repo size to:</p>\n\n<ul>\n  <li><strong>71k +</strong> commits</li>\n  <li><strong>230k</strong> <a href=\"https://en.wikipedia.org/wiki/Binary_large_object\">BLOBs</a>, where all BLOBs unpacked would add up to\n<strong>1.6 GB</strong> - this\nnumber also includes size of source code files, whereas assets and binaries were migrated to an external storage</li>\n  <li><strong>455k+</strong> git <em>tree</em> objects</li>\n</ul>\n\n<h2 id=\"how-did-we-do-it\">How did we do it?</h2>\n\n<p>The history-rewrite process required proper planning and a few steps:</p>\n<ol>\n  <li>Analysis of the old repo contents and its history</li>\n  <li>Creating a reproducible procedure for the history rewrite</li>\n  <li>Dry running the procedure to test out the process</li>\n  <li>Planning and scheduling activities necessary to migrate the repo</li>\n  <li>Proper communication about the process to stakeholders (a.k.a. developers 👩‍💻👨‍💻)</li>\n  <li>The actual migration</li>\n</ol>\n\n<h3 id=\"the-repo-analysis\">The repo analysis</h3>\n\n<p>Goals:</p>\n<ul>\n  <li>find items that can be removed from the history</li>\n  <li>select items that can be migrated to an external storage</li>\n</ul>\n\n<p>We used tools such as <a href=\"https://github.com/github/git-sizer\">git-sizer</a> and\n<a href=\"https://github.com/newren/git-filter-repo\">git-filter-repo tool</a> to\nget information about types of files stored in the repository. If you wanted to do the same the workshops from\n<a href=\"https://githubuniverse.com/professional-services-workshop-2-how-to-keep-git-monorepos-manageable/\">GitHub Universe</a> and\n<a href=\"https://github.com/githubuniverseworkshops/grafting-monorepos/issues/2\">the scripts introduced there</a> might be a good\nstarting point.</p>\n\n<p>From the analysis we were able to select the following items for complete removal from the history:</p>\n\n<ul>\n  <li>deleted dirs and files</li>\n  <li>unwanted paths: e.g. <code class=\"language-plaintext highlighter-rouge\">Pods/</code>, invalid symlinks causing deep nesting of paths</li>\n  <li>unwanted history of paths: e.g. <code class=\"language-plaintext highlighter-rouge\">Vendor</code> for storing 3rd party dependencies or <code class=\"language-plaintext highlighter-rouge\">Toolset</code> with binaries</li>\n  <li>unwanted files: .e.g <code class=\"language-plaintext highlighter-rouge\">.pbxproj</code> that can be generated by <a href=\"https://github.com/yonaskolb/XcodeGen\">XcodeGen</a> and their\nhistory is meaningless (<strong>600+ MB</strong> savings in our case), history of BLOB files such as <code class=\"language-plaintext highlighter-rouge\">.jpg</code>, <code class=\"language-plaintext highlighter-rouge\">.png</code>, <code class=\"language-plaintext highlighter-rouge\">.a</code>,\n<code class=\"language-plaintext highlighter-rouge\">.dylib</code>, <code class=\"language-plaintext highlighter-rouge\">.pdf</code>, <code class=\"language-plaintext highlighter-rouge\">.zip</code>, <code class=\"language-plaintext highlighter-rouge\">.mp4</code>, <code class=\"language-plaintext highlighter-rouge\">.json</code></li>\n</ul>\n\n<p>We decided to track BLOBs using <a href=\"https://git-lfs.github.com/\">Git LFS (Large File Storage)</a>. In our case the\nfollowing were a good use case for it:</p>\n<ul>\n  <li>large binary files <code class=\"language-plaintext highlighter-rouge\">.jpg</code>, <code class=\"language-plaintext highlighter-rouge\">.png</code>, <code class=\"language-plaintext highlighter-rouge\">.a</code>, <code class=\"language-plaintext highlighter-rouge\">.dylib</code>, <code class=\"language-plaintext highlighter-rouge\">.pdf</code>, <code class=\"language-plaintext highlighter-rouge\">.zip</code>, <code class=\"language-plaintext highlighter-rouge\">.mp4</code>, <code class=\"language-plaintext highlighter-rouge\">.json</code></li>\n  <li>framework binaries</li>\n  <li>toolset binaries</li>\n</ul>\n\n<h3 id=\"reproducible-procedure-and-dry-runs\">Reproducible procedure and dry runs</h3>\n\n<p>We created a script that contained all commands that removed redundant items from the history. To remove items we used\n<a href=\"https://github.com/newren/git-filter-repo\">git filter-repo</a> - it‘s much more performant than git‘s built-in\n <code class=\"language-plaintext highlighter-rouge\">git filter-branch</code> (do not use it!). Some examples of usage:</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git filter-repo <span class=\"nt\">--invert-paths</span> <span class=\"nt\">--path</span> Pods/ <span class=\"nt\">--force</span>\ngit filter-repo <span class=\"nt\">--invert-paths</span> <span class=\"nt\">--paths-from-file</span> remove.txt <span class=\"nt\">--force</span>\ngit filter-repo <span class=\"nt\">--invert-paths</span> <span class=\"nt\">--path-glob</span> <span class=\"s1\">'*.pbxproj'</span> <span class=\"nt\">--force</span>\n\n</code></pre></div></div>\n\n<p>After the removal we restored the most-recent version of binaries, frameworks and BLOBs to the repo and we tracked them\nwith Git LFS:</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git lfs track <span class=\"s2\">\"*.png\"</span>\ngit lfs track <span class=\"s2\">\"Vendor/SomeSDK/SomeSDK.framework/SomeSDK\"</span>\n\n</code></pre></div></div>\n\n<p>We ran the script a few times to verify the output size of the repo. One crucial aspect after the run was to verify\nthat <strong>all plans</strong> on the CI (Continuous Integration) pass - we did it to check that the app still compiles, tests pass\nand no more files that the ones we had wanted were actually deleted.</p>\n\n<h3 id=\"communication\">Communication</h3>\n\n<p>The crucial aspect of introducing any change is communication. It‘s good to prepare it in advance, have team members\nreview it. We used a few channels so that our devs would get important info about the migration and history rewrite\nthrough the channel that suited their working habits best (e-mails, instant messaging tool, dev forums).</p>\n\n<h2 id=\"some-final-thoughts\">Some final thoughts</h2>\n\n<p>It took a large amount of time to prepare the migration, understand the history of the repository and select proper\nitems and\nstrategies for the migration. The links here might be a good starting point if you wanted to rewrite histories of your\noverweight repos:</p>\n\n<ul>\n  <li><a href=\"https://www.youtube.com/watch?v=bk7akV8nyAM\">GitHub Universe Workshops</a> and corresponding\n<a href=\"https://github.com/githubuniverseworkshops/grafting-monorepos\">repository</a></li>\n  <li><a href=\"https://github.com/github/git-sizer\">git-sizer</a></li>\n  <li><a href=\"https://github.com/newren/git-filter-repo\">git filter-repo</a></li>\n</ul>\n\n<p>When creating a plan for the rewrite, remember to have a checklist that you can use to verify outcomes and to remember\nall the steps involved in the process. If the repository migration from one provider to another hosting provider is\nrequired execute it together with the history rewrite. Plan the rewrite for a time that folks would not want to\npush code to the repo. We used Friday evening, and yes, we had to fix some issues over the weekend - not everything\nwent smoothly.</p>\n\n<p>You can have a copy of your old repository in READ-ONLY mode on the servers - it will serve as a <strong>backup</strong> and will\ncontain the actual history.</p>\n","contentSnippet":"The source code of Allegro iOS app for buyers used to be divided into separate modules hosted in multiple repositories\n(polyrepo). The\nsource code was migrated to a monorepo a few years back along with the history of all repos that constituted the app.\nUpdating source code of a module on one repository could affect another module hosted on a separate repository.\nVersioning modules and propagation of dependency update led to long release process of the entire application.\nOur main\nrepository for the iOS application thus became our monorepo. After 9 years of development of the app the repo size has\ngrown\nenormously and the git clone command became a nightmare taking too much time. We had a possibility to shrink the\nproject size during the\nmigration from an on-premise to an external git repo hosting provider.\nMonorepo scale\nGeneral repo scale\nThe General scale of our old repository was as follows:\nalmost 9 years of history with 91k + commits\n440k BLOBs were stored in the repo: multiple .png and\n.jpeg files, 3rd-party frameworks and toolset binaries. The unpacked size of the BLOBs would add up to 36 GB and\nthe biggest BLOB stored was 100+ MB\n680k git tree objects\nthe unpacked repo size on the main development branch was 8+ GB where the .git dir size after a clone was\n7+ GB. The .git directory contained compressed .png (4.5+ GB 🤯) and .pbxproj (600+ MB) files\nNew repo scale\nAfter the migration and history rewrite we shrank the repo size to:\n71k + commits\n230k BLOBs, where all BLOBs unpacked would add up to\n1.6 GB - this\nnumber also includes size of source code files, whereas assets and binaries were migrated to an external storage\n455k+ git tree objects\nHow did we do it?\nThe history-rewrite process required proper planning and a few steps:\nAnalysis of the old repo contents and its history\nCreating a reproducible procedure for the history rewrite\nDry running the procedure to test out the process\nPlanning and scheduling activities necessary to migrate the repo\nProper communication about the process to stakeholders (a.k.a. developers 👩‍💻👨‍💻)\nThe actual migration\nThe repo analysis\nGoals:\nfind items that can be removed from the history\nselect items that can be migrated to an external storage\nWe used tools such as git-sizer and\ngit-filter-repo tool to\nget information about types of files stored in the repository. If you wanted to do the same the workshops from\nGitHub Universe and\nthe scripts introduced there might be a good\nstarting point.\nFrom the analysis we were able to select the following items for complete removal from the history:\ndeleted dirs and files\nunwanted paths: e.g. Pods/, invalid symlinks causing deep nesting of paths\nunwanted history of paths: e.g. Vendor for storing 3rd party dependencies or Toolset with binaries\nunwanted files: .e.g .pbxproj that can be generated by XcodeGen and their\nhistory is meaningless (600+ MB savings in our case), history of BLOB files such as .jpg, .png, .a,\n.dylib, .pdf, .zip, .mp4, .json\nWe decided to track BLOBs using Git LFS (Large File Storage). In our case the\nfollowing were a good use case for it:\nlarge binary files .jpg, .png, .a, .dylib, .pdf, .zip, .mp4, .json\nframework binaries\ntoolset binaries\nReproducible procedure and dry runs\nWe created a script that contained all commands that removed redundant items from the history. To remove items we used\ngit filter-repo - it‘s much more performant than git‘s built-in\n git filter-branch (do not use it!). Some examples of usage:\n\ngit filter-repo --invert-paths --path Pods/ --force\ngit filter-repo --invert-paths --paths-from-file remove.txt --force\ngit filter-repo --invert-paths --path-glob '*.pbxproj' --force\n\n\n\nAfter the removal we restored the most-recent version of binaries, frameworks and BLOBs to the repo and we tracked them\nwith Git LFS:\n\ngit lfs track \"*.png\"\ngit lfs track \"Vendor/SomeSDK/SomeSDK.framework/SomeSDK\"\n\n\n\nWe ran the script a few times to verify the output size of the repo. One crucial aspect after the run was to verify\nthat all plans on the CI (Continuous Integration) pass - we did it to check that the app still compiles, tests pass\nand no more files that the ones we had wanted were actually deleted.\nCommunication\nThe crucial aspect of introducing any change is communication. It‘s good to prepare it in advance, have team members\nreview it. We used a few channels so that our devs would get important info about the migration and history rewrite\nthrough the channel that suited their working habits best (e-mails, instant messaging tool, dev forums).\nSome final thoughts\nIt took a large amount of time to prepare the migration, understand the history of the repository and select proper\nitems and\nstrategies for the migration. The links here might be a good starting point if you wanted to rewrite histories of your\noverweight repos:\nGitHub Universe Workshops and corresponding\nrepository\ngit-sizer\ngit filter-repo\nWhen creating a plan for the rewrite, remember to have a checklist that you can use to verify outcomes and to remember\nall the steps involved in the process. If the repository migration from one provider to another hosting provider is\nrequired execute it together with the history rewrite. Plan the rewrite for a time that folks would not want to\npush code to the repo. We used Friday evening, and yes, we had to fix some issues over the weekend - not everything\nwent smoothly.\nYou can have a copy of your old repository in READ-ONLY mode on the servers - it will serve as a backup and will\ncontain the actual history.","guid":"https://blog.allegro.tech/2022/01/shrinking-size-of-monorepo.html","categories":["tech","ios","git","mobile","swift","objectivec"],"isoDate":"2022-01-11T23:00:00.000Z","thumbnail":"images/post-headers/ios.png"}],"jobs":[{"id":"743999785422127","name":"Research Engineer - Machine Learning (Reinforcement Learning)","uuid":"229d607a-333b-431b-9abe-78137730f5fd","refNumber":"REF2881V","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-11-08T09:56:17.000Z","location":{"city":"Warszawa, Kraków, Poznań, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"606235fe248e6f5bea0815ed","fieldLabel":"Katowice","valueId":"185eb5a9-b884-4ee8-8ebc-0e5f3e852b27","valueLabel":"Tak"},{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"606235bcefbac7156d6a470a","fieldLabel":"Łódź","valueId":"7d33e23d-3fa7-4d7d-86ae-7d7caff54fa9","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"6165609ee6b46b6506c66b63","fieldLabel":"Gdańsk","valueId":"cde0f8e7-5c9d-4d78-9f5c-e1c17ee499a8","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"61656102a169ed164d546c31","fieldLabel":"Lublin","valueId":"02d54f00-48b9-4669-b7b3-10c16ac4bada","valueLabel":"Tak"},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, Machine Learning, Python, Deep Learning, AI, Artificial Intelligence"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999785422127","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999785421861","name":"Research Engineer - Machine Learning (Ranking and Recommendations)","uuid":"a6b2b59e-28e3-4bfa-89ab-b13ab97f06c8","refNumber":"REF2990T","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-11-08T09:54:52.000Z","location":{"city":"Warszawa, Poznań, Kraków, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"b8a4596e-d9ce-42bb-8de5-10995e9ccf99","valueLabel":"IT - Machine Learning"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, AI, Ranking, Research, Machine Learning"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999785421861","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999779448775","name":"Research Engineer - Machine Learning (Reinforcement Learning)","uuid":"c8e577cc-c93a-43e7-8e73-e430989798d7","refNumber":"REF2881V","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-10-14T10:29:36.000Z","location":{"city":"Warszawa, Kraków, Poznań, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"606235fe248e6f5bea0815ed","fieldLabel":"Katowice","valueId":"185eb5a9-b884-4ee8-8ebc-0e5f3e852b27","valueLabel":"Tak"},{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"606235bcefbac7156d6a470a","fieldLabel":"Łódź","valueId":"7d33e23d-3fa7-4d7d-86ae-7d7caff54fa9","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"6165609ee6b46b6506c66b63","fieldLabel":"Gdańsk","valueId":"cde0f8e7-5c9d-4d78-9f5c-e1c17ee499a8","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"61656102a169ed164d546c31","fieldLabel":"Lublin","valueId":"02d54f00-48b9-4669-b7b3-10c16ac4bada","valueLabel":"Tak"},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, Machine Learning, Python, Deep Learning, AI, Artificial Intelligence"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999779448775","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999779448676","name":"Research Engineer - Machine Learning (Ranking and Recommendations)","uuid":"7cb35dfc-f53c-4b51-81ac-61b683060f4c","refNumber":"REF2990T","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-10-14T10:29:00.000Z","location":{"city":"Warszawa, Poznań, Kraków, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"b8a4596e-d9ce-42bb-8de5-10995e9ccf99","valueLabel":"IT - Machine Learning"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, AI, Ranking, Research, Machine Learning"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999779448676","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999777347284","name":"Team Leader (Java/Kotlin) - Consumer Technology Experience","uuid":"c9925a03-d2ab-4d63-804e-0c06f0b0e87a","refNumber":"REF2902G","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-10-04T08:03:28.000Z","location":{"city":"Warszawa, Kraków, Poznań","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"executive","label":"Executive"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"a6765624-e047-4a26-9481-9621086d8b96","valueLabel":"Nie"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"31873284-1e97-427d-8918-6ce504344351","valueLabel":"Nie"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999777347284","creator":{"name":"Aleksandra Sotowska"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}}],"events":[{"created":1644580206000,"duration":7200000,"id":"283913049","name":"Allegro Tech Live #25 - Przetwarzanie danych w ogromnej skali","date_in_series_pattern":false,"status":"past","time":1645722000000,"local_date":"2022-02-24","local_time":"18:00","updated":1645733471000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":104,"is_online_event":false,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/283913049/","description":"Ze względu na obecną sytuację polityczną pewnie dzisiaj wszyscy jesteśmy myślami z mieszkańcami Ukrainy, dlatego postanowiliśmy odwołać dzisiejszy Allegro Tech Live. Obiecujemy, że wrócimy z…","visibility":"public","member_pay_fee":false},{"created":1642501324000,"duration":5400000,"id":"283335598","name":"Allegro Tech Live #24 - Automatyzacja i usługi biznesowe w Allegro","date_in_series_pattern":false,"status":"past","time":1643907600000,"local_date":"2022-02-03","local_time":"18:00","updated":1643914840000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":56,"venue":{"id":26906060,"name":"Online event","repinned":false,"country":"","localized_country_name":""},"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/283335598/","description":"REJESTRACJA NA WYDARZENIE ---&gt; https://app.evenea.pl/event/allegro-tech-live-24/ Allegro Tech Live to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Kiedyś spotykaliśmy się w naszych biurach,…","how_to_find_us":"https://app.evenea.pl/event/allegro-tech-live-24/","visibility":"public","member_pay_fee":false},{"created":1638356820000,"duration":7200000,"id":"282421464","name":"Allegro Tech Labs #9 Online: System design workshop","date_in_series_pattern":false,"status":"past","time":1639501200000,"local_date":"2021-12-14","local_time":"18:00","updated":1639514166000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":62,"venue":{"id":26906060,"name":"Online event","repinned":false,"country":"","localized_country_name":""},"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/282421464/","description":"❗NA WYDARZENIE OBOWIĄZUJE REJESTRACJA: Liczba miejsc jest organiczona: https://app.evenea.pl/event/allegro-tech-labs-9/ ❗ To już druga edycja naszych warsztatów System Design Workshop! Czy chcesz poznać tajniki tworzenia systemów?…","how_to_find_us":"https://app.evenea.pl/event/allegro-tech-labs-9/","visibility":"public","member_pay_fee":false},{"created":1635344914000,"duration":7200000,"id":"281692274","name":"Allegro Tech Live #23 - Przygody backendowców w C#","date_in_series_pattern":false,"status":"past","time":1636045200000,"local_date":"2021-11-04","local_time":"18:00","updated":1636056125000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":29,"is_online_event":false,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/281692274/","description":"------ Rejestracja: https://app.evenea.pl/event/allegro-tech-live-23/------- Allegro Tech Live to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Kiedyś spotykaliśmy się w naszych biurach, a teraz…","visibility":"public","member_pay_fee":false}],"podcasts":[{"title":"S02E12 - Piotr Betkier - Rola architekta w Allegro","link":"https://podcast.allegro.tech/rola_architekta_w_allegro/","pubDate":"Wed, 16 Jun 2021 00:00:00 GMT","content":"Od kodowania do tworzenia strategii technicznej... Jak wygląda rola architekta w Allegro? Ile takich osób pracuje w naszej firmie i dlaczego ta rola jest tak różnorodna? Czym jest Andamio i jak rozwijamy naszą platformę – o tym wszystkim opowie Piotr Betkier – Inżynier, Architekt Platformy Technicznej w Allegro oraz twórca piosenek o IT :)","contentSnippet":"Od kodowania do tworzenia strategii technicznej... Jak wygląda rola architekta w Allegro? Ile takich osób pracuje w naszej firmie i dlaczego ta rola jest tak różnorodna? Czym jest Andamio i jak rozwijamy naszą platformę – o tym wszystkim opowie Piotr Betkier – Inżynier, Architekt Platformy Technicznej w Allegro oraz twórca piosenek o IT :)","guid":"https://podcast.allegro.tech/rola_architekta_w_allegro/","isoDate":"2021-06-16T00:00:00.000Z"},{"title":"S02E11 - Piotr Michoński - Infrastruktura Allegro","link":"https://podcast.allegro.tech/infrastruktura_Allegro/","pubDate":"Tue, 01 Jun 2021 00:00:00 GMT","content":"Jak jest zbudowane środowisko uruchomienia aplikacji Allegro? Jak działają serwerownie firmy i ile ich potrzeba, a które elementy Allegro działają w chmurze publicznej? Jak przebiegała transformacja w Allegro i co zmieniało się przez lata? Jak wzrost biznesu wpływa na wielkość infrastruktury i jak infrastruktura Allegro odczuła przyjście pandemii? O tym, a także o rozwoju liderów technologii w Allegro oraz o historii powstania dżingla do naszych podcastów, opowie Piotr Michoński - menadżer Zespołów tworzących infrastrukturę Allegro.","contentSnippet":"Jak jest zbudowane środowisko uruchomienia aplikacji Allegro? Jak działają serwerownie firmy i ile ich potrzeba, a które elementy Allegro działają w chmurze publicznej? Jak przebiegała transformacja w Allegro i co zmieniało się przez lata? Jak wzrost biznesu wpływa na wielkość infrastruktury i jak infrastruktura Allegro odczuła przyjście pandemii? O tym, a także o rozwoju liderów technologii w Allegro oraz o historii powstania dżingla do naszych podcastów, opowie Piotr Michoński - menadżer Zespołów tworzących infrastrukturę Allegro.","guid":"https://podcast.allegro.tech/infrastruktura_Allegro/","isoDate":"2021-06-01T00:00:00.000Z"},{"title":"S02E10 - Dariusz Eliasz - Praca architekta ekosystemu big data w Allegro","link":"https://podcast.allegro.tech/praca_architekta_ekosystemu_big_data_w_Allegro/","pubDate":"Thu, 20 May 2021 00:00:00 GMT","content":"Jak wygląda praca architekta ekosystemu big data w Allegro? Jakie zadania realizuje nasz zespół odpowiedzialny za narzędzia i infrastrukturę dla przetwarzania danych? Kiedy możemy mówić o dużych danych i ile petabajtów przetwarza Allegro? Skąd pochodzą dane Allegro i dlaczego jest ich tak dużo oraz z jakiego powodu dopiero teraz przenosimy się do chmury? O tym wszystkim opowie zdobywca statuetki Allegro Tech Hero - Dariusz Eliasz – Team Manager & Platform Architect w Allegro.","contentSnippet":"Jak wygląda praca architekta ekosystemu big data w Allegro? Jakie zadania realizuje nasz zespół odpowiedzialny za narzędzia i infrastrukturę dla przetwarzania danych? Kiedy możemy mówić o dużych danych i ile petabajtów przetwarza Allegro? Skąd pochodzą dane Allegro i dlaczego jest ich tak dużo oraz z jakiego powodu dopiero teraz przenosimy się do chmury? O tym wszystkim opowie zdobywca statuetki Allegro Tech Hero - Dariusz Eliasz – Team Manager & Platform Architect w Allegro.","guid":"https://podcast.allegro.tech/praca_architekta_ekosystemu_big_data_w_Allegro/","isoDate":"2021-05-20T00:00:00.000Z"},{"title":"S02E09 - Bartosz Gałek - Od inżyniera do lidera w Allegro","link":"https://podcast.allegro.tech/od_inzyniera_do_lidera_w_allegro/","pubDate":"Thu, 06 May 2021 00:00:00 GMT","content":"Czym jest Opbox i jakie wyzwania przed nim stoją? Jak w Allegro angażujemy się w rozwój kultury Open Source? Ile mamy projektów na GitHubie i jak świętujemy Hacktoberfest? W jaki sposób można rozwinąć się od inżyniera do lidera? Na te pytania w najnowszym Allegro Tech Podcast odpowie Bartek Gałek, Team Leader w Allegro.","contentSnippet":"Czym jest Opbox i jakie wyzwania przed nim stoją? Jak w Allegro angażujemy się w rozwój kultury Open Source? Ile mamy projektów na GitHubie i jak świętujemy Hacktoberfest? W jaki sposób można rozwinąć się od inżyniera do lidera? Na te pytania w najnowszym Allegro Tech Podcast odpowie Bartek Gałek, Team Leader w Allegro.","guid":"https://podcast.allegro.tech/od_inzyniera_do_lidera_w_allegro/","isoDate":"2021-05-06T00:00:00.000Z"}]},"__N_SSG":true}