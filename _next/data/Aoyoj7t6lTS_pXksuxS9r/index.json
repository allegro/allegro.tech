{"pageProps":{"posts":[{"title":"Unlocking Kafka's Potential: Tackling Tail Latency with eBPF","link":"https://blog.allegro.tech/2024/03/kafka-performance-analysis.html","pubDate":"Wed, 06 Mar 2024 00:00:00 +0100","authors":{"author":[{"name":["Maciej Mościcki"],"photo":["https://blog.allegro.tech/img/authors/maciej.moscicki.jpg"],"url":["https://blog.allegro.tech/authors/maciej.moscicki"]},{"name":["Piotr Rżysko"],"photo":["https://blog.allegro.tech/img/authors/piotr.rzysko.jpg"],"url":["https://blog.allegro.tech/authors/piotr.rzysko"]}]},"content":"<p>At <a href=\"https://allegro.tech\">Allegro</a>, we use <a href=\"https://kafka.apache.org/\">Kafka</a> as a backbone for asynchronous communication between microservices. With up to\n300k messages published and 1M messages consumed every second, it is a key part of our infrastructure. A few months ago, in our main Kafka cluster, we noticed\nthe following discrepancy: while median response times for <a href=\"https://developer.confluent.io/courses/architecture/broker/#inside-the-apache-kafka-broker:~:text=Client%20requests%20fall%20into%20two%20categories%3A%20produce%20requests%20and%20fetch%20requests.%20A%20produce%20request%20is%20requesting%20that%20a%20batch%20of%20data%20be%20written%20to%20a%20specified%20topic.%20A%20fetch%20request%20is%20requesting%20data%20from%20Kafka%20topics.\">produce requests</a>\nwere in single-digit milliseconds, the tail latency was much worse. Namely, the\np99 latency was up to 1 second, and the p999 latency was up to 3 seconds. This was unacceptable for a new project that we were about to start, so we\ndecided to look into this issue. In this blog post, we would like to describe our journey — how we used Kafka protocol sniffing and eBPF to identify and remove\nthe performance bottleneck.</p>\n\n<p><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/kafka-performance-analysis.png\" alt=\"Kafka Produce Latency\" /></p>\n\n<h2 id=\"the-need-for-tracing\">The Need for Tracing</h2>\n<p>Kafka brokers <a href=\"https://docs.confluent.io/platform/current/kafka/monitoring.html#localtimems\">expose various metrics</a>. From them, we were able to tell that\nproduce requests were slow for high percentiles, but we couldn’t identify the cause. System metrics were also not showing anything alarming.</p>\n\n<p>To pinpoint the underlying problem, we decided to trace individual requests. By analyzing components of Kafka involved in handling produce requests,\nwe aimed to uncover the source of the latency spikes. One way of doing that would be to fork Kafka, implement instrumentation, and deploy our custom version\nto the cluster. However, this would be very time-consuming and invasive. We decided to try an alternative approach.</p>\n\n<p>The first thing we did was finding <em>arrival</em> and <em>end</em> times for every Kafka produce request.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\"> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/request_timeline1.png\" alt=\"Timeline of Kafka produce request\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><em>Timeline of a produce request. Arrival and end times define the boundaries of the request. The components of Kafka involved in handling the request and their latencies are unknown.</em></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Kafka uses a binary protocol over TCP to send requests from producers (and consumers) to brokers. We started by capturing the network traffic on a selected\nbroker using <a href=\"https://www.tcpdump.org/\">tcpdump</a>. Then we wrote a tool for analyzing the captured packets, which enabled us to list all the request and response\ntimes. In the output, we saw a confirmation of what we already knew — there were many slow produce requests taking over a second to complete. What’s more we\nwere able to see request metadata — <em>topic name</em>, <em>partition ID</em> and <em>message ID</em> (our internal identifier included in Kafka headers):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ARRIVAL TIME  END TIME      LATENCY(ms)  MESSAGE_ID  TOPIC   PARTITION\n12:11:36.521  12:11:37.060  538          371409548   topicA  2\n12:11:36.519  12:11:37.060  540          375783615   topicB  18\n12:11:36.519  12:11:37.060  540          375783615   topicB  18\n12:11:36.555  12:11:37.061  505          371409578   topicC  7\n12:11:36.587  12:11:37.061  473          375783728   topicD  16\n12:11:36.690  12:11:37.061  370          375783907   topicB  18\n</code></pre></div></div>\n\n<p>With that extra knowledge in hand, we were ready to dig deeper.</p>\n\n<h2 id=\"dynamic-tracing\">Dynamic Tracing</h2>\n\n<p>Thanks to network traffic analysis we had arrival time, end time and metadata for each request. We then wanted to gain insights into\nwhich Kafka components were the source of latency. Since produce requests are mostly concerned with saving data,\nwe decided to instrument writes to the underlying storage.</p>\n\n<p>On Linux, Kafka uses regular files for storing data. Writes are done using ordinary <a href=\"https://man7.org/linux/man-pages/man2/write.2.html\">write system calls</a> — data is first stored in the page cache\nand then asynchronously flushed to disk. How can we trace individual file writes without modifying the source code? We can make use of <em>dynamic tracing</em>.</p>\n\n<p>What is <em>dynamic tracing</em>? In Brendan Gregg’s <em>System Performance</em>, he uses the following analogy that we really like:</p>\n\n<blockquote>\n  <p>Consider an operating system kernel: analyzing kernel internals can be like venturing into a dark room, with candles […] placed where the kernel engineers\nthought they were needed. Dynamic instrumentation is like having a flashlight that you can point anywhere.</p>\n</blockquote>\n\n<p>This basically means that it is possible to instrument arbitrary kernel code without the need to modify a user space application or the kernel itself. For\nexample, we can use dynamic tracing to instrument file system calls to check whether they are the source of latency. To do that we can make use of a technology\ncalled BPF.</p>\n\n<p>BPF (or eBPF) which stands for <em>(extended) Berkeley Packet Filter</em> is a technology with a rich history, but today it is a generic in-kernel execution\nenvironment [<em>Gregg Brendan (2020). Systems Performance: Enterprise and the Cloud, 2nd Edition</em>]. It has a wide range of applications, including networking,\nsecurity and tracing tools. eBPF programs are compiled to bytecode which is then interpreted by the Linux Kernel.</p>\n\n<p>There are a couple of well-established front-ends for eBPF, including <a href=\"https://github.com/iovisor/bcc/tree/master\">BCC</a>,\n<a href=\"https://github.com/bpftrace/bpftrace\">bpftrace</a> and <a href=\"https://github.com/libbpf/libbpf\">libbpf</a>. They can be used to write custom tracing programs, but they\nalso ship with many useful tools already implemented. One such tool is <a href=\"https://github.com/iovisor/bcc/blob/master/tools/ext4slower.py\">ext4slower</a>.\nIt allows tracing file system operations in the ext4 file system, which is the default file system for Linux.</p>\n\n<h2 id=\"tracing-kafka\">Tracing Kafka</h2>\n<p>In Kafka, every partition has its own directory, named according to the pattern: <em>topicName</em>-<em>partitionID</em>. Within each of these directories, there are segment\nfiles where messages are stored. In the figure below, we can see an example of this structure. In this scenario, the broker hosts two partitions (0 and 7)\nfor <em>topicA</em> and one partition (1) for <em>topicB</em>.</p>\n\n<p><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/kafka_directories.png\" alt=\"Kafka Partition Directories\" /></p>\n\n<p>By slightly altering the ext4slower program to include parent directories, we were able to trace Kafka file system writes. For every write with a duration\nexceeding a specified threshold, we observed the following:</p>\n<ul>\n  <li>Start time and end time</li>\n  <li>Duration</li>\n  <li>Thread ID (TID)</li>\n  <li>Number of bytes written</li>\n  <li>File offset</li>\n  <li>Topic name</li>\n  <li>Partition ID</li>\n</ul>\n\n<p>Below is an example output from the program:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>START TIME    END TIME      LATENCY  TID   BYTES  OFF_KB     FILE\n15:37:00.627  15:37:00.785  158 ms   4478  2009   88847331   topicA-0/00000000002938697123.log\n15:37:00.629  15:37:00.785  156 ms   4492  531    289315894  topicB-7/00000000001119733846.log\n15:37:00.629  15:37:00.785  156 ms   4495  815    167398027  topicC-7/00000000015588371822.log\n15:37:00.631  15:37:00.785  154 ms   4488  778    502626221  topicD-7/00000000004472160265.log\n15:37:00.644  15:37:00.785  141 ms   4486  341    340818418  topicE-7/00000000002661443174.log\n15:37:00.650  15:37:00.785  135 ms   4470  374    230883174  topicF-7/00000000006102922534.log\n15:37:00.653  15:37:00.785  132 ms   4461  374    375758631  topicF-19/00000000001555977358.log\n</code></pre></div></div>\n\n<p>This was already very helpful since we could, based on timestamp, topic and partition, correlate produce requests from the tcpdump output with writes to\nthe file system:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ARRIVAL TIME  END TIME      LATENCY  MESSAGE_ID  TOPIC   PARTITION\n15:37:00.627  15:37:00.785  158 ms   839584818   topicA  0\n15:37:00.629  15:37:00.785  156 ms   982282008   topicB  7\n15:37:00.629  15:37:00.785  156 ms   398037998   topicC  7\n15:37:00.631  15:37:00.785  154 ms   793357083   topicD  7\n15:37:00.644  15:37:00.786  141 ms   605597592   topicE  7\n15:37:00.649  15:37:00.785  136 ms   471986034   topicF  7\n15:37:00.653  15:37:00.786  132 ms   190735697   topicF  19\n</code></pre></div></div>\n\n<p>To gain extra confidence, we wrote a tool that parses a Kafka log file, reads the records written to it (using file offset and number of bytes written),\nparses them, and returns their <em>message IDs</em>. With that, we were able to perfectly correlate incoming requests with their respective writes:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>START TIME    END TIME      LATENCY  MESSAGE_ID  FILE                                TOPIC   PARTITION  BYTES  OFF_KB\n15:37:00.627  15:37:00.785  158 ms   839584818   topicA-0/00000000002938697123.log   topicA  0          2009   88847331\n15:37:00.629  15:37:00.785  156 ms   982282008   topicB-7/00000000001119733846.log   topicB  7          531    289315894\n15:37:00.629  15:37:00.785  156 ms   398037998   topicC-7/00000000015588371822.log   topicC  7          815    167398027\n15:37:00.631  15:37:00.785  154 ms   793357083   topicD-7/00000000004472160265.log   topicD  7          778    502626221\n15:37:00.644  15:37:00.786  141 ms   605597592   topicE-7/00000000002661443174.log   topicE  7          341    340818418\n15:37:00.649  15:37:00.785  136 ms   471986034   topicF-7/00000000006102922534.log   topicF  7          374    230883174\n15:37:00.653  15:37:00.786  132 ms   190735697   topicF-19/00000000001555977358.log  topicF  19         374    375758631\n</code></pre></div></div>\n\n<p>From the analysis, we were able to tell that <strong>there were many slow produce requests that spent all of their time waiting for the file system write to\ncomplete.</strong></p>\n\n<p><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/timeline_slow_write.png\" alt=\"Request Timeline with Slow Write\" /></p>\n\n<p>There were however requests that didn’t have corresponding slow writes.</p>\n\n<p><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/timeline_fast_write.png\" alt=\"Request Timeline with Fast Write\" /></p>\n\n<h2 id=\"kafka-lock-contention\">Kafka Lock Contention</h2>\n<p>Slow produce requests without corresponding slow writes were always occurring around the time of some other slow write. We started wondering whether those\nrequests were perhaps queuing and waiting for something to finish. By analyzing Kafka source code, we identified a couple of places that use <em>synchronized</em>\nblocks, including those guarding log file writes.</p>\n\n<p>We set out to measure how much time Kafka’s threads, processing produce requests, spend on the aforementioned locks. Our goal was to correlate periods when\nthey were waiting on locks with writes to the file system. We considered two approaches to do that.</p>\n\n<p>The first one was to use tracing again, and perhaps combine its results with the tool we already had for tracing the ext4 file system.\nLooking at the JDK source code we were not able to identify a connection between <em>synchronized</em> blocks and traceable kernel routines. Instead, we learned that\nJVM ships with predefined DTrace tracepoints (DTrace can be thought of as a predecessor of eBPF). These tracepoints include <em>hotspot:monitor__contended__enter</em>\nand <em>hotspot:monitor__contended__entered</em>, which monitor when a thread begins waiting on a contended lock and when it finally enters it. By running Kafka\nwith the <em>-XX:+DTraceMonitorProbes</em> VM option and attaching to these tracepoints we were able to see monitor wait times for a given thread.</p>\n\n<p>Another approach we came up with was to capture states of Kafka’s threads by running <a href=\"https://github.com/async-profiler/async-profiler\">async-profiler</a>\nalongside the ext4 tracing script. We would then analyze results from both tools and correlate their outputs.</p>\n\n<p>After experimenting with both ideas, we ultimately chose to stick with async-profiler. It provided a clean visualization of thread states and offered more\ninsights into JVM-specific properties of threads.</p>\n\n<p>Now, let’s delve into how we analyzed a situation when a latency spike occurred, based on an example async-profiler recording, eBPF traces, and parsed\ntcpdump output. For brevity, we’ll focus on one Kafka topic.</p>\n\n<p>By capturing network traffic on a broker, we were able to see that there were four slow produce requests to the selected topic:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ARRIVAL TIME  END TIME      LATENCY  MESSAGE_ID  TOPIC   PARTITION\n17:58:00.644  17:58:00.770  126 ms   75567596    topicF  6\n17:58:00.651  17:58:00.770  119 ms   33561917    topicF  6\n17:58:00.655  17:58:00.775  119 ms   20422312    topicF  6\n17:58:00.661  17:58:00.776  114 ms   18658935    topicF  6\n</code></pre></div></div>\n\n<p>However, there was only one slow file system write for that topic:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>START TIME    END TIME      LATENCY  TID   BYTES  OFF_KB     FILE\n17:58:00.643  17:58:00.769  126 ms   4462  498    167428091  topicF-6/00000000000966764382.log\n</code></pre></div></div>\n\n<p>All other writes to that topic were fast at that time:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>START TIME    END TIME      LATENCY  TID   BYTES  OFF_KB     FILE\n17:58:00.770  17:58:00.770  0 ms     4484  798    167451825  topicF-6/00000000000966764382.log\n17:58:00.775  17:58:00.775  0 ms     4499  14410  167437415  topicF-6/00000000000966764382.log\n17:58:00.776  17:58:00.776  0 ms     4467  1138   167436277  topicF-6/00000000000966764382.log\n</code></pre></div></div>\n\n<p>We knew that one of the fast writes was performed from a thread with ID 4484. From a thread dump, we extracted thread names and Native IDs (NIDs).\nKnowing that NIDs translate directly to Linux TIDs (thread IDs), we found a thread with NID 0x1184 (decimal: 4484). We determined that the name of\nthis thread was <em>data-plane-kafka-request-handler-24</em>.</p>\n\n<p>We searched for this thread’s activity in the async-profiler output:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\"> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/locks.png\" alt=\"Async profiler output visualized in Java Mission Control\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><em>Async profiler output visualized in Java Mission Control. Thread with TID 4484 is blocked on a monitor.</em></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>In the output, we saw what we suspected — a thread was waiting on a lock for approximately the same duration as the slow write occurring on another thread.\nThis confirmed our initial hypothesis.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\"> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/timeline_lock.png\" alt=\"For a slow request with fast file system writes, waiting to obtain a lock turned out to be the source of latency\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><em>For a slow request with fast file system writes, waiting to acquire a lock turned out to be the source of latency.</em></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Applying this technique, we analyzed numerous cases, and the results were consistent: <strong>for a slow produce request there was either a matching slow write or a\nthread was waiting to acquire a lock guarding access to a log file</strong>. We confirmed that file system writes were the root cause of slow produce requests.</p>\n\n<h2 id=\"tracing-the-file-system\">Tracing the File System</h2>\n<p>Our original eBPF script traced only calls to the <a href=\"https://elixir.bootlin.com/linux/v5.15.91/source/fs/ext4/file.c#L673\">ext4_file_write_iter</a> function.\nWhile this was sufficient to roughly determine that slow writes to the file system were causing the latency spikes, it was not enough to pinpoint which\nparameters of the file system needed tuning. To address this, we captured both <a href=\"https://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html\">on-CPU</a>\nand <a href=\"https://www.brendangregg.com/offcpuanalysis.html\">off-CPU</a> profiles of <em>ext4_file_write_iter</em>, using\n<a href=\"https://github.com/iovisor/bcc/blob/master/tools/profile.py\">profile</a> and <a href=\"https://github.com/iovisor/bcc/blob/master/tools/offcputime.py\">offcputime</a>,\nrespectively. Our goal was to identify the activated paths in the kernel and then measure the latency of functions associated with them.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\"> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/on_cpu.png\" alt=\"on-CPU profile of ext4_file_write_iter\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><em>on-CPU profile of ext4_file_write_iter</em></td>\n    </tr>\n  </tbody>\n</table>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\"> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/off_cpu.png\" alt=\"off-CPU profile of ext4_file_write_iter\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><em>off-CPU profile of ext4_file_write_iter</em></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>We noticed that the function <a href=\"https://elixir.bootlin.com/linux/v5.15.91/source/fs/ext4/inode.c#L5971\">ext4_dirty_inode</a> [1] was present in both flamegraphs.\nIn the Linux kernel, the <em>ext4_dirty_inode</em> function is responsible for marking an inode (file or directory data structure) as being in a dirty state. A <em>dirty</em>\ninode indicates that the corresponding file’s data or metadata has been modified and needs to be synchronized with the underlying storage device, typically a\ndisk, to ensure data consistency.</p>\n\n<p>What caught our attention in the off-CPU profile was the <a href=\"https://elixir.bootlin.com/linux/v5.15.91/source/fs/jbd2/transaction.c#L490\">jbd2__journal_start</a>\n[2] function which is part of a journaling mechanism employed in ext4 that ensures data integrity and reliability. Journaling in ext4 involves maintaining a\ndetailed log that records the changes before they are committed to the file system. This log, often referred to as the <em>journal</em>, serves as a safety net in the\nevent of an unexpected system crash or power failure. When a file system operation occurs, such as creating, modifying, or deleting a file, ext4 first records\nthis change in the journal. Subsequently, the actual file system structures are updated. The process of updating the file system is known as <em>committing</em> the\njournal. During a commit, the changes recorded in the journal are applied to the file system structures in a controlled and atomic manner. In the event of an\ninterruption, the file system can recover quickly by replaying the journal, ensuring that it reflects the consistent state of the file system.</p>\n\n<p>As seen in the figure with the off-CPU profile, <a href=\"https://elixir.bootlin.com/linux/v5.15/source/fs/jbd2/transaction.c#L169\">wait_transaction_locked</a> [3] is the\nfunction executed before voluntarily yielding the processor, allowing the scheduler to select and switch to a different process or thread ready to run\n(<a href=\"https://elixir.bootlin.com/linux/v5.15/source/kernel/sched/core.c#L6359\">schedule()</a>). Guided by the comment above the <em>wait_transaction_locked</em> function:</p>\n\n<blockquote>\n  <p>Wait until running transaction passes to T_FLUSH state and new transaction can thus be started. Also starts the commit if needed. The function expects running\ntransaction to exist and releases j_state_lock.</p>\n</blockquote>\n\n<p>We searched the kernel code to identify what sets the <em>T_FLUSH</em> flag. The only place that we discovered was within the\n<a href=\"https://elixir.bootlin.com/linux/v5.15/source/fs/jbd2/commit.c#L381\">jbd2_journal_commit_transaction</a> function executed periodically by a kernel journal\nthread. Consequently, we decided to trace this function to explore any correlation between its latency and the latency of <em>ext4_dirty_inode</em>. The obtained\nresults aligned precisely with our expectations – namely, <strong>a high latency in  <em>jbd2_journal_commit_transaction</em> translates to a high latency in\n<em>ext4_dirty_inode</em>.</strong> The details of our findings are presented below:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>START TIME    END TIME      LATENCY  FUNCTION\n19:35:24.503  19:35:24.680  176 ms   jbd2_journal_commit_transaction\n19:35:24.507  19:35:24.648  141 ms   ext4_dirty_inode\n19:35:24.508  19:35:24.648  139 ms   ext4_dirty_inode\n19:35:24.514  19:35:24.648  134 ms   ext4_dirty_inode\n...\n19:38:14.508  19:38:14.929  420 ms   jbd2_journal_commit_transaction\n19:38:14.511  19:38:14.868  357 ms   ext4_dirty_inode\n19:38:14.511  19:38:14.868  357 ms   ext4_dirty_inode\n19:38:14.512  19:38:14.868  356 ms   ext4_dirty_inode\n...\n19:48:39.475  19:48:40.808  1332 ms  jbd2_journal_commit_transaction\n19:48:39.477  19:48:40.757  1280 ms  ext4_dirty_inode\n19:48:39.487  19:48:40.757  1270 ms  ext4_dirty_inode\n19:48:39.543  19:48:40.757  1213 ms  ext4_dirty_inode\n...\n</code></pre></div></div>\n\n<h2 id=\"ext4-improvements-monitoring\">ext4 Improvements Monitoring</h2>\n<p>Having identified journal commits as the cause of slow writes, we started thinking how to alleviate the problem. We had a few ideas, but we were wondering how\nwe would be able to observe improvements.  Up until that point, we relied on command-line tools and analyzing their output for short time ranges. We wanted\nto be able to observe the impact of our optimizations over longer periods.</p>\n\n<p>To report traced functions latency over long periods, we used <a href=\"https://github.com/cloudflare/ebpf_exporter\">ebpf_exporter</a>, a tool that exposes eBPF-based\nmetrics in Prometheus format. We were then able to visualize traces in Grafana. For example, maximum ext4 write latency for a given broker:</p>\n\n<p><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/base_max_write_iter.png\" alt=\"Base ext4 Latency\" /></p>\n\n<p>With that, we were able to run brokers with different configurations and observe their write latency over time.</p>\n\n<h2 id=\"ext4-improvements\">ext4 Improvements</h2>\n<p>Let’s go back to ext4. We knew that journal commits were the source of latency. By studying ext4 documentation, we identified a few possible solutions for\nimproving the performance:</p>\n<ol>\n  <li>Disabling journaling</li>\n  <li>Decreasing the commit interval</li>\n  <li>Changing the journaling mode from <code class=\"language-plaintext highlighter-rouge\">data=ordered</code> to <code class=\"language-plaintext highlighter-rouge\">data=writeback</code></li>\n  <li>Enabling fast commits</li>\n</ol>\n\n<p>Let’s discuss each of them.</p>\n\n<h3 id=\"disabling-journaling\">Disabling Journaling</h3>\n<p>If journaling is the source of high latency, why not disable it completely? Well, it turns out that journaling is there for a reason. Without journaling, we\nwould risk long recovery in case of a crash. Thus, we quickly ruled out this solution.</p>\n\n<h3 id=\"decreasing-the-commit-interval\">Decreasing the Commit Interval</h3>\n<p>ext4 has the <em>commit</em> mount parameter which tells how often to perform commits. It has the default value of 5 seconds. According to the ext4 documentation:</p>\n\n<blockquote>\n  <p>This default value (or any low value) will hurt performance, but it’s good for data-safety. […] Setting it to very large values will improve performance.</p>\n</blockquote>\n\n<p>However, instead of increasing the value we decided to decrease it. Why? Our intuition was that by performing commits more frequently we would make them\n“lighter” which would make them faster. We would trade throughput for lower latency. We experimented with <code class=\"language-plaintext highlighter-rouge\">commit=1</code>, and <code class=\"language-plaintext highlighter-rouge\">commit=3</code> but observed no\nsignificant differences.</p>\n\n<h3 id=\"changing-the-journaling-mode-from-dataordered-to-datawriteback\">Changing the Journaling Mode from data=ordered to data=writeback</h3>\n<p>ext4 offers three journaling modes: <em>journal</em>, <em>ordered</em> and <em>writeback</em>. The default mode is <em>ordered</em> and compared to the most performant mode, <em>writeback</em>,\nit guarantees that the data is written to the main file system prior to the metadata being committed to the journal. As mentioned in\n<a href=\"https://kafka.apache.org/documentation/#ext4\">docs</a>, Kafka does not rely on this property, so switching the mode to <em>writeback</em> should reduce latency.</p>\n\n<p><strong>We switched the journaling mode on one of the brokers, and indeed, we observed latency improvements:</strong></p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\"> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/base_p999_2.png\" alt=\"Base Produce Latency\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/writeback_p999_2.png\" alt=\"Writeback Produce Latency\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><em>With data=writeback, p999 decreased from 3 seconds to 800 milliseconds.</em></td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"enabling-fast-commit\">Enabling Fast Commit</h3>\n<p>When reading about ext4 journaling, we stumbled upon an <a href=\"https://lwn.net/Articles/842385/\">article</a> describing a new feature introduced in Linux 5.10 called\n<em>fast commits</em>. As explained in the article, <em>fast commit</em> is a lighter-weight journaling method that could result in performance boost for certain workloads.</p>\n\n<p>We enabled <em>fast commit</em> on one of the brokers. <strong>We noticed that max write latency decreased significantly.</strong> Diving deeper we found out that on a broker with\n<em>fast commit</em> enabled:</p>\n<ul>\n  <li>The latency of <em>jdb2_journal_commit_transaction</em> decreased by an order of magnitude. This meant that periodic journal commits were indeed much faster\nthanks to enabling <em>fast commits</em>.</li>\n  <li>Slow ext4 writes occurred at the same time when there was a spike in latency of <em>jbd2_fc_begin_commit</em>. This method is part of the <em>fast commit</em> flow. It\nbecame the new source of latency but its maximum latency was lower than that of <em>jdb2_journal_commit_transaction</em> without fast commits.</li>\n</ul>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\"> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/write_iter_heatmap.png\" alt=\"Comparison of maximum latency [s] of ext4 writes for brokers without and with fast commit.\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><em>Comparison of maximum latency [s] of ext4 writes for brokers without and with fast commit.</em></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Lower file system write latency, in turn, resulted in reduced produce latency:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\"> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/base_p999_2.png\" alt=\"Base Produce Latency\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/fc_p999_2.png\" alt=\"Fast Commit Produce Latency\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><em>With fast commit enabled, produce P999 latency went down from 3 seconds to 500 milliseconds</em></td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"summary\">Summary</h3>\n<p>To summarize, we’ve tested the following ext4 optimizations:</p>\n<ul>\n  <li>Decreasing the commit interval</li>\n  <li>Changing the journaling mode to <code class=\"language-plaintext highlighter-rouge\">data=writeback</code></li>\n  <li>Enabling <code class=\"language-plaintext highlighter-rouge\">fast commit</code></li>\n</ul>\n\n<p>We observed that both <code class=\"language-plaintext highlighter-rouge\">data=writeback</code> and <code class=\"language-plaintext highlighter-rouge\">fast commit</code> significantly reduced latency, with <code class=\"language-plaintext highlighter-rouge\">fast commit</code> having slightly lower latency. The results were\npromising, but we had higher hopes. Thankfully, we had one more idea left.</p>\n\n<h2 id=\"xfs\">XFS</h2>\n<p>While researching the topic of journaling in ext4, we stumbled upon a few sources suggesting that the XFS file system, with its more advanced journaling,\nis well-suited for handling large files and high-throughput workloads, often outperforming ext4 in such scenarios. Kafka documentation also mentions that XFS\nhas a lot of tuning already in place and should be a better fit than the default ext4.</p>\n\n<p>We migrated one of the brokers to the XFS file system. The results were impressive. The thing that was very distinctive compared to the aforementioned ext4\noptimizations was the consistency of XFS performance. While other broker configurations experienced p999 latency spikes throughout the day, XFS – with its default configuration – had only a\nfew hiccups.</p>\n\n<p><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/base_p999_2.png\" alt=\"Base Produce Latency\" />\n<img src=\"/img/articles/2024-03-06-kafka-performance-analysis/xfs_p999_2.png\" alt=\"Produce Latency XFS\" /></p>\n\n<p>After a couple of weeks of testing, we were confident that XFS was the best choice. Consequently, we migrated all our brokers from ext4 to XFS.</p>\n\n<h2 id=\"summary-1\">Summary</h2>\n<p>Using a combination of packet sniffing, eBPF, and async-profiler we managed to identify the root cause of slow produce requests in our Kafka cluster. We\nthen tested a couple of solutions to the problem: <code class=\"language-plaintext highlighter-rouge\">data=writeback</code> journaling mode, <code class=\"language-plaintext highlighter-rouge\">fast commits</code>, and changing the file system to XFS. The results of these\noptimizations are visualized in the heatmap below:</p>\n\n<p><img src=\"/img/articles/2024-03-06-kafka-performance-analysis/heatmap_p999.png\" alt=\"Produce Latency Heatmap\" /></p>\n\n<p>Ultimately, we found XFS to be the most performant and rolled it out to all of our brokers. <strong>With XFS, the number of produce requests exceeding 65ms (our SLO)\nwas lowered by 82%.</strong></p>\n\n<p>Here are some of the lessons we learned along the way:</p>\n<ul>\n  <li>eBPF was extremely useful during the analysis. It was straightforward to utilize one of the pre-existing tools from bcc or bpftrace. We were also able to\neasily modify them for our custom use cases.</li>\n  <li>ebpf_exporter is a great tool for observing trace results over longer periods of time. It allows to expose Prometheus metrics based on libbpf programs.</li>\n  <li>p99 and p999 analysis is sometimes not enough. In our case, the p999 latency of file system writes was less than 1ms. It turned out that a single slow write\ncould cause lock contention and a cascade of slow requests. Without tracing individual requests, the root cause would have been very hard to catch.</li>\n</ul>\n\n<p>We hope that you found this blog post useful, and we wish you good luck in your future performance analysis endeavors!</p>\n\n<style>\n  .post-content table, .post-content td, .post-content th {\n    border: none;\n    background-color: transparent;\n}\n\n.post-content th {\n    display: none;\n}\n\n.post-content td {\n    padding: 0;\n}\n\n</style>\n\n","contentSnippet":"At Allegro, we use Kafka as a backbone for asynchronous communication between microservices. With up to\n300k messages published and 1M messages consumed every second, it is a key part of our infrastructure. A few months ago, in our main Kafka cluster, we noticed\nthe following discrepancy: while median response times for produce requests\nwere in single-digit milliseconds, the tail latency was much worse. Namely, the\np99 latency was up to 1 second, and the p999 latency was up to 3 seconds. This was unacceptable for a new project that we were about to start, so we\ndecided to look into this issue. In this blog post, we would like to describe our journey — how we used Kafka protocol sniffing and eBPF to identify and remove\nthe performance bottleneck.\n\nThe Need for Tracing\nKafka brokers expose various metrics. From them, we were able to tell that\nproduce requests were slow for high percentiles, but we couldn’t identify the cause. System metrics were also not showing anything alarming.\nTo pinpoint the underlying problem, we decided to trace individual requests. By analyzing components of Kafka involved in handling produce requests,\nwe aimed to uncover the source of the latency spikes. One way of doing that would be to fork Kafka, implement instrumentation, and deploy our custom version\nto the cluster. However, this would be very time-consuming and invasive. We decided to try an alternative approach.\nThe first thing we did was finding arrival and end times for every Kafka produce request.\n \n    \n\n    \nTimeline of a produce request. Arrival and end times define the boundaries of the request. The components of Kafka involved in handling the request and their latencies are unknown.\n    \nKafka uses a binary protocol over TCP to send requests from producers (and consumers) to brokers. We started by capturing the network traffic on a selected\nbroker using tcpdump. Then we wrote a tool for analyzing the captured packets, which enabled us to list all the request and response\ntimes. In the output, we saw a confirmation of what we already knew — there were many slow produce requests taking over a second to complete. What’s more we\nwere able to see request metadata — topic name, partition ID and message ID (our internal identifier included in Kafka headers):\n\nARRIVAL TIME  END TIME      LATENCY(ms)  MESSAGE_ID  TOPIC   PARTITION\n12:11:36.521  12:11:37.060  538          371409548   topicA  2\n12:11:36.519  12:11:37.060  540          375783615   topicB  18\n12:11:36.519  12:11:37.060  540          375783615   topicB  18\n12:11:36.555  12:11:37.061  505          371409578   topicC  7\n12:11:36.587  12:11:37.061  473          375783728   topicD  16\n12:11:36.690  12:11:37.061  370          375783907   topicB  18\n\n\nWith that extra knowledge in hand, we were ready to dig deeper.\nDynamic Tracing\nThanks to network traffic analysis we had arrival time, end time and metadata for each request. We then wanted to gain insights into\nwhich Kafka components were the source of latency. Since produce requests are mostly concerned with saving data,\nwe decided to instrument writes to the underlying storage.\nOn Linux, Kafka uses regular files for storing data. Writes are done using ordinary write system calls — data is first stored in the page cache\nand then asynchronously flushed to disk. How can we trace individual file writes without modifying the source code? We can make use of dynamic tracing.\nWhat is dynamic tracing? In Brendan Gregg’s System Performance, he uses the following analogy that we really like:\nConsider an operating system kernel: analyzing kernel internals can be like venturing into a dark room, with candles […] placed where the kernel engineers\nthought they were needed. Dynamic instrumentation is like having a flashlight that you can point anywhere.\nThis basically means that it is possible to instrument arbitrary kernel code without the need to modify a user space application or the kernel itself. For\nexample, we can use dynamic tracing to instrument file system calls to check whether they are the source of latency. To do that we can make use of a technology\ncalled BPF.\nBPF (or eBPF) which stands for (extended) Berkeley Packet Filter is a technology with a rich history, but today it is a generic in-kernel execution\nenvironment [Gregg Brendan (2020). Systems Performance: Enterprise and the Cloud, 2nd Edition]. It has a wide range of applications, including networking,\nsecurity and tracing tools. eBPF programs are compiled to bytecode which is then interpreted by the Linux Kernel.\nThere are a couple of well-established front-ends for eBPF, including BCC,\nbpftrace and libbpf. They can be used to write custom tracing programs, but they\nalso ship with many useful tools already implemented. One such tool is ext4slower.\nIt allows tracing file system operations in the ext4 file system, which is the default file system for Linux.\nTracing Kafka\nIn Kafka, every partition has its own directory, named according to the pattern: topicName-partitionID. Within each of these directories, there are segment\nfiles where messages are stored. In the figure below, we can see an example of this structure. In this scenario, the broker hosts two partitions (0 and 7)\nfor topicA and one partition (1) for topicB.\n\nBy slightly altering the ext4slower program to include parent directories, we were able to trace Kafka file system writes. For every write with a duration\nexceeding a specified threshold, we observed the following:\nStart time and end time\nDuration\nThread ID (TID)\nNumber of bytes written\nFile offset\nTopic name\nPartition ID\nBelow is an example output from the program:\n\nSTART TIME    END TIME      LATENCY  TID   BYTES  OFF_KB     FILE\n15:37:00.627  15:37:00.785  158 ms   4478  2009   88847331   topicA-0/00000000002938697123.log\n15:37:00.629  15:37:00.785  156 ms   4492  531    289315894  topicB-7/00000000001119733846.log\n15:37:00.629  15:37:00.785  156 ms   4495  815    167398027  topicC-7/00000000015588371822.log\n15:37:00.631  15:37:00.785  154 ms   4488  778    502626221  topicD-7/00000000004472160265.log\n15:37:00.644  15:37:00.785  141 ms   4486  341    340818418  topicE-7/00000000002661443174.log\n15:37:00.650  15:37:00.785  135 ms   4470  374    230883174  topicF-7/00000000006102922534.log\n15:37:00.653  15:37:00.785  132 ms   4461  374    375758631  topicF-19/00000000001555977358.log\n\n\nThis was already very helpful since we could, based on timestamp, topic and partition, correlate produce requests from the tcpdump output with writes to\nthe file system:\n\nARRIVAL TIME  END TIME      LATENCY  MESSAGE_ID  TOPIC   PARTITION\n15:37:00.627  15:37:00.785  158 ms   839584818   topicA  0\n15:37:00.629  15:37:00.785  156 ms   982282008   topicB  7\n15:37:00.629  15:37:00.785  156 ms   398037998   topicC  7\n15:37:00.631  15:37:00.785  154 ms   793357083   topicD  7\n15:37:00.644  15:37:00.786  141 ms   605597592   topicE  7\n15:37:00.649  15:37:00.785  136 ms   471986034   topicF  7\n15:37:00.653  15:37:00.786  132 ms   190735697   topicF  19\n\n\nTo gain extra confidence, we wrote a tool that parses a Kafka log file, reads the records written to it (using file offset and number of bytes written),\nparses them, and returns their message IDs. With that, we were able to perfectly correlate incoming requests with their respective writes:\n\nSTART TIME    END TIME      LATENCY  MESSAGE_ID  FILE                                TOPIC   PARTITION  BYTES  OFF_KB\n15:37:00.627  15:37:00.785  158 ms   839584818   topicA-0/00000000002938697123.log   topicA  0          2009   88847331\n15:37:00.629  15:37:00.785  156 ms   982282008   topicB-7/00000000001119733846.log   topicB  7          531    289315894\n15:37:00.629  15:37:00.785  156 ms   398037998   topicC-7/00000000015588371822.log   topicC  7          815    167398027\n15:37:00.631  15:37:00.785  154 ms   793357083   topicD-7/00000000004472160265.log   topicD  7          778    502626221\n15:37:00.644  15:37:00.786  141 ms   605597592   topicE-7/00000000002661443174.log   topicE  7          341    340818418\n15:37:00.649  15:37:00.785  136 ms   471986034   topicF-7/00000000006102922534.log   topicF  7          374    230883174\n15:37:00.653  15:37:00.786  132 ms   190735697   topicF-19/00000000001555977358.log  topicF  19         374    375758631\n\n\nFrom the analysis, we were able to tell that there were many slow produce requests that spent all of their time waiting for the file system write to\ncomplete.\n\nThere were however requests that didn’t have corresponding slow writes.\n\nKafka Lock Contention\nSlow produce requests without corresponding slow writes were always occurring around the time of some other slow write. We started wondering whether those\nrequests were perhaps queuing and waiting for something to finish. By analyzing Kafka source code, we identified a couple of places that use synchronized\nblocks, including those guarding log file writes.\nWe set out to measure how much time Kafka’s threads, processing produce requests, spend on the aforementioned locks. Our goal was to correlate periods when\nthey were waiting on locks with writes to the file system. We considered two approaches to do that.\nThe first one was to use tracing again, and perhaps combine its results with the tool we already had for tracing the ext4 file system.\nLooking at the JDK source code we were not able to identify a connection between synchronized blocks and traceable kernel routines. Instead, we learned that\nJVM ships with predefined DTrace tracepoints (DTrace can be thought of as a predecessor of eBPF). These tracepoints include hotspot:monitor__contended__enter\nand hotspot:monitor__contended__entered, which monitor when a thread begins waiting on a contended lock and when it finally enters it. By running Kafka\nwith the -XX:+DTraceMonitorProbes VM option and attaching to these tracepoints we were able to see monitor wait times for a given thread.\nAnother approach we came up with was to capture states of Kafka’s threads by running async-profiler\nalongside the ext4 tracing script. We would then analyze results from both tools and correlate their outputs.\nAfter experimenting with both ideas, we ultimately chose to stick with async-profiler. It provided a clean visualization of thread states and offered more\ninsights into JVM-specific properties of threads.\nNow, let’s delve into how we analyzed a situation when a latency spike occurred, based on an example async-profiler recording, eBPF traces, and parsed\ntcpdump output. For brevity, we’ll focus on one Kafka topic.\nBy capturing network traffic on a broker, we were able to see that there were four slow produce requests to the selected topic:\n\nARRIVAL TIME  END TIME      LATENCY  MESSAGE_ID  TOPIC   PARTITION\n17:58:00.644  17:58:00.770  126 ms   75567596    topicF  6\n17:58:00.651  17:58:00.770  119 ms   33561917    topicF  6\n17:58:00.655  17:58:00.775  119 ms   20422312    topicF  6\n17:58:00.661  17:58:00.776  114 ms   18658935    topicF  6\n\n\nHowever, there was only one slow file system write for that topic:\n\nSTART TIME    END TIME      LATENCY  TID   BYTES  OFF_KB     FILE\n17:58:00.643  17:58:00.769  126 ms   4462  498    167428091  topicF-6/00000000000966764382.log\n\n\nAll other writes to that topic were fast at that time:\n\nSTART TIME    END TIME      LATENCY  TID   BYTES  OFF_KB     FILE\n17:58:00.770  17:58:00.770  0 ms     4484  798    167451825  topicF-6/00000000000966764382.log\n17:58:00.775  17:58:00.775  0 ms     4499  14410  167437415  topicF-6/00000000000966764382.log\n17:58:00.776  17:58:00.776  0 ms     4467  1138   167436277  topicF-6/00000000000966764382.log\n\n\nWe knew that one of the fast writes was performed from a thread with ID 4484. From a thread dump, we extracted thread names and Native IDs (NIDs).\nKnowing that NIDs translate directly to Linux TIDs (thread IDs), we found a thread with NID 0x1184 (decimal: 4484). We determined that the name of\nthis thread was data-plane-kafka-request-handler-24.\nWe searched for this thread’s activity in the async-profiler output:\n \n    \n\n    \nAsync profiler output visualized in Java Mission Control. Thread with TID 4484 is blocked on a monitor.\n    \nIn the output, we saw what we suspected — a thread was waiting on a lock for approximately the same duration as the slow write occurring on another thread.\nThis confirmed our initial hypothesis.\n \n    \n\n    \nFor a slow request with fast file system writes, waiting to acquire a lock turned out to be the source of latency.\n    \nApplying this technique, we analyzed numerous cases, and the results were consistent: for a slow produce request there was either a matching slow write or a\nthread was waiting to acquire a lock guarding access to a log file. We confirmed that file system writes were the root cause of slow produce requests.\nTracing the File System\nOur original eBPF script traced only calls to the ext4_file_write_iter function.\nWhile this was sufficient to roughly determine that slow writes to the file system were causing the latency spikes, it was not enough to pinpoint which\nparameters of the file system needed tuning. To address this, we captured both on-CPU\nand off-CPU profiles of ext4_file_write_iter, using\nprofile and offcputime,\nrespectively. Our goal was to identify the activated paths in the kernel and then measure the latency of functions associated with them.\n \n    \n\n    \non-CPU profile of ext4_file_write_iter\n    \n \n    \n\n    \noff-CPU profile of ext4_file_write_iter\n    \nWe noticed that the function ext4_dirty_inode [1] was present in both flamegraphs.\nIn the Linux kernel, the ext4_dirty_inode function is responsible for marking an inode (file or directory data structure) as being in a dirty state. A dirty\ninode indicates that the corresponding file’s data or metadata has been modified and needs to be synchronized with the underlying storage device, typically a\ndisk, to ensure data consistency.\nWhat caught our attention in the off-CPU profile was the jbd2__journal_start\n[2] function which is part of a journaling mechanism employed in ext4 that ensures data integrity and reliability. Journaling in ext4 involves maintaining a\ndetailed log that records the changes before they are committed to the file system. This log, often referred to as the journal, serves as a safety net in the\nevent of an unexpected system crash or power failure. When a file system operation occurs, such as creating, modifying, or deleting a file, ext4 first records\nthis change in the journal. Subsequently, the actual file system structures are updated. The process of updating the file system is known as committing the\njournal. During a commit, the changes recorded in the journal are applied to the file system structures in a controlled and atomic manner. In the event of an\ninterruption, the file system can recover quickly by replaying the journal, ensuring that it reflects the consistent state of the file system.\nAs seen in the figure with the off-CPU profile, wait_transaction_locked [3] is the\nfunction executed before voluntarily yielding the processor, allowing the scheduler to select and switch to a different process or thread ready to run\n(schedule()). Guided by the comment above the wait_transaction_locked function:\nWait until running transaction passes to T_FLUSH state and new transaction can thus be started. Also starts the commit if needed. The function expects running\ntransaction to exist and releases j_state_lock.\nWe searched the kernel code to identify what sets the T_FLUSH flag. The only place that we discovered was within the\njbd2_journal_commit_transaction function executed periodically by a kernel journal\nthread. Consequently, we decided to trace this function to explore any correlation between its latency and the latency of ext4_dirty_inode. The obtained\nresults aligned precisely with our expectations – namely, a high latency in  jbd2_journal_commit_transaction translates to a high latency in\next4_dirty_inode. The details of our findings are presented below:\n\nSTART TIME    END TIME      LATENCY  FUNCTION\n19:35:24.503  19:35:24.680  176 ms   jbd2_journal_commit_transaction\n19:35:24.507  19:35:24.648  141 ms   ext4_dirty_inode\n19:35:24.508  19:35:24.648  139 ms   ext4_dirty_inode\n19:35:24.514  19:35:24.648  134 ms   ext4_dirty_inode\n...\n19:38:14.508  19:38:14.929  420 ms   jbd2_journal_commit_transaction\n19:38:14.511  19:38:14.868  357 ms   ext4_dirty_inode\n19:38:14.511  19:38:14.868  357 ms   ext4_dirty_inode\n19:38:14.512  19:38:14.868  356 ms   ext4_dirty_inode\n...\n19:48:39.475  19:48:40.808  1332 ms  jbd2_journal_commit_transaction\n19:48:39.477  19:48:40.757  1280 ms  ext4_dirty_inode\n19:48:39.487  19:48:40.757  1270 ms  ext4_dirty_inode\n19:48:39.543  19:48:40.757  1213 ms  ext4_dirty_inode\n...\n\n\next4 Improvements Monitoring\nHaving identified journal commits as the cause of slow writes, we started thinking how to alleviate the problem. We had a few ideas, but we were wondering how\nwe would be able to observe improvements.  Up until that point, we relied on command-line tools and analyzing their output for short time ranges. We wanted\nto be able to observe the impact of our optimizations over longer periods.\nTo report traced functions latency over long periods, we used ebpf_exporter, a tool that exposes eBPF-based\nmetrics in Prometheus format. We were then able to visualize traces in Grafana. For example, maximum ext4 write latency for a given broker:\n\nWith that, we were able to run brokers with different configurations and observe their write latency over time.\next4 Improvements\nLet’s go back to ext4. We knew that journal commits were the source of latency. By studying ext4 documentation, we identified a few possible solutions for\nimproving the performance:\nDisabling journaling\nDecreasing the commit interval\nChanging the journaling mode from data=ordered to data=writeback\nEnabling fast commits\nLet’s discuss each of them.\nDisabling Journaling\nIf journaling is the source of high latency, why not disable it completely? Well, it turns out that journaling is there for a reason. Without journaling, we\nwould risk long recovery in case of a crash. Thus, we quickly ruled out this solution.\nDecreasing the Commit Interval\next4 has the commit mount parameter which tells how often to perform commits. It has the default value of 5 seconds. According to the ext4 documentation:\nThis default value (or any low value) will hurt performance, but it’s good for data-safety. […] Setting it to very large values will improve performance.\nHowever, instead of increasing the value we decided to decrease it. Why? Our intuition was that by performing commits more frequently we would make them\n“lighter” which would make them faster. We would trade throughput for lower latency. We experimented with commit=1, and commit=3 but observed no\nsignificant differences.\nChanging the Journaling Mode from data=ordered to data=writeback\next4 offers three journaling modes: journal, ordered and writeback. The default mode is ordered and compared to the most performant mode, writeback,\nit guarantees that the data is written to the main file system prior to the metadata being committed to the journal. As mentioned in\ndocs, Kafka does not rely on this property, so switching the mode to writeback should reduce latency.\nWe switched the journaling mode on one of the brokers, and indeed, we observed latency improvements:\n \n    \n\n    \n\n    \nWith data=writeback, p999 decreased from 3 seconds to 800 milliseconds.\n    \nEnabling Fast Commit\nWhen reading about ext4 journaling, we stumbled upon an article describing a new feature introduced in Linux 5.10 called\nfast commits. As explained in the article, fast commit is a lighter-weight journaling method that could result in performance boost for certain workloads.\nWe enabled fast commit on one of the brokers. We noticed that max write latency decreased significantly. Diving deeper we found out that on a broker with\nfast commit enabled:\nThe latency of jdb2_journal_commit_transaction decreased by an order of magnitude. This meant that periodic journal commits were indeed much faster\nthanks to enabling fast commits.\nSlow ext4 writes occurred at the same time when there was a spike in latency of jbd2_fc_begin_commit. This method is part of the fast commit flow. It\nbecame the new source of latency but its maximum latency was lower than that of jdb2_journal_commit_transaction without fast commits.\n \n    \n\n    \nComparison of maximum latency [s] of ext4 writes for brokers without and with fast commit.\n    \nLower file system write latency, in turn, resulted in reduced produce latency:\n \n    \n\n    \n\n    \nWith fast commit enabled, produce P999 latency went down from 3 seconds to 500 milliseconds\n    \nSummary\nTo summarize, we’ve tested the following ext4 optimizations:\nDecreasing the commit interval\nChanging the journaling mode to data=writeback\nEnabling fast commit\nWe observed that both data=writeback and fast commit significantly reduced latency, with fast commit having slightly lower latency. The results were\npromising, but we had higher hopes. Thankfully, we had one more idea left.\nXFS\nWhile researching the topic of journaling in ext4, we stumbled upon a few sources suggesting that the XFS file system, with its more advanced journaling,\nis well-suited for handling large files and high-throughput workloads, often outperforming ext4 in such scenarios. Kafka documentation also mentions that XFS\nhas a lot of tuning already in place and should be a better fit than the default ext4.\nWe migrated one of the brokers to the XFS file system. The results were impressive. The thing that was very distinctive compared to the aforementioned ext4\noptimizations was the consistency of XFS performance. While other broker configurations experienced p999 latency spikes throughout the day, XFS – with its default configuration – had only a\nfew hiccups.\n\n\nAfter a couple of weeks of testing, we were confident that XFS was the best choice. Consequently, we migrated all our brokers from ext4 to XFS.\nSummary\nUsing a combination of packet sniffing, eBPF, and async-profiler we managed to identify the root cause of slow produce requests in our Kafka cluster. We\nthen tested a couple of solutions to the problem: data=writeback journaling mode, fast commits, and changing the file system to XFS. The results of these\noptimizations are visualized in the heatmap below:\n\nUltimately, we found XFS to be the most performant and rolled it out to all of our brokers. With XFS, the number of produce requests exceeding 65ms (our SLO)\nwas lowered by 82%.\nHere are some of the lessons we learned along the way:\neBPF was extremely useful during the analysis. It was straightforward to utilize one of the pre-existing tools from bcc or bpftrace. We were also able to\neasily modify them for our custom use cases.\nebpf_exporter is a great tool for observing trace results over longer periods of time. It allows to expose Prometheus metrics based on libbpf programs.\np99 and p999 analysis is sometimes not enough. In our case, the p999 latency of file system writes was less than 1ms. It turned out that a single slow write\ncould cause lock contention and a cascade of slow requests. Without tracing individual requests, the root cause would have been very hard to catch.\nWe hope that you found this blog post useful, and we wish you good luck in your future performance analysis endeavors!\n\n\n  .post-content table, .post-content td, .post-content th {\n    border: none;\n    background-color: transparent;\n}\n\n.post-content th {\n    display: none;\n}\n\n.post-content td {\n    padding: 0;\n}","guid":"https://blog.allegro.tech/2024/03/kafka-performance-analysis.html","categories":["tech","kafka","ebpf","bcc","linux","kernel","ext4","xfs","performance","tuning","file system"],"isoDate":"2024-03-05T23:00:00.000Z"},{"title":"Tired of repetitive tasks?! Go for RPA!","link":"https://blog.allegro.tech/2024/02/rpa.html","pubDate":"Tue, 20 Feb 2024 00:00:00 +0100","authors":{"author":[{"name":["Dominika Pleśniak"],"photo":["https://blog.allegro.tech/img/authors/dominika.plesniak.jpg"],"url":["https://blog.allegro.tech/authors/dominika.plesniak"]}]},"content":"<p>Have you ever thought about ways of reducing repetitive, monotonous tasks? Maybe you would like to try to automate your own tasks? I will show you what\ntechnology we use at Allegro, what processes we have automated, and how to do it on your own.</p>\n\n<h2 id=\"what-is-rpa-and-how-do-we-use-it-at-allegro\">What is RPA and how do we use it at Allegro?</h2>\n\n<blockquote>\n  <p><em>“Robotic process automation (RPA) is a software technology that makes it easy to build, deploy, and manage software robots that emulate humans actions\ninteracting with digital systems and software. Just like people, software robots can do things like understand what’s on a screen, complete the right \nkeystrokes, navigate systems, identify and extract data, and perform a wide range of defined actions.”</em> \n<br /> \nSource: <a href=\"https://www.uipath.com/rpa/robotic-process-automation\">UiPath Robotic Process Automation</a></p>\n</blockquote>\n\n<p>At Allegro, our Process Automation Team primarily relies on UiPath as our key RPA tool. Processes suitable for automation through RPA are standardized, repetitive, manual, with high volume, stable and has data in digital form. If possible, we try to combine UiPath with different integrations such as scripts, databases, chatbots.</p>\n\n<p>UiPath provides the ability to automate all kinds of applications (web, desktop, java, etc.). Automations can be created through the user interface of an \napplication, meaning that the created robot imitates an employee’s clicks. Furthermore, when an application’s API is available, it is easy to integrate \nUiPath with API, and in that case, the robot’s steps are performed in the backend-side. UiPath also allows the use of\nOCR (optical character recognition) and machine learning modules.</p>\n\n<p>Thanks to the various roles within Process Automation Team, such as analysts and developers, we are able to approach processes holistically. When we receive an idea for \nautomatization, we first perform an assessment to establish if the process is suitable for robotization, and we calculate the Return On Investment (ROI) and the potential of\ntime savings from automation in terms of <a href=\"https://en.wikipedia.org/wiki/Full-time_equivalent\">Full-Time Equivalent (FTE)</a>. Once the assessment is done and costs of investment return are approved, we analyze and optimize the process. \nAs a result, the analyst prepares a Process Definition Document (PDD) which serves as an instruction/description of the process.\nIn the next phase, based on PDD, a developer takes over the process and designs a solution. After that, the development part begins while the robot is created.\nLast but not least, there is the testing phase, where we check the results of the robotization together with the analyst and the business process owner.\nIf the solution is successful and performs as intended, we run the robot in production. Then we enter the hypercare period, during which we monitor and make necessary adjustments\nin tandem with the business process owner. After about two weeks of this phase, if both sides are satisfied with the results, we “go live”.</p>\n\n<p><img src=\"/img/articles/2024-02-20-rpa/robotic_process_automation_workflow.png\" alt=\"Robotic Process Automation Workflow\" /></p>\n\n<h2 id=\"what-kind-of-processes-do-we-automate\">What kind of processes do we automate?</h2>\n\n<h3 id=\"jira-automations\">Jira automations</h3>\n\n<p>In our organization we have a lot of processes based on Jira “tickets”. Many employees had to manage and operate Jira’s queues. Our team implemented several \nrobots to relieve administrators from repetitive tasks. Jira has an API available which we used in combination with the UiPath platform. \nFor example, when an employee is leaving Allegro, several Jira tasks are automatically created to retract authorization in various systems. Previously, these tasks were \nperformed manually by administrators. Now, the process is fully automated. The robot manages tickets via API and checks accounts in systems by GUI.</p>\n\n<h3 id=\"sap-enterprise-resource-planning-system-processes\">SAP (Enterprise Resource Planning system) processes</h3>\n\n<p>All repetitive, rule-based processes in SAP can be automated. For instance, let’s consider the processes in the Finance team. They handle massive amounts of \ninvoices. For some suppliers, with the largest quantity of invoices and unchangeable invoice layout, we were able to automate the accounting process in SAP. \nThe robot accesses an appropriate transaction in SAP and lists invoices. Based on business rules, the bot selects a specific invoice, opens it, and \nreads selected values. Then, it compares these values with business conditions which were established in the Process Definition Document. Depending on the \nsituation, the robot fills or corrects adequate fields and either accepts or rejects the invoice.</p>\n\n<h3 id=\"automation-by-api\">Automation by API</h3>\n\n<p>One of the excellent examples of API automations is the process of changing product categories on the Allegro platform. Allegro hosts a vast number of products. Initially, \nnot all of them are assigned to the proper category. We were able to create a robot that uses Allegro’s REST API to move these products to the target category.\nBefore automation, this task was time-consuming and monotonous. Recently, the robot completed a huge task, moving almost 3 million products in two days!</p>\n\n<h3 id=\"processes-across-multiple-applications-and-integrations\">Processes across multiple applications and integrations</h3>\n\n<p>It is possible to combine tasks from different applications into one robot. This approach allows us to automate more complex processes. \nThe most interesting ones include:</p>\n<ul>\n  <li>The process of user’s data change in Allegro platform is carried out at the request of users. To perform all actions, the bot uses Salesforce and \nInternal Admin tools. The robot downloads a report with requests, then checks the pre-set business rules. Based on the results, the bot changes user’s data or\n rejects the request.\nThe robot works 24 hours a day, handling 80% of applications. The number of tasks it performs can be compared to the work of four full-time employees.</li>\n  <li>The anti-fraud process. The robot verifies hundreds of thousands of messages and blocks suspected accounts. Using suspicious messages from the Spoof \napplication (Message Center), the robot determines if a message is spam or not. To make a proper decision, it checks various business conditions to decide \nif an account should be blocked. After making the decision, the bot blocks the account’s message sending capabilities.</li>\n  <li>The process for the HR team where the robot works on two applications. The robot interacts with the interface of an application and also uses its API. \nIn the recruitment process, specialists from different fields participate and help recruiters to find the best candidates. These specialists are known as \nthe Hiring Squad. A significant number of people are involved in this process, and the robot is responsible for keeping the Hiring Squad updated. Based \non a report with job offers the robot checks if a candidate has active status for specific skills required for the interview process. If the status is active, \nthe bot selects a particular job offer from the platform and assigns the interviewer from Hiring Squad.</li>\n</ul>\n\n<h3 id=\"human-in-the-loop\">“Human in the Loop”</h3>\n\n<p>Those processes which are rule-based, repetitive, but require human decision-making or the robot does not know what to do on the basis of the collected data, \nare referred to as “human in the loop”. A great example could be the process of damage complaints regarding packages that we have automated. The robot gathers a report \nfrom Salesforce and filters all jobs referring to damaged packages. Then, in the Internal Admin tool, the bot checks and collects various pieces of information based \non specific business rules. If necessary, it also checks the status of packages on carrier websites. Finally, the robot creates a form with all the gathered \ndetails, information, and attachments. This form is sent to a human for verification. With all this collected information, an employee can quickly decide \nwhether the complaint should be accepted. Then, the decision is sent back to the robot, which is able to close the case. It sends appropriate emails and \nrecords the results in the system.</p>\n\n<h2 id=\"robotics-workshops-for-employees\">Robotics workshops for employees</h2>\n\n<p>Additionally, twice a year, we organize an educational program for employees called “Allegro Robot School”. Employees get a chance to learn how to build \nbasic robots in UiPath and build one to support their daily tasks. To sign up for the program there is no need to have coding experience. It is enough if \nan employee can think analytically and has motivation to learn new things.\nThe program is intensive, consisting of five days of workshops. After the workshops, there is a three-weeks period where, with our support, employees choose \ntheir own processes and build robots.\nFor each edition we have around ten participants. The robots created during one edition account for about 3 FTEs! We have many examples of graduate \nemployees who created more robots to support their daily work in a team. Moreover, we created a Slack community for graduates to stay in touch, share \nknowledge, and support the development of new robots.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>Today, the number of processes and different applications used in companies is enormous. Moreover, it can sometimes be challenging to integrate one application\nwith another, and employees are burdened with many manual, repetitive tasks. It is important to know that there is a solution to automate these processes. \nThe RPA technology can quickly help with that, freeing up employees for more creative tasks. The above examples visualize the possibilities of using UiPath.\nThe most important thing to remember is that the process to automate has to be manual, rule-based, repetitive, with data in digital form. What is more, \nit is possible to learn for those who don’t have coding experience. Thanks to that, the automation of processes can be expanded across the company beyond the Process Automation Team.</p>\n","contentSnippet":"Have you ever thought about ways of reducing repetitive, monotonous tasks? Maybe you would like to try to automate your own tasks? I will show you what\ntechnology we use at Allegro, what processes we have automated, and how to do it on your own.\nWhat is RPA and how do we use it at Allegro?\n“Robotic process automation (RPA) is a software technology that makes it easy to build, deploy, and manage software robots that emulate humans actions\ninteracting with digital systems and software. Just like people, software robots can do things like understand what’s on a screen, complete the right \nkeystrokes, navigate systems, identify and extract data, and perform a wide range of defined actions.” \n \nSource: UiPath Robotic Process Automation\nAt Allegro, our Process Automation Team primarily relies on UiPath as our key RPA tool. Processes suitable for automation through RPA are standardized, repetitive, manual, with high volume, stable and has data in digital form. If possible, we try to combine UiPath with different integrations such as scripts, databases, chatbots.\nUiPath provides the ability to automate all kinds of applications (web, desktop, java, etc.). Automations can be created through the user interface of an \napplication, meaning that the created robot imitates an employee’s clicks. Furthermore, when an application’s API is available, it is easy to integrate \nUiPath with API, and in that case, the robot’s steps are performed in the backend-side. UiPath also allows the use of\nOCR (optical character recognition) and machine learning modules.\nThanks to the various roles within Process Automation Team, such as analysts and developers, we are able to approach processes holistically. When we receive an idea for \nautomatization, we first perform an assessment to establish if the process is suitable for robotization, and we calculate the Return On Investment (ROI) and the potential of\ntime savings from automation in terms of Full-Time Equivalent (FTE). Once the assessment is done and costs of investment return are approved, we analyze and optimize the process. \nAs a result, the analyst prepares a Process Definition Document (PDD) which serves as an instruction/description of the process.\nIn the next phase, based on PDD, a developer takes over the process and designs a solution. After that, the development part begins while the robot is created.\nLast but not least, there is the testing phase, where we check the results of the robotization together with the analyst and the business process owner.\nIf the solution is successful and performs as intended, we run the robot in production. Then we enter the hypercare period, during which we monitor and make necessary adjustments\nin tandem with the business process owner. After about two weeks of this phase, if both sides are satisfied with the results, we “go live”.\n\nWhat kind of processes do we automate?\nJira automations\nIn our organization we have a lot of processes based on Jira “tickets”. Many employees had to manage and operate Jira’s queues. Our team implemented several \nrobots to relieve administrators from repetitive tasks. Jira has an API available which we used in combination with the UiPath platform. \nFor example, when an employee is leaving Allegro, several Jira tasks are automatically created to retract authorization in various systems. Previously, these tasks were \nperformed manually by administrators. Now, the process is fully automated. The robot manages tickets via API and checks accounts in systems by GUI.\nSAP (Enterprise Resource Planning system) processes\nAll repetitive, rule-based processes in SAP can be automated. For instance, let’s consider the processes in the Finance team. They handle massive amounts of \ninvoices. For some suppliers, with the largest quantity of invoices and unchangeable invoice layout, we were able to automate the accounting process in SAP. \nThe robot accesses an appropriate transaction in SAP and lists invoices. Based on business rules, the bot selects a specific invoice, opens it, and \nreads selected values. Then, it compares these values with business conditions which were established in the Process Definition Document. Depending on the \nsituation, the robot fills or corrects adequate fields and either accepts or rejects the invoice.\nAutomation by API\nOne of the excellent examples of API automations is the process of changing product categories on the Allegro platform. Allegro hosts a vast number of products. Initially, \nnot all of them are assigned to the proper category. We were able to create a robot that uses Allegro’s REST API to move these products to the target category.\nBefore automation, this task was time-consuming and monotonous. Recently, the robot completed a huge task, moving almost 3 million products in two days!\nProcesses across multiple applications and integrations\nIt is possible to combine tasks from different applications into one robot. This approach allows us to automate more complex processes. \nThe most interesting ones include:\nThe process of user’s data change in Allegro platform is carried out at the request of users. To perform all actions, the bot uses Salesforce and \nInternal Admin tools. The robot downloads a report with requests, then checks the pre-set business rules. Based on the results, the bot changes user’s data or\n rejects the request.\nThe robot works 24 hours a day, handling 80% of applications. The number of tasks it performs can be compared to the work of four full-time employees.\nThe anti-fraud process. The robot verifies hundreds of thousands of messages and blocks suspected accounts. Using suspicious messages from the Spoof \napplication (Message Center), the robot determines if a message is spam or not. To make a proper decision, it checks various business conditions to decide \nif an account should be blocked. After making the decision, the bot blocks the account’s message sending capabilities.\nThe process for the HR team where the robot works on two applications. The robot interacts with the interface of an application and also uses its API. \nIn the recruitment process, specialists from different fields participate and help recruiters to find the best candidates. These specialists are known as \nthe Hiring Squad. A significant number of people are involved in this process, and the robot is responsible for keeping the Hiring Squad updated. Based \non a report with job offers the robot checks if a candidate has active status for specific skills required for the interview process. If the status is active, \nthe bot selects a particular job offer from the platform and assigns the interviewer from Hiring Squad.\n“Human in the Loop”\nThose processes which are rule-based, repetitive, but require human decision-making or the robot does not know what to do on the basis of the collected data, \nare referred to as “human in the loop”. A great example could be the process of damage complaints regarding packages that we have automated. The robot gathers a report \nfrom Salesforce and filters all jobs referring to damaged packages. Then, in the Internal Admin tool, the bot checks and collects various pieces of information based \non specific business rules. If necessary, it also checks the status of packages on carrier websites. Finally, the robot creates a form with all the gathered \ndetails, information, and attachments. This form is sent to a human for verification. With all this collected information, an employee can quickly decide \nwhether the complaint should be accepted. Then, the decision is sent back to the robot, which is able to close the case. It sends appropriate emails and \nrecords the results in the system.\nRobotics workshops for employees\nAdditionally, twice a year, we organize an educational program for employees called “Allegro Robot School”. Employees get a chance to learn how to build \nbasic robots in UiPath and build one to support their daily tasks. To sign up for the program there is no need to have coding experience. It is enough if \nan employee can think analytically and has motivation to learn new things.\nThe program is intensive, consisting of five days of workshops. After the workshops, there is a three-weeks period where, with our support, employees choose \ntheir own processes and build robots.\nFor each edition we have around ten participants. The robots created during one edition account for about 3 FTEs! We have many examples of graduate \nemployees who created more robots to support their daily work in a team. Moreover, we created a Slack community for graduates to stay in touch, share \nknowledge, and support the development of new robots.\nSummary\nToday, the number of processes and different applications used in companies is enormous. Moreover, it can sometimes be challenging to integrate one application\nwith another, and employees are burdened with many manual, repetitive tasks. It is important to know that there is a solution to automate these processes. \nThe RPA technology can quickly help with that, freeing up employees for more creative tasks. The above examples visualize the possibilities of using UiPath.\nThe most important thing to remember is that the process to automate has to be manual, rule-based, repetitive, with data in digital form. What is more, \nit is possible to learn for those who don’t have coding experience. Thanks to that, the automation of processes can be expanded across the company beyond the Process Automation Team.","guid":"https://blog.allegro.tech/2024/02/rpa.html","categories":["tech","rpa"],"isoDate":"2024-02-19T23:00:00.000Z"},{"title":"Don’t bother: it is only a little expired","link":"https://blog.allegro.tech/2024/02/couchbase-expired-docs-tuning.html","pubDate":"Mon, 12 Feb 2024 00:00:00 +0100","authors":{"author":[{"name":["Tomasz Ziółkowski"],"photo":["https://blog.allegro.tech/img/authors/tomasz.ziolkowski.jpg"],"url":["https://blog.allegro.tech/authors/tomasz.ziolkowski"]}]},"content":"<p>This story shows how we strive to fix issues reported by our customers regarding inconsistent listing views on our e-commerce platform.\nWe will use a top-down manner to guide you through our story. At the beginning, we highlight the challenges faced by our customers, followed by presenting\nbasic information on how views are personalized on our web application. We then delve deeper into our internal architecture, aiming to clarify how\nit supports High Availability (HA) by using two data centers. Finally, we advertise a little <em><a href=\"https://www.couchbase.com/\">Couchbase</a></em>,\ndistributed NoSQL database, and explain why it is an excellent storage solution for such an architecture.</p>\n\n<p>Later, we explain how the absence of adequate tools hindered us from uncovering the root cause of the problem and detail the adjustments we made in Couchbase\nto overcome these challenges. What can you glean from our experience? Firstly, you might be inspired to consider Couchbase as a storage solution in\na multi-regional, active-active architecture. Secondly, you’ll discover a tool that aids in monitoring Couchbase behavior in a multi-region setting.\nThirdly, we share some tips on manipulating settings in Couchbase.\nLastly, you’ll be able to decipher the mysterious title of our story and understand a few technological abbreviations.</p>\n\n<h2 id=\"what-you-ask-is-not-what-you-get\">What you ask is NOT what you get</h2>\n\n<p>An ongoing challenge in the development of the <a href=\"https://allegro.tech/\">Allegro platform</a> has been the product catalog.\nOriginating from a C2C platform where offers lacked references to pre-existing products, our shift towards the B2C model brought forth the need to merge\noffers representing the same product. This was essential for enhancing the selection experience for our buyers. The journey to construct such a catalog involved\nvarious approaches, and after numerous iterations, it now functions seamlessly.\nFor the context of this article, a crucial detail is that our platform must support at least two ways of selecting offers:</p>\n\n<ol>\n  <li>Offer listing: Each presented entity is a unique offer listed by a particular merchant.\n  <img src=\"/img/articles/2024-02-12-couchbase-expired-docs-tuning/offers-view.png\" alt=\"offers-listing\" /></li>\n  <li>Product listing: Each presented entity represents a unique product connected to a set of offers where you can make a purchase.\n  <img src=\"/img/articles/2024-02-12-couchbase-expired-docs-tuning/products-view.png\" alt=\"products-listing\" /></li>\n</ol>\n\n<p>Given the diverse factors influencing whether a customer prefers selecting offers or products, we’ve deliberately avoided limiting the selection experience.\nIn many cases, customers are free to choose either method, and their preferred choice is remembered to ensure a consistent and personalized experience.\nBoth offer and product listing views feature a switch that allows users to change their personal preference. With each click,\nthe personalized preference is updated, and the current view is refreshed accordingly.</p>\n\n<p>However, our journey took an unexpected turn when we began receiving reports that customers, despite changing their preference, continued to see the same view.\nFor instance, if a customer switched from the offer listing to the product listing, they would still receive the offer listing. The frustration escalated\nas this invalid view persisted, even after manual page refreshes, lasting several times before finally aligning with the customer’s preference after a delay,\nsometimes up to a minute. This discrepancy became the starting point of our investigation.</p>\n\n<h2 id=\"remedy-for-rendering-views-in-soa---opbox\">Remedy for rendering views in SOA - Opbox</h2>\n\n<p>Dedicated readers of this blog may already be aware that the Allegro platform embraces a microservices architecture, a powerful strategy for\ndividing domains and responsibilities. However, this approach presents challenges when it comes to offering a unified graphical user interface (GUI) for\nour customers. To bridge this gap, we successfully implemented our internal Content Management System (CMS) platform named Opbox.\nWhile delving into the intricate details of Opbox is beyond the scope of this narrative, those interested in our frontend management can explore\nour <a href=\"/2016/03/Managing-Frontend-in-the-microservices-architecture.html\">blogpost</a> or,\nif inclined, listen to our podcast in Polish <a href=\"https://podcast.allegro.tech/od_inzyniera_do_lidera_w_allegro/\">here</a>.</p>\n\n<p>For our story, what’s crucial to note is that Opbox plays a pivotal role in fetching information from microservices, particularly about customer preferences.\nIt collaborates with the microservice responsible for storing such data, ensuring the preparation of a personalized view for each user.</p>\n\n<p>No detective skills were needed to deduce that the observed issues originated from the microservice responsible for storing customer preferences,\nwhich was serving outdated information.\nThe real question at hand was how to mitigate this challenge.</p>\n\n<p>Completing our narrative puzzle involves highlighting the interface familiar to our web application customers,\nwhich operates across two domains with distinct responsibilities:</p>\n\n<ul>\n  <li><em>allegro.pl</em>: This domain is responsible for providing the GUI (HTML views), rendered via Opbox.</li>\n  <li><em>edge.allegro.pl</em>: This domain takes charge of direct interactions via <em>AJAX</em> (Asynchronous JavaScript) with specific microservices.</li>\n</ul>\n\n<p>In simpler terms, the listing view is rendered through the <em>allegro.pl</em> domain, while the task of switching personal preferences is handled via the\n<em>edge.allegro.pl</em> domain.</p>\n\n<h2 id=\"you-cant-handle-this\">You can’t HAndle this</h2>\n\n<p>As a member of the Technical Platform department, my perspective is likely biased towards High Availability (HA) and everything that enhances\nAllegro’s resilience to the outage of individual components or services. The fundamental principle guiding our HA strategy involves dispersing each\nmicroservice to two different locations, typically different data centers. This approach serves as a robust contingency plan, enabling us to overcome not only\nminor outages but also significant disasters, such as the outage of an entire data center.</p>\n\n<p>It’s essential to note that our HA strategy operates on a multi-region active-active approach. In simpler terms, all our data centers or clouds are actively\nhandling traffic simultaneously. While this approach ensures that everything remains operational in each location, it also introduces its own set of challenges.\nBalancing the benefits of simultaneous activity with the complexities it brings is a constant consideration in our pursuit of a resilient\nand fault-tolerant system.</p>\n\n<h3 id=\"navigating-the-multi-region-challenges\">Navigating the multi-region challenges</h3>\n\n<p>Handling traffic in such a manner can undoubtedly impact performance. Each HTTP request from our customers typically involves a set of microservices.\nTo mitigate the challenges of cross-datacenter traffic between these services, we introduced the principle of locality. In simple terms, if an instance of\nmicroservice A needs to communicate with microservice B, we prioritize instances running in the same location or data center.</p>\n\n<p>However, it’s crucial to note that the locality principle faces limitations, especially when it comes to certain storage solutions. For instance,\nmost Relational Database Management Systems (RDBMS) and MongoDB databases only allow writes through a specific node. This means that even if the traffic\nis handled by an instance in <em>DATA CENTER A</em>, it may still be necessary to query a database node in <em>DATA CENTER B</em> to write some data.\nThe challenge lies in finding storage solutions that permit simultaneous writing to nodes in the same location. One such example is\nCouchbase clusters with cross-data center replication, offering a solution to the intricacies of our multi-region, active-active architecture.</p>\n\n<h3 id=\"roots-of-inconsistency\">Roots of inconsistency</h3>\n\n<p>As mentioned earlier, we employ two domains to provide an interface for our customers. In the context of High Availability (HA), this setup implies that\nrendering can be handled by <em>DATA CENTER A</em>, while <em>AJAX</em> communication simultaneously takes place in <em>DATA CENTER B</em>. This dual-domain approach necessitates\na replication mechanism that applies changes made in one data center to the other.</p>\n\n<p>However, a critical challenge arises when the replication mechanism lags behind the Round-Trip Time (RTT) of client requests, as illustrated in\nthe diagram below. The red rectangle in the diagram symbolizes the replication process of a single write operation. If this process takes longer than\nthe back-and-forth exchange of HTTP response and request, the client may receive an invalid view. It’s crucial to note that the second request is directed\nstraight to data center B and is not proxied by <em>DATA CENTER A</em>.</p>\n\n<p>Mitigating this issue, short of radical architectural changes, becomes a significant concern. The intricacies of replication timing are central to ensuring\na seamless and accurate user experience in our multi-data center, active-active architecture.</p>\n\n<p><img src=\"/img/articles/2024-02-12-couchbase-expired-docs-tuning/replication.png\" alt=\"replication-lag\" /></p>\n\n<p>The replication lag can be influenced by various factors depending on the storage solutions in use. One undeniable factor is that it cannot be faster than\nthe light distance between data centers. Fortunately, in our case, this distance is minimal, and for the purpose of this story, it can be considered negligible.</p>\n\n<h2 id=\"fortunate-storage\">Fortunate storage</h2>\n\n<p>As I mentioned earlier, Couchbase lends itself to adhering to our locality principle in the communication between microservices and databases within\nour architecture. Fortunately, it serves as the storage solution for the microservice responsible for maintaining customers’ preferences. What’s even more\nfortunate is the swift cross-cluster replication mechanism,\n<em><a href=\"https://docs.couchbase.com/server/current/learn/clusters-and-availability/xdcr-overview.html\">XDCR</a></em>, employed by Couchbase.\nIn fact, the changes are applied on a cluster in the second data center faster than one Round-Trip Time (RTT) between data centers – pretty cool, isn’t it?\nIt’s noteworthy that <em>XDCR</em> can be configured in either a unidirectional or bidirectional manner. In our case, given active-active writes in all locations,\nwe use a bidirectional configuration to replicate changes, irrespective of the location in which they were applied.</p>\n\n<h2 id=\"deeper-analysis-unraveling-the-replication-enigma\">Deeper analysis: unraveling the replication enigma</h2>\n\n<p>Couchbase offers an abundance of highly detailed metrics regarding the internal state of the cluster. However, without a deep understanding,\nit becomes challenging to decipher whether irregularities or spikes in these metrics may indicate potential problems for customers. This challenge is\nparticularly pronounced when dealing with cross-cluster replication, where overseeing the state of two clusters simultaneously is a complex task.</p>\n\n<p>At Allegro, our commitment to meticulous data collection extends to being detailed in gathering performance metrics from a microservice perspective.\nDespite Couchbase providing meaningful information, the story would be incomplete if it solely relied on easily accessible metrics. In reality, these metrics\nfailed to reveal relevant information; read/write times remained relatively stable even during moments when customers reported issues.</p>\n\n<p>To gain a deeper understanding of the situation, our approach was clear—gather more data, with a specific focus on replication performance. This strategic\nemphasis on targeted data collection allowed us to delve into the intricacies of the replication process and uncover the underlying factors contributing to\nthe challenges faced by our customers.</p>\n\n<h3 id=\"measuring-replication-performance-the-birth-of-cb-tracker\">Measuring replication performance: the birth of cb-tracker</h3>\n\n<p>Due to the lack of readily available tools and our inability to find suitable options, we took matters into our own hands and developed our open-source\ncommand-line tool, <em><a href=\"https://github.com/ziollek/couchbase-replication-ping\">cb-tracker</a></em>. This tool serves the purpose of continuously measuring\nreplication lag. Its functionality revolves around connecting to two Couchbase clusters, designated as A and B, connected via <em>XDCR</em> replication.</p>\n\n<p>The primary objective of our tool is to measure the Replication Round-Trip Time (RTT). In simpler terms, it gauges how quickly a document written to cluster A\nbecomes accessible on cluster B, and vice versa. The logic behind this measurement is inspired by the widely used network diagnostic tool <em>ping</em>.\nTo provide a clearer understanding of how this tool performs measurements, refer to the diagram below.</p>\n\n<p><img src=\"/img/articles/2024-02-12-couchbase-expired-docs-tuning/cb-tracker.png\" alt=\"cb-tracker-flow\" /></p>\n\n<p>With the deployment of such a tool, we initiated continuous replication monitoring in the Couchbase bucket used by the microservice responsible for managing\ncustomer preferences. This monitoring effort provided us with valuable insights into the cyclic spikes in replication time. As depicted in the diagram below,\nwe observed two spikes recurring every hour, about 20 minutes apart. This observation prompted us to investigate potential periodic tasks\nwithin Couchbase that might be contributing to this cyclic behavior.</p>\n\n<p><img src=\"/img/articles/2024-02-12-couchbase-expired-docs-tuning/replication-spikes.png\" alt=\"replication-spikes\" /></p>\n\n<h3 id=\"there-are-my-knobs-unraveling-couchbase-quirks\">There are my knobs: unraveling couchbase quirks</h3>\n\n<p>While we’ve extolled the virtues of Couchbase, every solution has its quirks, and as the saying goes, the devil is in the details… and defaults :).\nIn our case, the intricacy arose from the documents stored in the scrutinized bucket, each having a set Time-To-Live (TTL).\nThe implementation of <em>TTL</em> on the Couchbase side is quite intriguing — expired documents are not deleted immediately; instead, they are skipped by\nthe fetching logic. This situation could potentially last indefinitely, leading to storage consumption concerns.</p>\n\n<p>To handle expired documents, Couchbase triggers a dedicated process every 60 minutes; the interval is controlled by <a href=\"https://docs.couchbase.com/server/current/cli/cbepctl/set-flush_param.html#options\">exp_pager_stime parameter</a>.\nEach run flushes out these expired documents from storage. However, an additional default setting — specifically,\nthe flag <em><a href=\"https://docs.couchbase.com/server/current/rest-api/rest-xdcr-adv-settings.html#get-settings-for-all-replications\">filterExpiration</a></em> indicating that\neach flush should be replicated via <em>XDCR</em> — created an unintended consequence. This default behavior caused a significant influx of events every hour,\noverwhelming <em>XDCR</em>. Consequently, other events, such as changes made by the microservice, had to be queued.</p>\n\n<p>Understanding that this mechanism operates on each cluster and that every expired document would eventually be deleted,\nwe recognized the need to address this overload of the replication mechanism. To rectify this, we adjusted the mentioned flag and increased the frequency\nof cleaning expired documents. Following this optimization, we observed a notable improvement, with no further instances of replication spikes.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>We grappled with a shortage of effective tools to monitor replication from a client perspective. As we’ve illustrated, pinpointing the genuine root cause of our\nproblem was crucial. I hope that the tool we’ve introduced can also assist you in the ongoing quest for those valuable milliseconds.</p>\n\n<p>Couchbase offers a comprehensive set of configuration parameters with default settings that might not be optimal for handling high-volume traffic.\nAs demonstrated, there are subtle threats that can undermine the experience of an otherwise speedy replication mechanism like <em>XDCR</em>.\nIt’s worth noting that our narrative is based on the community edition of Couchbase (v6), and it’s unfortunate that <em>XDCR</em> is\n<a href=\"https://www.couchbase.com/blog/couchbase-modifies-license-free-community-edition-package/\">withdrawn</a> from the open-source\nversion of Couchbase in the next release. I trust that our story can offer insights to help fine-tune your configuration and navigate potential challenges.</p>\n\n<h3 id=\"links\">Links</h3>\n\n<ol>\n  <li><a href=\"https://docs.couchbase.com/server/current/rest-api/rest-xdcr-adv-settings.html#get-settings-for-all-replications\">Couchbase: advanced replication settings</a></li>\n  <li><a href=\"https://docs.couchbase.com/server/current/cli/cbepctl/set-flush_param.html#options\">Couchbase: flush parameters</a></li>\n  <li><a href=\"https://github.com/ziollek/couchbase-replication-ping\">cb-tracker repository</a></li>\n</ol>\n","contentSnippet":"This story shows how we strive to fix issues reported by our customers regarding inconsistent listing views on our e-commerce platform.\nWe will use a top-down manner to guide you through our story. At the beginning, we highlight the challenges faced by our customers, followed by presenting\nbasic information on how views are personalized on our web application. We then delve deeper into our internal architecture, aiming to clarify how\nit supports High Availability (HA) by using two data centers. Finally, we advertise a little Couchbase,\ndistributed NoSQL database, and explain why it is an excellent storage solution for such an architecture.\nLater, we explain how the absence of adequate tools hindered us from uncovering the root cause of the problem and detail the adjustments we made in Couchbase\nto overcome these challenges. What can you glean from our experience? Firstly, you might be inspired to consider Couchbase as a storage solution in\na multi-regional, active-active architecture. Secondly, you’ll discover a tool that aids in monitoring Couchbase behavior in a multi-region setting.\nThirdly, we share some tips on manipulating settings in Couchbase.\nLastly, you’ll be able to decipher the mysterious title of our story and understand a few technological abbreviations.\nWhat you ask is NOT what you get\nAn ongoing challenge in the development of the Allegro platform has been the product catalog.\nOriginating from a C2C platform where offers lacked references to pre-existing products, our shift towards the B2C model brought forth the need to merge\noffers representing the same product. This was essential for enhancing the selection experience for our buyers. The journey to construct such a catalog involved\nvarious approaches, and after numerous iterations, it now functions seamlessly.\nFor the context of this article, a crucial detail is that our platform must support at least two ways of selecting offers:\nOffer listing: Each presented entity is a unique offer listed by a particular merchant.\n  \nProduct listing: Each presented entity represents a unique product connected to a set of offers where you can make a purchase.\n  \nGiven the diverse factors influencing whether a customer prefers selecting offers or products, we’ve deliberately avoided limiting the selection experience.\nIn many cases, customers are free to choose either method, and their preferred choice is remembered to ensure a consistent and personalized experience.\nBoth offer and product listing views feature a switch that allows users to change their personal preference. With each click,\nthe personalized preference is updated, and the current view is refreshed accordingly.\nHowever, our journey took an unexpected turn when we began receiving reports that customers, despite changing their preference, continued to see the same view.\nFor instance, if a customer switched from the offer listing to the product listing, they would still receive the offer listing. The frustration escalated\nas this invalid view persisted, even after manual page refreshes, lasting several times before finally aligning with the customer’s preference after a delay,\nsometimes up to a minute. This discrepancy became the starting point of our investigation.\nRemedy for rendering views in SOA - Opbox\nDedicated readers of this blog may already be aware that the Allegro platform embraces a microservices architecture, a powerful strategy for\ndividing domains and responsibilities. However, this approach presents challenges when it comes to offering a unified graphical user interface (GUI) for\nour customers. To bridge this gap, we successfully implemented our internal Content Management System (CMS) platform named Opbox.\nWhile delving into the intricate details of Opbox is beyond the scope of this narrative, those interested in our frontend management can explore\nour blogpost or,\nif inclined, listen to our podcast in Polish here.\nFor our story, what’s crucial to note is that Opbox plays a pivotal role in fetching information from microservices, particularly about customer preferences.\nIt collaborates with the microservice responsible for storing such data, ensuring the preparation of a personalized view for each user.\nNo detective skills were needed to deduce that the observed issues originated from the microservice responsible for storing customer preferences,\nwhich was serving outdated information.\nThe real question at hand was how to mitigate this challenge.\nCompleting our narrative puzzle involves highlighting the interface familiar to our web application customers,\nwhich operates across two domains with distinct responsibilities:\nallegro.pl: This domain is responsible for providing the GUI (HTML views), rendered via Opbox.\nedge.allegro.pl: This domain takes charge of direct interactions via AJAX (Asynchronous JavaScript) with specific microservices.\nIn simpler terms, the listing view is rendered through the allegro.pl domain, while the task of switching personal preferences is handled via the\nedge.allegro.pl domain.\nYou can’t HAndle this\nAs a member of the Technical Platform department, my perspective is likely biased towards High Availability (HA) and everything that enhances\nAllegro’s resilience to the outage of individual components or services. The fundamental principle guiding our HA strategy involves dispersing each\nmicroservice to two different locations, typically different data centers. This approach serves as a robust contingency plan, enabling us to overcome not only\nminor outages but also significant disasters, such as the outage of an entire data center.\nIt’s essential to note that our HA strategy operates on a multi-region active-active approach. In simpler terms, all our data centers or clouds are actively\nhandling traffic simultaneously. While this approach ensures that everything remains operational in each location, it also introduces its own set of challenges.\nBalancing the benefits of simultaneous activity with the complexities it brings is a constant consideration in our pursuit of a resilient\nand fault-tolerant system.\nNavigating the multi-region challenges\nHandling traffic in such a manner can undoubtedly impact performance. Each HTTP request from our customers typically involves a set of microservices.\nTo mitigate the challenges of cross-datacenter traffic between these services, we introduced the principle of locality. In simple terms, if an instance of\nmicroservice A needs to communicate with microservice B, we prioritize instances running in the same location or data center.\nHowever, it’s crucial to note that the locality principle faces limitations, especially when it comes to certain storage solutions. For instance,\nmost Relational Database Management Systems (RDBMS) and MongoDB databases only allow writes through a specific node. This means that even if the traffic\nis handled by an instance in DATA CENTER A, it may still be necessary to query a database node in DATA CENTER B to write some data.\nThe challenge lies in finding storage solutions that permit simultaneous writing to nodes in the same location. One such example is\nCouchbase clusters with cross-data center replication, offering a solution to the intricacies of our multi-region, active-active architecture.\nRoots of inconsistency\nAs mentioned earlier, we employ two domains to provide an interface for our customers. In the context of High Availability (HA), this setup implies that\nrendering can be handled by DATA CENTER A, while AJAX communication simultaneously takes place in DATA CENTER B. This dual-domain approach necessitates\na replication mechanism that applies changes made in one data center to the other.\nHowever, a critical challenge arises when the replication mechanism lags behind the Round-Trip Time (RTT) of client requests, as illustrated in\nthe diagram below. The red rectangle in the diagram symbolizes the replication process of a single write operation. If this process takes longer than\nthe back-and-forth exchange of HTTP response and request, the client may receive an invalid view. It’s crucial to note that the second request is directed\nstraight to data center B and is not proxied by DATA CENTER A.\nMitigating this issue, short of radical architectural changes, becomes a significant concern. The intricacies of replication timing are central to ensuring\na seamless and accurate user experience in our multi-data center, active-active architecture.\n\nThe replication lag can be influenced by various factors depending on the storage solutions in use. One undeniable factor is that it cannot be faster than\nthe light distance between data centers. Fortunately, in our case, this distance is minimal, and for the purpose of this story, it can be considered negligible.\nFortunate storage\nAs I mentioned earlier, Couchbase lends itself to adhering to our locality principle in the communication between microservices and databases within\nour architecture. Fortunately, it serves as the storage solution for the microservice responsible for maintaining customers’ preferences. What’s even more\nfortunate is the swift cross-cluster replication mechanism,\nXDCR, employed by Couchbase.\nIn fact, the changes are applied on a cluster in the second data center faster than one Round-Trip Time (RTT) between data centers – pretty cool, isn’t it?\nIt’s noteworthy that XDCR can be configured in either a unidirectional or bidirectional manner. In our case, given active-active writes in all locations,\nwe use a bidirectional configuration to replicate changes, irrespective of the location in which they were applied.\nDeeper analysis: unraveling the replication enigma\nCouchbase offers an abundance of highly detailed metrics regarding the internal state of the cluster. However, without a deep understanding,\nit becomes challenging to decipher whether irregularities or spikes in these metrics may indicate potential problems for customers. This challenge is\nparticularly pronounced when dealing with cross-cluster replication, where overseeing the state of two clusters simultaneously is a complex task.\nAt Allegro, our commitment to meticulous data collection extends to being detailed in gathering performance metrics from a microservice perspective.\nDespite Couchbase providing meaningful information, the story would be incomplete if it solely relied on easily accessible metrics. In reality, these metrics\nfailed to reveal relevant information; read/write times remained relatively stable even during moments when customers reported issues.\nTo gain a deeper understanding of the situation, our approach was clear—gather more data, with a specific focus on replication performance. This strategic\nemphasis on targeted data collection allowed us to delve into the intricacies of the replication process and uncover the underlying factors contributing to\nthe challenges faced by our customers.\nMeasuring replication performance: the birth of cb-tracker\nDue to the lack of readily available tools and our inability to find suitable options, we took matters into our own hands and developed our open-source\ncommand-line tool, cb-tracker. This tool serves the purpose of continuously measuring\nreplication lag. Its functionality revolves around connecting to two Couchbase clusters, designated as A and B, connected via XDCR replication.\nThe primary objective of our tool is to measure the Replication Round-Trip Time (RTT). In simpler terms, it gauges how quickly a document written to cluster A\nbecomes accessible on cluster B, and vice versa. The logic behind this measurement is inspired by the widely used network diagnostic tool ping.\nTo provide a clearer understanding of how this tool performs measurements, refer to the diagram below.\n\nWith the deployment of such a tool, we initiated continuous replication monitoring in the Couchbase bucket used by the microservice responsible for managing\ncustomer preferences. This monitoring effort provided us with valuable insights into the cyclic spikes in replication time. As depicted in the diagram below,\nwe observed two spikes recurring every hour, about 20 minutes apart. This observation prompted us to investigate potential periodic tasks\nwithin Couchbase that might be contributing to this cyclic behavior.\n\nThere are my knobs: unraveling couchbase quirks\nWhile we’ve extolled the virtues of Couchbase, every solution has its quirks, and as the saying goes, the devil is in the details… and defaults :).\nIn our case, the intricacy arose from the documents stored in the scrutinized bucket, each having a set Time-To-Live (TTL).\nThe implementation of TTL on the Couchbase side is quite intriguing — expired documents are not deleted immediately; instead, they are skipped by\nthe fetching logic. This situation could potentially last indefinitely, leading to storage consumption concerns.\nTo handle expired documents, Couchbase triggers a dedicated process every 60 minutes; the interval is controlled by exp_pager_stime parameter.\nEach run flushes out these expired documents from storage. However, an additional default setting — specifically,\nthe flag filterExpiration indicating that\neach flush should be replicated via XDCR — created an unintended consequence. This default behavior caused a significant influx of events every hour,\noverwhelming XDCR. Consequently, other events, such as changes made by the microservice, had to be queued.\nUnderstanding that this mechanism operates on each cluster and that every expired document would eventually be deleted,\nwe recognized the need to address this overload of the replication mechanism. To rectify this, we adjusted the mentioned flag and increased the frequency\nof cleaning expired documents. Following this optimization, we observed a notable improvement, with no further instances of replication spikes.\nSummary\nWe grappled with a shortage of effective tools to monitor replication from a client perspective. As we’ve illustrated, pinpointing the genuine root cause of our\nproblem was crucial. I hope that the tool we’ve introduced can also assist you in the ongoing quest for those valuable milliseconds.\nCouchbase offers a comprehensive set of configuration parameters with default settings that might not be optimal for handling high-volume traffic.\nAs demonstrated, there are subtle threats that can undermine the experience of an otherwise speedy replication mechanism like XDCR.\nIt’s worth noting that our narrative is based on the community edition of Couchbase (v6), and it’s unfortunate that XDCR is\nwithdrawn from the open-source\nversion of Couchbase in the next release. I trust that our story can offer insights to help fine-tune your configuration and navigate potential challenges.\nLinks\nCouchbase: advanced replication settings\nCouchbase: flush parameters\ncb-tracker repository","guid":"https://blog.allegro.tech/2024/02/couchbase-expired-docs-tuning.html","categories":["tech","couchbase","replication","performance bottleneck","open source","ttl","metrics"],"isoDate":"2024-02-11T23:00:00.000Z"},{"title":"WCAG 2.2 is here! And what about 3.0?","link":"https://blog.allegro.tech/2024/01/wcag-2-2.html","pubDate":"Wed, 24 Jan 2024 00:00:00 +0100","authors":{"author":[{"name":["Barbara Szott"],"photo":["https://blog.allegro.tech/img/authors/barbara.szott.jpg"],"url":["https://blog.allegro.tech/authors/barbara.szott"]}]},"content":"<p>Ready to turn web accessibility from a headache into a breeze? Join us as we demystify WCAG, explore its latest 2.2 version, and gaze into the future of digital\ninclusivity. Get ready for a journey that’s as enlightening as it is entertaining!</p>\n\n<h2 id=\"what-exactly-is-wcag\">What exactly is WCAG?</h2>\n\n<p>Imagine you are opening a bar and want to invite all your friends there, and you want them to have a great time hanging out at your place. But some of your\nfriends have different disabilities, such as using wheelchairs or having trouble seeing or hearing. You want everyone to have fun, right? Well, WCAG which stands for\nWeb Contents Accessibility Guidelines, is set of rules to make sure Internet is like a bar that everyone can enjoy.</p>\n\n<h2 id=\"four-principles-of-accessibility\">Four principles of accessibility</h2>\n\n<p>The guidelines and Success Criteria are based on four key principles that provide the fundamental basis for anyone to access and use web content. Let me explain\nthem as simply as possible:</p>\n\n<ol>\n  <li><strong>Perceivable (big text and clear pictures)</strong> - everything on a website should be easy to see and understand. Imagine reading a book. Some people need big\nletters, and some might not see well. So, WCAG says websites should have big letters and clear pictures, like a book with large print and colorful\nillustrations,</li>\n  <li><strong>Operable (easy to click and move)</strong> - the user interface and navigation of a website are easy to operate. It means that people should be able to interact\nwith the content using various methods, such as a keyboard or assistive technologies like screen readers. It also encourages predictable and consistent\nnavigation and input methods,</li>\n  <li><strong>Understandable (no confusing stuff)</strong> - ever been on a website and got lost because it was too complicated? WCAG says websites should be like a\nstraightforward treasure hunt, not a confusing maze. They should have clear instructions and be easy to understand, just like a fun treasure hunt game with\nsimple clues,</li>\n  <li><strong>Robust (works everywhere)</strong> - robustness means that websites should be built to last and work well with different technologies. This ensures that websites\nremain accessible as technology evolves. It’s like building a house with strong foundations so that it stands the test of time.</li>\n</ol>\n\n<p>In essence, WCAG is like a set of rules and recommendations to make the Internet a welcoming and usable place for everyone, regardless of their abilities or\ndisabilities. It’s about creating a digital world that is inclusive and user-friendly for all.</p>\n\n<p>WCAG guidelines are organized into three levels of conformance:</p>\n\n<ol>\n  <li>A - addressing the most critical issues to ensure a minimal level of accessibility</li>\n  <li>AA - covers a broader range of requirements; the website is more accessible and user-friendly</li>\n  <li>AAA - ensures the highest level of accessibility</li>\n</ol>\n\n<h2 id=\"timeline\">Timeline</h2>\n\n<p>I don’t want to bore you with details, but I think it is good to understand that WCAG is not something new. It’s been around for quite a while!</p>\n\n<ul>\n  <li>1997 - W3C started working on WCAG 1.0</li>\n  <li>1999 - WCAG 1.0 shipped</li>\n  <li>2001-2007 - WCAG 2.0</li>\n  <li>2017-2018 - WCAG 2.1</li>\n  <li>2020 - W3C started working on WCAG 2.2</li>\n  <li>2023 - WCAG 2.2</li>\n</ul>\n\n<h2 id=\"wcag-22\">WCAG 2.2</h2>\n\n<p><a href=\"https://www.w3.org/TR/WCAG22/\">The new version</a> introduces 9 new success criteria (SC) - two at level A, four at level AA, and three at AAA. Let’s give them a closer look.</p>\n\n<h3 id=\"2411-a--2412-aa---stop-hiding-my-focus\">2.4.11 (A) &amp; 2.4.12 (AA) - “Stop hiding my focus!”</h3>\n\n<p>I think we can all agree here - it is just annoying if you are browsing the web and all of a sudden something appears - a modal, cookie banner, chat\nwidget, and covers what we were just reading.</p>\n\n<p>So make sure the focus is not obscured. It also applies to submenus and sticky headers.</p>\n\n<p>For A and AA levels focused user interface component should be at least partially visible; for AAA it must be fully visible.</p>\n\n<h3 id=\"257-aa---aaargh-i-cant-do-this-drag--drop-thing-i-need-another-way-to-do-this\">2.5.7 (AA) - “Aaargh! I can’t do this drag &amp; drop thing! I need another way to do this..!”</h3>\n\n<p>If a feature on a website or app can be used by moving your cursor or finger in a dragging motion (like when you click and drag a slider), it should also be\npossible to use that feature without dragging.</p>\n\n<p>This helps people with mobility difficulties, especially when it might be difficult for them to press and hold down and precisely control their movement.</p>\n\n<h3 id=\"258-aa---i-need-these-buttons-to-be-big-enough-that-im-sure-i-will-press-the-right-one\">2.5.8 (AA) - “I need these buttons to be big enough that I’m sure I will press the right one”</h3>\n\n<p>The size of the target for pointer inputs should be at least 24 by 24 CSS pixels.</p>\n\n<p>This comes along with criterion 2.5.5 introduced in WCAG 2.1 (<a href=\"https://www.w3.org/WAI/WCAG21/Understanding/target-size.html\">minimum target size</a>) - this is still valid, but it’s AAA level.</p>\n\n<p>Buttons that are too small or too close to each other are a common problem for people with mobility issues. It’s difficult to interact with the right one. This\nrule is not the same as the AAA success rule, which says that things you click on need to be big enough to easily click on. This rule is about making sure that\nthings you click on are either naturally big enough or spaced far enough apart from other things, so you don’t accidentally click on the wrong thing. The worst\nthing here that can happen is that you accidentally submit something you didn’t want to!</p>\n\n<p>How about links that are stacked on top of each other or small images adjacent to each other? How can we make them fulfill SC 2.5.8?</p>\n\n<p>Let’s use an imaginary 24px diameter circle. If you draw this circle in the center of your link - if that imaginary circle doesn’t intersect another target or\nanother imaginary circle from a small target, then the link is sufficiently spaced.</p>\n\n<p><img src=\"/img/articles/2024-01-24-wcag-2-2/imaginary-circles.png\" alt=\"\" class=\"small-image\" /></p>\n\n<p>Just as many other success criteria, there are exceptions, and the most important for us are:</p>\n<ul>\n  <li>links in text,</li>\n  <li>user-agent controls - as we do not always control what the browser provides. Common examples are select elements (checkboxes, date pickers, etc.); note, that\nthis rule does apply to these structures if you are building them by yourself,</li>\n  <li>essential elements - when things just have to be close to each other; an example of this is a map.</li>\n</ul>\n\n<h2 id=\"2413-aaa---wh-where-is-my-keyboard-focus-\">2.4.13 (AAA) - “Wh… Where is my keyboard focus..? :(”</h2>\n\n<p>Although it is AAA level, it was hoped and tried to have the success criterion at AA.</p>\n\n<p>Focus helps people who rely on keyboard navigation - not only people who are using some assistive technologies but also power users (curb-cut effect again!). The\nfocus indicator must be visible, with good contrast and size:</p>\n<ul>\n  <li>contrast ratio must be at least 3:1 between the same pixels in the focused and unfocused states,</li>\n  <li>size needs to be at least the area of a 2px thick perimeter on the unfocused components.</li>\n</ul>\n\n<p>The following 4 criteria are meant to improve <strong>cognitive accessibility</strong>.</p>\n\n<h2 id=\"326-a---i-need-help-but-i-have-no-idea-how-to-find-it\">3.2.6 (A) - “I need help but I have no idea how to find it!”</h2>\n\n<p>This criterion does not require that help be provided. But if it is - it should be easy to find and its placement should be consistent among multiple screens\n(for example: always in the same place in the footer). The help section location may change as the viewport size changes, but it must be consistent across pages at the\nsame viewport size.</p>\n\n<h2 id=\"337-a---ive-just-told-you-that-why-do-i-have-to-repeat-myself\">3.3.7 (A) - “I’ve just told you that, why do I have to repeat myself?”</h2>\n\n<p>Do not require people to enter the same information more than once during a process. It makes it easier for people with cognitive disabilities to avoid errors\nand finish a multi-step task by not making them repeat information they’ve already entered in one step when they move on to the next step.</p>\n\n<p>Let’s think of a very common example - filling shipping address and billing address. In many cases they are exactly the same - so why should the user provide\nthe same information twice? Good practice here is to provide a simple checkbox “same as shipping address”.</p>\n\n<p>Another example is to give the possibility to select previously provided information - for example, you can save in your account settings a few addresses, and\nafter purchase, you can just select an option instead of reentering all the data.</p>\n\n<p>There are a few exceptions:</p>\n<ul>\n  <li>reentering information is <a href=\"https://www.w3.org/WAI/WCAG22/Understanding/redundant-entry#dfn-essential\">essential</a>,</li>\n  <li>security reasons (when you have to reenter your password),</li>\n  <li>previously provided information may no longer be valid (for example some government sites may force you to fill form with crucial data once in a while)</li>\n</ul>\n\n<h2 id=\"338-aa--339-aaa---accessible-authentication\">3.3.8 (AA) &amp; 3.3.9 (AAA) - Accessible authentication</h2>\n\n<p>Accessible authentication requires that there is a path to authenticate that doesn’t rely on cognitive function tests such as memorization, transcription, or\nsolving puzzles. This requirement will help people with cognitive disabilities including memory, dyslexia, dyscalculia… but not only (check these <a href=\"https://www.boredpanda.com/captcha-struggles-fails/\">captcha struggles fails</a>).</p>\n\n<p>AA allows CAPTCHAs that use recognizing common objects such as “select all the pictures that include dogs” but the AAA success criterion does not allow for that.</p>\n\n<h2 id=\"the-future-of-wcag\">The future of WCAG</h2>\n<p>Currently, a task force is working on WCAG 2.x maintenance, addressing issues (there are over 600 of them opened on <a href=\"https://github.com/w3c/wcag/issues\">GitHub</a>).\nWCAG 2.2 will be around for awhile, and WCAG 3.0 is still years away from becoming a recommendation (…and that will be a very long transition).</p>\n\n<p>It’s 2023, and WCAG 2.0 was shipped in 2001 - the world changed a lot during these years and technology evolved rapidly. WCAG 3.0 (“Silver”) aims to fill gaps,\nreflect real-world accessibility, and prioritize issues more effectively. Research began in 2016, and in 2021 the first draft was shown - but it is still very\nraw (check <a href=\"https://www.w3.org/WAI/GL/task-forces/silver/wiki/Major_Milestones_for_Silver\">major milestones for Silver</a>).</p>\n\n<p>In conclusion, WCAG remains a vital framework for ensuring digital accessibility and empowering individuals with disabilities to fully engage with online\ncontent. The introduction of new criteria in WCAG 2.2 signifies a commitment to continually improving and expanding accessibility guidelines to meet the diverse\nneeds of users. As we look to the future of WCAG, with the development of WCAG 3.0 on the horizon, it is clear that accessibility is not just an evolving field\nbut a transformative one. The journey towards a more inclusive digital landscape may be ongoing, but it is driven by a shared dedication to ensuring that the\nweb is a place where everyone can participate, regardless of their abilities. Embracing these evolving standards and fostering a culture of accessibility will\nnot only benefit individuals with disabilities but will ultimately create a more equitable and accessible online world for all.</p>\n","contentSnippet":"Ready to turn web accessibility from a headache into a breeze? Join us as we demystify WCAG, explore its latest 2.2 version, and gaze into the future of digital\ninclusivity. Get ready for a journey that’s as enlightening as it is entertaining!\nWhat exactly is WCAG?\nImagine you are opening a bar and want to invite all your friends there, and you want them to have a great time hanging out at your place. But some of your\nfriends have different disabilities, such as using wheelchairs or having trouble seeing or hearing. You want everyone to have fun, right? Well, WCAG which stands for\nWeb Contents Accessibility Guidelines, is set of rules to make sure Internet is like a bar that everyone can enjoy.\nFour principles of accessibility\nThe guidelines and Success Criteria are based on four key principles that provide the fundamental basis for anyone to access and use web content. Let me explain\nthem as simply as possible:\nPerceivable (big text and clear pictures) - everything on a website should be easy to see and understand. Imagine reading a book. Some people need big\nletters, and some might not see well. So, WCAG says websites should have big letters and clear pictures, like a book with large print and colorful\nillustrations,\nOperable (easy to click and move) - the user interface and navigation of a website are easy to operate. It means that people should be able to interact\nwith the content using various methods, such as a keyboard or assistive technologies like screen readers. It also encourages predictable and consistent\nnavigation and input methods,\nUnderstandable (no confusing stuff) - ever been on a website and got lost because it was too complicated? WCAG says websites should be like a\nstraightforward treasure hunt, not a confusing maze. They should have clear instructions and be easy to understand, just like a fun treasure hunt game with\nsimple clues,\nRobust (works everywhere) - robustness means that websites should be built to last and work well with different technologies. This ensures that websites\nremain accessible as technology evolves. It’s like building a house with strong foundations so that it stands the test of time.\nIn essence, WCAG is like a set of rules and recommendations to make the Internet a welcoming and usable place for everyone, regardless of their abilities or\ndisabilities. It’s about creating a digital world that is inclusive and user-friendly for all.\nWCAG guidelines are organized into three levels of conformance:\nA - addressing the most critical issues to ensure a minimal level of accessibility\nAA - covers a broader range of requirements; the website is more accessible and user-friendly\nAAA - ensures the highest level of accessibility\nTimeline\nI don’t want to bore you with details, but I think it is good to understand that WCAG is not something new. It’s been around for quite a while!\n1997 - W3C started working on WCAG 1.0\n1999 - WCAG 1.0 shipped\n2001-2007 - WCAG 2.0\n2017-2018 - WCAG 2.1\n2020 - W3C started working on WCAG 2.2\n2023 - WCAG 2.2\nWCAG 2.2\nThe new version introduces 9 new success criteria (SC) - two at level A, four at level AA, and three at AAA. Let’s give them a closer look.\n2.4.11 (A) & 2.4.12 (AA) - “Stop hiding my focus!”\nI think we can all agree here - it is just annoying if you are browsing the web and all of a sudden something appears - a modal, cookie banner, chat\nwidget, and covers what we were just reading.\nSo make sure the focus is not obscured. It also applies to submenus and sticky headers.\nFor A and AA levels focused user interface component should be at least partially visible; for AAA it must be fully visible.\n2.5.7 (AA) - “Aaargh! I can’t do this drag & drop thing! I need another way to do this..!”\nIf a feature on a website or app can be used by moving your cursor or finger in a dragging motion (like when you click and drag a slider), it should also be\npossible to use that feature without dragging.\nThis helps people with mobility difficulties, especially when it might be difficult for them to press and hold down and precisely control their movement.\n2.5.8 (AA) - “I need these buttons to be big enough that I’m sure I will press the right one”\nThe size of the target for pointer inputs should be at least 24 by 24 CSS pixels.\nThis comes along with criterion 2.5.5 introduced in WCAG 2.1 (minimum target size) - this is still valid, but it’s AAA level.\nButtons that are too small or too close to each other are a common problem for people with mobility issues. It’s difficult to interact with the right one. This\nrule is not the same as the AAA success rule, which says that things you click on need to be big enough to easily click on. This rule is about making sure that\nthings you click on are either naturally big enough or spaced far enough apart from other things, so you don’t accidentally click on the wrong thing. The worst\nthing here that can happen is that you accidentally submit something you didn’t want to!\nHow about links that are stacked on top of each other or small images adjacent to each other? How can we make them fulfill SC 2.5.8?\nLet’s use an imaginary 24px diameter circle. If you draw this circle in the center of your link - if that imaginary circle doesn’t intersect another target or\nanother imaginary circle from a small target, then the link is sufficiently spaced.\n\nJust as many other success criteria, there are exceptions, and the most important for us are:\nlinks in text,\nuser-agent controls - as we do not always control what the browser provides. Common examples are select elements (checkboxes, date pickers, etc.); note, that\nthis rule does apply to these structures if you are building them by yourself,\nessential elements - when things just have to be close to each other; an example of this is a map.\n2.4.13 (AAA) - “Wh… Where is my keyboard focus..? :(”\nAlthough it is AAA level, it was hoped and tried to have the success criterion at AA.\nFocus helps people who rely on keyboard navigation - not only people who are using some assistive technologies but also power users (curb-cut effect again!). The\nfocus indicator must be visible, with good contrast and size:\ncontrast ratio must be at least 3:1 between the same pixels in the focused and unfocused states,\nsize needs to be at least the area of a 2px thick perimeter on the unfocused components.\nThe following 4 criteria are meant to improve cognitive accessibility.\n3.2.6 (A) - “I need help but I have no idea how to find it!”\nThis criterion does not require that help be provided. But if it is - it should be easy to find and its placement should be consistent among multiple screens\n(for example: always in the same place in the footer). The help section location may change as the viewport size changes, but it must be consistent across pages at the\nsame viewport size.\n3.3.7 (A) - “I’ve just told you that, why do I have to repeat myself?”\nDo not require people to enter the same information more than once during a process. It makes it easier for people with cognitive disabilities to avoid errors\nand finish a multi-step task by not making them repeat information they’ve already entered in one step when they move on to the next step.\nLet’s think of a very common example - filling shipping address and billing address. In many cases they are exactly the same - so why should the user provide\nthe same information twice? Good practice here is to provide a simple checkbox “same as shipping address”.\nAnother example is to give the possibility to select previously provided information - for example, you can save in your account settings a few addresses, and\nafter purchase, you can just select an option instead of reentering all the data.\nThere are a few exceptions:\nreentering information is essential,\nsecurity reasons (when you have to reenter your password),\npreviously provided information may no longer be valid (for example some government sites may force you to fill form with crucial data once in a while)\n3.3.8 (AA) & 3.3.9 (AAA) - Accessible authentication\nAccessible authentication requires that there is a path to authenticate that doesn’t rely on cognitive function tests such as memorization, transcription, or\nsolving puzzles. This requirement will help people with cognitive disabilities including memory, dyslexia, dyscalculia… but not only (check these captcha struggles fails).\nAA allows CAPTCHAs that use recognizing common objects such as “select all the pictures that include dogs” but the AAA success criterion does not allow for that.\nThe future of WCAG\nCurrently, a task force is working on WCAG 2.x maintenance, addressing issues (there are over 600 of them opened on GitHub).\nWCAG 2.2 will be around for awhile, and WCAG 3.0 is still years away from becoming a recommendation (…and that will be a very long transition).\nIt’s 2023, and WCAG 2.0 was shipped in 2001 - the world changed a lot during these years and technology evolved rapidly. WCAG 3.0 (“Silver”) aims to fill gaps,\nreflect real-world accessibility, and prioritize issues more effectively. Research began in 2016, and in 2021 the first draft was shown - but it is still very\nraw (check major milestones for Silver).\nIn conclusion, WCAG remains a vital framework for ensuring digital accessibility and empowering individuals with disabilities to fully engage with online\ncontent. The introduction of new criteria in WCAG 2.2 signifies a commitment to continually improving and expanding accessibility guidelines to meet the diverse\nneeds of users. As we look to the future of WCAG, with the development of WCAG 3.0 on the horizon, it is clear that accessibility is not just an evolving field\nbut a transformative one. The journey towards a more inclusive digital landscape may be ongoing, but it is driven by a shared dedication to ensuring that the\nweb is a place where everyone can participate, regardless of their abilities. Embracing these evolving standards and fostering a culture of accessibility will\nnot only benefit individuals with disabilities but will ultimately create a more equitable and accessible online world for all.","guid":"https://blog.allegro.tech/2024/01/wcag-2-2.html","categories":["tech","accessibility","a11y","wcag"],"isoDate":"2024-01-23T23:00:00.000Z"}],"jobs":[{"id":"743999972114613","name":"Software Engineer (.NET) - Opennet","uuid":"fd4f6064-4a97-4bb0-94d4-64080aa93b37","jobAdId":"fd2f00d1-0366-439f-bad2-248f91570721","defaultJobAd":true,"refNumber":"REF4222P","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2024-03-06T11:03:03.858Z","location":{"city":"Warsaw, Poznań","region":"Masovian Voivodeship","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"f7af19b5-5d6a-43a0-9a2b-1e99277515c7","valueLabel":"Opennet.pl Sp. z o.o."}],"visibility":"PUBLIC","ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999972114613","language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999971068323","name":"Senior Salesforce Software Engineer","uuid":"db041a48-6655-4e84-a522-0f460631195d","jobAdId":"d0b08f39-f02c-4e32-ad36-475f900ddfc1","defaultJobAd":true,"refNumber":"REF4747J","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2024-03-01T12:30:56.335Z","location":{"city":"Warsaw, Poznań","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"26b58095-3c5f-4596-937f-27547fb80b07","valueLabel":"5"},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."}],"visibility":"PUBLIC","ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999971068323","creator":{"name":"Agnieszka Adamus"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999970171023","name":"(.NET) Software Engineer - OpenNet","uuid":"299e03b3-8d23-41c5-aac9-007801ebf1aa","jobAdId":"0f49adbf-1c3e-46f3-80df-a3408163f289","defaultJobAd":true,"refNumber":"REF4800C","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2024-02-27T13:11:13.332Z","location":{"city":"Warsaw","region":"Masovian Voivodeship","country":"pl","remote":false,"latitude":"52.2296756","longitude":"21.0122287"},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"f7af19b5-5d6a-43a0-9a2b-1e99277515c7","valueLabel":"Opennet.pl Sp. z o.o."}],"visibility":"PUBLIC","ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999970171023","creator":{"name":"Wiktoria Mitruk"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999967550443","name":"Senior Software Engineer (Java/Kotlin) - Technology Consumer Experience","uuid":"c0630d2d-eaba-42c6-bd2c-48dc4689acb9","jobAdId":"501ba2ce-9d33-4ca7-90b1-e0871f8b6687","defaultJobAd":false,"refNumber":"REF4072X","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2024-02-14T13:42:20.139Z","location":{"city":"Poznań, Warsaw","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."}],"visibility":"PUBLIC","ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999967550443","language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999967549418","name":"Software Engineer (Java/Kotlin) - Delivery Experience","uuid":"2010b497-d27d-4623-992d-f6fde7093f4a","jobAdId":"ee69cca3-645d-4080-af3b-1d9a32601d7b","defaultJobAd":false,"refNumber":"REF4072X","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2024-02-14T13:40:57.032Z","location":{"city":"Warszawa, Poznań","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."}],"visibility":"PUBLIC","ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999967549418","language":{"code":"en","label":"English","labelNative":"English (US)"}}],"events":[{"created":1702979844000,"duration":187200000,"id":"298027809","name":"UX Research Confetti - IV edycja","date_in_series_pattern":false,"status":"upcoming","time":1716202800000,"local_date":"2024-05-20","local_time":"13:00","updated":1702985612000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":28,"venue":{"id":27549223,"name":"Allegro Warsaw Office","lat":52.23224639892578,"lon":20.992111206054688,"repinned":true,"address_1":"ul. Żelazna 51/53","city":"Warszawa","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/298027809/","description":"**🎉 Przedstawiamy 4. edycję UX Research Confetti - bezpłatną, polską konferencję poświęconą badaniom UX, organizowaną przez zespół badaczy z Allegro.** ✨ Konferencja odbędzie się w…","visibility":"public","member_pay_fee":false},{"created":1701092071000,"duration":7200000,"id":"297614064","name":"Allegro Tech Talks #40 - Testy: dynamiczne dashboardy & optymalizacja pracy","date_in_series_pattern":false,"status":"past","time":1701968400000,"local_date":"2023-12-07","local_time":"18:00","updated":1701978668000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":13,"venue":{"id":27528185,"name":"Allegro Kraków Office","lat":50.06517028808594,"lon":19.951927185058594,"repinned":true,"address_1":"Lubicz Park A (5 piętro)","address_2":"ul. Lubicz 23","city":"Kraków","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/297614064/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-talk-40/](https://app.evenea.pl/event/allegro-tech-talk-40/) Jeszcze przed świętami zapraszamy Was na #40 wydarzenie z serii Allegro Tech Talk, podczas których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy…","how_to_find_us":"Biuro Allegro znajduje się w Centrum Biurowym Lubicz. \n\nObok budynku znajduje się przystanek Lubicz. Przy przystanku zatrzymują się tramwaje 2, 4, 10, 14, 20, 52, 62, 64 oraz autobusy: 124, 152, 424, 601, 611, 662, 664.\n\n","visibility":"public","member_pay_fee":false},{"created":1700495058000,"duration":7200000,"id":"297480100","name":"Allegro Tech Talks #39 - Big Data: o podejściu do pracy z danymi","date_in_series_pattern":false,"status":"past","time":1701363600000,"local_date":"2023-11-30","local_time":"18:00","updated":1701377876000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":50,"venue":{"id":27549223,"name":"Allegro Warsaw Office","lat":52.23224639892578,"lon":20.992111206054688,"repinned":true,"address_1":"ul. Żelazna 51/53","city":"Warszawa","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/297480100/","description":"**Rejestracja: [https://app.evenea.pl/event/allegro-tech-talk-39/](https://app.evenea.pl/event/allegro-tech-talk-39/)** Bądźcie z nami podczas #39 wydarzenia z serii **Allegro Tech Talk**, podczas których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy podczas rozmów przy…","how_to_find_us":"Biuro Allegro znajduje się w kompleksie Fabryki Norblina (wejście Plater 3 od ul. Żelaznej). W niedalekiej odległości znajdują się dwie stacje metra linii M2, Rondo Daszyńskiego i Rondo ONZ. Autobusy, tramwaje i inne środki transportu sprawdzisz też na: https://fabrykanorblina.pl/dojazd","visibility":"public","member_pay_fee":false},{"created":1685697967000,"duration":7200000,"id":"293929321","name":"Allegro Tech Talks #38 - Mobile: o iOS bez spinki","date_in_series_pattern":false,"status":"past","time":1686760200000,"local_date":"2023-06-14","local_time":"18:30","updated":1686773845000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":17,"venue":{"id":27549223,"name":"Allegro Warsaw Office","lat":0,"lon":0,"repinned":true,"address_1":"ul. Żelazna 51/53","city":"Warszawa","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/293929321/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-talk-38/](https://app.evenea.pl/event/allegro-tech-talk-38/) Ostatnie przed przerwą wakacyjną, stacjonarne spotkanie z cyklu Allegro Tech Talks, na których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy podczas rozmów…","how_to_find_us":"Biuro Allegro znajduje się w kompleksie Fabryki Norblina (wejście Plater 3 od ul. Żelaznej). W niedalekiej odległości znajdują się dwie stacje metra linii M2, Rondo Daszyńskiego i Rondo ONZ. Autobusy, tramwaje i inne środki transportu sprawdzisz też na: https://fabrykanorblina.pl/dojazd","visibility":"public","member_pay_fee":false}],"podcasts":[{"title":"O pracy analityków w obszarze technologii i przetwarzaniu danych w dużej skali","link":"https://podcast.allegro.tech/o-pracy-analitykow-w-obszarze-technologii-i-przetwarzaniu-danych-w-duzej-skali/","pubDate":"Thu, 29 Feb 2024 00:00:00 GMT","content":"Na czym polega praca analityków w obszarze technologii w Allegro? Jakich narzędzi i technologii na co dzień używają osoby pracujące na tych stanowiskach? Jak efekty pracy analityków wpływają na naszą platformę, produkty i funkcjonalności? Czym zajmuje się Data Product Manager w Allegro Pay? Dlaczego monety są ważnym elementem ekosystemu Allegro? Posłuchajcie kolejnego odcinka Allegro Tech Podcast tym razem z udziałem Adrianny Napiórkowskiej - Data Product Managerki w Allegro Pay oraz Kaya Akcelikli - Senior Managera w obszarze Data w Allegro.","contentSnippet":"Na czym polega praca analityków w obszarze technologii w Allegro? Jakich narzędzi i technologii na co dzień używają osoby pracujące na tych stanowiskach? Jak efekty pracy analityków wpływają na naszą platformę, produkty i funkcjonalności? Czym zajmuje się Data Product Manager w Allegro Pay? Dlaczego monety są ważnym elementem ekosystemu Allegro? Posłuchajcie kolejnego odcinka Allegro Tech Podcast tym razem z udziałem Adrianny Napiórkowskiej - Data Product Managerki w Allegro Pay oraz Kaya Akcelikli - Senior Managera w obszarze Data w Allegro.","guid":"https://podcast.allegro.tech/o-pracy-analitykow-w-obszarze-technologii-i-przetwarzaniu-danych-w-duzej-skali/","isoDate":"2024-02-29T00:00:00.000Z"},{"title":"Programowanie - co liczy się w nim najbardziej?","link":"https://podcast.allegro.tech/programowanie-co-liczy-sie-w-nim-najbardziej/","pubDate":"Thu, 01 Feb 2024 00:00:00 GMT","content":"Jaką ścieżkę trzeba przejść, aby dobrze programować? Gdzie zdobywać wiedzę, doświadczenie i szlifować swoje umiejętności? Ile czasu potrzeba aby nabrać doświadczenia i jak zadbać o swój dalszy rozwój? Na czym w praktyce polegają role (Senior) Software Engineer oraz Engineering Manager w Allegro i kto najlepiej sprawdza się w naszych zespołach? Posłuchajcie nowego odcinka Allegro Tech Podcast z udziałem Rafała Schmidta (Senior Software Engineer) i Waldemara Panasa (Manager, Engineering) z Allegro.","contentSnippet":"Jaką ścieżkę trzeba przejść, aby dobrze programować? Gdzie zdobywać wiedzę, doświadczenie i szlifować swoje umiejętności? Ile czasu potrzeba aby nabrać doświadczenia i jak zadbać o swój dalszy rozwój? Na czym w praktyce polegają role (Senior) Software Engineer oraz Engineering Manager w Allegro i kto najlepiej sprawdza się w naszych zespołach? Posłuchajcie nowego odcinka Allegro Tech Podcast z udziałem Rafała Schmidta (Senior Software Engineer) i Waldemara Panasa (Manager, Engineering) z Allegro.","guid":"https://podcast.allegro.tech/programowanie-co-liczy-sie-w-nim-najbardziej/","isoDate":"2024-02-01T00:00:00.000Z"},{"title":"MBox: server-driven UI dla aplikacji mobilnych","link":"https://podcast.allegro.tech/mbox-server-driven-ui-dla-aplikacji-mobilnych/","pubDate":"Thu, 16 Nov 2023 00:00:00 GMT","content":"Czym jest i jak powstał MBox: wewnętrzna platforma server-driven UI dla aplikacji mobilnych w Allegro? Skąd wziął się pomysł na to rozwiązanie i na jakie bolączki odpowiada? Dlaczego zdecydowaliśmy się na budowanie tego typu rozwiązania in-house i z jakimi wyzwaniami mierzyliśmy się w procesie tworzenia? Co wyróżnia zespoły pracujące nad tym narzędziem i jak pracuje im się bez Product Ownera? Posłuchajcie siódmego odcinka Allegro Tech Podcast z udziałem Pauliny Sadowskiej i Tomasza Gębarowskiego - Managerów w obszarze Technical Platform Services w Allegro.","contentSnippet":"Czym jest i jak powstał MBox: wewnętrzna platforma server-driven UI dla aplikacji mobilnych w Allegro? Skąd wziął się pomysł na to rozwiązanie i na jakie bolączki odpowiada? Dlaczego zdecydowaliśmy się na budowanie tego typu rozwiązania in-house i z jakimi wyzwaniami mierzyliśmy się w procesie tworzenia? Co wyróżnia zespoły pracujące nad tym narzędziem i jak pracuje im się bez Product Ownera? Posłuchajcie siódmego odcinka Allegro Tech Podcast z udziałem Pauliny Sadowskiej i Tomasza Gębarowskiego - Managerów w obszarze Technical Platform Services w Allegro.","guid":"https://podcast.allegro.tech/mbox-server-driven-ui-dla-aplikacji-mobilnych/","isoDate":"2023-11-16T00:00:00.000Z"},{"title":"O chatbotach i ich wpływie na Allegro","link":"https://podcast.allegro.tech/o-chatbotach-i-ich-wplywie-na-allegro/","pubDate":"Wed, 11 Oct 2023 00:00:00 GMT","content":"Jakie procesy automatyzujemy w Allegro i co warto o nich wiedzieć w kontekście obszaru Customer Experience? W czym pomagają nam chatboty, jak je rozwijamy i dbamy o ich jakość? Kim są Allina oraz Albert i co mają wspólnego z automatyzacją? Za jakie rozwiązania otrzymaliśmy nagrodę hiperautomatyzacji? O tym wszystkim posłuchacie w odcinku z udziałem Rafała Gajewskiego - Managera w obszarze IT Services w Allegro.","contentSnippet":"Jakie procesy automatyzujemy w Allegro i co warto o nich wiedzieć w kontekście obszaru Customer Experience? W czym pomagają nam chatboty, jak je rozwijamy i dbamy o ich jakość? Kim są Allina oraz Albert i co mają wspólnego z automatyzacją? Za jakie rozwiązania otrzymaliśmy nagrodę hiperautomatyzacji? O tym wszystkim posłuchacie w odcinku z udziałem Rafała Gajewskiego - Managera w obszarze IT Services w Allegro.","guid":"https://podcast.allegro.tech/o-chatbotach-i-ich-wplywie-na-allegro/","isoDate":"2023-10-11T00:00:00.000Z"}]},"__N_SSG":true}