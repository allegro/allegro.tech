{"pageProps":{"posts":[{"title":"How to include refactoring into product development roadmap? Reducing technical debt inspired by real options identification","link":"https://blog.allegro.tech/2022/06/debt-reduction-in-the-product-roadmap.html","pubDate":"Tue, 07 Jun 2022 00:00:00 +0200","authors":{"author":[{"name":["Olga Dudzik"],"photo":["https://blog.allegro.tech/img/authors/olga.dudzik.jpg"],"url":["https://blog.allegro.tech/authors/olga.dudzik"]}]},"content":"<p>Nowadays, technical debt can be considered the bread and butter of most IT-powered enterprises around the world.\nAlmost every company that survived the startup phase and managed to deliver its first products to customers will face at some point technical challenges related to past architectural decisions. Although code engineering gets better every year, we cannot argue with the obvious fact of life: the market will always force many of us to deliver tech products faster than we wish. Time To Market has always been a key success factor for many product companies and it puts a lot of pressure on Engineering to keep up with challenging deadlines.</p>\n\n<p>Statistics explicitly show the scale of the problem. According to the survey conducted in 2020 by McKinsey<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup>, tech debt can reach up to as much as 40% of the whole technology value. On average 10-20% of IT budget is ultimately consumed by tech debt management and most CIOs interviewed consider the problem significantly increasing over past years, especially in enterprise-size companies<sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\" rel=\"footnote\">2</a></sup>.</p>\n\n<p>As disturbing as it sounds, acknowledging the magnitude of the problem is the first step to dealing with it.</p>\n\n<p>So, here we get to the Product Management reality. Even if we are lucky and after a product discovery we manage to navigate a perfect niche where we can provide a long-awaited, successful product, we still can fail having technology adjusted to our plans and needs. And that would be a real PM tragedy, wouldn’t it? To cap it all, it might be hard to even talk about innovative solutions when maneuvering around limitations imposed by the legacy code. So any further development of our product may become increasingly tricky and take more time which eventually poses a threat to staying competitive.</p>\n\n<p>Bearing that in mind, no reasonable Product Manager can afford ignoring the gravity of code complexity and shady legacy.</p>\n\n<p>Today is the day to start a crusade against technical debt in your products. Nonetheless before we start we must all admit: building a yearly roadmap consisting mostly of incomprehensible technical deliveries that cannot be easily attributed to business value will not make us most popular Product Managers out there, to put it mildly. In most companies proposing such a backlog will result in heated discussions about targets, KPIs and wasting team’s capacity. Work that does not end up with a significant increment is hard to defend. At the end technical product development is mostly not a charity effort and it is supposed to deliver financial outcomes - the sooner, the better.</p>\n\n<p>The situation gets even more complicated in publicly listed companies that report to stakeholders on a regular basis. Declaring work without making any explicit promise of near-future apparent return on investment may seem unexplainable. Technical debt reduction on its own is strictly connected with vast uncertainty as long as it is not presented holistically in a broader context. So how can we approach Roadmaps to make debt reduction more appealing for our audience?</p>\n\n<h2 id=\"take-a-look-outside-of-the-it-world\">Take a look outside of the IT world.</h2>\n\n<p>I believe that especially in Product Management we appreciate inspirations from other industries. And this case should not be an exception. Financial industry and analysts working on companies’ valuations have been struggling with a similar challenge for decades. Is it worth investing in a company that may not seem to be an appealing opportunity now in terms of near-future ROI? How to assess potential profits from innovative ideas on the table? How can we, in general, assess long-term impact of work at the grass roots? And which tech company is a good investment opportunity? Our development backlogs should answer similar questions - which of these debt-reduction tasks are worth pursuing and what can we achieve? Which of them are really good opportunities for us? And finally - how to prove to stakeholders the real value of such initiatives? To approach these questions we can use the idea of real options.</p>\n\n<p>Let us discover together the roots of real options. The idea itself dates back to 1977. Stewart Myers coined this term describing real options as “opportunities to purchase real assets on possibly favorable terms”<sup id=\"fnref:3\" role=\"doc-noteref\"><a href=\"#fn:3\" class=\"footnote\" rel=\"footnote\">3</a></sup> and declaring that each company should be aware of its real assets and real options. Since then, the idea has evolved significantly and has been used in multiple methodologies not only for financial valuations, but also for determining value drivers in a variety of industries. It has been particularly attractive to IT enterprises as it embraces dealing with high uncertainty.</p>\n\n<p>Inspired by real options theory, I reckon that we should stop considering technical debt in terms of short-term Profit and Loss accounting.</p>\n\n<p>Looking only at the nearest future, refactoring activities will mostly look as cost centers without any outlook on further potential profits. However, once we change the perspective and start considering current refactoring investments as enablers for future product options, we are able to grasp the full range of benefits to be gained. Real options perspective should open our roadmaps for long-term thinking and it can allow us to optimize our decision-making process.</p>\n\n<p>However, currently existing academic and financial models are mostly complex and time-consuming to perform. Therefore the idea of real options will serve here mostly as an inspiration for a really simple exercise that will aim to transform the general approach towards technical debt.</p>\n\n<p>Bearing in mind the PM’s reality of limited time and resources, the aim is to keep the analysis quick. Moreover, we would like the output to be as easy and understandable as possible, so it can be fitting for the broad audience. Following real options terminology, we can assume that each resolved technical debt issue is our “real option” - a potential value driver and opportunity to create or improve some products (“real assets”). This exercise will focus on identifying and mapping options to future assets.</p>\n\n<p>In the Product Management case, investments (time of our developers) will be made to remove some technical obstacles and they will become product enablers. Opportunities on the other hand will be translated into tangible deliveries and potentially attractive positions in our future Roadmaps. And in the best case, these opportunities may even open some new doors to further developments into currently unknown and unreachable areas. Our ultimate goal is to maximize opportunities while minimizing effort required to enable them.</p>\n\n<p>I strongly believe that it is really tricky to evaluate analyzed efforts and hopes from the financial perspective at an early stage of analysis. Calculating ROI moneywise can be extremely time-consuming and tends to be based heavily on “guesstimates” (“an approximate calculation of the size or amount of something when you do not know all the facts”<sup id=\"fnref:4\" role=\"doc-noteref\"><a href=\"#fn:4\" class=\"footnote\" rel=\"footnote\">4</a></sup>) . Nonetheless, at the same time it should be fairly possible and informative to at least roughly estimate our potential works vs. hopes in T-shirt sizing method (or any other preferred manner, up to you) and I would strongly recommend to follow this path at the beginning. As it is fairly simple and flexible, we can use the same concept to evaluate profits or attractivity of products or opportunities.</p>\n\n<h2 id=\"where-should-we-start-tech-debt---value-mapping\">Where should we start tech debt - value mapping?</h2>\n\n<p>Let us go through the process step by step. I would recommend going through this discovery process together with your technical team and to transform it into collaborative work. It can be a rewarding exercise for the whole team and it should boost the sense of agency.</p>\n\n<p>First of all we should list all services/topics touched by our technical debt. They can be grouped into areas that will be addressed together to achieve the best efficiency. Depending on the specifics of the system, the granularity or nature of issues can differ. The main aim here is to review the general current state of tech without doing long and costly deep-dives. Our aim is to detect problematic areas avoiding major investments in solution analysis. In this exercise the technical team is the key. The more experienced our engineers are and the better they know their code, the more reliable outcome we get.</p>\n\n<p>The second step is ideation. Let’s determine our real options. Each of the listed services or areas, while solved, should be considered as an enabler for further system development. So this is the time to brainstorm together: assuming that problem A is resolved, what kind of new capabilities will be available for us? What kind of services or products can we build then? Or maybe there are some meaningful improvements that will make our product more convenient and should attract more users? We can and should go even further: what can we build assuming that more than one of the detected issues is closed? This is a perfect moment for the Product Manager to step in and to present the broad vision for the Product as inspiration. Wishful thinking, benchmarking, research and UX studies - all of these tools will prove to be useful in this workshop.</p>\n\n<p>At the end of step two we should be able to draw a tree diagram presenting clearly technical blockers as potential new opportunity enablers:</p>\n\n<p><img src=\"/img/articles/2022-06-07-debt-reduction-in-the-product-roadmap/img1.png\" alt=\"Figure 1\" /></p>\n\n<p>Tree diagram mapping technical debt areas to related product/business opportunities.</p>\n\n<p>Step three is all about evaluation. As mentioned before, I recommend using T-shirt sizing as it brings simplicity into very complex situations. I find T-shirt sizing an attractive estimation technique as it is quite intuitive and introduces relativity between analyzed entities. Sizes that we know from T-shirt labels (XS-XXL) are used to assess work needed to deliver a given task. At this stage our problems are not deeply analyzed and they are not broken down into particular stories/development tasks. We are working with high-level problems and ideas as we do not have time to spend weeks on analysis of topics that may not end up on our roadmap. In this step we can split into two work groups: a technical one and a business one. Technical team should focus on assessing the complexity of each detected technical task - both from debt-areas but also from prospective product opportunities (they require some work too!). If given problem seems to be fairly simple, it can be evaluated as an S. If something requires a major rebuild and redesigning the basics - it could be an XL. Let us just bear in mind that assessment should cover end-to-end work so the complexity of E2E &amp; regression testing should be a vital part of this estimation too. What is more, covering the uncertainty factor in this exercise can be useful so I would not hesitate to assign bigger values for more vague areas. Effort estimation will be presented on the diagram below as purple boxes.</p>\n\n<p>Business team (product managers and business stakeholders) will work on evaluating all the listed capabilities. As always, they should be considered in the broader context, so any product validation tools are handy. Apart from the business impact of each solution, we should also bear in mind if it fits into expected company strategy and if we can see it bringing us any competitive advantage when delivered in the more or less distant future (we have some issues to be resolved first!). Opportunities will be marked on the diagram as green boxes.</p>\n\n<p><img src=\"/img/articles/2022-06-07-debt-reduction-in-the-product-roadmap/img2.png\" alt=\"Figure 2\" /></p>\n\n<h2 id=\"roadmapping\">Roadmapping</h2>\n\n<p>Having this analysis in hand, we can pick our best candidates for the roadmap depending on the team’s capacity available. While it will never be easy to choose the best path, it should be possible to navigate works that have the best potential to bring us noticeable benefits. While pitching the idea of technical debt reduction for the management team, we usually rely on financial aspects of reducing maintenance costs of old code (e.g. we can get potential savings based on maintenance work reports from previous months). After this analysis we should be additionally equipped with the reliable documentation of new business opportunities enabled.</p>\n\n<p>There are at least two approaches to include refactoring on the roadmap, depending on the company’s specifics. Presenting detected technical-debt tasks as a stage zero of your product development may prove to be handy for organizations that are particularly reluctant to acknowledge refactoring as opportunities. In such a case debt reduction could be ‘hidden’ in the Opportunity roadmap item represented by longer actual delivery time. It is worth noting that this approach gives less clarity when it comes to presenting dependencies:</p>\n\n<p><img src=\"/img/articles/2022-06-07-debt-reduction-in-the-product-roadmap/img3.png\" alt=\"Figure 3\" /></p>\n\n<p>For companies that are more open to the refactoring idea, putting technical tasks as “business enablers” on the roadmap can give more clarity. In this approach, it is also easier to include multiple enablers and opportunities on one graph. Cause and effect sequence would explain interdependencies between deliveries and make it easier to understand overlapping items:</p>\n\n<p><img src=\"/img/articles/2022-06-07-debt-reduction-in-the-product-roadmap/img4.png\" alt=\"Figure 4\" /></p>\n\n<p>I strongly believe that introducing analysis described in this article can be a good starting point for the discussion about reducing technical debt in IT-driven products. It can be further developed and supported by a variety of financial analysis methods available for real options valuations or other approaches applicable for IT. There is a necessity to change general mindset and industry’s way of thinking about code refactoring to make the process sustainable and successful. Becoming aware of new opportunities resulting from the technical debt reduction is a good first step towards this goal.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p><a href=\"https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/tech-debt-reclaiming-tech-equity\">https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/tech-debt-reclaiming-tech-equity</a> <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\" role=\"doc-endnote\">\n      <p><a href=\"https://www.computerweekly.com/news/252504654/Technical-debt-is-holding-back-innovation\">https://www.computerweekly.com/news/252504654/Technical-debt-is-holding-back-innovation</a> <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\" role=\"doc-endnote\">\n      <p><a href=\"https://onlinelibrary.wiley.com/doi/10.1111/emre.12324\">https://onlinelibrary.wiley.com/doi/10.1111/emre.12324</a> <a href=\"#fnref:3\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\" role=\"doc-endnote\">\n      <p><a href=\"https://dictionary.cambridge.org/dictionary/english/guesstimate\">https://dictionary.cambridge.org/dictionary/english/guesstimate</a> <a href=\"#fnref:4\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n","contentSnippet":"Nowadays, technical debt can be considered the bread and butter of most IT-powered enterprises around the world.\nAlmost every company that survived the startup phase and managed to deliver its first products to customers will face at some point technical challenges related to past architectural decisions. Although code engineering gets better every year, we cannot argue with the obvious fact of life: the market will always force many of us to deliver tech products faster than we wish. Time To Market has always been a key success factor for many product companies and it puts a lot of pressure on Engineering to keep up with challenging deadlines.\nStatistics explicitly show the scale of the problem. According to the survey conducted in 2020 by McKinsey1, tech debt can reach up to as much as 40% of the whole technology value. On average 10-20% of IT budget is ultimately consumed by tech debt management and most CIOs interviewed consider the problem significantly increasing over past years, especially in enterprise-size companies2.\nAs disturbing as it sounds, acknowledging the magnitude of the problem is the first step to dealing with it.\nSo, here we get to the Product Management reality. Even if we are lucky and after a product discovery we manage to navigate a perfect niche where we can provide a long-awaited, successful product, we still can fail having technology adjusted to our plans and needs. And that would be a real PM tragedy, wouldn’t it? To cap it all, it might be hard to even talk about innovative solutions when maneuvering around limitations imposed by the legacy code. So any further development of our product may become increasingly tricky and take more time which eventually poses a threat to staying competitive.\nBearing that in mind, no reasonable Product Manager can afford ignoring the gravity of code complexity and shady legacy.\nToday is the day to start a crusade against technical debt in your products. Nonetheless before we start we must all admit: building a yearly roadmap consisting mostly of incomprehensible technical deliveries that cannot be easily attributed to business value will not make us most popular Product Managers out there, to put it mildly. In most companies proposing such a backlog will result in heated discussions about targets, KPIs and wasting team’s capacity. Work that does not end up with a significant increment is hard to defend. At the end technical product development is mostly not a charity effort and it is supposed to deliver financial outcomes - the sooner, the better.\nThe situation gets even more complicated in publicly listed companies that report to stakeholders on a regular basis. Declaring work without making any explicit promise of near-future apparent return on investment may seem unexplainable. Technical debt reduction on its own is strictly connected with vast uncertainty as long as it is not presented holistically in a broader context. So how can we approach Roadmaps to make debt reduction more appealing for our audience?\nTake a look outside of the IT world.\nI believe that especially in Product Management we appreciate inspirations from other industries. And this case should not be an exception. Financial industry and analysts working on companies’ valuations have been struggling with a similar challenge for decades. Is it worth investing in a company that may not seem to be an appealing opportunity now in terms of near-future ROI? How to assess potential profits from innovative ideas on the table? How can we, in general, assess long-term impact of work at the grass roots? And which tech company is a good investment opportunity? Our development backlogs should answer similar questions - which of these debt-reduction tasks are worth pursuing and what can we achieve? Which of them are really good opportunities for us? And finally - how to prove to stakeholders the real value of such initiatives? To approach these questions we can use the idea of real options.\nLet us discover together the roots of real options. The idea itself dates back to 1977. Stewart Myers coined this term describing real options as “opportunities to purchase real assets on possibly favorable terms”3 and declaring that each company should be aware of its real assets and real options. Since then, the idea has evolved significantly and has been used in multiple methodologies not only for financial valuations, but also for determining value drivers in a variety of industries. It has been particularly attractive to IT enterprises as it embraces dealing with high uncertainty.\nInspired by real options theory, I reckon that we should stop considering technical debt in terms of short-term Profit and Loss accounting.\nLooking only at the nearest future, refactoring activities will mostly look as cost centers without any outlook on further potential profits. However, once we change the perspective and start considering current refactoring investments as enablers for future product options, we are able to grasp the full range of benefits to be gained. Real options perspective should open our roadmaps for long-term thinking and it can allow us to optimize our decision-making process.\nHowever, currently existing academic and financial models are mostly complex and time-consuming to perform. Therefore the idea of real options will serve here mostly as an inspiration for a really simple exercise that will aim to transform the general approach towards technical debt.\nBearing in mind the PM’s reality of limited time and resources, the aim is to keep the analysis quick. Moreover, we would like the output to be as easy and understandable as possible, so it can be fitting for the broad audience. Following real options terminology, we can assume that each resolved technical debt issue is our “real option” - a potential value driver and opportunity to create or improve some products (“real assets”). This exercise will focus on identifying and mapping options to future assets.\nIn the Product Management case, investments (time of our developers) will be made to remove some technical obstacles and they will become product enablers. Opportunities on the other hand will be translated into tangible deliveries and potentially attractive positions in our future Roadmaps. And in the best case, these opportunities may even open some new doors to further developments into currently unknown and unreachable areas. Our ultimate goal is to maximize opportunities while minimizing effort required to enable them.\nI strongly believe that it is really tricky to evaluate analyzed efforts and hopes from the financial perspective at an early stage of analysis. Calculating ROI moneywise can be extremely time-consuming and tends to be based heavily on “guesstimates” (“an approximate calculation of the size or amount of something when you do not know all the facts”4) . Nonetheless, at the same time it should be fairly possible and informative to at least roughly estimate our potential works vs. hopes in T-shirt sizing method (or any other preferred manner, up to you) and I would strongly recommend to follow this path at the beginning. As it is fairly simple and flexible, we can use the same concept to evaluate profits or attractivity of products or opportunities.\nWhere should we start tech debt - value mapping?\nLet us go through the process step by step. I would recommend going through this discovery process together with your technical team and to transform it into collaborative work. It can be a rewarding exercise for the whole team and it should boost the sense of agency.\nFirst of all we should list all services/topics touched by our technical debt. They can be grouped into areas that will be addressed together to achieve the best efficiency. Depending on the specifics of the system, the granularity or nature of issues can differ. The main aim here is to review the general current state of tech without doing long and costly deep-dives. Our aim is to detect problematic areas avoiding major investments in solution analysis. In this exercise the technical team is the key. The more experienced our engineers are and the better they know their code, the more reliable outcome we get.\nThe second step is ideation. Let’s determine our real options. Each of the listed services or areas, while solved, should be considered as an enabler for further system development. So this is the time to brainstorm together: assuming that problem A is resolved, what kind of new capabilities will be available for us? What kind of services or products can we build then? Or maybe there are some meaningful improvements that will make our product more convenient and should attract more users? We can and should go even further: what can we build assuming that more than one of the detected issues is closed? This is a perfect moment for the Product Manager to step in and to present the broad vision for the Product as inspiration. Wishful thinking, benchmarking, research and UX studies - all of these tools will prove to be useful in this workshop.\nAt the end of step two we should be able to draw a tree diagram presenting clearly technical blockers as potential new opportunity enablers:\n\nTree diagram mapping technical debt areas to related product/business opportunities.\nStep three is all about evaluation. As mentioned before, I recommend using T-shirt sizing as it brings simplicity into very complex situations. I find T-shirt sizing an attractive estimation technique as it is quite intuitive and introduces relativity between analyzed entities. Sizes that we know from T-shirt labels (XS-XXL) are used to assess work needed to deliver a given task. At this stage our problems are not deeply analyzed and they are not broken down into particular stories/development tasks. We are working with high-level problems and ideas as we do not have time to spend weeks on analysis of topics that may not end up on our roadmap. In this step we can split into two work groups: a technical one and a business one. Technical team should focus on assessing the complexity of each detected technical task - both from debt-areas but also from prospective product opportunities (they require some work too!). If given problem seems to be fairly simple, it can be evaluated as an S. If something requires a major rebuild and redesigning the basics - it could be an XL. Let us just bear in mind that assessment should cover end-to-end work so the complexity of E2E & regression testing should be a vital part of this estimation too. What is more, covering the uncertainty factor in this exercise can be useful so I would not hesitate to assign bigger values for more vague areas. Effort estimation will be presented on the diagram below as purple boxes.\nBusiness team (product managers and business stakeholders) will work on evaluating all the listed capabilities. As always, they should be considered in the broader context, so any product validation tools are handy. Apart from the business impact of each solution, we should also bear in mind if it fits into expected company strategy and if we can see it bringing us any competitive advantage when delivered in the more or less distant future (we have some issues to be resolved first!). Opportunities will be marked on the diagram as green boxes.\n\nRoadmapping\nHaving this analysis in hand, we can pick our best candidates for the roadmap depending on the team’s capacity available. While it will never be easy to choose the best path, it should be possible to navigate works that have the best potential to bring us noticeable benefits. While pitching the idea of technical debt reduction for the management team, we usually rely on financial aspects of reducing maintenance costs of old code (e.g. we can get potential savings based on maintenance work reports from previous months). After this analysis we should be additionally equipped with the reliable documentation of new business opportunities enabled.\nThere are at least two approaches to include refactoring on the roadmap, depending on the company’s specifics. Presenting detected technical-debt tasks as a stage zero of your product development may prove to be handy for organizations that are particularly reluctant to acknowledge refactoring as opportunities. In such a case debt reduction could be ‘hidden’ in the Opportunity roadmap item represented by longer actual delivery time. It is worth noting that this approach gives less clarity when it comes to presenting dependencies:\n\nFor companies that are more open to the refactoring idea, putting technical tasks as “business enablers” on the roadmap can give more clarity. In this approach, it is also easier to include multiple enablers and opportunities on one graph. Cause and effect sequence would explain interdependencies between deliveries and make it easier to understand overlapping items:\n\nI strongly believe that introducing analysis described in this article can be a good starting point for the discussion about reducing technical debt in IT-driven products. It can be further developed and supported by a variety of financial analysis methods available for real options valuations or other approaches applicable for IT. There is a necessity to change general mindset and industry’s way of thinking about code refactoring to make the process sustainable and successful. Becoming aware of new opportunities resulting from the technical debt reduction is a good first step towards this goal.\nhttps://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/tech-debt-reclaiming-tech-equity ↩\nhttps://www.computerweekly.com/news/252504654/Technical-debt-is-holding-back-innovation ↩\nhttps://onlinelibrary.wiley.com/doi/10.1111/emre.12324 ↩\nhttps://dictionary.cambridge.org/dictionary/english/guesstimate ↩","guid":"https://blog.allegro.tech/2022/06/debt-reduction-in-the-product-roadmap.html","categories":["tech","roadmaps","tech debt","product"],"isoDate":"2022-06-06T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Turn-Based Offline Reinforcement Learning","link":"https://blog.allegro.tech/2022/04/turn-based-offline-rl.html","pubDate":"Thu, 14 Apr 2022 00:00:00 +0200","authors":{"author":[{"name":["Riccardo Belluzzo"],"photo":["https://blog.allegro.tech/img/authors/riccardo.belluzzo.jpg"],"url":["https://blog.allegro.tech/authors/riccardo.belluzzo"]},{"name":["Tomasz Bocheński"],"photo":["https://blog.allegro.tech/img/authors/tomasz.bochenski.jpg"],"url":["https://blog.allegro.tech/authors/tomasz.bochenski"]},{"name":["Michał Zając"],"photo":["https://blog.allegro.tech/img/authors/michal.zajac.jpg"],"url":["https://blog.allegro.tech/authors/michal.zajac"]},{"name":["Łukasz Kuciński"],"photo":["https://blog.allegro.tech/img/authors/lukasz.kucinski.jpg"],"url":["https://blog.allegro.tech/authors/lukasz.kucinski"]},{"name":["Piotr Miłoś"],"photo":["https://blog.allegro.tech/img/authors/piotr.milos.jpg"],"url":["https://blog.allegro.tech/authors/piotr.milos"]}]},"content":"<p>This blogpost is the result of a research collaboration between the Allegro Machine Learning Research team and\nthe Institute of Mathematics of the Polish Academy of Sciences (IMPAN), Warsaw.</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>Imagine the following scenario: you work in a company as a Research Engineer, and your manager is asking you to design\na state-of-the-art algorithm to control a robot arm that should perform a critical task.\nYou perform some research to find out that Reinforcement Learning (RL) would work really well in this case.\nHowever, you have the following limitations:</p>\n\n<ul>\n  <li>The robot arm is built with poor hardware and can’t afford long and extensive usage.</li>\n  <li>The robot arm can often be physically unavailable, and you may have access to it only for a limited period of time.</li>\n</ul>\n\n<p>In addition to the aforementioned constraints, you also have another big problem: you don’t have any huge dataset\ncontaining past offline behavior of the robotic arm available. What can you do? Should you give up on applying RL\nto this problem? Is the problem even solvable with RL?</p>\n\n<p>Don’t worry! We are here to help you! And to do so, we will walk you through the concept of “Turn-based Offline RL”.\nSo let’s dive into it!</p>\n\n<h2 id=\"standing-between-online-rl-and-offline-rl\">Standing between “Online RL” and “Offline RL”</h2>\n\n<p>In Online RL, we normally have an agent that interacts with the environment, which is assumed to be always available.\nFor each interaction, the agent will get a reward signal that assesses the quality of the action performed.\nThe possibility of constant interaction with the environment marks the difference between the\nonline and offline RL setting: in the latter, we break the environment-agent interaction loop,\nand we only have a buffer of transitions previously gathered using one or multiple unknown policies.\nThus, in Offline RL, since there is no interaction with the environment, the buffer can be thought of as a\nstatic dataset that cannot be extended by any further exploration.</p>\n\n<p>The idea behind “Turn-based Offline RL” falls exactly halfway between these two lines of thinking.\nImagine yourself being able to build an initial static dataset filled with transitions generated by a\nrandom policy. Now that you have a static dataset, you can use it to train an agent using a preferred\nOffline RL algorithm. Then, suppose you have access to the target environment for a limited period of time.\nYou have a (random) agent already trained! You can deploy it, interact with the environment,\ngather new experiences based on the policy learned so far, and enrich your static dataset.\nNow, having an updated (and better) dataset, you can re-train your Offline RL agent and repeat this process every time\nyou are accessing the environment. Well, what we have described is exactly what we mean by “Turn-based Offline RL”.\nLet’s sum up the description in a few points:</p>\n\n<ol>\n  <li>Start with a random policy and generate an initial static dataset.</li>\n  <li>Train an agent using a preferred Offline RL algorithm using the dataset built in 1). We can call this phase “turn 0”.</li>\n  <li>Access the environment the first time: collect transitions using the policy learned so far and extend the dataset\nwith new data.</li>\n  <li>Train your Offline RL agent again with a static dataset now composed of old (random) transitions and new (better)\ntransitions (“turn 1”).</li>\n  <li>Access the environment once again and collect new transitions.</li>\n  <li>Train again your Offline agent (“turn 2”).</li>\n  <li>Repeat the above steps as many “turns” as you can, i.e. as many times as you have the possibility to access the\nenvironment.</li>\n</ol>\n\n<p>The main idea behind the turn-based procedure is that after each “turn” we will extend our dataset with “better”\ntransitions, i.e transitions generated by more expert-like agents, and use Offline RL algorithms to train an even better\n(or at least similar) policy than the one used to generate those transitions.\nWith the “Turn-based Offline RL” framework you can now see how you could possibly overcome the constraints for\nyour hypothetical robot arm application: you could build a random dataset using some simulator; train an Offline RL\nagent with it; deploy the agent to interact with the robot arm for a limited period of time; extend the dataset\nwith better data; re-train the agent, and repeat the process.</p>\n\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/diagram.png\" alt=\"Figure 1\" />\n<em>Fig.1 — Schematic comparison between Online RL (a), Offline RL (b), and Turn-Based Offline RL (c). For this diagram\nwe took inspiration from the paper Offline Reinforcement Learning: Tutorial, Review, and Perspectives on Open Problems\n(Levine et al. 2020)</em></p>\n\n<h2 id=\"turn-based-offline-rl-in-practice\">Turn-based Offline RL in practice</h2>\n\n<p>In this blog post, we want to show you how you could make use of the “Turn-based Offline RL” framework to leverage\nthe advances in Offline RL in applications where you could have the possibility of accessing the environment “in turns”.\nFortunately, we don’t need any fancy robotic arm to do so! We have prepared for you a more comprehensive use case\nin order to explain the general idea behind it.</p>\n\n<h3 id=\"experimental-setup\">Experimental setup</h3>\n\n<p>To showcase our idea, we are going to make use of a simplified environment.\nThis tutorial will be in fact inspired by the\n<a href=\"https://colab.research.google.com/drive/1oJOYlAIOl9d1JjlutPY66KmfPkwPCgEE?usp=sharing#scrollTo=4i64GqsO83mA\">NeurIPS 2020 Offline RL Tutorial Colab Exercise</a>\nwhere the authors designed a simple GridWorld environment to test different ideas related to Offline RL.</p>\n\n<p>GridWorld is a standard environment used in the RL community to test if algorithms can work in relatively\neasy situations or simply to debug them. In GridWorld, the agent starts at a starting point (“S”) and aims to\nreach a target point, sometimes called the reward (“R”) cell. The agent can either step up, down, left, or right,\nor stay still. Only empty cells can be stepped in, while non-empty cells, like the ones containing obstacles\n(walls), are not. The authors of the notebook provide an easy way to build such an environment from a string.</p>\n\n<p>For the sake of this tutorial, we will work with a fixed 18x20 grid like the one specified by the string below.\nThe “O” letter indicates empty spaces, “#” stands for walls, “S” is the starting state and “R” the target one.\nFor clarity, we have drawn the grid for you.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOSOOOOOOOOOO#</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOO##OOOOOOOOOO#</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOO#O#OOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOO#OO#OOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOOOOO#O</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOO#OOOOOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'##OOOOOOOO#OOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOO#OOOOO#OO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOO####O</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OO#OOO#OOOOOO#OOOROO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOO##OO#OOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOO#OOOOOOOOOOOO##O#</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOO#OOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'##OOOOO##OOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOO#OOO#OOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOO##OOOO#O#OOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/gridworld_reduced.png\" alt=\"Figure 2\" />\n<em>Fig.2 — The chosen grid for our experiments: the green cell (S) is the starting point; the\nyellow cell (R) is the target point; white cells are empty while red cells contain walls.</em></p>\n\n<p>Please note that in our experiments we have tested different grid configurations and dimensions and we believe\nthat the chosen dimensionality and obstacle distribution presented for this tutorial do represent a\ngood experimental setup in order to arrive at reasonable conclusions. Indeed, the grid is small enough\nfor the algorithm to be able to quickly iterate through different runs, and its configuration\nis complicated enough to lead to non-trivial results.\nIn general, from our experience, things start to get interesting with grids NxM where N,M &gt;= 12.</p>\n\n<h3 id=\"agents-visualizations\">Agent’s visualizations</h3>\n\n<p>In RL, it’s sometimes beneficial to visualize the policy your agents are learning. Since the environment\nwe are playing with is relatively small, we can actually enumerate all possible state-action (s,a) pairs.\nWhen a specific algorithm runs, we are able to count how many times each of these pairs was visited, and we are\nable to visualize it as a heatmap, superimposed on the grid.</p>\n\n<p>In our case, such heatmaps (that we call state-action visitation maps)\ncan be really useful to understand, for example, the quality of a specific policy:\na good state-action visitation map is created only by applying a good policy.</p>\n\n<p>How would a map built using the optimal policy look like?\nAgain, it’s a question we can answer only because we are in the ideal case of using a simple environment where we can\nknow and do everything, like finding the optimal policy.\nWe can use tabular Q-iteration to find an optimal solution for our case,\nhence producing the optimal state-action map that looks as follows:</p>\n\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/optimal_policy_heatmap_reduced.png\" alt=\"Figure 3\" />\n<em>Fig.3 — State-action visitation heatmap generated by the optimal policy. Most of the time the agent reaches the target\ncell in a few steps and then, it just stays idle without performing any further step.</em></p>\n\n<p>As you can see, in this case, almost every (s,a) pair has a value approaching zero, apart from the reward (“R”) state\nwhich has a big value. This is happening because once the agent knows the optimal policy, it will take very few steps\nfor it to reach the target cell and once it’s reached, it will spend most of the time just waiting, without performing\nany further action. More precisely, the agent will spend the majority of the time in the (s,a) = (“R”, NOOP),\nwhere NOOP stands for “no operation”.</p>\n\n<p>Let’s now visualize the heatmap generated by the uniform policy,\ni.e an agent that decides at random (with uniform probability) which action to take when being in a specific state.\nThis approach would be the way to go in the majority of the cases and is the closest to the real case example.\nSuppose you don’t know anything about the environment you are going to interact with: the best you can do is to\nperform random exploration!</p>\n\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/random_policy_heatmap_reduced.png\" alt=\"Figure 4\" />\n<em>Fig.4 — State-action visitation heatmap generated by the random policy. The agent performs random exploration. As a\nresult of the random behaviour, cells in the surroundings of the initial state are visited on average more often than\nfurther cells.</em></p>\n\n<p>Since we start from the “S” cell at every episode, we have the highest probability of visiting the “S” state and all\nits surroundings. As we go further from it, the agent will start to pick different states depending on the run,\nand thus values on farther cells start to normalize and approach 0.0.</p>\n\n<p>In the following, we will describe the algorithm in detail, and we will make use of these visualizations to understand\nif the turn-based approach is beneficial for learning a good policy when starting from a random one.</p>\n\n<h3 id=\"algorithm\">Algorithm</h3>\n\n<p>Now let’s dive into the algorithm itself. Recalling the steps indicated in the previous section,\nwe can describe the turn-based learning algorithm with the following pythonic pseudocode:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">run_turn_based_algorithm</span><span class=\"p\">(</span><span class=\"n\">init_policy</span><span class=\"p\">,</span>\n                             <span class=\"n\">num_turns</span><span class=\"p\">,</span>\n                             <span class=\"n\">num_seeds</span><span class=\"p\">,</span>\n                             <span class=\"n\">dataset_size</span><span class=\"p\">,</span>\n                             <span class=\"n\">num_iters</span><span class=\"p\">):</span>\n    <span class=\"n\">offline_dataset</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">current_policy</span> <span class=\"o\">=</span> <span class=\"n\">init_policy</span>\n    <span class=\"n\">num_of_trajectories_per_turn</span> <span class=\"o\">=</span> <span class=\"n\">dataset_size</span> <span class=\"o\">/</span> <span class=\"n\">num_turns</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">turn</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_turns</span><span class=\"p\">):</span>\n        <span class=\"n\">runs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">seed</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_seeds</span><span class=\"p\">):</span>\n            <span class=\"n\">temp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">offline_dataset</span><span class=\"p\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"n\">trajectories_from_new_policy</span> <span class=\"o\">=</span> <span class=\"n\">deploy_and_sample</span><span class=\"p\">(</span><span class=\"n\">current_policy</span><span class=\"p\">,</span> <span class=\"n\">num_of_trajectories_per_turn</span><span class=\"p\">)</span>\n            <span class=\"n\">temp_dataset</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">trajectories_from_new_policy</span><span class=\"p\">)</span>\n            <span class=\"n\">policy</span><span class=\"p\">,</span> <span class=\"n\">performances</span> <span class=\"o\">=</span> <span class=\"n\">run_offline_rl_algorithm</span><span class=\"p\">(</span><span class=\"n\">temp_dataset</span><span class=\"p\">,</span> <span class=\"n\">num_iters</span><span class=\"p\">)</span>\n            <span class=\"n\">runs</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">policy</span><span class=\"p\">,</span> <span class=\"n\">performances</span><span class=\"p\">,</span> <span class=\"n\">trajectories_from_new_policy</span><span class=\"p\">))</span>\n\n        <span class=\"n\">best_policy</span><span class=\"p\">,</span> <span class=\"n\">best_trajectories</span> <span class=\"o\">=</span> <span class=\"n\">find_best_run</span><span class=\"p\">(</span><span class=\"n\">runs</span><span class=\"p\">)</span>\n        <span class=\"n\">current_policy</span> <span class=\"o\">=</span> <span class=\"n\">best_policy</span>\n        <span class=\"n\">offline_dataset</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">best_trajectories</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Let’s explain each step involved in the algorithm.  First, let’s define what the main parameters expected by\nthe algorithm are:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">init_policy</code> — it’s the starting policy, most likely the random policy.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">num_turns</code> — this is simply the total number of turns for which you will run the algorithm.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">num_seeds</code> — if you work in RL you will be familiar with this argument: RL algorithms\n(and especially Offline RL ones) present large variability in the results due to their stochastic nature.\nThat’s why instead of having one single run of the Offline RL algorithm,\nwe will have several of them. For each run, we will produce the best policy and the best\n“new set of trajectories” to be used later in the algorithm (more on this step in the following).</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">num_iters</code> — this is simply the number of iterations we will run our Offline RL algorithm.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">dataset_size</code> — as a design choice, we assume that the final dataset size has been fixed beforehand,\nas we do with the number of turns. However, both of these two conditions could be relaxed and one could run\nthe algorithm as many turns as needed, getting a final offline dataset with an undefined size.\nHowever, please remember that in the real scenario you will probably not have the privilege of\naccessing the environment so often! You must do your best with a reasonable number of turns!</li>\n</ul>\n\n<p>Now, following the logic of the pseudo-code, let’s describe the algorithm:</p>\n\n<ul>\n  <li>Initially, we don’t have any transitions to train our Offline RL algorithm, so we initialize our <code class=\"language-plaintext highlighter-rouge\">offline_dataset</code>\nas an empty list.</li>\n  <li>We also initialize <code class=\"language-plaintext highlighter-rouge\">current_policy</code> with <code class=\"language-plaintext highlighter-rouge\">init_policy</code>, which most likely will be the random policy\n(an agent that has previously interacted with the environment taking actions uniformly at random).</li>\n  <li>Now, for each turn we run <code class=\"language-plaintext highlighter-rouge\">num_seeds</code> times the following procedure:\n    <ul>\n      <li>We create a copy of <code class=\"language-plaintext highlighter-rouge\">offline_dataset</code> (<code class=\"language-plaintext highlighter-rouge\">temp_dataset</code>) to train the current agent with the dataset collected\nso far.</li>\n      <li>We deploy the agent to the environment, in order to generate a new set of transitions using the current policy\n(<code class=\"language-plaintext highlighter-rouge\">trajectories_from_new_policy</code>).</li>\n      <li>We extend the temporary dataset by <code class=\"language-plaintext highlighter-rouge\">trajectories_from_new_policy</code> and train an agent with it,\nusing the preferred Offline RL algorithm and getting its corresponding <code class=\"language-plaintext highlighter-rouge\">policy</code> and <code class=\"language-plaintext highlighter-rouge\">performances</code>.</li>\n      <li>We append the results to <code class=\"language-plaintext highlighter-rouge\">runs</code> list.</li>\n      <li>Once we have collected all the results, we pick the best policy and best-generated trajectories\nout of the pool of runs (<code class=\"language-plaintext highlighter-rouge\">find_best_run</code>).</li>\n      <li>The <code class=\"language-plaintext highlighter-rouge\">best_policy</code> is now our <code class=\"language-plaintext highlighter-rouge\">current_policy</code> that will be used for the next turn.</li>\n      <li>The <code class=\"language-plaintext highlighter-rouge\">best_trajectories</code> will are appended to <code class=\"language-plaintext highlighter-rouge\">offline_dataset</code> that will is going to be used for the next turn.</li>\n    </ul>\n  </li>\n  <li>We repeat this procedure until we are satisfied with the performance or as many times (turns)\nwe are able to access the environment.</li>\n</ul>\n\n<p>Now, hoping the algorithm is clear to you, we need to answer two important questions.</p>\n\n<p><em>Which Offline RL algorithm should be run?</em>\nActually here the choice is yours! In our case, we opted for\nusing <a href=\"https://arxiv.org/abs/2006.04779\">Conservative Q-Learning (CQL)</a>.\nAny algorithm may have its pros and cons. In our case we find it hard to set the CQL global parameters only once\nto be good for all the runs. What is happening is that initially our dataset will be full of random transitions,\nbut as long as you proceed in turns, it will become richer in “more-expert” transitions.\nThus, parameters like alpha for the CQL loss should be somehow adjusted in time.\nWhile in this tutorial we did not investigate this aspect, we found that for this very simplistic environment\neven CQL with alpha = 0 (equivalent to offline Q iteration) would work sufficiently.</p>\n\n<p><em>How to aggregate results in order to get a representative policy and dataset for the next turn?</em>\nThat’s a hard question. For the sake of this tutorial, we have opted for the simplest of the approaches:\nout of the N runs, we will pick the one that gave us the best results (in terms of average reward).\nHowever, please note that this may be too optimistic and could lead to unexpected behavior in production.\nA better approach would actually be the one that takes into account the “average policy”. But, to “average out”\npolicies is not a trivial task. We discuss this aspect in detail in the final section.</p>\n\n<h2 id=\"results\">Results</h2>\n\n<h3 id=\"visualizing-the-agent-in-turns\">Visualizing the agent “in turns”</h3>\n\n<p>First, we ask ourselves the following question: does the agent learn “in turns”? We can check this\nby visualizing subsequent state-action visitation maps:</p>\n\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/agent_learns_in_turns_reduced.png\" alt=\"Figure 5\" />\n<em>Fig.5 — Visualization of subsequent state-action visitation heatmaps. Here we visualize 4 subsequent turns — after one\nsingle turn the agent learns the fastest path to reach the target cell. As long as we proceed in turns, the agent\nimproves its performance, eventually approaching a behaviour comparable to the optimal policy.</em></p>\n\n<p>Our algorithm seems to work! When starting with a uniform policy, we can see that even after a\nsingle turn the agent quickly learns the fastest path to reach the target cell. As long as we proceed in turns, the model will\nconsistently improve its performance, by quickly getting to the “R” cell even more often. In this sense, visitation\nmaps get closer to the optimal one where the agent basically reaches the target in a few steps and then just stays\nthere, without performing any further steps.</p>\n\n<h3 id=\"does-the-agent-improve-its-performance-over-time\">Does the agent improve its performance over time?</h3>\n\n<p>How many turns are needed to start having results comparable to\nthe optimal policy? In other words, how much better are we performing if compared to not doing any turn at all?</p>\n\n<p>Let’s analyze the plot below. In this figure we are plotting the algorithm’s performance, measured in\n“averaged reward” (the higher, the better), as the amount of data available offline increases. In general, we expect\nthe curve obtained by running the optimal policy (violet curve) to represent an upper bound: it’s the best we\ncan achieve! On the other hand, we expect the curve obtained by running the random policy without any “turn”\n(green curve), to be our lower bound. Also, generally speaking, we expect that the more offline data is available,\nthe better the achieved scores will be, since our chosen Offline RL will have more data coverage and possibility\nto converge to the optimal policy. Given this, we can observe that the performance of the turn-based procedure falls\nin the middle between the aforementioned upper and lower bounds: as the number of turns increases, the closer we get\nto the upper bound. However, we can observe that 3 turns are already enough to start having better performance than\nthe lower bound. This plot confirms our hypothesis: “Turn-based Offline RL” stands exactly between Online RL\n(upper bound) and Offline RL (lower bound).</p>\n\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/learning_curves_reduced.png\" alt=\"Figure 6\" />\n<em>Fig.6 — This plot shows the comparison between baselines and the turn-based procedure in terms of average reward (the higher,\nthe better) as the size of the collected data used to train the algorithm offline grows. To obtain this figure,\nwe have run each of the algorithms for 30 seeds. For the optimal policy we run Q-iteration, while for the rest we\napplied CQL with fixed alpha=0. For each run, CQL was fitted for 300 iterations.</em></p>\n\n<h2 id=\"conclusions-and-future-work\">Conclusions and Future Work</h2>\n\n<p>In this blog post we have presented a practical approach you could use to address cases where you have temporary\nand limited access to an environment, and you have computational resources at your disposal to train your RL algorithm\n“offline” only.</p>\n\n<p>In fact, the proposed solution falls halfway between Online RL and Offline RL: our agent is warmed up\nby training it via Offline RL on a dataset generated by running the uniform random policy and then\nsubsequently improved by accessing the environment in “turns”, thus partially simulating what you would get on a\nstandard online RL scenario.</p>\n\n<p>In particular, we show that:</p>\n\n<ul>\n  <li>The turn-based procedure is effective since the policy learned in subsequent turns consistently improves as\nturns increase, matching the expectations. This result is demonstrated through some visualizations, showing how\nthe agent chooses a better and faster path to target turn after turn.</li>\n  <li>The turn-based procedure allows getting an agent that is better than a random one, even after a small number of turns.\nThe performance of the turn-based agent will be upper-bounded by the performance of the optimal policy.</li>\n</ul>\n\n<p>Moreover, we provide an easy-to-understand framework to prove the aforementioned hypothesis.</p>\n\n<p>Finally, we want to point out some limitations of our work that could be addressed as future work:</p>\n\n<ul>\n  <li>From one turn to the other, we pick the “best policy” as the one that achieves the best performance between all\nthe runs via the “max” operator. This single policy is then propagated through the algorithm and used to generate\nthe best new extension of the dataset. The inherent limitation of this approach is that by using the “max” we are\nnot robust to the noise and we do not account for fluctuations in the performance of the Offline RL algorithm.\nA better approach would be aggregating policies by doing, for example, an ensemble of policies, and using this\nas the selected policy that is propagated forward in the algorithm.</li>\n  <li>Running a fixed Offline RL algorithm on a dataset that keeps changing its distribution of states and actions\nin time could be really challenging since a lot of algorithms in the literature require accurate hypertuning\nof the parameters. In future work, we would like to address this problem, proposing, for example, a way one\ncould compute new hyper-parameters using the dataset size and some other properties as parameters for the computation.</li>\n  <li>One could argue that our hypothesis can work only on simplistic environments like GridWorlds.\nEven though we tested different configurations of grids, stressing more or less the algorithms,\nwe admit that a more complete work would require the re-visitation of our hypothesis on a more diverse\nsuite of environments. We plan to investigate this in the future.</li>\n</ul>\n\n","contentSnippet":"This blogpost is the result of a research collaboration between the Allegro Machine Learning Research team and\nthe Institute of Mathematics of the Polish Academy of Sciences (IMPAN), Warsaw.\nIntroduction\nImagine the following scenario: you work in a company as a Research Engineer, and your manager is asking you to design\na state-of-the-art algorithm to control a robot arm that should perform a critical task.\nYou perform some research to find out that Reinforcement Learning (RL) would work really well in this case.\nHowever, you have the following limitations:\nThe robot arm is built with poor hardware and can’t afford long and extensive usage.\nThe robot arm can often be physically unavailable, and you may have access to it only for a limited period of time.\nIn addition to the aforementioned constraints, you also have another big problem: you don’t have any huge dataset\ncontaining past offline behavior of the robotic arm available. What can you do? Should you give up on applying RL\nto this problem? Is the problem even solvable with RL?\nDon’t worry! We are here to help you! And to do so, we will walk you through the concept of “Turn-based Offline RL”.\nSo let’s dive into it!\nStanding between “Online RL” and “Offline RL”\nIn Online RL, we normally have an agent that interacts with the environment, which is assumed to be always available.\nFor each interaction, the agent will get a reward signal that assesses the quality of the action performed.\nThe possibility of constant interaction with the environment marks the difference between the\nonline and offline RL setting: in the latter, we break the environment-agent interaction loop,\nand we only have a buffer of transitions previously gathered using one or multiple unknown policies.\nThus, in Offline RL, since there is no interaction with the environment, the buffer can be thought of as a\nstatic dataset that cannot be extended by any further exploration.\nThe idea behind “Turn-based Offline RL” falls exactly halfway between these two lines of thinking.\nImagine yourself being able to build an initial static dataset filled with transitions generated by a\nrandom policy. Now that you have a static dataset, you can use it to train an agent using a preferred\nOffline RL algorithm. Then, suppose you have access to the target environment for a limited period of time.\nYou have a (random) agent already trained! You can deploy it, interact with the environment,\ngather new experiences based on the policy learned so far, and enrich your static dataset.\nNow, having an updated (and better) dataset, you can re-train your Offline RL agent and repeat this process every time\nyou are accessing the environment. Well, what we have described is exactly what we mean by “Turn-based Offline RL”.\nLet’s sum up the description in a few points:\nStart with a random policy and generate an initial static dataset.\nTrain an agent using a preferred Offline RL algorithm using the dataset built in 1). We can call this phase “turn 0”.\nAccess the environment the first time: collect transitions using the policy learned so far and extend the dataset\nwith new data.\nTrain your Offline RL agent again with a static dataset now composed of old (random) transitions and new (better)\ntransitions (“turn 1”).\nAccess the environment once again and collect new transitions.\nTrain again your Offline agent (“turn 2”).\nRepeat the above steps as many “turns” as you can, i.e. as many times as you have the possibility to access the\nenvironment.\nThe main idea behind the turn-based procedure is that after each “turn” we will extend our dataset with “better”\ntransitions, i.e transitions generated by more expert-like agents, and use Offline RL algorithms to train an even better\n(or at least similar) policy than the one used to generate those transitions.\nWith the “Turn-based Offline RL” framework you can now see how you could possibly overcome the constraints for\nyour hypothetical robot arm application: you could build a random dataset using some simulator; train an Offline RL\nagent with it; deploy the agent to interact with the robot arm for a limited period of time; extend the dataset\nwith better data; re-train the agent, and repeat the process.\n\nFig.1 — Schematic comparison between Online RL (a), Offline RL (b), and Turn-Based Offline RL (c). For this diagram\nwe took inspiration from the paper Offline Reinforcement Learning: Tutorial, Review, and Perspectives on Open Problems\n(Levine et al. 2020)\nTurn-based Offline RL in practice\nIn this blog post, we want to show you how you could make use of the “Turn-based Offline RL” framework to leverage\nthe advances in Offline RL in applications where you could have the possibility of accessing the environment “in turns”.\nFortunately, we don’t need any fancy robotic arm to do so! We have prepared for you a more comprehensive use case\nin order to explain the general idea behind it.\nExperimental setup\nTo showcase our idea, we are going to make use of a simplified environment.\nThis tutorial will be in fact inspired by the\nNeurIPS 2020 Offline RL Tutorial Colab Exercise\nwhere the authors designed a simple GridWorld environment to test different ideas related to Offline RL.\nGridWorld is a standard environment used in the RL community to test if algorithms can work in relatively\neasy situations or simply to debug them. In GridWorld, the agent starts at a starting point (“S”) and aims to\nreach a target point, sometimes called the reward (“R”) cell. The agent can either step up, down, left, or right,\nor stay still. Only empty cells can be stepped in, while non-empty cells, like the ones containing obstacles\n(walls), are not. The authors of the notebook provide an easy way to build such an environment from a string.\nFor the sake of this tutorial, we will work with a fixed 18x20 grid like the one specified by the string below.\nThe “O” letter indicates empty spaces, “#” stands for walls, “S” is the starting state and “R” the target one.\nFor clarity, we have drawn the grid for you.\n\ngrid = (\n    'OOOOOOOOOOOOOOOOOOOO\\\\'\n    'OOOOOOOOOOOOOOOOOOOO\\\\'\n    'OOOOOOOOSOOOOOOOOOO#\\\\'\n    'OOOOOOO##OOOOOOOOOO#\\\\'\n    'OOOOOO#O#OOOOOOOOOOO\\\\'\n    'OOOOOOOOOOO#OO#OOOOO\\\\'\n    'OOOOOOOOOOOOOOOOOO#O\\\\'\n    'OOOO#OOOOOOOOOOOOOOO\\\\'\n    '##OOOOOOOO#OOOOOOOOO\\\\'\n    'OOOOOOOOOOO#OOOOO#OO\\\\'\n    'OOOOOOOOOOOOOOO####O\\\\'\n    'OOOOOOOOOOOOOOOOOOOO\\\\'\n    'OO#OOO#OOOOOO#OOOROO\\\\'\n    'OOOOOO##OO#OOOOOOOOO\\\\'\n    'OOO#OOOOOOOOOOOO##O#\\\\'\n    'OOOOOOO#OOOOOOOOOOOO\\\\'\n    'OOOOOOOOOOOOOOOOOOOO\\\\'\n    '##OOOOO##OOOOOOOOOOO\\\\'\n    'OOOOOOOOOOO#OOO#OOOO\\\\'\n    'OOOO##OOOO#O#OOOOOOO\\\\'\n)\n\n\n\nFig.2 — The chosen grid for our experiments: the green cell (S) is the starting point; the\nyellow cell (R) is the target point; white cells are empty while red cells contain walls.\nPlease note that in our experiments we have tested different grid configurations and dimensions and we believe\nthat the chosen dimensionality and obstacle distribution presented for this tutorial do represent a\ngood experimental setup in order to arrive at reasonable conclusions. Indeed, the grid is small enough\nfor the algorithm to be able to quickly iterate through different runs, and its configuration\nis complicated enough to lead to non-trivial results.\nIn general, from our experience, things start to get interesting with grids NxM where N,M >= 12.\nAgent’s visualizations\nIn RL, it’s sometimes beneficial to visualize the policy your agents are learning. Since the environment\nwe are playing with is relatively small, we can actually enumerate all possible state-action (s,a) pairs.\nWhen a specific algorithm runs, we are able to count how many times each of these pairs was visited, and we are\nable to visualize it as a heatmap, superimposed on the grid.\nIn our case, such heatmaps (that we call state-action visitation maps)\ncan be really useful to understand, for example, the quality of a specific policy:\na good state-action visitation map is created only by applying a good policy.\nHow would a map built using the optimal policy look like?\nAgain, it’s a question we can answer only because we are in the ideal case of using a simple environment where we can\nknow and do everything, like finding the optimal policy.\nWe can use tabular Q-iteration to find an optimal solution for our case,\nhence producing the optimal state-action map that looks as follows:\n\nFig.3 — State-action visitation heatmap generated by the optimal policy. Most of the time the agent reaches the target\ncell in a few steps and then, it just stays idle without performing any further step.\nAs you can see, in this case, almost every (s,a) pair has a value approaching zero, apart from the reward (“R”) state\nwhich has a big value. This is happening because once the agent knows the optimal policy, it will take very few steps\nfor it to reach the target cell and once it’s reached, it will spend most of the time just waiting, without performing\nany further action. More precisely, the agent will spend the majority of the time in the (s,a) = (“R”, NOOP),\nwhere NOOP stands for “no operation”.\nLet’s now visualize the heatmap generated by the uniform policy,\ni.e an agent that decides at random (with uniform probability) which action to take when being in a specific state.\nThis approach would be the way to go in the majority of the cases and is the closest to the real case example.\nSuppose you don’t know anything about the environment you are going to interact with: the best you can do is to\nperform random exploration!\n\nFig.4 — State-action visitation heatmap generated by the random policy. The agent performs random exploration. As a\nresult of the random behaviour, cells in the surroundings of the initial state are visited on average more often than\nfurther cells.\nSince we start from the “S” cell at every episode, we have the highest probability of visiting the “S” state and all\nits surroundings. As we go further from it, the agent will start to pick different states depending on the run,\nand thus values on farther cells start to normalize and approach 0.0.\nIn the following, we will describe the algorithm in detail, and we will make use of these visualizations to understand\nif the turn-based approach is beneficial for learning a good policy when starting from a random one.\nAlgorithm\nNow let’s dive into the algorithm itself. Recalling the steps indicated in the previous section,\nwe can describe the turn-based learning algorithm with the following pythonic pseudocode:\n\ndef run_turn_based_algorithm(init_policy,\n                             num_turns,\n                             num_seeds,\n                             dataset_size,\n                             num_iters):\n    offline_dataset = []\n    current_policy = init_policy\n    num_of_trajectories_per_turn = dataset_size / num_turns\n\n    for turn in range(num_turns):\n        runs = []\n        for seed in range(num_seeds):\n            temp_dataset = offline_dataset.copy()\n            trajectories_from_new_policy = deploy_and_sample(current_policy, num_of_trajectories_per_turn)\n            temp_dataset.extend(trajectories_from_new_policy)\n            policy, performances = run_offline_rl_algorithm(temp_dataset, num_iters)\n            runs.append((policy, performances, trajectories_from_new_policy))\n\n        best_policy, best_trajectories = find_best_run(runs)\n        current_policy = best_policy\n        offline_dataset.extend(best_trajectories)\n\n\nLet’s explain each step involved in the algorithm.  First, let’s define what the main parameters expected by\nthe algorithm are:\ninit_policy — it’s the starting policy, most likely the random policy.\nnum_turns — this is simply the total number of turns for which you will run the algorithm.\nnum_seeds — if you work in RL you will be familiar with this argument: RL algorithms\n(and especially Offline RL ones) present large variability in the results due to their stochastic nature.\nThat’s why instead of having one single run of the Offline RL algorithm,\nwe will have several of them. For each run, we will produce the best policy and the best\n“new set of trajectories” to be used later in the algorithm (more on this step in the following).\nnum_iters — this is simply the number of iterations we will run our Offline RL algorithm.\ndataset_size — as a design choice, we assume that the final dataset size has been fixed beforehand,\nas we do with the number of turns. However, both of these two conditions could be relaxed and one could run\nthe algorithm as many turns as needed, getting a final offline dataset with an undefined size.\nHowever, please remember that in the real scenario you will probably not have the privilege of\naccessing the environment so often! You must do your best with a reasonable number of turns!\nNow, following the logic of the pseudo-code, let’s describe the algorithm:\nInitially, we don’t have any transitions to train our Offline RL algorithm, so we initialize our offline_dataset\nas an empty list.\nWe also initialize current_policy with init_policy, which most likely will be the random policy\n(an agent that has previously interacted with the environment taking actions uniformly at random).\nNow, for each turn we run num_seeds times the following procedure:\n    \nWe create a copy of offline_dataset (temp_dataset) to train the current agent with the dataset collected\nso far.\nWe deploy the agent to the environment, in order to generate a new set of transitions using the current policy\n(trajectories_from_new_policy).\nWe extend the temporary dataset by trajectories_from_new_policy and train an agent with it,\nusing the preferred Offline RL algorithm and getting its corresponding policy and performances.\nWe append the results to runs list.\nOnce we have collected all the results, we pick the best policy and best-generated trajectories\nout of the pool of runs (find_best_run).\nThe best_policy is now our current_policy that will be used for the next turn.\nThe best_trajectories will are appended to offline_dataset that will is going to be used for the next turn.\nWe repeat this procedure until we are satisfied with the performance or as many times (turns)\nwe are able to access the environment.\nNow, hoping the algorithm is clear to you, we need to answer two important questions.\nWhich Offline RL algorithm should be run?\nActually here the choice is yours! In our case, we opted for\nusing Conservative Q-Learning (CQL).\nAny algorithm may have its pros and cons. In our case we find it hard to set the CQL global parameters only once\nto be good for all the runs. What is happening is that initially our dataset will be full of random transitions,\nbut as long as you proceed in turns, it will become richer in “more-expert” transitions.\nThus, parameters like alpha for the CQL loss should be somehow adjusted in time.\nWhile in this tutorial we did not investigate this aspect, we found that for this very simplistic environment\neven CQL with alpha = 0 (equivalent to offline Q iteration) would work sufficiently.\nHow to aggregate results in order to get a representative policy and dataset for the next turn?\nThat’s a hard question. For the sake of this tutorial, we have opted for the simplest of the approaches:\nout of the N runs, we will pick the one that gave us the best results (in terms of average reward).\nHowever, please note that this may be too optimistic and could lead to unexpected behavior in production.\nA better approach would actually be the one that takes into account the “average policy”. But, to “average out”\npolicies is not a trivial task. We discuss this aspect in detail in the final section.\nResults\nVisualizing the agent “in turns”\nFirst, we ask ourselves the following question: does the agent learn “in turns”? We can check this\nby visualizing subsequent state-action visitation maps:\n\nFig.5 — Visualization of subsequent state-action visitation heatmaps. Here we visualize 4 subsequent turns — after one\nsingle turn the agent learns the fastest path to reach the target cell. As long as we proceed in turns, the agent\nimproves its performance, eventually approaching a behaviour comparable to the optimal policy.\nOur algorithm seems to work! When starting with a uniform policy, we can see that even after a\nsingle turn the agent quickly learns the fastest path to reach the target cell. As long as we proceed in turns, the model will\nconsistently improve its performance, by quickly getting to the “R” cell even more often. In this sense, visitation\nmaps get closer to the optimal one where the agent basically reaches the target in a few steps and then just stays\nthere, without performing any further steps.\nDoes the agent improve its performance over time?\nHow many turns are needed to start having results comparable to\nthe optimal policy? In other words, how much better are we performing if compared to not doing any turn at all?\nLet’s analyze the plot below. In this figure we are plotting the algorithm’s performance, measured in\n“averaged reward” (the higher, the better), as the amount of data available offline increases. In general, we expect\nthe curve obtained by running the optimal policy (violet curve) to represent an upper bound: it’s the best we\ncan achieve! On the other hand, we expect the curve obtained by running the random policy without any “turn”\n(green curve), to be our lower bound. Also, generally speaking, we expect that the more offline data is available,\nthe better the achieved scores will be, since our chosen Offline RL will have more data coverage and possibility\nto converge to the optimal policy. Given this, we can observe that the performance of the turn-based procedure falls\nin the middle between the aforementioned upper and lower bounds: as the number of turns increases, the closer we get\nto the upper bound. However, we can observe that 3 turns are already enough to start having better performance than\nthe lower bound. This plot confirms our hypothesis: “Turn-based Offline RL” stands exactly between Online RL\n(upper bound) and Offline RL (lower bound).\n\nFig.6 — This plot shows the comparison between baselines and the turn-based procedure in terms of average reward (the higher,\nthe better) as the size of the collected data used to train the algorithm offline grows. To obtain this figure,\nwe have run each of the algorithms for 30 seeds. For the optimal policy we run Q-iteration, while for the rest we\napplied CQL with fixed alpha=0. For each run, CQL was fitted for 300 iterations.\nConclusions and Future Work\nIn this blog post we have presented a practical approach you could use to address cases where you have temporary\nand limited access to an environment, and you have computational resources at your disposal to train your RL algorithm\n“offline” only.\nIn fact, the proposed solution falls halfway between Online RL and Offline RL: our agent is warmed up\nby training it via Offline RL on a dataset generated by running the uniform random policy and then\nsubsequently improved by accessing the environment in “turns”, thus partially simulating what you would get on a\nstandard online RL scenario.\nIn particular, we show that:\nThe turn-based procedure is effective since the policy learned in subsequent turns consistently improves as\nturns increase, matching the expectations. This result is demonstrated through some visualizations, showing how\nthe agent chooses a better and faster path to target turn after turn.\nThe turn-based procedure allows getting an agent that is better than a random one, even after a small number of turns.\nThe performance of the turn-based agent will be upper-bounded by the performance of the optimal policy.\nMoreover, we provide an easy-to-understand framework to prove the aforementioned hypothesis.\nFinally, we want to point out some limitations of our work that could be addressed as future work:\nFrom one turn to the other, we pick the “best policy” as the one that achieves the best performance between all\nthe runs via the “max” operator. This single policy is then propagated through the algorithm and used to generate\nthe best new extension of the dataset. The inherent limitation of this approach is that by using the “max” we are\nnot robust to the noise and we do not account for fluctuations in the performance of the Offline RL algorithm.\nA better approach would be aggregating policies by doing, for example, an ensemble of policies, and using this\nas the selected policy that is propagated forward in the algorithm.\nRunning a fixed Offline RL algorithm on a dataset that keeps changing its distribution of states and actions\nin time could be really challenging since a lot of algorithms in the literature require accurate hypertuning\nof the parameters. In future work, we would like to address this problem, proposing, for example, a way one\ncould compute new hyper-parameters using the dataset size and some other properties as parameters for the computation.\nOne could argue that our hypothesis can work only on simplistic environments like GridWorlds.\nEven though we tested different configurations of grids, stressing more or less the algorithms,\nwe admit that a more complete work would require the re-visitation of our hypothesis on a more diverse\nsuite of environments. We plan to investigate this in the future.","guid":"https://blog.allegro.tech/2022/04/turn-based-offline-rl.html","categories":["tech","mlr","rl","research"],"isoDate":"2022-04-13T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"An Agile team in its natural habitat","link":"https://blog.allegro.tech/2022/04/agile-team-natural-habitat.html","pubDate":"Fri, 01 Apr 2022 00:00:00 +0200","authors":{"author":[{"name":["Michał Kosmulski"],"photo":["https://blog.allegro.tech/img/authors/michal.kosmulski.jpg"],"url":["https://blog.allegro.tech/authors/michal.kosmulski"]}]},"content":"<blockquote>\n  <p>This post was published on April 1st, 2022, and should be taken with a grain of salt.</p>\n</blockquote>\n\n<p>In this picture, we can see an Agile team in its natural habitat at Allegro:</p>\n\n<p><img src=\"/img/articles/2022-04-01-agile-team-natural-habitat/allegro-agile-team-natural-habitat.jpg\" alt=\"An Agile team in its natural habitat at Allegro\" /></p>\n\n<p>Learning and development are very important to us at <a href=\"https://allegro.tech/\">Allegro</a>. This absolutely not staged photo\nshows Piotr (right) reading out loud from a book about a newfangled language called BASIC. Piotr is a Product Owner,\nand he knows the development team needs to keep learning all the time in order to stay current with technology. He\nhimself has amassed a personal collection of 8-bit machines in order to hone his technical skills, and now he’s sharing\nwhat he has learned with others.</p>\n\n<p>Listening with great attention are two software engineers, Artur (left) and Kacper (center). Until recently, Artur was\nthe most junior member of the team. Nonetheless, when new people were joining us, he was their <em>buddy</em>, the go-to\ncontact for any questions, whose role is to put them on track as efficiently as possible. He did so well, and liked\nthis role so much, that at one point we literally had to stop him in order to give others a chance to try their hand\nat being buddies, too. But nothing is lost, since the whole team, not just the buddy, helps onboard new people. Artur\nis already thinking deeply about teaching BASIC to our future teammates.</p>\n\n<p>Kacper, in contrast, is one of the senior team members. He was already there when we started introducing Kotlin in our\nprojects a few years ago. Learning a new language is great fun, and you can already see Kacper smile at the thought\nof replacing all those complex functional constructs with a few simple GOTO statements. Keen observers will also notice\non the desk Kacper’s stopwatch he uses for timing performance-critical pieces of code. Many of our systems have\ndemanding performance requirements, and it’s thanks to experienced people like him that we are able to meet them.</p>\n\n<p>Obviously, this is not even the whole team, so you can easily imagine that anything is possible with such people\nand attitude. Happy April!</p>\n","contentSnippet":"This post was published on April 1st, 2022, and should be taken with a grain of salt.\nIn this picture, we can see an Agile team in its natural habitat at Allegro:\n\nLearning and development are very important to us at Allegro. This absolutely not staged photo\nshows Piotr (right) reading out loud from a book about a newfangled language called BASIC. Piotr is a Product Owner,\nand he knows the development team needs to keep learning all the time in order to stay current with technology. He\nhimself has amassed a personal collection of 8-bit machines in order to hone his technical skills, and now he’s sharing\nwhat he has learned with others.\nListening with great attention are two software engineers, Artur (left) and Kacper (center). Until recently, Artur was\nthe most junior member of the team. Nonetheless, when new people were joining us, he was their buddy, the go-to\ncontact for any questions, whose role is to put them on track as efficiently as possible. He did so well, and liked\nthis role so much, that at one point we literally had to stop him in order to give others a chance to try their hand\nat being buddies, too. But nothing is lost, since the whole team, not just the buddy, helps onboard new people. Artur\nis already thinking deeply about teaching BASIC to our future teammates.\nKacper, in contrast, is one of the senior team members. He was already there when we started introducing Kotlin in our\nprojects a few years ago. Learning a new language is great fun, and you can already see Kacper smile at the thought\nof replacing all those complex functional constructs with a few simple GOTO statements. Keen observers will also notice\non the desk Kacper’s stopwatch he uses for timing performance-critical pieces of code. Many of our systems have\ndemanding performance requirements, and it’s thanks to experienced people like him that we are able to meet them.\nObviously, this is not even the whole team, so you can easily imagine that anything is possible with such people\nand attitude. Happy April!","guid":"https://blog.allegro.tech/2022/04/agile-team-natural-habitat.html","categories":["tech","agile","testing","April 1st"],"isoDate":"2022-03-31T22:00:00.000Z","thumbnail":"images/post-headers/testing.png"},{"title":"Visual thinking","link":"https://blog.allegro.tech/2022/03/visual-thinking.html","pubDate":"Wed, 30 Mar 2022 00:00:00 +0200","authors":{"author":[{"name":["Michał Kowalcze"],"photo":["https://blog.allegro.tech/img/authors/michal.kowalcze.jpg"],"url":["https://blog.allegro.tech/authors/michal.kowalcze"]}]},"content":"<p>We use written (source code) language to express our intentions in a machine-readable form. We use spoken language to\ncommunicate with other people. We pride ourselves as ones choosing a programming language optimized to the task at hand.\nDo we use the optimal way to express our ideas?</p>\n\n<h2 id=\"the-story\">The Story</h2>\n\n<h3 id=\"spoken-planning\">Spoken planning</h3>\n\n<p>— Josh, could you summarize what we are going to implement, please?</p>\n\n<p>That was a bit unexpected. He was just trying to match what he already knew from onboarding days with what was just\nsaid. It was really difficult to follow team discussion at the same time. It was a standard planning session, held over\nZoom, with his distributed team. Someone was already sharing their screen and the story summary, along with acceptance\ncriteria, was visible. They were developing an online store and the current topic was: basket price reduction for active\nusers. In short: users who spent more than 50€ for the last 7 days should have a discount applied during the checkout\nprocess.</p>\n\n<p>— Well, we are going to add a new service which is going to hold this discount logic. We will provide an API for the\ncart service to call us and we will check the transactions store for recent orders.<br />\n— Is that all?<br />\n— I didn’t catch more changes.<br />\n— What about customers willing to check if they are eligible for a discount?<br />\n— Oh, so it seems we need to change the “My Account” page as well.<br />\n— And the checkout service? We have to both display discount and use it.<br />\n— You’re right! I was trying to picture the main change in my mind and wasn’t paying attention to the whole\ndiscussion.<br />\n— Guys, checkout stays the same. The cart is providing everything the checkout requires.</p>\n\n<h3 id=\"retrospective\">Retrospective</h3>\n\n<p>Let’s stop here for a moment. Have you ever been in a situation, when you were forced to do two things at the same time?\nFor example, listening to what is being said and trying to actively participate in the discussion regarding a not exactly\nwell-known topic? Was it a demanding experience? I had such an opportunity and I remember these sessions as quite\ndemanding. Usually, after an hourly session, I was exhausted and in need of a break. Not to mention that it required a\nsignificant amount of writing to capture everything that was said — just to have an option of referring back to this\nduring the sprint. What if this session looked differently?</p>\n\n<h3 id=\"visual-planning\">Visual planning</h3>\n\n<p>— Josh, could you summarize what we are going to implement, please?</p>\n\n<p>That was a bit unexpected, however, it was a no-brainer.\n<img src=\"/img/articles/2022-03-30-visual-thinking/planning_services.png\" alt=\"planning services\" />\n“As we can see in the picture we are going to add a new service, discounts. This service will be called by the current\ncart service to display a reduced price (if applicable). Also, the “My Account” page is going to call us to retrieve the\ncurrent rebate for the logged user”.</p>\n\n<h3 id=\"the-difference\">The difference</h3>\n\n<p>What is the main difference between the first scenario and the second one? To me, it is about a common model. In the first\ncase, I am building an individual model of a change. I need a significant amount of energy to translate speech to my model\nand to explain my model to others. What is more — everyone involved in the discussion is building a mental model on\ntheir own with a similar amount of energy spent on synchronization.</p>\n\n<p><img src=\"/img/articles/2022-03-30-visual-thinking/private_models.png\" alt=\"private models\" /></p>\n\n<p>In the case of the second scenario, the model is shared. There is no need to maintain private models. It is easy to\nunderstand changed elements and to refer to discussed changes later. “A picture is worth a thousand words” after all.</p>\n\n<p><img src=\"/img/articles/2022-03-30-visual-thinking/common_model.png\" alt=\"common model\" /></p>\n\n<p>Output from a visual planning is something that can be used further during a sprint. Depending on the tool it is\npossible to use it instead of an issue-tracking tool. Sticky notes can indicate actions, tasks, TODOs. They can be\narranged in a tree and display the scope of a pull request. They can be connected by a dotted line to indicate dependencies.\nAnd in the worst case, when you do not have any idea how to visualize something, you can always use a block of text and\ndescribe it using words.</p>\n\n<p><img src=\"/img/articles/2022-03-30-visual-thinking/planning_tasks.png\" alt=\"planning tasks\" /></p>\n\n<h2 id=\"the-background\">The background</h2>\n\n<p>Why switching to a drawing board has such an effect? To answer this question we have to check some facts.</p>\n\n<p>On a daily basis, a spoken (or written) language is our standard way of communication. Children, however, need some time\nto develop such a skill. Earlier they are able to:</p>\n\n<ul>\n  <li>register movement (at 2 months of age)</li>\n  <li>try to grab things by hand (5 months)</li>\n  <li>follow movement with their eyes, find hidden things (7 months)</li>\n  <li>exploit cause-effect — drop a toy and watch it fall (8 months)</li>\n  <li>start to use words in a proper context (11 months)</li>\n</ul>\n\n<p>Such spatial skills are something all creatures need to develop to survive. Even plants, to some extent, exhibit\nspatial-aware behavior — they move to follow the sun.</p>\n\n<p>It is worth noting that spatial-related terms\nlike <a href=\"https://en.wikipedia.org/wiki/Natural_semantic_metalanguage\">“where, here, near, etc.”</a>\ncan be translated to any language in the world.</p>\n\n<p>On the other hand, what language do we use to express ideas-related actions? As Barbara Tversky listed in her\n<a href=\"https://www.youtube.com/watch?v=gmc4wEL2aPQ\">“Mind in motion”</a> lecture we can:</p>\n\n<ul>\n  <li>raise ideas</li>\n  <li>pull them together</li>\n  <li>tear apart</li>\n  <li>turn inside out</li>\n  <li>push forward</li>\n  <li>toss out</li>\n</ul>\n\n<p><img src=\"/img/articles/2022-03-30-visual-thinking/ideas_and_actions.png\" alt=\"ideas and actions\" /></p>\n\n<p>We talk about ideas in the same way as about any space-related topic!</p>\n\n<p>How could it happen? Scientists have been trying to understand the functions of different parts of the brain for some time\nalready. In the seventies, they have identified the so-called <strong>place cells</strong> — neurons that are activated at a specific\nlocation. It took some time to identify another layer of neurons on top of these: <strong>grid cells</strong>, working as our inner\nGPS, activated when switching locations. The latter discovery was\nawarded a <a href=\"https://www.nobelprize.org/prizes/medicine/2014/press-release/\">Nobel Prize in 2014</a>.</p>\n\n<p>Tests on human beings resulted in another finding: place cells are activated not only in specific locations. They are\nalso activated by events, people, ideas. The grid cells are activated by thinking about the consequences of events, by\nsocial interactions, and by connecting ideas together. We are using the same brain structures for spatial orientation,\nfor ideas, and for social interactions. This is the reason why Barbara Tversky issued an audacious thesis that “all\nthoughts begin as spatial thoughts”.</p>\n\n<h3 id=\"map-elements\">Map elements</h3>\n\n<p>Nowadays we have a GPS sensor in almost any smartphone, so it is rather difficult to get lost. Basic GPS information -\ncurrent coordinate — is not very useful by itself. It is much more convenient to display our current location over a map\nlayer. What is a map? According to <a href=\"https://en.wikipedia.org/wiki/Map\">wikipedia</a>, it is “[..] a symbolic depiction\nemphasizing relationships between elements of some space [..]”.</p>\n\n<p>As our ideas — and imaginary concepts like services — are treated by our brains as spatial elements we simply use known\nconcepts of space visualization to present imagined beings and relations among them.</p>\n\n<h3 id=\"arrows\">Arrows</h3>\n\n<p>So far we used several symbols in our planning diagrams. Almost all of them can be found in maps as well, except one.\nThis element is an arrow — a significant element of our drawings. According to Barbara Tversky in the already\nmentioned <a href=\"https://www.youtube.com/watch?v=gmc4wEL2aPQ\">“Mind in motion” lecture</a>\narrows as visual elements started to appear in the 20th century. Before that symbols of feet or fingers had been used to\nindicate direction. The addition of arrows changes our perception of diagrams: without them, it is usually a structural\ndrawing, that requires additional labels to understand. Arrows transform such a structural diagram into a functional\ndiagram: we can trace arrows to their origin, we see how things are connected and how they cooperate. Check the\nexample below — the left-hand side version is static, only describes elements and the right-hand side version shows the movement\nof particular elements without using a single word.</p>\n\n<p><img src=\"/img/articles/2022-03-30-visual-thinking/clock.png\" alt=\"static and dynamic clock\" /></p>\n\n<h2 id=\"messy-lines\">Messy lines</h2>\n\n<p>All these well-known elements are our means of communication with other people, or even ourselves, at a different point\nin time. Sometimes we draw to discover, we sketch shapes to find inspiration, an idea. This seems to be important in\na different creative profession: architecture. Architects discover ideas in sketches. The ambiguity of non-obvious shapes\npromotes creativity. It is so important in this profession that sketches from private collections are sold as books. One\nof such books\nis <a href=\"https://www.designboom.com/architecture/sou-fujimoto-sketchbook-lars-muller-publishers/\">Sou Fujimoto sketchbook</a>. I\nwould like to leave you with one quote from it, found\nat <a href=\"https://colorandstory.medium.com/drawing-for-discovery-7e47ae6943da\">“Drawing for Discovery” post</a>:</p>\n\n<blockquote>\n  <p>The lines are never certain, never knowing where the next will lead to. Never knowing, but continuing to draw.\nAnd for this very reason, there is always an opportunity for something new. From the infinite dialogues of the brain,\neyes, hand, paper, and space, new architecture is born.</p>\n</blockquote>\n","contentSnippet":"We use written (source code) language to express our intentions in a machine-readable form. We use spoken language to\ncommunicate with other people. We pride ourselves as ones choosing a programming language optimized to the task at hand.\nDo we use the optimal way to express our ideas?\nThe Story\nSpoken planning\n— Josh, could you summarize what we are going to implement, please?\nThat was a bit unexpected. He was just trying to match what he already knew from onboarding days with what was just\nsaid. It was really difficult to follow team discussion at the same time. It was a standard planning session, held over\nZoom, with his distributed team. Someone was already sharing their screen and the story summary, along with acceptance\ncriteria, was visible. They were developing an online store and the current topic was: basket price reduction for active\nusers. In short: users who spent more than 50€ for the last 7 days should have a discount applied during the checkout\nprocess.\n— Well, we are going to add a new service which is going to hold this discount logic. We will provide an API for the\ncart service to call us and we will check the transactions store for recent orders.\nRetrospective\nLet’s stop here for a moment. Have you ever been in a situation, when you were forced to do two things at the same time?\nFor example, listening to what is being said and trying to actively participate in the discussion regarding a not exactly\nwell-known topic? Was it a demanding experience? I had such an opportunity and I remember these sessions as quite\ndemanding. Usually, after an hourly session, I was exhausted and in need of a break. Not to mention that it required a\nsignificant amount of writing to capture everything that was said — just to have an option of referring back to this\nduring the sprint. What if this session looked differently?\nVisual planning\n— Josh, could you summarize what we are going to implement, please?\nThat was a bit unexpected, however, it was a no-brainer.\n\n“As we can see in the picture we are going to add a new service, discounts. This service will be called by the current\ncart service to display a reduced price (if applicable). Also, the “My Account” page is going to call us to retrieve the\ncurrent rebate for the logged user”.\nThe difference\nWhat is the main difference between the first scenario and the second one? To me, it is about a common model. In the first\ncase, I am building an individual model of a change. I need a significant amount of energy to translate speech to my model\nand to explain my model to others. What is more — everyone involved in the discussion is building a mental model on\ntheir own with a similar amount of energy spent on synchronization.\n\nIn the case of the second scenario, the model is shared. There is no need to maintain private models. It is easy to\nunderstand changed elements and to refer to discussed changes later. “A picture is worth a thousand words” after all.\n\nOutput from a visual planning is something that can be used further during a sprint. Depending on the tool it is\npossible to use it instead of an issue-tracking tool. Sticky notes can indicate actions, tasks, TODOs. They can be\narranged in a tree and display the scope of a pull request. They can be connected by a dotted line to indicate dependencies.\nAnd in the worst case, when you do not have any idea how to visualize something, you can always use a block of text and\ndescribe it using words.\n\nThe background\nWhy switching to a drawing board has such an effect? To answer this question we have to check some facts.\nOn a daily basis, a spoken (or written) language is our standard way of communication. Children, however, need some time\nto develop such a skill. Earlier they are able to:\nregister movement (at 2 months of age)\ntry to grab things by hand (5 months)\nfollow movement with their eyes, find hidden things (7 months)\nexploit cause-effect — drop a toy and watch it fall (8 months)\nstart to use words in a proper context (11 months)\nSuch spatial skills are something all creatures need to develop to survive. Even plants, to some extent, exhibit\nspatial-aware behavior — they move to follow the sun.\nIt is worth noting that spatial-related terms\nlike “where, here, near, etc.”\ncan be translated to any language in the world.\nOn the other hand, what language do we use to express ideas-related actions? As Barbara Tversky listed in her\n“Mind in motion” lecture we can:\nraise ideas\npull them together\ntear apart\nturn inside out\npush forward\ntoss out\n\nWe talk about ideas in the same way as about any space-related topic!\nHow could it happen? Scientists have been trying to understand the functions of different parts of the brain for some time\nalready. In the seventies, they have identified the so-called place cells — neurons that are activated at a specific\nlocation. It took some time to identify another layer of neurons on top of these: grid cells, working as our inner\nGPS, activated when switching locations. The latter discovery was\nawarded a Nobel Prize in 2014.\nTests on human beings resulted in another finding: place cells are activated not only in specific locations. They are\nalso activated by events, people, ideas. The grid cells are activated by thinking about the consequences of events, by\nsocial interactions, and by connecting ideas together. We are using the same brain structures for spatial orientation,\nfor ideas, and for social interactions. This is the reason why Barbara Tversky issued an audacious thesis that “all\nthoughts begin as spatial thoughts”.\nMap elements\nNowadays we have a GPS sensor in almost any smartphone, so it is rather difficult to get lost. Basic GPS information -\ncurrent coordinate — is not very useful by itself. It is much more convenient to display our current location over a map\nlayer. What is a map? According to wikipedia, it is “[..] a symbolic depiction\nemphasizing relationships between elements of some space [..]”.\nAs our ideas — and imaginary concepts like services — are treated by our brains as spatial elements we simply use known\nconcepts of space visualization to present imagined beings and relations among them.\nArrows\nSo far we used several symbols in our planning diagrams. Almost all of them can be found in maps as well, except one.\nThis element is an arrow — a significant element of our drawings. According to Barbara Tversky in the already\nmentioned “Mind in motion” lecture\narrows as visual elements started to appear in the 20th century. Before that symbols of feet or fingers had been used to\nindicate direction. The addition of arrows changes our perception of diagrams: without them, it is usually a structural\ndrawing, that requires additional labels to understand. Arrows transform such a structural diagram into a functional\ndiagram: we can trace arrows to their origin, we see how things are connected and how they cooperate. Check the\nexample below — the left-hand side version is static, only describes elements and the right-hand side version shows the movement\nof particular elements without using a single word.\n\nMessy lines\nAll these well-known elements are our means of communication with other people, or even ourselves, at a different point\nin time. Sometimes we draw to discover, we sketch shapes to find inspiration, an idea. This seems to be important in\na different creative profession: architecture. Architects discover ideas in sketches. The ambiguity of non-obvious shapes\npromotes creativity. It is so important in this profession that sketches from private collections are sold as books. One\nof such books\nis Sou Fujimoto sketchbook. I\nwould like to leave you with one quote from it, found\nat “Drawing for Discovery” post:\nThe lines are never certain, never knowing where the next will lead to. Never knowing, but continuing to draw.\nAnd for this very reason, there is always an opportunity for something new. From the infinite dialogues of the brain,\neyes, hand, paper, and space, new architecture is born.","guid":"https://blog.allegro.tech/2022/03/visual-thinking.html","categories":["tech","communication","visualization","planning","creativity"],"isoDate":"2022-03-29T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"}],"jobs":[{"id":"743999810853837","name":"Research Engineer - Machine Learning (Computer Vision)","uuid":"98abcad8-b820-4402-85a6-b6b6e03cfdaa","refNumber":"REF2880R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2022-03-09T12:55:28.000Z","location":{"city":"Warszawa, Kraków, Poznań, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"606235fe248e6f5bea0815ed","fieldLabel":"Katowice","valueId":"185eb5a9-b884-4ee8-8ebc-0e5f3e852b27","valueLabel":"Tak"},{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"606235bcefbac7156d6a470a","fieldLabel":"Łódź","valueId":"7d33e23d-3fa7-4d7d-86ae-7d7caff54fa9","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"6165609ee6b46b6506c66b63","fieldLabel":"Gdańsk","valueId":"cde0f8e7-5c9d-4d78-9f5c-e1c17ee499a8","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"61656102a169ed164d546c31","fieldLabel":"Lublin","valueId":"02d54f00-48b9-4669-b7b3-10c16ac4bada","valueLabel":"Tak"},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"CV, Computer Vision, ML, AI, DS, Machine Learning, PyTorch, Python, Deep Learning"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999810853837","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999785421861","name":"Research Engineer - Machine Learning (Ranking and Recommendations)","uuid":"a6b2b59e-28e3-4bfa-89ab-b13ab97f06c8","refNumber":"REF2990T","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-11-08T09:54:52.000Z","location":{"city":"Warszawa, Poznań, Kraków, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"b8a4596e-d9ce-42bb-8de5-10995e9ccf99","valueLabel":"IT - Machine Learning"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, AI, Ranking, Research, Machine Learning"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999785421861","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999779448676","name":"Research Engineer - Machine Learning (Ranking and Recommendations)","uuid":"7cb35dfc-f53c-4b51-81ac-61b683060f4c","refNumber":"REF2990T","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-10-14T10:29:00.000Z","location":{"city":"Warszawa, Poznań, Kraków, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"b8a4596e-d9ce-42bb-8de5-10995e9ccf99","valueLabel":"IT - Machine Learning"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro.pl sp. z o.o."},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, AI, Ranking, Research, Machine Learning"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999779448676","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}}],"events":[{"created":1650552918000,"duration":100800000,"id":"285416318","name":"UX Research Confetti - II edycja","date_in_series_pattern":false,"status":"past","time":1653562800000,"local_date":"2022-05-26","local_time":"13:00","updated":1653666063000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":48,"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/285416318/","description":"REJESTRACJA NA WYDARZENIE -&gt; https://app.evenea.pl/event/ux-research-confetti-2/ 🎉 Niech ponownie rozsypie się confetti wiedzy o badaniach UX! 🎉 Szukaliśmy konferencji badawczej UX w Polsce i nie znaleźliśmy……","visibility":"public","member_pay_fee":false},{"created":1651656994000,"duration":7200000,"id":"285691203","name":"Allegro Tech Live #28 - Mobile: Architektura softu i architektura sprzętu","date_in_series_pattern":false,"status":"past","time":1652976000000,"local_date":"2022-05-19","local_time":"18:00","updated":1652985850000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":48,"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/285691203/","description":"**Allegro Tech Live** to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Kiedyś spotykaliśmy się w naszych biurach, a teraz to my gościmy…","visibility":"public","member_pay_fee":false},{"created":1649842904000,"duration":5400000,"id":"285245512","name":"Allegro Tech Live #27 - Java, Python i rozsądny development","date_in_series_pattern":false,"status":"past","time":1651161600000,"local_date":"2022-04-28","local_time":"18:00","updated":1651169097000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":41,"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/285245512/","description":"\\-\\-\\-\\-\\-\\-\\&gt; Na wydarzenie obowiązuje rejestracja: [https://app.evenea.pl/event/allegro-tech-live-27/](https://app.evenea.pl/event/allegro-tech-live-27/?fbclid=IwAR3QOef6CKKiuowl1Nto3Z4YEFMj7R7hdq_REpvY2a-3ETaJsWhvfnXDLxE) &lt;----- Allegro Tech Live to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Kiedyś spotykaliśmy się w…","visibility":"public","member_pay_fee":false},{"created":1648205510000,"duration":5400000,"id":"284843205","name":"Allegro Tech Live #26 - Summer e-Xperience 2022 - Praca na start","date_in_series_pattern":false,"status":"past","time":1649347200000,"local_date":"2022-04-07","local_time":"18:00","updated":1649354220000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":18,"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/284843205/","description":"OBOWIĄZUJE REJESTRACJA NA WYDARZENIE: [https://app.evenea.pl/event/allegro-tech-live-26/](https://app.evenea.pl/event/allegro-tech-live-26/?fbclid=IwAR0b1mViAvW5FnJYTRmstdxOtMA_7jlWRYIAtortrhPFJk1PtHw1xIw5rBk) Allegro Tech Live to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Kiedyś spotykaliśmy się w naszych biurach,…","visibility":"public","member_pay_fee":false}],"podcasts":[{"title":"S02E12 - Piotr Betkier - Rola architekta w Allegro","link":"https://podcast.allegro.tech/rola_architekta_w_allegro/","pubDate":"Wed, 16 Jun 2021 00:00:00 GMT","content":"Od kodowania do tworzenia strategii technicznej... Jak wygląda rola architekta w Allegro? Ile takich osób pracuje w naszej firmie i dlaczego ta rola jest tak różnorodna? Czym jest Andamio i jak rozwijamy naszą platformę – o tym wszystkim opowie Piotr Betkier – Inżynier, Architekt Platformy Technicznej w Allegro oraz twórca piosenek o IT :)","contentSnippet":"Od kodowania do tworzenia strategii technicznej... Jak wygląda rola architekta w Allegro? Ile takich osób pracuje w naszej firmie i dlaczego ta rola jest tak różnorodna? Czym jest Andamio i jak rozwijamy naszą platformę – o tym wszystkim opowie Piotr Betkier – Inżynier, Architekt Platformy Technicznej w Allegro oraz twórca piosenek o IT :)","guid":"https://podcast.allegro.tech/rola_architekta_w_allegro/","isoDate":"2021-06-16T00:00:00.000Z"},{"title":"S02E11 - Piotr Michoński - Infrastruktura Allegro","link":"https://podcast.allegro.tech/infrastruktura_Allegro/","pubDate":"Tue, 01 Jun 2021 00:00:00 GMT","content":"Jak jest zbudowane środowisko uruchomienia aplikacji Allegro? Jak działają serwerownie firmy i ile ich potrzeba, a które elementy Allegro działają w chmurze publicznej? Jak przebiegała transformacja w Allegro i co zmieniało się przez lata? Jak wzrost biznesu wpływa na wielkość infrastruktury i jak infrastruktura Allegro odczuła przyjście pandemii? O tym, a także o rozwoju liderów technologii w Allegro oraz o historii powstania dżingla do naszych podcastów, opowie Piotr Michoński - menadżer Zespołów tworzących infrastrukturę Allegro.","contentSnippet":"Jak jest zbudowane środowisko uruchomienia aplikacji Allegro? Jak działają serwerownie firmy i ile ich potrzeba, a które elementy Allegro działają w chmurze publicznej? Jak przebiegała transformacja w Allegro i co zmieniało się przez lata? Jak wzrost biznesu wpływa na wielkość infrastruktury i jak infrastruktura Allegro odczuła przyjście pandemii? O tym, a także o rozwoju liderów technologii w Allegro oraz o historii powstania dżingla do naszych podcastów, opowie Piotr Michoński - menadżer Zespołów tworzących infrastrukturę Allegro.","guid":"https://podcast.allegro.tech/infrastruktura_Allegro/","isoDate":"2021-06-01T00:00:00.000Z"},{"title":"S02E10 - Dariusz Eliasz - Praca architekta ekosystemu big data w Allegro","link":"https://podcast.allegro.tech/praca_architekta_ekosystemu_big_data_w_Allegro/","pubDate":"Thu, 20 May 2021 00:00:00 GMT","content":"Jak wygląda praca architekta ekosystemu big data w Allegro? Jakie zadania realizuje nasz zespół odpowiedzialny za narzędzia i infrastrukturę dla przetwarzania danych? Kiedy możemy mówić o dużych danych i ile petabajtów przetwarza Allegro? Skąd pochodzą dane Allegro i dlaczego jest ich tak dużo oraz z jakiego powodu dopiero teraz przenosimy się do chmury? O tym wszystkim opowie zdobywca statuetki Allegro Tech Hero - Dariusz Eliasz – Team Manager & Platform Architect w Allegro.","contentSnippet":"Jak wygląda praca architekta ekosystemu big data w Allegro? Jakie zadania realizuje nasz zespół odpowiedzialny za narzędzia i infrastrukturę dla przetwarzania danych? Kiedy możemy mówić o dużych danych i ile petabajtów przetwarza Allegro? Skąd pochodzą dane Allegro i dlaczego jest ich tak dużo oraz z jakiego powodu dopiero teraz przenosimy się do chmury? O tym wszystkim opowie zdobywca statuetki Allegro Tech Hero - Dariusz Eliasz – Team Manager & Platform Architect w Allegro.","guid":"https://podcast.allegro.tech/praca_architekta_ekosystemu_big_data_w_Allegro/","isoDate":"2021-05-20T00:00:00.000Z"},{"title":"S02E09 - Bartosz Gałek - Od inżyniera do lidera w Allegro","link":"https://podcast.allegro.tech/od_inzyniera_do_lidera_w_allegro/","pubDate":"Thu, 06 May 2021 00:00:00 GMT","content":"Czym jest Opbox i jakie wyzwania przed nim stoją? Jak w Allegro angażujemy się w rozwój kultury Open Source? Ile mamy projektów na GitHubie i jak świętujemy Hacktoberfest? W jaki sposób można rozwinąć się od inżyniera do lidera? Na te pytania w najnowszym Allegro Tech Podcast odpowie Bartek Gałek, Team Leader w Allegro.","contentSnippet":"Czym jest Opbox i jakie wyzwania przed nim stoją? Jak w Allegro angażujemy się w rozwój kultury Open Source? Ile mamy projektów na GitHubie i jak świętujemy Hacktoberfest? W jaki sposób można rozwinąć się od inżyniera do lidera? Na te pytania w najnowszym Allegro Tech Podcast odpowie Bartek Gałek, Team Leader w Allegro.","guid":"https://podcast.allegro.tech/od_inzyniera_do_lidera_w_allegro/","isoDate":"2021-05-06T00:00:00.000Z"}]},"__N_SSG":true}