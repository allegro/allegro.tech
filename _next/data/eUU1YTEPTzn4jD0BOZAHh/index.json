{"pageProps":{"posts":[{"title":"GC, hands off my data!","link":"https://blog.allegro.tech/2022/06/gc-hands-off-my-data.html","pubDate":"Thu, 30 Jun 2022 00:00:00 +0200","authors":{"author":[{"name":["Michał Knasiecki"],"photo":["https://blog.allegro.tech/img/authors/michal.knasiecki.jpg"],"url":["https://blog.allegro.tech/authors/michal.knasiecki"]}]},"content":"<p>Certainly one of the main distinguishing features of the Java world is the Garbage Collector.\nUsing it is safe and convenient, it allows us to forget about many tedious responsibilities, letting us focus on the\npure joy of coding. Yet sometimes it can cause a headache too, especially when we notice that GC uses our resources\ntoo intensively. Each of us has probably experienced a time in our career when we wanted to get\nrid of the Garbage Collector from our application because it was running too long, too often, and perhaps even led to temporary system freezes.</p>\n\n<p>What if we could still benefit from the GC, but in special cases, also be able to store data beyond its control? We\ncould still take advantage of its convenience and, at the same time, be able to easily get rid of long GC pauses.</p>\n\n<p>It turns out that it is possible. In this article, we will look at whether and when it is worth storing data\nbeyond the reach of the Garbage Collector’s greedy hands.</p>\n\n<h2 id=\"comfort-comes-at-a-price\">Comfort comes at a price</h2>\n\n<p>At <a href=\"https://allegro.tech\">Allegro</a> we are very keen on metrics. We measure anything that can tell us something about the condition of\nour services. Apart from the most obvious metrics directly related to the application, such as throughput, the number of\nerrors, CPU and memory usage, we also pay a great deal of attention to metrics related to the garbage collecting — GC working\ntime and number of its cycles. Too much time spent on releasing the memory or too frequent GC launches may signal problems with\nmemory leaks or indicate that it is worth considering optimising memory usage or switching to a different GC strategy.</p>\n\n<p>Following the example of large technology companies, we have been organising company meetups within the so-called guilds\nfor some time now. In one of such guilds, over a hundred engineers meet regularly once a month and discuss various\ntopics related to performance, scaling and service optimisation. At one of these meetings, our colleague\ndiscussed the method of determining the actual size of data stored in a cache. Apparently, this is not a\nsimple matter, as internal mechanisms for optimising memory usage, such as deduplication or compression, must be taken\ninto account. After the presentation, an interesting discussion ensued about how much memory\non the heap is actually used by the cache and how long it takes to clean it up. Someone pointed out that there is a hidden cost of using the cache\nthat takes the form of time needed to free the memory of expired cache items, which not everyone is aware of. What is more, the\nmanner in which the cache works does not quite fit the\n<a href=\"http://insightfullogic.com/2013/Feb/20/garbage-collection-java-1/\">generational hypothesis</a> and may mislead the JVM by preventing it\nfrom properly tuning the GC mechanism. I then began to wonder whether it might not be worth keeping the cache in an area\nexcluded from the GC’s control? I knew this is possible, although I had never seen a practical implementation of this\ntechnique. This topic was bothering me for some time, so I decided to investigate.</p>\n\n<h2 id=\"memory-architecture\">Memory architecture</h2>\n\n<p>Any skilled Java programmer knows the division of memory into young and old generation areas. People interested in\ndetails are probably also familiar with the more precise division into eden, survivor, tenured and perm.\nThere are many excellent articles discussing this topic\n(like <a href=\"https://www.betsol.com/blog/java-memory-management-for-java-virtual-machine-jvm/\">this one</a>), so we won’t go\ninto details. Instead, we will focus on a very specialised area of memory that the GC\nhas no control over, which is the off-heap memory, sometimes also called native memory. This is a special area under the\ndirect control of the operating system, which the JVM uses for its own purposes. It stores information about classes and\nmethods, internal thread data and cached code necessary for operation. As I mentioned earlier, off-heap memory is not\nsubject to the GC. In particular, it is excluded from garbage collection processes, which means that programmers\ncreating the JVM code using this area are wholly responsible for freeing memory allocated for\nvariables. There is also a dedicated area to which we — the programmers — have access as well.\nThere is a possibility to write and read data from this space, remembering of course, that the responsibility\nfor cleaning up after unnecessary variables lies entirely with us.</p>\n\n<p>This area can be accessed using a simple API.\nThe following code allocates 100 bytes of off-heap memory and stores a String and an Integer.\nAt the end the data are loaded from the off-heap memory and then printed out.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"o\">;</span>\n\n<span class=\"nc\">ByteBuffer</span> <span class=\"n\">buff</span> <span class=\"o\">=</span> <span class=\"nc\">ByteBuffer</span><span class=\"o\">.</span><span class=\"na\">allocateDirect</span><span class=\"o\">(</span><span class=\"n\">size</span><span class=\"o\">);</span>\n<span class=\"n\">buff</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">\"Michal\"</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">());</span>\n<span class=\"n\">buff</span><span class=\"o\">.</span><span class=\"na\">putInt</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">);</span>\n\n<span class=\"n\">buff</span><span class=\"o\">.</span><span class=\"na\">position</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span> <span class=\"c1\">// set the pointer back to the beginning</span>\n\n<span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">];</span> <span class=\"c1\">// length of my name</span>\n<span class=\"n\">buff</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">String</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">));</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">buff</span><span class=\"o\">.</span><span class=\"na\">getInt</span><span class=\"o\">());</span>\n</code></pre></div></div>\n\n<p>Note the <code class=\"language-plaintext highlighter-rouge\">allocateDirect</code> method that allocates off-heap memory unlike a similar method: <code class=\"language-plaintext highlighter-rouge\">allocate</code> that allocates\non-heap memory. The behavior of both methods can be compared with the help of a profiler\n(I will use <a href=\"https://openjdk.java.net/tools/svc/jconsole/\">jConsole</a>). The following programs allocate 1GB of memory,\nrespectively, on-heap and off-heap:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">ByteBuffer</span><span class=\"o\">.</span><span class=\"na\">allocate</span><span class=\"o\">(</span><span class=\"mi\">1000000000</span><span class=\"o\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">ByteBuffer</span><span class=\"o\">.</span><span class=\"na\">allocateDirect</span><span class=\"o\">(</span><span class=\"mi\">1000000000</span><span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>The chart below shows heap memory profile comparison for both programs (on-heap on the left vs. off-heap on the right):</p>\n\n<p><img src=\"/img/articles/2022-06-30-gc-hands-off-my-data/compare.png\" alt=\"on-heap vs off-heap\" /></p>\n\n<p>Such a possibility to bypass Garbage Collector may seem extremely tempting to\ndevelopers struggling with long working time of the GC. However, this raises the question: what type of usage justifies\nthe extra effort involved in manually freeing the memory and the potential risk of error? What are the advantages of\nusing off-heap memory? Is it faster? How much time will we save by bypassing the GC? Why is this method so uncommon?\nTo put it simply: is it worth doing and if so, when?</p>\n\n<h2 id=\"be-gone-gc\">Be gone GC!</h2>\n\n<p>GC is a wonderful tool. It allows us – although sometimes only for a while – to forget about the problems related\nto painful memory management. We can create variables of any type and any scope almost freely, and not worry about what\nhappens to memory once we stop using them. This task is handled by the GC, which does it brilliantly. In each successive\nversion of the JDK we get a new algorithm, which in some specific cases is even better than the previous one.</p>\n\n<p>However, I’m more than sure that many of us have once encountered the problem of long GC time or too frequent GC\ncalls. Every developer has their own ideas on how to deal with this issue - we look for memory leaks, profile the\napplication in search of hot spots, examine the scope of created variables, use object pools, verify the system\nbehaviour with different GC algorithms, and check the cache configuration.</p>\n\n<p>In my case, it is the cache that is often responsible for long GC time. Sometimes it stores large numbers of objects, usually\ncomplex ones, containing references to other objects. What is more, the way cache objects are accessed is often not\nuniform. Some objects are never queried after being inserted into the cache, others are read throughout their whole\nlifecycle. This causes the cache to disrupt the somewhat ideal world order defined by the generational hypothesis. Then,\nGC algorithms are faced with a very difficult task of determining the optimal way to clean up the memory freed by the\nitems removed from the cache. All this causes the cache cleanup to be expensive. This made me wonder if there was\nany benefit in storing cache data outside the heap?</p>\n\n<h2 id=\"off-heap-space-pros-and-cons\">Off-heap space: Pros and cons</h2>\n\n<p>In a sense, the off-heap space lies outside the control of the JVM (though it belongs to the Java process),\nand for this reason, it is not possible to write\ncomplex structures used in JVM languages into it. This raises the need for an intermediate step of serializing the\ndata into a plain byte array, which can then be stored in the off-heap area. When the data is loaded, the reverse\nprocess must be performed: deserialization into a form that we can use in Java. These additional steps will of\ncourse come at an extra cost, which is why accessing off-heap data will, for obvious reasons, take longer than accessing\non-heap data directly.</p>\n\n<p>Since writing and reading data in the off-heap space takes longer, what is the benefit of this approach then? Well, the data\nstored in the off-heap space are not subject to GC processes, so on the one hand we – the programmers – are responsible\nfor each freeing of memory after a given variable is no longer useful. On the other hand, we relieve the management\nprocesses in the JVM by releasing CPU’s time for the rest of the application, so, theoretically, it should\nresult in some resource savings. The question is, do these differences balance each other out to any degree? Will the savings\nassociated with the GC process balance out our longer data access time? If so, does it depend only on the amount of\ndata, or is there a specific usage scenario? To answer these questions, it is necessary to run a few experiments.</p>\n\n<h2 id=\"experiments\">Experiments</h2>\n\n<p>We can store any data structure in the on-heap area, which means that the advantage of this approach lies in the fact\nthat there is no overhead involved in transforming the data to another form, while its disadvantage consists of the\nadditional cost related to the GC. On the other hand, in the case of off-heap storage, there is no GC extra cost,\nbut there is the cost of serialising the data to a byte array.</p>\n\n<p>Over the last years, significant\nprogress has been made in the field of GC and with the right matching of the algorithm to the application profile, its\ntime can be very short. But is there any case where it is worth reaching into the unmanaged space after all?</p>\n\n<p>I decided to start with an overview of what open-source options are currently available. When it comes to the implementation of the\non-heap cache mechanism, the options are numerous – there is well known:\n<a href=\"https://guava.dev/releases/21.0/api/docs/com/google/common/cache/Cache.html\">guava</a>,\n<a href=\"https://www.ehcache.org/\">ehcache</a>, <a href=\"https://github.com/ben-manes/caffeine\">caffeine</a> and many other solutions. However,\nwhen I began researching cache mechanisms offering the possibility of storing data outside GC control, I found out\nthat there are very few solutions left. Out of the popular ones, only <a href=\"https://www.terracotta.org/\">Terracotta</a> is supported.\nIt seems that this is a very niche solution and we do not have many options to choose\nfrom. In terms of less-known projects, I came across <a href=\"https://github.com/OpenHFT/Chronicle-Map\">Chronicle-Map</a>,\n<a href=\"https://github.com/jankotek/MapDB\">MapDB</a> and <a href=\"https://github.com/snazy/ohc\">OHC</a>. I chose the\nlast one because it was created as part of the Cassandra project, which I had some experience with and was curious\nabout how this component worked:</p>\n\n<blockquote>\n  <p>OHC was developed in 2014/15 for Apache Cassandra 2.2 and 3.0 to be used as the new row-cache backend.</p>\n</blockquote>\n\n<p>To run the experiment, I decided to use a service built to provide the offer description based on its unique number. After\ndownloading the offer description from the repository, it is placed in the cache to speed up future calls. Obviously, the\ncache has a limited capacity, which is chosen in such a way that it forces the deletion of items that have been placed\nin it for the longest time ago.</p>\n\n<p>In our cache, the offer number is the key, while its description in the form of a string of characters is the\nvalue. This allows us to easily simulate almost any size of data in the cache (all we have to do is to make the\noffer description longer), and additionally, it makes the overhead related to the aforementioned serialisation\nrelatively small – serialisation of a text string is obviously faster than a complex DTO object.</p>\n\n<p>In my project, I used the <a href=\"https://github.com/ben-manes/caffeine\">Caffeine cache</a> to store the data in the on-heap area\nand OHC library to store it in the off-heap area.</p>\n\n<p>The test scenario consists of querying for descriptions of different offers. During the test, I will\ncollect data on memory and GC parameters using jConsole. I will run the test scenario using <a href=\"https://jmeter.apache.org/\">jMeter</a>,\nwhich additionally will allow me to measure response times.</p>\n\n<p>From my preliminary research I know that this method is only applicable to memory-intensive systems.\nHowever, for the sake of order, let’s first run an experiment on a small cache size with element set to 5 KB:</p>\n<ul>\n  <li>maximum number of cached elements: 10000</li>\n  <li>cached element size: 5.000 bytes</li>\n  <li>10 threads querying for random offers in a loop of 100000 iterations each</li>\n</ul>\n\n<p>Take a look at the screenshots from jConsole below. The results are in line with expectations: no benefit from the use\nof off-heap space. Both the number of garbage collection cycles (63 vs. 65) and GC run time (0.182s vs 0.235s)\nare nearly identical in both cases:</p>\n\n<p><em>The GC profile of on-heap variant:</em>\n<img src=\"/img/articles/2022-06-30-gc-hands-off-my-data/on-heap-small-gc.png\" alt=\"on-heap GC chart\" /></p>\n\n<p><em>The GC profile of off-heap variant:</em>\n<img src=\"/img/articles/2022-06-30-gc-hands-off-my-data/off-heap-small-gc.png\" alt=\"on-heap GC chart\" /></p>\n\n<p>Not much of an improvement for small to medium cache size. However, this result is not disappointing to me because\nI expected it. GC is designed to handle much more memory than 400 MB, it would therefore be strange if we obtained\nan improvement at such an early stage.</p>\n\n<p>Now let’s see how the comparison looks for a much larger cache element size, let’s increase it up to 100 KB.\nAt the same time, due to the fact that I am running the tests on a laptop with limited resources, I will reduce\nthreads configuration and cache maximum element size.</p>\n\n<p>The configuration of the second test is as follows:</p>\n<ul>\n  <li>maximum number of cached elements: 5000</li>\n  <li>cached element size: 100.000 bytes</li>\n  <li>10 threads querying for random offers in a loop of 1000 iterations each</li>\n</ul>\n\n<p>Let’s take a look at the results.</p>\n\n<p><em>The GC profile of on-heap variant:</em>\n<img src=\"/img/articles/2022-06-30-gc-hands-off-my-data/on-heap-gc.png\" alt=\"on-heap GC chart\" />\nMemory usage increases throughout the test, there are 40 GC collection cycles that together last 0.212s.</p>\n\n<p><em>The GC profile of off-heap variant:</em>\n<img src=\"/img/articles/2022-06-30-gc-hands-off-my-data/off-heap-gc.png\" alt=\"on-heap GC chart\" />\nThis time heap memory usage chart definitely looks different, is shaped like a saw, and reaches half of the previous value.\nPlease note also, that this time there are only 13 GC cycles with total time of 0.108s.</p>\n\n<p>The results of the GC profile comparison are therefore as expected, and what about the response times?</p>\n\n<p><em>jMeter metrics of on-heap variant:</em>\n<img src=\"/img/articles/2022-06-30-gc-hands-off-my-data/on-heap-jmeter.png\" alt=\"on-heap GC chart\" /></p>\n\n<p><em>jMeter metrics of off-heap variant:</em>\n<img src=\"/img/articles/2022-06-30-gc-hands-off-my-data/off-heap-jmeter.png\" alt=\"on-heap GC chart\" /></p>\n\n<p>Request time metrics data is also in line with predictions, off-heap variant proved to be slightly slower than on-heap.</p>\n\n<p>Now let’s see what effect increasing the data size will have on the results. Let’s do tests for the following sizes:\n100.000 B, 200.000 B and 300.000 B, jMeter configuration stays unchanged: 10 threads with 1000 iterations each.\nThis time, for the sake of clarity, the results are summarized in a table:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Cached item size</th>\n      <th>Variant</th>\n      <th>GC cycles count</th>\n      <th>GC time</th>\n      <th>Request time (median)</th>\n      <th>Throughput</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>100.000 B</td>\n      <td>on-heap</td>\n      <td>40</td>\n      <td>0.212 s</td>\n      <td>171 ms</td>\n      <td>83.2 rps</td>\n    </tr>\n    <tr>\n      <td>100.000 B</td>\n      <td>off-heap</td>\n      <td>13</td>\n      <td>0.108 s</td>\n      <td>179 ms</td>\n      <td>78.1 rps</td>\n    </tr>\n    <tr>\n      <td>200.000 B</td>\n      <td>on-heap</td>\n      <td>84</td>\n      <td>0.453 s</td>\n      <td>396 ms</td>\n      <td>38.2 rps</td>\n    </tr>\n    <tr>\n      <td>200.000 B</td>\n      <td>off-heap</td>\n      <td>19</td>\n      <td>0.182 s</td>\n      <td>355 ms</td>\n      <td>40.2 rps</td>\n    </tr>\n    <tr>\n      <td>300.000 B</td>\n      <td>on-heap</td>\n      <td>114</td>\n      <td>0.6s</td>\n      <td>543 ms</td>\n      <td>27.3 rps</td>\n    </tr>\n    <tr>\n      <td>300.000 B</td>\n      <td>off-heap</td>\n      <td>27</td>\n      <td>0.185s</td>\n      <td>528 ms</td>\n      <td>27.9 rps</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>It turns out that as the size of cache item increases, the benefits of using off-heap space grow – all metrics are improved.</p>\n\n<p>What about cache maximum elements? Let’s use 200.000B item size and check what happens when we increase the maximum cache\nelement size, we will test cache for 5000, 10.000 and 15.000 elements:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Cache max elements</th>\n      <th>Variant</th>\n      <th>GC cycles count</th>\n      <th>GC time</th>\n      <th>Request time (median)</th>\n      <th>Throughput</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5000</td>\n      <td>on-heap</td>\n      <td>84</td>\n      <td>0.453 s</td>\n      <td>396 ms</td>\n      <td>38.2 rps</td>\n    </tr>\n    <tr>\n      <td>5000</td>\n      <td>off-heap</td>\n      <td>19</td>\n      <td>0.182 s</td>\n      <td>355 ms</td>\n      <td>40.2 rps</td>\n    </tr>\n    <tr>\n      <td>10000</td>\n      <td>on-heap</td>\n      <td>81</td>\n      <td>0.46 s</td>\n      <td>393 ms</td>\n      <td>38.8 rps</td>\n    </tr>\n    <tr>\n      <td>10000</td>\n      <td>off-heap</td>\n      <td>19</td>\n      <td>0.173 s</td>\n      <td>345 ms</td>\n      <td>42.6 rps</td>\n    </tr>\n    <tr>\n      <td>15000</td>\n      <td>on-heap</td>\n      <td>84</td>\n      <td>0.462 s</td>\n      <td>355 ms</td>\n      <td>41.8 rps</td>\n    </tr>\n    <tr>\n      <td>15000</td>\n      <td>off-heap</td>\n      <td>19</td>\n      <td>0.167 s</td>\n      <td>344 ms</td>\n      <td>42.6 rps</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>No surprise here either, increasing cache size has a positive impact on both variants. Of course in case of on-heap cache,\nsome of the benefits are offset by the need for cleaning larger memory area.</p>\n\n<p>With the experiments conducted, we can conclude that the more data we store in memory, the greater the benefit of using\nthe off-heap area may be. At the same time, it should be added that these benefits are not huge, just a few RPS more.\nIn the case of systems that store tremendous amounts of data, this method may bring some improvements in terms of resource utilization.\nHowever, for most of our apps and services, that’s probably not the way to go, a code audit is a better idea.</p>\n\n<p>This is probably a good time to highlight how well implemented the current memory sweeper algorithms are. Well done GC!</p>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n\n<p>Everyone has probably come across a case when an application froze as a result of GC’s operation. As the above data\nshow, there is a relationship between the amount of data stored in memory and the time the GC requires to clean it up –\nthe more data we store on the heap, the longer it takes to free the memory. That is why the cases where we process large\namounts of data provide us with a potential benefit of using the off-heap area. There are some very specialised uses of\nthis technique, such as Spark, which can store large amounts of data for subsequent processing steps and can do so using\nthe off-heap space (you can read more about Spark memory model <a href=\"https://medium.com/walmartglobaltech/decoding-memory-in-spark-parameters-that-are-often-confused-c11be7488a24\">here</a>).\nAnother example of the use of the off-heap approach is the Apache Cassandra database. The OHC used\nin this post was developed from this particular project.</p>\n\n<p>There is a very narrow group of cases where storing data outside of GC control is justifiable. However, for the\nvast majority of applications, a much better approach is to take advantage of ever-improving GC\nimplementations. If you have experienced problems with the slow performance of the GC while developing your business\nservice, you should definitely audit your code first and experiment with different heap size settings and the GC\nalgorithm. When all other methods fail, you can give the off-heap area a try.</p>\n\n<p>However, if you are working on a server that processes massive amounts of data, it is worth considering off-heap\nstorage earlier, similar to Spark or Cassandra solutions.</p>\n\n","contentSnippet":"Certainly one of the main distinguishing features of the Java world is the Garbage Collector.\nUsing it is safe and convenient, it allows us to forget about many tedious responsibilities, letting us focus on the\npure joy of coding. Yet sometimes it can cause a headache too, especially when we notice that GC uses our resources\ntoo intensively. Each of us has probably experienced a time in our career when we wanted to get\nrid of the Garbage Collector from our application because it was running too long, too often, and perhaps even led to temporary system freezes.\nWhat if we could still benefit from the GC, but in special cases, also be able to store data beyond its control? We\ncould still take advantage of its convenience and, at the same time, be able to easily get rid of long GC pauses.\nIt turns out that it is possible. In this article, we will look at whether and when it is worth storing data\nbeyond the reach of the Garbage Collector’s greedy hands.\nComfort comes at a price\nAt Allegro we are very keen on metrics. We measure anything that can tell us something about the condition of\nour services. Apart from the most obvious metrics directly related to the application, such as throughput, the number of\nerrors, CPU and memory usage, we also pay a great deal of attention to metrics related to the garbage collecting — GC working\ntime and number of its cycles. Too much time spent on releasing the memory or too frequent GC launches may signal problems with\nmemory leaks or indicate that it is worth considering optimising memory usage or switching to a different GC strategy.\nFollowing the example of large technology companies, we have been organising company meetups within the so-called guilds\nfor some time now. In one of such guilds, over a hundred engineers meet regularly once a month and discuss various\ntopics related to performance, scaling and service optimisation. At one of these meetings, our colleague\ndiscussed the method of determining the actual size of data stored in a cache. Apparently, this is not a\nsimple matter, as internal mechanisms for optimising memory usage, such as deduplication or compression, must be taken\ninto account. After the presentation, an interesting discussion ensued about how much memory\non the heap is actually used by the cache and how long it takes to clean it up. Someone pointed out that there is a hidden cost of using the cache\nthat takes the form of time needed to free the memory of expired cache items, which not everyone is aware of. What is more, the\nmanner in which the cache works does not quite fit the\ngenerational hypothesis and may mislead the JVM by preventing it\nfrom properly tuning the GC mechanism. I then began to wonder whether it might not be worth keeping the cache in an area\nexcluded from the GC’s control? I knew this is possible, although I had never seen a practical implementation of this\ntechnique. This topic was bothering me for some time, so I decided to investigate.\nMemory architecture\nAny skilled Java programmer knows the division of memory into young and old generation areas. People interested in\ndetails are probably also familiar with the more precise division into eden, survivor, tenured and perm.\nThere are many excellent articles discussing this topic\n(like this one), so we won’t go\ninto details. Instead, we will focus on a very specialised area of memory that the GC\nhas no control over, which is the off-heap memory, sometimes also called native memory. This is a special area under the\ndirect control of the operating system, which the JVM uses for its own purposes. It stores information about classes and\nmethods, internal thread data and cached code necessary for operation. As I mentioned earlier, off-heap memory is not\nsubject to the GC. In particular, it is excluded from garbage collection processes, which means that programmers\ncreating the JVM code using this area are wholly responsible for freeing memory allocated for\nvariables. There is also a dedicated area to which we — the programmers — have access as well.\nThere is a possibility to write and read data from this space, remembering of course, that the responsibility\nfor cleaning up after unnecessary variables lies entirely with us.\nThis area can be accessed using a simple API.\nThe following code allocates 100 bytes of off-heap memory and stores a String and an Integer.\nAt the end the data are loaded from the off-heap memory and then printed out.\n\nint size = 100;\n\nByteBuffer buff = ByteBuffer.allocateDirect(size);\nbuff.put(\"Michal\".getBytes());\nbuff.putInt(42);\n\nbuff.position(0); // set the pointer back to the beginning\n\nbyte[] name = new byte[6]; // length of my name\nbuff.get(name);\n\nout.println(new String(name));\nout.println(buff.getInt());\n\n\nNote the allocateDirect method that allocates off-heap memory unlike a similar method: allocate that allocates\non-heap memory. The behavior of both methods can be compared with the help of a profiler\n(I will use jConsole). The following programs allocate 1GB of memory,\nrespectively, on-heap and off-heap:\n\nByteBuffer.allocate(1000000000)\n\n\n\nByteBuffer.allocateDirect(1000000000)\n\n\nThe chart below shows heap memory profile comparison for both programs (on-heap on the left vs. off-heap on the right):\n\nSuch a possibility to bypass Garbage Collector may seem extremely tempting to\ndevelopers struggling with long working time of the GC. However, this raises the question: what type of usage justifies\nthe extra effort involved in manually freeing the memory and the potential risk of error? What are the advantages of\nusing off-heap memory? Is it faster? How much time will we save by bypassing the GC? Why is this method so uncommon?\nTo put it simply: is it worth doing and if so, when?\nBe gone GC!\nGC is a wonderful tool. It allows us – although sometimes only for a while – to forget about the problems related\nto painful memory management. We can create variables of any type and any scope almost freely, and not worry about what\nhappens to memory once we stop using them. This task is handled by the GC, which does it brilliantly. In each successive\nversion of the JDK we get a new algorithm, which in some specific cases is even better than the previous one.\nHowever, I’m more than sure that many of us have once encountered the problem of long GC time or too frequent GC\ncalls. Every developer has their own ideas on how to deal with this issue - we look for memory leaks, profile the\napplication in search of hot spots, examine the scope of created variables, use object pools, verify the system\nbehaviour with different GC algorithms, and check the cache configuration.\nIn my case, it is the cache that is often responsible for long GC time. Sometimes it stores large numbers of objects, usually\ncomplex ones, containing references to other objects. What is more, the way cache objects are accessed is often not\nuniform. Some objects are never queried after being inserted into the cache, others are read throughout their whole\nlifecycle. This causes the cache to disrupt the somewhat ideal world order defined by the generational hypothesis. Then,\nGC algorithms are faced with a very difficult task of determining the optimal way to clean up the memory freed by the\nitems removed from the cache. All this causes the cache cleanup to be expensive. This made me wonder if there was\nany benefit in storing cache data outside the heap?\nOff-heap space: Pros and cons\nIn a sense, the off-heap space lies outside the control of the JVM (though it belongs to the Java process),\nand for this reason, it is not possible to write\ncomplex structures used in JVM languages into it. This raises the need for an intermediate step of serializing the\ndata into a plain byte array, which can then be stored in the off-heap area. When the data is loaded, the reverse\nprocess must be performed: deserialization into a form that we can use in Java. These additional steps will of\ncourse come at an extra cost, which is why accessing off-heap data will, for obvious reasons, take longer than accessing\non-heap data directly.\nSince writing and reading data in the off-heap space takes longer, what is the benefit of this approach then? Well, the data\nstored in the off-heap space are not subject to GC processes, so on the one hand we – the programmers – are responsible\nfor each freeing of memory after a given variable is no longer useful. On the other hand, we relieve the management\nprocesses in the JVM by releasing CPU’s time for the rest of the application, so, theoretically, it should\nresult in some resource savings. The question is, do these differences balance each other out to any degree? Will the savings\nassociated with the GC process balance out our longer data access time? If so, does it depend only on the amount of\ndata, or is there a specific usage scenario? To answer these questions, it is necessary to run a few experiments.\nExperiments\nWe can store any data structure in the on-heap area, which means that the advantage of this approach lies in the fact\nthat there is no overhead involved in transforming the data to another form, while its disadvantage consists of the\nadditional cost related to the GC. On the other hand, in the case of off-heap storage, there is no GC extra cost,\nbut there is the cost of serialising the data to a byte array.\nOver the last years, significant\nprogress has been made in the field of GC and with the right matching of the algorithm to the application profile, its\ntime can be very short. But is there any case where it is worth reaching into the unmanaged space after all?\nI decided to start with an overview of what open-source options are currently available. When it comes to the implementation of the\non-heap cache mechanism, the options are numerous – there is well known:\nguava,\nehcache, caffeine and many other solutions. However,\nwhen I began researching cache mechanisms offering the possibility of storing data outside GC control, I found out\nthat there are very few solutions left. Out of the popular ones, only Terracotta is supported.\nIt seems that this is a very niche solution and we do not have many options to choose\nfrom. In terms of less-known projects, I came across Chronicle-Map,\nMapDB and OHC. I chose the\nlast one because it was created as part of the Cassandra project, which I had some experience with and was curious\nabout how this component worked:\nOHC was developed in 2014/15 for Apache Cassandra 2.2 and 3.0 to be used as the new row-cache backend.\nTo run the experiment, I decided to use a service built to provide the offer description based on its unique number. After\ndownloading the offer description from the repository, it is placed in the cache to speed up future calls. Obviously, the\ncache has a limited capacity, which is chosen in such a way that it forces the deletion of items that have been placed\nin it for the longest time ago.\nIn our cache, the offer number is the key, while its description in the form of a string of characters is the\nvalue. This allows us to easily simulate almost any size of data in the cache (all we have to do is to make the\noffer description longer), and additionally, it makes the overhead related to the aforementioned serialisation\nrelatively small – serialisation of a text string is obviously faster than a complex DTO object.\nIn my project, I used the Caffeine cache to store the data in the on-heap area\nand OHC library to store it in the off-heap area.\nThe test scenario consists of querying for descriptions of different offers. During the test, I will\ncollect data on memory and GC parameters using jConsole. I will run the test scenario using jMeter,\nwhich additionally will allow me to measure response times.\nFrom my preliminary research I know that this method is only applicable to memory-intensive systems.\nHowever, for the sake of order, let’s first run an experiment on a small cache size with element set to 5 KB:\nmaximum number of cached elements: 10000\ncached element size: 5.000 bytes\n10 threads querying for random offers in a loop of 100000 iterations each\nTake a look at the screenshots from jConsole below. The results are in line with expectations: no benefit from the use\nof off-heap space. Both the number of garbage collection cycles (63 vs. 65) and GC run time (0.182s vs 0.235s)\nare nearly identical in both cases:\nThe GC profile of on-heap variant:\n\nThe GC profile of off-heap variant:\n\nNot much of an improvement for small to medium cache size. However, this result is not disappointing to me because\nI expected it. GC is designed to handle much more memory than 400 MB, it would therefore be strange if we obtained\nan improvement at such an early stage.\nNow let’s see how the comparison looks for a much larger cache element size, let’s increase it up to 100 KB.\nAt the same time, due to the fact that I am running the tests on a laptop with limited resources, I will reduce\nthreads configuration and cache maximum element size.\nThe configuration of the second test is as follows:\nmaximum number of cached elements: 5000\ncached element size: 100.000 bytes\n10 threads querying for random offers in a loop of 1000 iterations each\nLet’s take a look at the results.\nThe GC profile of on-heap variant:\n\nMemory usage increases throughout the test, there are 40 GC collection cycles that together last 0.212s.\nThe GC profile of off-heap variant:\n\nThis time heap memory usage chart definitely looks different, is shaped like a saw, and reaches half of the previous value.\nPlease note also, that this time there are only 13 GC cycles with total time of 0.108s.\nThe results of the GC profile comparison are therefore as expected, and what about the response times?\njMeter metrics of on-heap variant:\n\njMeter metrics of off-heap variant:\n\nRequest time metrics data is also in line with predictions, off-heap variant proved to be slightly slower than on-heap.\nNow let’s see what effect increasing the data size will have on the results. Let’s do tests for the following sizes:\n100.000 B, 200.000 B and 300.000 B, jMeter configuration stays unchanged: 10 threads with 1000 iterations each.\nThis time, for the sake of clarity, the results are summarized in a table:\nCached item size\n      Variant\n      GC cycles count\n      GC time\n      Request time (median)\n      Throughput\n    \n100.000 B\n      on-heap\n      40\n      0.212 s\n      171 ms\n      83.2 rps\n    \n100.000 B\n      off-heap\n      13\n      0.108 s\n      179 ms\n      78.1 rps\n    \n200.000 B\n      on-heap\n      84\n      0.453 s\n      396 ms\n      38.2 rps\n    \n200.000 B\n      off-heap\n      19\n      0.182 s\n      355 ms\n      40.2 rps\n    \n300.000 B\n      on-heap\n      114\n      0.6s\n      543 ms\n      27.3 rps\n    \n300.000 B\n      off-heap\n      27\n      0.185s\n      528 ms\n      27.9 rps\n    \nIt turns out that as the size of cache item increases, the benefits of using off-heap space grow – all metrics are improved.\nWhat about cache maximum elements? Let’s use 200.000B item size and check what happens when we increase the maximum cache\nelement size, we will test cache for 5000, 10.000 and 15.000 elements:\nCache max elements\n      Variant\n      GC cycles count\n      GC time\n      Request time (median)\n      Throughput\n    \n5000\n      on-heap\n      84\n      0.453 s\n      396 ms\n      38.2 rps\n    \n5000\n      off-heap\n      19\n      0.182 s\n      355 ms\n      40.2 rps\n    \n10000\n      on-heap\n      81\n      0.46 s\n      393 ms\n      38.8 rps\n    \n10000\n      off-heap\n      19\n      0.173 s\n      345 ms\n      42.6 rps\n    \n15000\n      on-heap\n      84\n      0.462 s\n      355 ms\n      41.8 rps\n    \n15000\n      off-heap\n      19\n      0.167 s\n      344 ms\n      42.6 rps\n    \nNo surprise here either, increasing cache size has a positive impact on both variants. Of course in case of on-heap cache,\nsome of the benefits are offset by the need for cleaning larger memory area.\nWith the experiments conducted, we can conclude that the more data we store in memory, the greater the benefit of using\nthe off-heap area may be. At the same time, it should be added that these benefits are not huge, just a few RPS more.\nIn the case of systems that store tremendous amounts of data, this method may bring some improvements in terms of resource utilization.\nHowever, for most of our apps and services, that’s probably not the way to go, a code audit is a better idea.\nThis is probably a good time to highlight how well implemented the current memory sweeper algorithms are. Well done GC!\nConclusions\nEveryone has probably come across a case when an application froze as a result of GC’s operation. As the above data\nshow, there is a relationship between the amount of data stored in memory and the time the GC requires to clean it up –\nthe more data we store on the heap, the longer it takes to free the memory. That is why the cases where we process large\namounts of data provide us with a potential benefit of using the off-heap area. There are some very specialised uses of\nthis technique, such as Spark, which can store large amounts of data for subsequent processing steps and can do so using\nthe off-heap space (you can read more about Spark memory model here).\nAnother example of the use of the off-heap approach is the Apache Cassandra database. The OHC used\nin this post was developed from this particular project.\nThere is a very narrow group of cases where storing data outside of GC control is justifiable. However, for the\nvast majority of applications, a much better approach is to take advantage of ever-improving GC\nimplementations. If you have experienced problems with the slow performance of the GC while developing your business\nservice, you should definitely audit your code first and experiment with different heap size settings and the GC\nalgorithm. When all other methods fail, you can give the off-heap area a try.\nHowever, if you are working on a server that processes massive amounts of data, it is worth considering off-heap\nstorage earlier, similar to Spark or Cassandra solutions.","guid":"https://blog.allegro.tech/2022/06/gc-hands-off-my-data.html","categories":["tech","cache","performance","off-heap","garbage collectors"],"isoDate":"2022-06-29T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Exploring GraphQL’s performance tradeoffs","link":"https://blog.allegro.tech/2022/06/graphql-perf-tradeoffs.html","pubDate":"Mon, 20 Jun 2022 00:00:00 +0200","authors":{"author":[{"name":["Alicja Halamska"],"photo":["https://blog.allegro.tech/img/authors/alicja.halamska.jpg"],"url":["https://blog.allegro.tech/authors/alicja.halamska"]},{"name":["Dawid Kubicki"],"photo":["https://blog.allegro.tech/img/authors/dawid.kubicki.jpg"],"url":["https://blog.allegro.tech/authors/dawid.kubicki"]}]},"content":"<p>At <a href=\"https://allegro.tech/\">Allegro</a> we decided to introduce <a href=\"https://graphql.org/\">GraphQL</a> as our API Gateway for building several internal client systems.\nBy building such a solution we’ve learnt a lot about this technology\nand we would like to share it with you in this article.</p>\n\n<h2 id=\"whats-graphql-and-how-does-it-work\">What’s GraphQL and how does it work?</h2>\n<p>To understand how to increase GraphQL’s performance we need to understand how it works under the hood.\nWhy is it so important? In GraphQL most of the common ideas on how to speed up the communication are useless.\nOne of the things we usually do is introduce caching to our application, but you can often hear that GraphQL is not cacheable.\nIndeed it is not that simple in GraphQL and we hope to clarify it to you later in this article.</p>\n\n<p>So what is GraphQL? <a href=\"https://graphql.org/\">GraphQL’s documentation</a> says:</p>\n\n<blockquote>\n  <p>GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.\nGraphQL provides a complete and understandable description of the data in your API,\ngives clients the power to ask for exactly what they need and nothing more […].</p>\n</blockquote>\n\n<p>GraphQL sends the information through a standard TCP connection (mostly HTTP).\nThere is only one entry point and all needed information is sent in a request parameter or body.\nIn contrast to the REST API, where we often fetch fields that we won’t use, in GraphQL we can ask for and compute only the useful ones.\nThis key feature gives us the first and most important way to speed up our application: ask only for the information that you need.</p>\n\n<p>There are three key concepts that we should be aware of:</p>\n\n<ul>\n  <li>Schema — description of your data in a JSON-like format.</li>\n</ul>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">User</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">ID</span><span class=\"w\">\n    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\">\n    </span><span class=\"n\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\">\n    </span><span class=\"n\">friends</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<ul>\n  <li>Queries — the way we ask for processing information.\nWe provide information about which resources we want to fetch or mutate and which fields exactly we want to be returned.\nWe can fetch data with an operation called a query or change data with a mutation.\nBelow we query for the user’s name and his friends’ names.</li>\n</ul>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">query</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n </span><span class=\"n\">user</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1234\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">name</span><span class=\"w\">\n    </span><span class=\"n\">friends</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\">\n </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<ul>\n  <li>Resolvers — fragments of code that serve information for specific parts of schema.</li>\n</ul>\n\n<h2 id=\"resolver-design-is-a-game-changer\">Resolver design is a game changer!</h2>\n\n<p>We will spend the whole paragraph on making sure we are on the same page understanding how resolvers work.\nA schema consists of types definitions:\n— defined queries/mutations/subscriptions that we can ask (we can think of it as the root of the graph)\n— input objects that we take as arguments in queries/mutations/subscriptions\n— objects that we return from queries/mutations/subscriptions\n— scalars, the simplest types like int or string (which are always a leaf in a graph)</p>\n\n<p>As the schema is composed of queries and types, there are two kinds of resolvers. The first is obligatory and resolves the whole query.\nIt can return the complete result, but also only a part of it.\nThe second part is added by type resolvers. Let us show you an example: let’s say we want to get information about a user.</p>\n\n<p><img src=\"/img/articles/2022-06-20-graphql-perf-tradeoffs/resolvers.png\" alt=\"resolver\" /></p>\n\n<p>At first we run <code class=\"language-plaintext highlighter-rouge\">UserQueryResolver</code>, which fetches user data from user domain logic. Only the ID of the user is returned.\nThen we call <code class=\"language-plaintext highlighter-rouge\">UserTypeResolver</code> with the ID resolved earlier.\nIt makes two calls: first one to user email service and second to user name service.\nWhen resolving is over, GraphQL returns the result.\n<code class=\"language-plaintext highlighter-rouge\">UserQueryResolver</code> might also have returned all information.\nOne of the main questions about optimizing GraphQL is when to use a query resolver, and when a type resolver.\nWe decided to use:</p>\n\n<ul>\n  <li>\n    <p>A query resolver for fields that come from the same data source as the identifier field.\nWe may ask for information that we don’t need,\nbut we skip the unnecessary connection time overhead when we ask for more than one field.\nMoreover, most of the sources that are connected to our service are REST APIs and always compute all fields, so why shouldn’t we use them?\nAdding additional resolvers also complicates logic and makes the flow less clear.</p>\n  </li>\n  <li>\n    <p>A type resolver when some parts of a query can be resolved independently, because those parts can run in parallel.\nTo achieve it, wrap the resolver’s functions with any of the asynchronous abstractions. We also use type resolvers when we ask for some part of the domain\nthat isn’t ours to avoid dependency crossing.</p>\n  </li>\n</ul>\n\n<h2 id=\"the-metrics-war\">The metrics war</h2>\n\n<p>There are different approaches to performance monitoring depending on the element whose performance we monitor:</p>\n\n<ul>\n  <li>Poor - HTTP endpoint (just one endpoint which always responds with 200 status code)</li>\n  <li>Better - GraphQL query/mutation (each query/mutation)</li>\n  <li>Almost great - Resolvers (access to data source)</li>\n</ul>\n\n<p>The HTTP endpoint is the point at which we measured performance for a REST API.\nFor example one of the simplest ways of monitoring performance for API endpoints is response time.\nSome basic dashboards could look like this:</p>\n\n<p><img src=\"/img/articles/2022-06-20-graphql-perf-tradeoffs/p95-response-1.png\" alt=\"dashboard_1\" />\n<img src=\"/img/articles/2022-06-20-graphql-perf-tradeoffs/p95-response-2.png\" alt=\"dashboard_2\" /></p>\n\n<p>In the GraphQL universe, there is usually only one endpoint. This approach has advantages and disadvantages.\nWhile we have low latency and no errors it is great for us as developers and business.\nWe have just one entry point and one failure point but if something goes wrong we have to dig deeper.</p>\n\n<p>The chart below, showing p95 response times for a single GraphQL endpoint, does not tell the whole story. In reality we have plenty of consumers which use different input data and ask us for variety of payload in extended scope.</p>\n\n<p><img src=\"/img/articles/2022-06-20-graphql-perf-tradeoffs/p95-response-3.png\" alt=\"dashboard_3\" /></p>\n\n<p>We are using a simple metric configuration for measuring endpoints:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">MetricFilter</span><span class=\"p\">(</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">meterRegistry</span><span class=\"p\">:</span> <span class=\"nc\">MeterRegistry</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">OncePerRequestFilter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">doFilterInternal</span><span class=\"p\">(</span>\n        <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"nc\">HttpServletRequest</span><span class=\"p\">,</span>\n        <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"nc\">HttpServletResponse</span><span class=\"p\">,</span>\n        <span class=\"n\">filterChain</span><span class=\"p\">:</span> <span class=\"nc\">FilterChain</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">val</span> <span class=\"py\">start</span> <span class=\"p\">=</span> <span class=\"nc\">System</span><span class=\"p\">.</span><span class=\"nf\">nanoTime</span><span class=\"p\">();</span>\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"n\">filterChain</span><span class=\"p\">.</span><span class=\"nf\">doFilter</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span> <span class=\"k\">finally</span> <span class=\"p\">{</span>\n            <span class=\"kd\">val</span> <span class=\"py\">finish</span> <span class=\"p\">=</span> <span class=\"nc\">System</span><span class=\"p\">.</span><span class=\"nf\">nanoTime</span><span class=\"p\">();</span>\n            <span class=\"n\">meterRegistry</span><span class=\"p\">.</span><span class=\"nf\">timer</span><span class=\"p\">(</span>\n                <span class=\"s\">\"api.execution\"</span><span class=\"p\">,</span>\n                <span class=\"s\">\"statusCode\"</span><span class=\"p\">,</span>\n                <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"nf\">toString</span><span class=\"p\">(),</span>\n                <span class=\"s\">\"path\"</span><span class=\"p\">,</span>\n                <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">requestURI</span>\n            <span class=\"p\">).</span><span class=\"nf\">record</span><span class=\"p\">(</span><span class=\"n\">finish</span> <span class=\"p\">-</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"nc\">TimeUnit</span><span class=\"p\">.</span><span class=\"nc\">MILLISECONDS</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Remember that our queries can change in time, e.g. by extended business requirements. They can start from a simple query like this:</p>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">query</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">ID</span><span class=\"w\">\n        </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\">\n        </span><span class=\"n\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>After a few new features are added, they can end up more complex like the one below. In the same query we ask for ten thousand additional objects from another data source.\nWe can imagine that the previous <code class=\"language-plaintext highlighter-rouge\">p95</code> dashboard doesn’t have much value now because it is perfectly normal that the\ncomputation time increases when we ask for additional data. The pagination plays a big role here, too.\nBoth of these queries can still be executed at the same time and shouldn’t be measured by the same metric.</p>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">query</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n\t</span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"n\">id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">ID</span><span class=\"w\">\n        </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\">\n        </span><span class=\"n\">email</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\">\n        </span><span class=\"n\">friends</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">){</span><span class=\"w\">\n            </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\">\n            </span><span class=\"n\">lastName</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h3 id=\"slow-query-log\">Slow query log</h3>\n\n<p>After integrating a huge number of new APIs we realized that simple HTTP endpoint monitoring was not enough in our case.\nWe had been looking for a better approach. Slow query log is a simple concept -\nset a threshold at which we consider a query too slow.\nEach query that exceeds that threshold gets logged with all input parameters.\nMoreover we set up metrics which indicate that some problematic query appears.\nIs such an approach perfect?\nNo, we still have to analyze each query and answer the question if the query is slow because\nof query complexity or maybe because of other problems.\nAt the end of the day we can use this approach as a simple and effective tool to find slow queries quite fast.</p>\n\n<p>As an example we can show you the code below.\nWe created our own instrumentation at the beginning of each query to measure time and variables.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Component</span>\n<span class=\"kd\">class</span> <span class=\"nc\">MonitoringInstrumentation</span><span class=\"p\">(</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">clock</span><span class=\"p\">:</span> <span class=\"nc\">Clock</span><span class=\"p\">,</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">meterRegistry</span><span class=\"p\">:</span> <span class=\"nc\">MeterRegistry</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">SimpleInstrumentation</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">instrumentExecutionResult</span><span class=\"p\">(</span>\n        <span class=\"n\">executionResult</span><span class=\"p\">:</span> <span class=\"nc\">ExecutionResult</span><span class=\"p\">,</span>\n        <span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nc\">InstrumentationExecutionParameters</span>\n    <span class=\"p\">):</span> <span class=\"nc\">CompletableFuture</span><span class=\"p\">&lt;</span><span class=\"nc\">ExecutionResult</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"kd\">val</span> <span class=\"py\">instrumentationState</span> <span class=\"p\">=</span> <span class=\"n\">parameters</span><span class=\"p\">.</span><span class=\"n\">getInstrumentationState</span><span class=\"p\">&lt;</span><span class=\"nc\">MonitoringInstrumentationState</span><span class=\"p\">&gt;()</span>\n            <span class=\"kd\">val</span> <span class=\"py\">startTime</span> <span class=\"p\">=</span> <span class=\"n\">instrumentationState</span><span class=\"p\">.</span><span class=\"n\">startTime</span>\n            <span class=\"kd\">val</span> <span class=\"py\">endTime</span> <span class=\"p\">=</span> <span class=\"nf\">getTime</span><span class=\"p\">()</span>\n            <span class=\"kd\">val</span> <span class=\"py\">executionTime</span> <span class=\"p\">=</span> <span class=\"n\">startTime</span> <span class=\"p\">-</span> <span class=\"n\">endTime</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">executionTime</span> <span class=\"p\">&gt;</span> <span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">val</span> <span class=\"py\">query</span> <span class=\"p\">=</span> <span class=\"n\">parameters</span><span class=\"p\">.</span><span class=\"n\">query</span>\n                <span class=\"kd\">val</span> <span class=\"py\">variables</span> <span class=\"p\">=</span> <span class=\"n\">parameters</span><span class=\"p\">.</span><span class=\"n\">variables</span>\n                <span class=\"n\">metric</span><span class=\"p\">.</span><span class=\"nf\">increment</span><span class=\"p\">(</span>\n                    <span class=\"nc\">SLOW_QUERY_METRIC_NAME</span><span class=\"p\">,</span>\n                    <span class=\"s\">\"duration\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">executionTime</span><span class=\"p\">)</span>\n                <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">warn</span> <span class=\"p\">{</span>\n                    <span class=\"s\">\"Slow query: $query with variables ${serializeVariables(variables)}.\"</span> <span class=\"p\">+</span>\n                        <span class=\"s\">\" Duration: ${executionTime.toMillis()} ms\"</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">super</span><span class=\"p\">.</span><span class=\"nf\">instrumentExecutionResult</span><span class=\"p\">(</span><span class=\"n\">executionResult</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"per-field-monitoring\">Per field monitoring</h3>\n\n<p>Last but not least, an interesting approach which we consider, and is almost out of the box for resolvers and supported by many libraries, is per field monitoring.\nIt is pretty nice for getting extra data to analyze our graph.\nHowever, it can be expensive to collect such a type of data.\nGathering metrics for each field can be more valuable than monitoring each query.\nMoreover, we can easily find the bottleneck of bits and pieces of our graph.\nResolvers monitoring can be achieved by using libraries built into our GraphQL server implementation such as\n<code class=\"language-plaintext highlighter-rouge\">graphql-java-server</code>.\nOur implementation follows the Apollo proposed tracing format (<a href=\"https://github.com/apollographql\">A community building flexible open source tools for GraphQL</a>).</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n </span><span class=\"nl\">\"data\"</span><span class=\"p\">:</span><span class=\"w\">\n   </span><span class=\"nl\">\"user\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n     </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Javier\"</span><span class=\"p\">,</span><span class=\"w\">\n     </span><span class=\"nl\">\"friends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n       </span><span class=\"p\">{</span><span class=\"w\">\n         </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Clarisa\"</span><span class=\"w\">\n       </span><span class=\"p\">}</span><span class=\"w\">\n     </span><span class=\"p\">]</span><span class=\"w\">\n   </span><span class=\"p\">},</span><span class=\"w\">\n </span><span class=\"nl\">\"extensions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n   </span><span class=\"nl\">\"tracing\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n     </span><span class=\"nl\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n     </span><span class=\"nl\">\"startTime\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2022-04-14T23:13:39.362Z\"</span><span class=\"p\">,</span><span class=\"w\">\n     </span><span class=\"nl\">\"endTime\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2022-04-14T23:13:39.497Z\"</span><span class=\"p\">,</span><span class=\"w\">\n     </span><span class=\"nl\">\"duration\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">135589186</span><span class=\"p\">,</span><span class=\"w\">\n     </span><span class=\"nl\">\"execution\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n       </span><span class=\"nl\">\"resolvers\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n         </span><span class=\"p\">{</span><span class=\"w\">\n           </span><span class=\"nl\">\"path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n             </span><span class=\"s2\">\"user\"</span><span class=\"w\">\n           </span><span class=\"p\">],</span><span class=\"w\">\n           </span><span class=\"nl\">\"parentType\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Query\"</span><span class=\"p\">,</span><span class=\"w\">\n           </span><span class=\"nl\">\"returnType\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Character\"</span><span class=\"p\">,</span><span class=\"w\">\n           </span><span class=\"nl\">\"fieldName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span><span class=\"w\">\n           </span><span class=\"nl\">\"startOffset\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">105697585</span><span class=\"p\">,</span><span class=\"w\">\n           </span><span class=\"nl\">\"duration\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">79111240</span><span class=\"w\">\n         </span><span class=\"p\">},</span><span class=\"w\">\n         </span><span class=\"p\">{</span><span class=\"w\">\n           </span><span class=\"nl\">\"path\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n             </span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span><span class=\"w\">\n             </span><span class=\"s2\">\"name\"</span><span class=\"w\">\n           </span><span class=\"p\">],</span><span class=\"w\">\n           </span><span class=\"nl\">\"parentType\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Girl\"</span><span class=\"p\">,</span><span class=\"w\">\n           </span><span class=\"nl\">\"returnType\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"String\"</span><span class=\"p\">,</span><span class=\"w\">\n           </span><span class=\"nl\">\"fieldName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span><span class=\"w\">\n           </span><span class=\"nl\">\"startOffset\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">125010028</span><span class=\"p\">,</span><span class=\"w\">\n           </span><span class=\"nl\">\"duration\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">20213</span><span class=\"w\">\n         </span><span class=\"p\">}</span><span class=\"w\">\n       </span><span class=\"p\">]</span><span class=\"w\">\n     </span><span class=\"p\">}</span><span class=\"w\">\n   </span><span class=\"p\">}</span><span class=\"w\">\n </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Bottom line of resolver monitoring is thinking about it as checking each data source,\nnot the internal mechanism of GraphQL implementation.\nIt is possible that our internal performance is not the limiting factor as I / O and external connections are often critical.</p>\n\n<h2 id=\"batching-requests-to-external-services\">Batching requests to external services</h2>\n\n<p>In the paragraph about resolvers we mentioned connecting to the same source many times to\nfetch all the type fields in case of using type resolvers. There is a solution for that, and it is called data loaders.\nHow does it work? It collects all requests from many parts of the schema and retrieves their data in one request.\nThis allows it to solve the N+1 problem, which is very well known in GraphQL.\nImagine the situation where we want to query for three users.</p>\n\n<p><img src=\"/img/articles/2022-06-20-graphql-perf-tradeoffs/no-loader.png\" alt=\"no-loader\" /></p>\n\n<p>As the diagram says, we must ask external sources four times for three users – once to fetch all users and once per each user to fetch his name.\nMoreover we call user name service many times even if it has some batch method to get logins for many users.\nIntroducing a data loader solves this problem. The second diagram shows how it works.</p>\n\n<p><img src=\"/img/articles/2022-06-20-graphql-perf-tradeoffs/data-loader.png\" alt=\"data-loader\" /></p>\n\n<p>We cumulate all requests and ask user name service only once. Let’s see what the code looks like.\nWe have <code class=\"language-plaintext highlighter-rouge\">UserBatchDataLoader</code> which asks <code class=\"language-plaintext highlighter-rouge\">userClient</code> for users and maps the response to <code class=\"language-plaintext highlighter-rouge\">User</code> object.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Component</span>\n<span class=\"kd\">class</span> <span class=\"nc\">UserBatchDataLoader</span><span class=\"p\">(</span>\n   <span class=\"n\">userClient</span><span class=\"p\">:</span> <span class=\"nc\">UserClient</span><span class=\"p\">,</span>\n   <span class=\"n\">executor</span><span class=\"p\">:</span> <span class=\"nc\">Executor</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">BatchDataLoaderInfo</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"nc\">UserResponse</span><span class=\"p\">,</span> <span class=\"nc\">User</span><span class=\"p\">&gt;(</span>\n   <span class=\"p\">{</span> <span class=\"n\">userIds</span> <span class=\"p\">-&gt;</span> <span class=\"n\">userClient</span><span class=\"p\">.</span><span class=\"nf\">users</span><span class=\"p\">(</span><span class=\"n\">userIds</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n   <span class=\"nc\">UserResponse</span><span class=\"o\">::</span><span class=\"n\">userId</span><span class=\"p\">,</span>\n   <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">toUser</span><span class=\"p\">()</span> <span class=\"p\">},</span>\n   <span class=\"n\">executor</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>There is also <code class=\"language-plaintext highlighter-rouge\">UserTypeResolver</code> that uses it while resolving user name.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"kd\">class</span> <span class=\"nc\">UserTypeResolver</span><span class=\"p\">(</span>\n   <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">userBatchDataLoader</span><span class=\"p\">:</span> <span class=\"nc\">UserBatchDataLoader</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">GraphQLResolver</span><span class=\"p\">&lt;</span><span class=\"nc\">User</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n   <span class=\"k\">fun</span> <span class=\"nf\">name</span><span class=\"p\">(</span>\n       <span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nc\">User</span><span class=\"p\">,</span>\n       <span class=\"n\">dfe</span><span class=\"p\">:</span> <span class=\"nc\">DataFetchingEnvironment</span>\n   <span class=\"p\">):</span> <span class=\"nc\">CompletableFuture</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"err\">?</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span>\n       <span class=\"nf\">extractDataLoader</span><span class=\"p\">(</span><span class=\"n\">userBatchDataLoader</span><span class=\"p\">,</span> <span class=\"n\">dfe</span><span class=\"p\">)</span>\n           <span class=\"p\">.</span><span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">userId</span><span class=\"p\">.</span><span class=\"n\">raw</span><span class=\"p\">)</span>\n           <span class=\"p\">.</span><span class=\"nf\">thenApply</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"o\">?.</span><span class=\"n\">name</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>Exactly the same can be done with <code class=\"language-plaintext highlighter-rouge\">User</code> fields in the type resolver.\nWe can accumulate requests for each field and run it once if the source is the same.\nThere is a <code class=\"language-plaintext highlighter-rouge\">UserDataLoader</code> that asks <code class=\"language-plaintext highlighter-rouge\">UserClient</code> for the whole <code class=\"language-plaintext highlighter-rouge\">User</code> object.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Component</span>\n<span class=\"kd\">class</span> <span class=\"nc\">UserDataLoader</span><span class=\"p\">(</span>\n   <span class=\"n\">userClient</span><span class=\"p\">:</span> <span class=\"nc\">UserClient</span><span class=\"p\">,</span>\n   <span class=\"n\">executor</span><span class=\"p\">:</span> <span class=\"nc\">Executor</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">SimpleDataLoaderInfo</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"nc\">UserResponse</span><span class=\"p\">&gt;(</span>\n   <span class=\"p\">{</span> <span class=\"n\">userId</span><span class=\"p\">:</span> <span class=\"nc\">String</span> <span class=\"p\">-&gt;</span> <span class=\"n\">userClient</span><span class=\"p\">.</span><span class=\"nf\">user</span><span class=\"p\">(</span><span class=\"n\">userId</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n   <span class=\"n\">executor</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>It is used in <code class=\"language-plaintext highlighter-rouge\">UserTypeResolver</code> while resolving first name and email.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Component</span>\n<span class=\"kd\">class</span> <span class=\"nc\">UserTypeResolver</span><span class=\"p\">(</span>\n<span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">dataLoaderInfo</span><span class=\"p\">:</span> <span class=\"nc\">UserDataLoader</span><span class=\"p\">,</span>\n<span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">executor</span><span class=\"p\">:</span> <span class=\"nc\">Executor</span>\n<span class=\"p\">):</span> <span class=\"nc\">GraphQLResolver</span><span class=\"p\">&lt;</span><span class=\"nc\">User</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n\n\t<span class=\"k\">fun</span> <span class=\"nf\">firstName</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nc\">User</span><span class=\"p\">,</span> <span class=\"n\">dfe</span><span class=\"p\">:</span> <span class=\"nc\">DataFetchingEnvironment</span><span class=\"p\">):</span> <span class=\"nc\">CompletableFuture</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"err\">?</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span>\n   <span class=\"nf\">extractDataLoader</span><span class=\"p\">(</span><span class=\"n\">dataLoaderInfo</span><span class=\"p\">,</span> <span class=\"n\">dfe</span><span class=\"p\">)</span>\n       <span class=\"p\">.</span><span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">userId</span><span class=\"p\">.</span><span class=\"n\">raw</span><span class=\"p\">)</span>\n       <span class=\"p\">.</span><span class=\"nf\">thenApply</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"o\">?.</span><span class=\"n\">person</span><span class=\"o\">?.</span><span class=\"n\">firstName</span> <span class=\"p\">}</span>\n\n<span class=\"k\">fun</span> <span class=\"nf\">email</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nc\">User</span><span class=\"p\">,</span> <span class=\"n\">dfe</span><span class=\"p\">:</span> <span class=\"nc\">DataFetchingEnvironment</span><span class=\"p\">):</span> <span class=\"nc\">CompletableFuture</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"err\">?</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span>\n   <span class=\"nf\">extractDataLoader</span><span class=\"p\">(</span><span class=\"n\">dataLoaderInfo</span><span class=\"p\">,</span> <span class=\"n\">dfe</span><span class=\"p\">)</span>\n       <span class=\"p\">.</span><span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">userId</span><span class=\"p\">.</span><span class=\"n\">raw</span><span class=\"p\">)</span>\n       <span class=\"p\">.</span><span class=\"nf\">thenApply</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"o\">?.</span><span class=\"n\">contacts</span><span class=\"o\">?.</span><span class=\"n\">email</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<h2 id=\"caching---why-is-it-so-troublesome\">Caching - why is it so troublesome?</h2>\n\n<h3 id=\"http-caching\">HTTP caching</h3>\n\n<p>The biggest problem that makes using HTTP caching less effective is plenty of different requests that we can make.\nWhen we ask for a user with his name and email the response is saved in cache.\nBut when we ask again without the information about email despite the fact that\nthe information is already available we cannot use it,\nbecause this is a different query (and HTTP cache cannot handle it without understanding GraphQL logic).\nTo make cache work best we should recognise at field level which user name is already in\nmemory and ask only for the rest of them.</p>\n\n<h3 id=\"server-side-caching\">Server-side caching</h3>\n<p>Let’s put aside HTTP caching and focus more on how we can implement server cache that is more focused on GraphQL logic.\nWe could cache specific types from our schema or their fields. A good example of implemented server-side cache is\n<a href=\"https://www.apollographql.com/docs/apollo-server/performance/caching/\">apollo-server</a>.\nSo if we run the same type or query resolver with the same arguments it can be returned from cache.\nWith <a href=\"https://github.com/graphql-java/java-dataloader#the-scope-of-a-data-loader-is-important\">data loaders</a> you can also cache requests to external sources not only in one query,\nbut even between many queries by selecting a specific strategy. This solution is available out of the box, and can be used easily.</p>\n\n<h3 id=\"client-side-caching\">Client-side caching</h3>\n<p>Another common way to cache query response is client-side caching. It can be very beneficial, because one client may ask for the same information many times.\nAs an example we can take Apollo client and its solution. The cache uses the ID field to identify whether an object exists in memory.\nThen it checks if all fields that are to be returned are already in memory, if some are not it asks only for them.</p>\n\n<h3 id=\"our-caching-decisions\">Our caching decisions</h3>\n<p>We’ve decided not to use server-side caching with a global data loader because we have struggled with many clients of our graph and the graph’s data\nchanges frequently. That forced us to use a cache-per-request strategy.\nIf we are talking about caching on the client side we tackle the issue that some of our objects don’t have a unique <code class=\"language-plaintext highlighter-rouge\">ID</code> so after a while we skipped this approach and we are not caching them on the client side either.</p>\n\n<h2 id=\"what-is-the-outcome-of-the-battle\">What is the outcome of the battle?</h2>\n\n<p>We have learned a lot about GraphQL’s trade offs while working with it, but there is still a lot to be discovered. The most important feature of it, fetching only those fields that we need, is a huge optimization itself, but also causes many problems with standard ways to make the application effective or even to measure that efficiency.\nThe ideas that we described above need to be implemented by the programmers (most libraries don’t provide that logic) and it’s really complex and time consuming.</p>\n","contentSnippet":"At Allegro we decided to introduce GraphQL as our API Gateway for building several internal client systems.\nBy building such a solution we’ve learnt a lot about this technology\nand we would like to share it with you in this article.\nWhat’s GraphQL and how does it work?\nTo understand how to increase GraphQL’s performance we need to understand how it works under the hood.\nWhy is it so important? In GraphQL most of the common ideas on how to speed up the communication are useless.\nOne of the things we usually do is introduce caching to our application, but you can often hear that GraphQL is not cacheable.\nIndeed it is not that simple in GraphQL and we hope to clarify it to you later in this article.\nSo what is GraphQL? GraphQL’s documentation says:\nGraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.\nGraphQL provides a complete and understandable description of the data in your API,\ngives clients the power to ask for exactly what they need and nothing more […].\nGraphQL sends the information through a standard TCP connection (mostly HTTP).\nThere is only one entry point and all needed information is sent in a request parameter or body.\nIn contrast to the REST API, where we often fetch fields that we won’t use, in GraphQL we can ask for and compute only the useful ones.\nThis key feature gives us the first and most important way to speed up our application: ask only for the information that you need.\nThere are three key concepts that we should be aware of:\nSchema — description of your data in a JSON-like format.\n\ntype User {\n    id: ID\n    name: String\n    email: String\n    friends: [User]\n}\n\n\nQueries — the way we ask for processing information.\nWe provide information about which resources we want to fetch or mutate and which fields exactly we want to be returned.\nWe can fetch data with an operation called a query or change data with a mutation.\nBelow we query for the user’s name and his friends’ names.\n\nquery {\n user(id: \"1234\") {\n    name\n    friends { name }\n }\n}\n\n\nResolvers — fragments of code that serve information for specific parts of schema.\nResolver design is a game changer!\nWe will spend the whole paragraph on making sure we are on the same page understanding how resolvers work.\nA schema consists of types definitions:\n— defined queries/mutations/subscriptions that we can ask (we can think of it as the root of the graph)\n— input objects that we take as arguments in queries/mutations/subscriptions\n— objects that we return from queries/mutations/subscriptions\n— scalars, the simplest types like int or string (which are always a leaf in a graph)\nAs the schema is composed of queries and types, there are two kinds of resolvers. The first is obligatory and resolves the whole query.\nIt can return the complete result, but also only a part of it.\nThe second part is added by type resolvers. Let us show you an example: let’s say we want to get information about a user.\n\nAt first we run UserQueryResolver, which fetches user data from user domain logic. Only the ID of the user is returned.\nThen we call UserTypeResolver with the ID resolved earlier.\nIt makes two calls: first one to user email service and second to user name service.\nWhen resolving is over, GraphQL returns the result.\nUserQueryResolver might also have returned all information.\nOne of the main questions about optimizing GraphQL is when to use a query resolver, and when a type resolver.\nWe decided to use:\nA query resolver for fields that come from the same data source as the identifier field.\nWe may ask for information that we don’t need,\nbut we skip the unnecessary connection time overhead when we ask for more than one field.\nMoreover, most of the sources that are connected to our service are REST APIs and always compute all fields, so why shouldn’t we use them?\nAdding additional resolvers also complicates logic and makes the flow less clear.\nA type resolver when some parts of a query can be resolved independently, because those parts can run in parallel.\nTo achieve it, wrap the resolver’s functions with any of the asynchronous abstractions. We also use type resolvers when we ask for some part of the domain\nthat isn’t ours to avoid dependency crossing.\nThe metrics war\nThere are different approaches to performance monitoring depending on the element whose performance we monitor:\nPoor - HTTP endpoint (just one endpoint which always responds with 200 status code)\nBetter - GraphQL query/mutation (each query/mutation)\nAlmost great - Resolvers (access to data source)\nThe HTTP endpoint is the point at which we measured performance for a REST API.\nFor example one of the simplest ways of monitoring performance for API endpoints is response time.\nSome basic dashboards could look like this:\n\n\nIn the GraphQL universe, there is usually only one endpoint. This approach has advantages and disadvantages.\nWhile we have low latency and no errors it is great for us as developers and business.\nWe have just one entry point and one failure point but if something goes wrong we have to dig deeper.\nThe chart below, showing p95 response times for a single GraphQL endpoint, does not tell the whole story. In reality we have plenty of consumers which use different input data and ask us for variety of payload in extended scope.\n\nWe are using a simple metric configuration for measuring endpoints:\n\nclass MetricFilter(\n    private val meterRegistry: MeterRegistry\n) : OncePerRequestFilter() {\n\n    override fun doFilterInternal(\n        request: HttpServletRequest,\n        response: HttpServletResponse,\n        filterChain: FilterChain\n    ) {\n        val start = System.nanoTime();\n        try {\n            filterChain.doFilter(request, response)\n        } finally {\n            val finish = System.nanoTime();\n            meterRegistry.timer(\n                \"api.execution\",\n                \"statusCode\",\n                response.status.toString(),\n                \"path\",\n                request.requestURI\n            ).record(finish - start, TimeUnit.MILLISECONDS)\n        }\n    }\n}\n\n\nRemember that our queries can change in time, e.g. by extended business requirements. They can start from a simple query like this:\n\nquery {\n    user {\n        id: ID\n        name: String\n        email: String\n    }\n}\n\n\nAfter a few new features are added, they can end up more complex like the one below. In the same query we ask for ten thousand additional objects from another data source.\nWe can imagine that the previous p95 dashboard doesn’t have much value now because it is perfectly normal that the\ncomputation time increases when we ask for additional data. The pagination plays a big role here, too.\nBoth of these queries can still be executed at the same time and shouldn’t be measured by the same metric.\n\nquery {\n\tuser {\n        id: ID\n        name: String\n        email: String\n        friends(limit: 10000, offset: 1){\n            name: String\n            lastName: String\n        }\n    }\n}\n\n\nSlow query log\nAfter integrating a huge number of new APIs we realized that simple HTTP endpoint monitoring was not enough in our case.\nWe had been looking for a better approach. Slow query log is a simple concept -\nset a threshold at which we consider a query too slow.\nEach query that exceeds that threshold gets logged with all input parameters.\nMoreover we set up metrics which indicate that some problematic query appears.\nIs such an approach perfect?\nNo, we still have to analyze each query and answer the question if the query is slow because\nof query complexity or maybe because of other problems.\nAt the end of the day we can use this approach as a simple and effective tool to find slow queries quite fast.\nAs an example we can show you the code below.\nWe created our own instrumentation at the beginning of each query to measure time and variables.\n\n@Component\nclass MonitoringInstrumentation(\n    private val clock: Clock,\n    private val meterRegistry: MeterRegistry,\n) : SimpleInstrumentation() {\n\n    override fun instrumentExecutionResult(\n        executionResult: ExecutionResult,\n        parameters: InstrumentationExecutionParameters\n    ): CompletableFuture<ExecutionResult> {\n        try {\n            val instrumentationState = parameters.getInstrumentationState<MonitoringInstrumentationState>()\n            val startTime = instrumentationState.startTime\n            val endTime = getTime()\n            val executionTime = startTime - endTime\n            if (executionTime > 1000) {\n                val query = parameters.query\n                val variables = parameters.variables\n                metric.increment(\n                    SLOW_QUERY_METRIC_NAME,\n                    \"duration\",\n                    executionTime)\n                logger.warn {\n                    \"Slow query: $query with variables ${serializeVariables(variables)}.\" +\n                        \" Duration: ${executionTime.toMillis()} ms\"\n                }\n            }\n        }\n        return super.instrumentExecutionResult(executionResult, parameters)\n    }\n  }\n\n\nPer field monitoring\nLast but not least, an interesting approach which we consider, and is almost out of the box for resolvers and supported by many libraries, is per field monitoring.\nIt is pretty nice for getting extra data to analyze our graph.\nHowever, it can be expensive to collect such a type of data.\nGathering metrics for each field can be more valuable than monitoring each query.\nMoreover, we can easily find the bottleneck of bits and pieces of our graph.\nResolvers monitoring can be achieved by using libraries built into our GraphQL server implementation such as\ngraphql-java-server.\nOur implementation follows the Apollo proposed tracing format (A community building flexible open source tools for GraphQL).\n\n{\n \"data\":\n   \"user\": {\n     \"name\": \"Javier\",\n     \"friends\": [\n       {\n         \"name\": \"Clarisa\"\n       }\n     ]\n   },\n \"extensions\": {\n   \"tracing\": {\n     \"version\": 1,\n     \"startTime\": \"2022-04-14T23:13:39.362Z\",\n     \"endTime\": \"2022-04-14T23:13:39.497Z\",\n     \"duration\": 135589186,\n     \"execution\": {\n       \"resolvers\": [\n         {\n           \"path\": [\n             \"user\"\n           ],\n           \"parentType\": \"Query\",\n           \"returnType\": \"Character\",\n           \"fieldName\": \"user\",\n           \"startOffset\": 105697585,\n           \"duration\": 79111240\n         },\n         {\n           \"path\": [\n             \"user\",\n             \"name\"\n           ],\n           \"parentType\": \"Girl\",\n           \"returnType\": \"String\",\n           \"fieldName\": \"name\",\n           \"startOffset\": 125010028,\n           \"duration\": 20213\n         }\n       ]\n     }\n   }\n }\n}\n\n\nBottom line of resolver monitoring is thinking about it as checking each data source,\nnot the internal mechanism of GraphQL implementation.\nIt is possible that our internal performance is not the limiting factor as I / O and external connections are often critical.\nBatching requests to external services\nIn the paragraph about resolvers we mentioned connecting to the same source many times to\nfetch all the type fields in case of using type resolvers. There is a solution for that, and it is called data loaders.\nHow does it work? It collects all requests from many parts of the schema and retrieves their data in one request.\nThis allows it to solve the N+1 problem, which is very well known in GraphQL.\nImagine the situation where we want to query for three users.\n\nAs the diagram says, we must ask external sources four times for three users – once to fetch all users and once per each user to fetch his name.\nMoreover we call user name service many times even if it has some batch method to get logins for many users.\nIntroducing a data loader solves this problem. The second diagram shows how it works.\n\nWe cumulate all requests and ask user name service only once. Let’s see what the code looks like.\nWe have UserBatchDataLoader which asks userClient for users and maps the response to User object.\n\n@Component\nclass UserBatchDataLoader(\n   userClient: UserClient,\n   executor: Executor\n) : BatchDataLoaderInfo<String, UserResponse, User>(\n   { userIds -> userClient.users(userIds) },\n   UserResponse::userId,\n   { it.toUser() },\n   executor\n)\n\n\nThere is also UserTypeResolver that uses it while resolving user name.\n\n\nclass UserTypeResolver(\n   private val userBatchDataLoader: UserBatchDataLoader\n) : GraphQLResolver<User> {\n   fun name(\n       user: User,\n       dfe: DataFetchingEnvironment\n   ): CompletableFuture<String?> =\n       extractDataLoader(userBatchDataLoader, dfe)\n           .load(user.userId.raw)\n           .thenApply { it?.name }\n}\n\n\n\nExactly the same can be done with User fields in the type resolver.\nWe can accumulate requests for each field and run it once if the source is the same.\nThere is a UserDataLoader that asks UserClient for the whole User object.\n\n@Component\nclass UserDataLoader(\n   userClient: UserClient,\n   executor: Executor\n) : SimpleDataLoaderInfo<String, UserResponse>(\n   { userId: String -> userClient.user(userId) },\n   executor\n)\n\n\nIt is used in UserTypeResolver while resolving first name and email.\n\n@Component\nclass UserTypeResolver(\nprivate val dataLoaderInfo: UserDataLoader,\nprivate val executor: Executor\n): GraphQLResolver<User> {\n\n\tfun firstName(user: User, dfe: DataFetchingEnvironment): CompletableFuture<String?> =\n   extractDataLoader(dataLoaderInfo, dfe)\n       .load(user.userId.raw)\n       .thenApply { it?.person?.firstName }\n\nfun email(user: User, dfe: DataFetchingEnvironment): CompletableFuture<String?> =\n   extractDataLoader(dataLoaderInfo, dfe)\n       .load(user.userId.raw)\n       .thenApply { it?.contacts?.email }\n}\n\n\n\nCaching - why is it so troublesome?\nHTTP caching\nThe biggest problem that makes using HTTP caching less effective is plenty of different requests that we can make.\nWhen we ask for a user with his name and email the response is saved in cache.\nBut when we ask again without the information about email despite the fact that\nthe information is already available we cannot use it,\nbecause this is a different query (and HTTP cache cannot handle it without understanding GraphQL logic).\nTo make cache work best we should recognise at field level which user name is already in\nmemory and ask only for the rest of them.\nServer-side caching\nLet’s put aside HTTP caching and focus more on how we can implement server cache that is more focused on GraphQL logic.\nWe could cache specific types from our schema or their fields. A good example of implemented server-side cache is\napollo-server.\nSo if we run the same type or query resolver with the same arguments it can be returned from cache.\nWith data loaders you can also cache requests to external sources not only in one query,\nbut even between many queries by selecting a specific strategy. This solution is available out of the box, and can be used easily.\nClient-side caching\nAnother common way to cache query response is client-side caching. It can be very beneficial, because one client may ask for the same information many times.\nAs an example we can take Apollo client and its solution. The cache uses the ID field to identify whether an object exists in memory.\nThen it checks if all fields that are to be returned are already in memory, if some are not it asks only for them.\nOur caching decisions\nWe’ve decided not to use server-side caching with a global data loader because we have struggled with many clients of our graph and the graph’s data\nchanges frequently. That forced us to use a cache-per-request strategy.\nIf we are talking about caching on the client side we tackle the issue that some of our objects don’t have a unique ID so after a while we skipped this approach and we are not caching them on the client side either.\nWhat is the outcome of the battle?\nWe have learned a lot about GraphQL’s trade offs while working with it, but there is still a lot to be discovered. The most important feature of it, fetching only those fields that we need, is a huge optimization itself, but also causes many problems with standard ways to make the application effective or even to measure that efficiency.\nThe ideas that we described above need to be implemented by the programmers (most libraries don’t provide that logic) and it’s really complex and time consuming.","guid":"https://blog.allegro.tech/2022/06/graphql-perf-tradeoffs.html","categories":["tech","backend","performance","graphql","kotlin","java"],"isoDate":"2022-06-19T22:00:00.000Z","thumbnail":"images/post-headers/java.png"},{"title":"How to include refactoring into product development roadmap? Reducing technical debt inspired by real options identification","link":"https://blog.allegro.tech/2022/06/debt-reduction-in-the-product-roadmap.html","pubDate":"Tue, 07 Jun 2022 00:00:00 +0200","authors":{"author":[{"name":["Olga Dudzik"],"photo":["https://blog.allegro.tech/img/authors/olga.dudzik.jpg"],"url":["https://blog.allegro.tech/authors/olga.dudzik"]}]},"content":"<p>Nowadays, technical debt can be considered the bread and butter of most IT-powered enterprises around the world.\nAlmost every company that survived the startup phase and managed to deliver its first products to customers will face at some point technical challenges related to past architectural decisions. Although code engineering gets better every year, we cannot argue with the obvious fact of life: the market will always force many of us to deliver tech products faster than we wish. Time To Market has always been a key success factor for many product companies and it puts a lot of pressure on Engineering to keep up with challenging deadlines.</p>\n\n<p>Statistics explicitly show the scale of the problem. According to the survey conducted in 2020 by McKinsey<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup>, tech debt can reach up to as much as 40% of the whole technology value. On average 10-20% of IT budget is ultimately consumed by tech debt management and most CIOs interviewed consider the problem significantly increasing over past years, especially in enterprise-size companies<sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\" rel=\"footnote\">2</a></sup>.</p>\n\n<p>As disturbing as it sounds, acknowledging the magnitude of the problem is the first step to dealing with it.</p>\n\n<p>So, here we get to the Product Management reality. Even if we are lucky and after a product discovery we manage to navigate a perfect niche where we can provide a long-awaited, successful product, we still can fail having technology adjusted to our plans and needs. And that would be a real PM tragedy, wouldn’t it? To cap it all, it might be hard to even talk about innovative solutions when maneuvering around limitations imposed by the legacy code. So any further development of our product may become increasingly tricky and take more time which eventually poses a threat to staying competitive.</p>\n\n<p>Bearing that in mind, no reasonable Product Manager can afford ignoring the gravity of code complexity and shady legacy.</p>\n\n<p>Today is the day to start a crusade against technical debt in your products. Nonetheless before we start we must all admit: building a yearly roadmap consisting mostly of incomprehensible technical deliveries that cannot be easily attributed to business value will not make us most popular Product Managers out there, to put it mildly. In most companies proposing such a backlog will result in heated discussions about targets, KPIs and wasting team’s capacity. Work that does not end up with a significant increment is hard to defend. At the end technical product development is mostly not a charity effort and it is supposed to deliver financial outcomes - the sooner, the better.</p>\n\n<p>The situation gets even more complicated in publicly listed companies that report to stakeholders on a regular basis. Declaring work without making any explicit promise of near-future apparent return on investment may seem unexplainable. Technical debt reduction on its own is strictly connected with vast uncertainty as long as it is not presented holistically in a broader context. So how can we approach Roadmaps to make debt reduction more appealing for our audience?</p>\n\n<h2 id=\"take-a-look-outside-of-the-it-world\">Take a look outside of the IT world.</h2>\n\n<p>I believe that especially in Product Management we appreciate inspirations from other industries. And this case should not be an exception. Financial industry and analysts working on companies’ valuations have been struggling with a similar challenge for decades. Is it worth investing in a company that may not seem to be an appealing opportunity now in terms of near-future ROI? How to assess potential profits from innovative ideas on the table? How can we, in general, assess long-term impact of work at the grass roots? And which tech company is a good investment opportunity? Our development backlogs should answer similar questions - which of these debt-reduction tasks are worth pursuing and what can we achieve? Which of them are really good opportunities for us? And finally - how to prove to stakeholders the real value of such initiatives? To approach these questions we can use the idea of real options.</p>\n\n<p>Let us discover together the roots of real options. The idea itself dates back to 1977. Stewart Myers coined this term describing real options as “opportunities to purchase real assets on possibly favorable terms”<sup id=\"fnref:3\" role=\"doc-noteref\"><a href=\"#fn:3\" class=\"footnote\" rel=\"footnote\">3</a></sup> and declaring that each company should be aware of its real assets and real options. Since then, the idea has evolved significantly and has been used in multiple methodologies not only for financial valuations, but also for determining value drivers in a variety of industries. It has been particularly attractive to IT enterprises as it embraces dealing with high uncertainty.</p>\n\n<p>Inspired by real options theory, I reckon that we should stop considering technical debt in terms of short-term Profit and Loss accounting.</p>\n\n<p>Looking only at the nearest future, refactoring activities will mostly look as cost centers without any outlook on further potential profits. However, once we change the perspective and start considering current refactoring investments as enablers for future product options, we are able to grasp the full range of benefits to be gained. Real options perspective should open our roadmaps for long-term thinking and it can allow us to optimize our decision-making process.</p>\n\n<p>However, currently existing academic and financial models are mostly complex and time-consuming to perform. Therefore the idea of real options will serve here mostly as an inspiration for a really simple exercise that will aim to transform the general approach towards technical debt.</p>\n\n<p>Bearing in mind the PM’s reality of limited time and resources, the aim is to keep the analysis quick. Moreover, we would like the output to be as easy and understandable as possible, so it can be fitting for the broad audience. Following real options terminology, we can assume that each resolved technical debt issue is our “real option” - a potential value driver and opportunity to create or improve some products (“real assets”). This exercise will focus on identifying and mapping options to future assets.</p>\n\n<p>In the Product Management case, investments (time of our developers) will be made to remove some technical obstacles and they will become product enablers. Opportunities on the other hand will be translated into tangible deliveries and potentially attractive positions in our future Roadmaps. And in the best case, these opportunities may even open some new doors to further developments into currently unknown and unreachable areas. Our ultimate goal is to maximize opportunities while minimizing effort required to enable them.</p>\n\n<p>I strongly believe that it is really tricky to evaluate analyzed efforts and hopes from the financial perspective at an early stage of analysis. Calculating ROI moneywise can be extremely time-consuming and tends to be based heavily on “guesstimates” (“an approximate calculation of the size or amount of something when you do not know all the facts”<sup id=\"fnref:4\" role=\"doc-noteref\"><a href=\"#fn:4\" class=\"footnote\" rel=\"footnote\">4</a></sup>) . Nonetheless, at the same time it should be fairly possible and informative to at least roughly estimate our potential works vs. hopes in T-shirt sizing method (or any other preferred manner, up to you) and I would strongly recommend to follow this path at the beginning. As it is fairly simple and flexible, we can use the same concept to evaluate profits or attractivity of products or opportunities.</p>\n\n<h2 id=\"where-should-we-start-tech-debt---value-mapping\">Where should we start tech debt - value mapping?</h2>\n\n<p>Let us go through the process step by step. I would recommend going through this discovery process together with your technical team and to transform it into collaborative work. It can be a rewarding exercise for the whole team and it should boost the sense of agency.</p>\n\n<p>First of all we should list all services/topics touched by our technical debt. They can be grouped into areas that will be addressed together to achieve the best efficiency. Depending on the specifics of the system, the granularity or nature of issues can differ. The main aim here is to review the general current state of tech without doing long and costly deep-dives. Our aim is to detect problematic areas avoiding major investments in solution analysis. In this exercise the technical team is the key. The more experienced our engineers are and the better they know their code, the more reliable outcome we get.</p>\n\n<p>The second step is ideation. Let’s determine our real options. Each of the listed services or areas, while solved, should be considered as an enabler for further system development. So this is the time to brainstorm together: assuming that problem A is resolved, what kind of new capabilities will be available for us? What kind of services or products can we build then? Or maybe there are some meaningful improvements that will make our product more convenient and should attract more users? We can and should go even further: what can we build assuming that more than one of the detected issues is closed? This is a perfect moment for the Product Manager to step in and to present the broad vision for the Product as inspiration. Wishful thinking, benchmarking, research and UX studies - all of these tools will prove to be useful in this workshop.</p>\n\n<p>At the end of step two we should be able to draw a tree diagram presenting clearly technical blockers as potential new opportunity enablers:</p>\n\n<p><img src=\"/img/articles/2022-06-07-debt-reduction-in-the-product-roadmap/img1.png\" alt=\"Figure 1\" /></p>\n\n<p>Tree diagram mapping technical debt areas to related product/business opportunities.</p>\n\n<p>Step three is all about evaluation. As mentioned before, I recommend using T-shirt sizing as it brings simplicity into very complex situations. I find T-shirt sizing an attractive estimation technique as it is quite intuitive and introduces relativity between analyzed entities. Sizes that we know from T-shirt labels (XS-XXL) are used to assess work needed to deliver a given task. At this stage our problems are not deeply analyzed and they are not broken down into particular stories/development tasks. We are working with high-level problems and ideas as we do not have time to spend weeks on analysis of topics that may not end up on our roadmap. In this step we can split into two work groups: a technical one and a business one. Technical team should focus on assessing the complexity of each detected technical task - both from debt-areas but also from prospective product opportunities (they require some work too!). If given problem seems to be fairly simple, it can be evaluated as an S. If something requires a major rebuild and redesigning the basics - it could be an XL. Let us just bear in mind that assessment should cover end-to-end work so the complexity of E2E &amp; regression testing should be a vital part of this estimation too. What is more, covering the uncertainty factor in this exercise can be useful so I would not hesitate to assign bigger values for more vague areas. Effort estimation will be presented on the diagram below as purple boxes.</p>\n\n<p>Business team (product managers and business stakeholders) will work on evaluating all the listed capabilities. As always, they should be considered in the broader context, so any product validation tools are handy. Apart from the business impact of each solution, we should also bear in mind if it fits into expected company strategy and if we can see it bringing us any competitive advantage when delivered in the more or less distant future (we have some issues to be resolved first!). Opportunities will be marked on the diagram as green boxes.</p>\n\n<p><img src=\"/img/articles/2022-06-07-debt-reduction-in-the-product-roadmap/img2.png\" alt=\"Figure 2\" /></p>\n\n<h2 id=\"roadmapping\">Roadmapping</h2>\n\n<p>Having this analysis in hand, we can pick our best candidates for the roadmap depending on the team’s capacity available. While it will never be easy to choose the best path, it should be possible to navigate works that have the best potential to bring us noticeable benefits. While pitching the idea of technical debt reduction for the management team, we usually rely on financial aspects of reducing maintenance costs of old code (e.g. we can get potential savings based on maintenance work reports from previous months). After this analysis we should be additionally equipped with the reliable documentation of new business opportunities enabled.</p>\n\n<p>There are at least two approaches to include refactoring on the roadmap, depending on the company’s specifics. Presenting detected technical-debt tasks as a stage zero of your product development may prove to be handy for organizations that are particularly reluctant to acknowledge refactoring as opportunities. In such a case debt reduction could be ‘hidden’ in the Opportunity roadmap item represented by longer actual delivery time. It is worth noting that this approach gives less clarity when it comes to presenting dependencies:</p>\n\n<p><img src=\"/img/articles/2022-06-07-debt-reduction-in-the-product-roadmap/img3.png\" alt=\"Figure 3\" /></p>\n\n<p>For companies that are more open to the refactoring idea, putting technical tasks as “business enablers” on the roadmap can give more clarity. In this approach, it is also easier to include multiple enablers and opportunities on one graph. Cause and effect sequence would explain interdependencies between deliveries and make it easier to understand overlapping items:</p>\n\n<p><img src=\"/img/articles/2022-06-07-debt-reduction-in-the-product-roadmap/img4.png\" alt=\"Figure 4\" /></p>\n\n<p>I strongly believe that introducing analysis described in this article can be a good starting point for the discussion about reducing technical debt in IT-driven products. It can be further developed and supported by a variety of financial analysis methods available for real options valuations or other approaches applicable for IT. There is a necessity to change general mindset and industry’s way of thinking about code refactoring to make the process sustainable and successful. Becoming aware of new opportunities resulting from the technical debt reduction is a good first step towards this goal.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p><a href=\"https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/tech-debt-reclaiming-tech-equity\">https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/tech-debt-reclaiming-tech-equity</a> <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\" role=\"doc-endnote\">\n      <p><a href=\"https://www.computerweekly.com/news/252504654/Technical-debt-is-holding-back-innovation\">https://www.computerweekly.com/news/252504654/Technical-debt-is-holding-back-innovation</a> <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\" role=\"doc-endnote\">\n      <p><a href=\"https://onlinelibrary.wiley.com/doi/10.1111/emre.12324\">https://onlinelibrary.wiley.com/doi/10.1111/emre.12324</a> <a href=\"#fnref:3\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\" role=\"doc-endnote\">\n      <p><a href=\"https://dictionary.cambridge.org/dictionary/english/guesstimate\">https://dictionary.cambridge.org/dictionary/english/guesstimate</a> <a href=\"#fnref:4\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n","contentSnippet":"Nowadays, technical debt can be considered the bread and butter of most IT-powered enterprises around the world.\nAlmost every company that survived the startup phase and managed to deliver its first products to customers will face at some point technical challenges related to past architectural decisions. Although code engineering gets better every year, we cannot argue with the obvious fact of life: the market will always force many of us to deliver tech products faster than we wish. Time To Market has always been a key success factor for many product companies and it puts a lot of pressure on Engineering to keep up with challenging deadlines.\nStatistics explicitly show the scale of the problem. According to the survey conducted in 2020 by McKinsey1, tech debt can reach up to as much as 40% of the whole technology value. On average 10-20% of IT budget is ultimately consumed by tech debt management and most CIOs interviewed consider the problem significantly increasing over past years, especially in enterprise-size companies2.\nAs disturbing as it sounds, acknowledging the magnitude of the problem is the first step to dealing with it.\nSo, here we get to the Product Management reality. Even if we are lucky and after a product discovery we manage to navigate a perfect niche where we can provide a long-awaited, successful product, we still can fail having technology adjusted to our plans and needs. And that would be a real PM tragedy, wouldn’t it? To cap it all, it might be hard to even talk about innovative solutions when maneuvering around limitations imposed by the legacy code. So any further development of our product may become increasingly tricky and take more time which eventually poses a threat to staying competitive.\nBearing that in mind, no reasonable Product Manager can afford ignoring the gravity of code complexity and shady legacy.\nToday is the day to start a crusade against technical debt in your products. Nonetheless before we start we must all admit: building a yearly roadmap consisting mostly of incomprehensible technical deliveries that cannot be easily attributed to business value will not make us most popular Product Managers out there, to put it mildly. In most companies proposing such a backlog will result in heated discussions about targets, KPIs and wasting team’s capacity. Work that does not end up with a significant increment is hard to defend. At the end technical product development is mostly not a charity effort and it is supposed to deliver financial outcomes - the sooner, the better.\nThe situation gets even more complicated in publicly listed companies that report to stakeholders on a regular basis. Declaring work without making any explicit promise of near-future apparent return on investment may seem unexplainable. Technical debt reduction on its own is strictly connected with vast uncertainty as long as it is not presented holistically in a broader context. So how can we approach Roadmaps to make debt reduction more appealing for our audience?\nTake a look outside of the IT world.\nI believe that especially in Product Management we appreciate inspirations from other industries. And this case should not be an exception. Financial industry and analysts working on companies’ valuations have been struggling with a similar challenge for decades. Is it worth investing in a company that may not seem to be an appealing opportunity now in terms of near-future ROI? How to assess potential profits from innovative ideas on the table? How can we, in general, assess long-term impact of work at the grass roots? And which tech company is a good investment opportunity? Our development backlogs should answer similar questions - which of these debt-reduction tasks are worth pursuing and what can we achieve? Which of them are really good opportunities for us? And finally - how to prove to stakeholders the real value of such initiatives? To approach these questions we can use the idea of real options.\nLet us discover together the roots of real options. The idea itself dates back to 1977. Stewart Myers coined this term describing real options as “opportunities to purchase real assets on possibly favorable terms”3 and declaring that each company should be aware of its real assets and real options. Since then, the idea has evolved significantly and has been used in multiple methodologies not only for financial valuations, but also for determining value drivers in a variety of industries. It has been particularly attractive to IT enterprises as it embraces dealing with high uncertainty.\nInspired by real options theory, I reckon that we should stop considering technical debt in terms of short-term Profit and Loss accounting.\nLooking only at the nearest future, refactoring activities will mostly look as cost centers without any outlook on further potential profits. However, once we change the perspective and start considering current refactoring investments as enablers for future product options, we are able to grasp the full range of benefits to be gained. Real options perspective should open our roadmaps for long-term thinking and it can allow us to optimize our decision-making process.\nHowever, currently existing academic and financial models are mostly complex and time-consuming to perform. Therefore the idea of real options will serve here mostly as an inspiration for a really simple exercise that will aim to transform the general approach towards technical debt.\nBearing in mind the PM’s reality of limited time and resources, the aim is to keep the analysis quick. Moreover, we would like the output to be as easy and understandable as possible, so it can be fitting for the broad audience. Following real options terminology, we can assume that each resolved technical debt issue is our “real option” - a potential value driver and opportunity to create or improve some products (“real assets”). This exercise will focus on identifying and mapping options to future assets.\nIn the Product Management case, investments (time of our developers) will be made to remove some technical obstacles and they will become product enablers. Opportunities on the other hand will be translated into tangible deliveries and potentially attractive positions in our future Roadmaps. And in the best case, these opportunities may even open some new doors to further developments into currently unknown and unreachable areas. Our ultimate goal is to maximize opportunities while minimizing effort required to enable them.\nI strongly believe that it is really tricky to evaluate analyzed efforts and hopes from the financial perspective at an early stage of analysis. Calculating ROI moneywise can be extremely time-consuming and tends to be based heavily on “guesstimates” (“an approximate calculation of the size or amount of something when you do not know all the facts”4) . Nonetheless, at the same time it should be fairly possible and informative to at least roughly estimate our potential works vs. hopes in T-shirt sizing method (or any other preferred manner, up to you) and I would strongly recommend to follow this path at the beginning. As it is fairly simple and flexible, we can use the same concept to evaluate profits or attractivity of products or opportunities.\nWhere should we start tech debt - value mapping?\nLet us go through the process step by step. I would recommend going through this discovery process together with your technical team and to transform it into collaborative work. It can be a rewarding exercise for the whole team and it should boost the sense of agency.\nFirst of all we should list all services/topics touched by our technical debt. They can be grouped into areas that will be addressed together to achieve the best efficiency. Depending on the specifics of the system, the granularity or nature of issues can differ. The main aim here is to review the general current state of tech without doing long and costly deep-dives. Our aim is to detect problematic areas avoiding major investments in solution analysis. In this exercise the technical team is the key. The more experienced our engineers are and the better they know their code, the more reliable outcome we get.\nThe second step is ideation. Let’s determine our real options. Each of the listed services or areas, while solved, should be considered as an enabler for further system development. So this is the time to brainstorm together: assuming that problem A is resolved, what kind of new capabilities will be available for us? What kind of services or products can we build then? Or maybe there are some meaningful improvements that will make our product more convenient and should attract more users? We can and should go even further: what can we build assuming that more than one of the detected issues is closed? This is a perfect moment for the Product Manager to step in and to present the broad vision for the Product as inspiration. Wishful thinking, benchmarking, research and UX studies - all of these tools will prove to be useful in this workshop.\nAt the end of step two we should be able to draw a tree diagram presenting clearly technical blockers as potential new opportunity enablers:\n\nTree diagram mapping technical debt areas to related product/business opportunities.\nStep three is all about evaluation. As mentioned before, I recommend using T-shirt sizing as it brings simplicity into very complex situations. I find T-shirt sizing an attractive estimation technique as it is quite intuitive and introduces relativity between analyzed entities. Sizes that we know from T-shirt labels (XS-XXL) are used to assess work needed to deliver a given task. At this stage our problems are not deeply analyzed and they are not broken down into particular stories/development tasks. We are working with high-level problems and ideas as we do not have time to spend weeks on analysis of topics that may not end up on our roadmap. In this step we can split into two work groups: a technical one and a business one. Technical team should focus on assessing the complexity of each detected technical task - both from debt-areas but also from prospective product opportunities (they require some work too!). If given problem seems to be fairly simple, it can be evaluated as an S. If something requires a major rebuild and redesigning the basics - it could be an XL. Let us just bear in mind that assessment should cover end-to-end work so the complexity of E2E & regression testing should be a vital part of this estimation too. What is more, covering the uncertainty factor in this exercise can be useful so I would not hesitate to assign bigger values for more vague areas. Effort estimation will be presented on the diagram below as purple boxes.\nBusiness team (product managers and business stakeholders) will work on evaluating all the listed capabilities. As always, they should be considered in the broader context, so any product validation tools are handy. Apart from the business impact of each solution, we should also bear in mind if it fits into expected company strategy and if we can see it bringing us any competitive advantage when delivered in the more or less distant future (we have some issues to be resolved first!). Opportunities will be marked on the diagram as green boxes.\n\nRoadmapping\nHaving this analysis in hand, we can pick our best candidates for the roadmap depending on the team’s capacity available. While it will never be easy to choose the best path, it should be possible to navigate works that have the best potential to bring us noticeable benefits. While pitching the idea of technical debt reduction for the management team, we usually rely on financial aspects of reducing maintenance costs of old code (e.g. we can get potential savings based on maintenance work reports from previous months). After this analysis we should be additionally equipped with the reliable documentation of new business opportunities enabled.\nThere are at least two approaches to include refactoring on the roadmap, depending on the company’s specifics. Presenting detected technical-debt tasks as a stage zero of your product development may prove to be handy for organizations that are particularly reluctant to acknowledge refactoring as opportunities. In such a case debt reduction could be ‘hidden’ in the Opportunity roadmap item represented by longer actual delivery time. It is worth noting that this approach gives less clarity when it comes to presenting dependencies:\n\nFor companies that are more open to the refactoring idea, putting technical tasks as “business enablers” on the roadmap can give more clarity. In this approach, it is also easier to include multiple enablers and opportunities on one graph. Cause and effect sequence would explain interdependencies between deliveries and make it easier to understand overlapping items:\n\nI strongly believe that introducing analysis described in this article can be a good starting point for the discussion about reducing technical debt in IT-driven products. It can be further developed and supported by a variety of financial analysis methods available for real options valuations or other approaches applicable for IT. There is a necessity to change general mindset and industry’s way of thinking about code refactoring to make the process sustainable and successful. Becoming aware of new opportunities resulting from the technical debt reduction is a good first step towards this goal.\nhttps://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/tech-debt-reclaiming-tech-equity ↩\nhttps://www.computerweekly.com/news/252504654/Technical-debt-is-holding-back-innovation ↩\nhttps://onlinelibrary.wiley.com/doi/10.1111/emre.12324 ↩\nhttps://dictionary.cambridge.org/dictionary/english/guesstimate ↩","guid":"https://blog.allegro.tech/2022/06/debt-reduction-in-the-product-roadmap.html","categories":["tech","roadmaps","tech debt","product"],"isoDate":"2022-06-06T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Turn-Based Offline Reinforcement Learning","link":"https://blog.allegro.tech/2022/04/turn-based-offline-rl.html","pubDate":"Thu, 14 Apr 2022 00:00:00 +0200","authors":{"author":[{"name":["Riccardo Belluzzo"],"photo":["https://blog.allegro.tech/img/authors/riccardo.belluzzo.jpg"],"url":["https://blog.allegro.tech/authors/riccardo.belluzzo"]},{"name":["Tomasz Bocheński"],"photo":["https://blog.allegro.tech/img/authors/tomasz.bochenski.jpg"],"url":["https://blog.allegro.tech/authors/tomasz.bochenski"]},{"name":["Michał Zając"],"photo":["https://blog.allegro.tech/img/authors/michal.zajac.jpg"],"url":["https://blog.allegro.tech/authors/michal.zajac"]},{"name":["Łukasz Kuciński"],"photo":["https://blog.allegro.tech/img/authors/lukasz.kucinski.jpg"],"url":["https://blog.allegro.tech/authors/lukasz.kucinski"]},{"name":["Piotr Miłoś"],"photo":["https://blog.allegro.tech/img/authors/piotr.milos.jpg"],"url":["https://blog.allegro.tech/authors/piotr.milos"]}]},"content":"<p>This blogpost is the result of a research collaboration between the Allegro Machine Learning Research team and\nthe Institute of Mathematics of the Polish Academy of Sciences (IMPAN), Warsaw.</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>Imagine the following scenario: you work in a company as a Research Engineer, and your manager is asking you to design\na state-of-the-art algorithm to control a robot arm that should perform a critical task.\nYou perform some research to find out that Reinforcement Learning (RL) would work really well in this case.\nHowever, you have the following limitations:</p>\n\n<ul>\n  <li>The robot arm is built with poor hardware and can’t afford long and extensive usage.</li>\n  <li>The robot arm can often be physically unavailable, and you may have access to it only for a limited period of time.</li>\n</ul>\n\n<p>In addition to the aforementioned constraints, you also have another big problem: you don’t have any huge dataset\ncontaining past offline behavior of the robotic arm available. What can you do? Should you give up on applying RL\nto this problem? Is the problem even solvable with RL?</p>\n\n<p>Don’t worry! We are here to help you! And to do so, we will walk you through the concept of “Turn-based Offline RL”.\nSo let’s dive into it!</p>\n\n<h2 id=\"standing-between-online-rl-and-offline-rl\">Standing between “Online RL” and “Offline RL”</h2>\n\n<p>In Online RL, we normally have an agent that interacts with the environment, which is assumed to be always available.\nFor each interaction, the agent will get a reward signal that assesses the quality of the action performed.\nThe possibility of constant interaction with the environment marks the difference between the\nonline and offline RL setting: in the latter, we break the environment-agent interaction loop,\nand we only have a buffer of transitions previously gathered using one or multiple unknown policies.\nThus, in Offline RL, since there is no interaction with the environment, the buffer can be thought of as a\nstatic dataset that cannot be extended by any further exploration.</p>\n\n<p>The idea behind “Turn-based Offline RL” falls exactly halfway between these two lines of thinking.\nImagine yourself being able to build an initial static dataset filled with transitions generated by a\nrandom policy. Now that you have a static dataset, you can use it to train an agent using a preferred\nOffline RL algorithm. Then, suppose you have access to the target environment for a limited period of time.\nYou have a (random) agent already trained! You can deploy it, interact with the environment,\ngather new experiences based on the policy learned so far, and enrich your static dataset.\nNow, having an updated (and better) dataset, you can re-train your Offline RL agent and repeat this process every time\nyou are accessing the environment. Well, what we have described is exactly what we mean by “Turn-based Offline RL”.\nLet’s sum up the description in a few points:</p>\n\n<ol>\n  <li>Start with a random policy and generate an initial static dataset.</li>\n  <li>Train an agent using a preferred Offline RL algorithm using the dataset built in 1). We can call this phase “turn 0”.</li>\n  <li>Access the environment the first time: collect transitions using the policy learned so far and extend the dataset\nwith new data.</li>\n  <li>Train your Offline RL agent again with a static dataset now composed of old (random) transitions and new (better)\ntransitions (“turn 1”).</li>\n  <li>Access the environment once again and collect new transitions.</li>\n  <li>Train again your Offline agent (“turn 2”).</li>\n  <li>Repeat the above steps as many “turns” as you can, i.e. as many times as you have the possibility to access the\nenvironment.</li>\n</ol>\n\n<p>The main idea behind the turn-based procedure is that after each “turn” we will extend our dataset with “better”\ntransitions, i.e transitions generated by more expert-like agents, and use Offline RL algorithms to train an even better\n(or at least similar) policy than the one used to generate those transitions.\nWith the “Turn-based Offline RL” framework you can now see how you could possibly overcome the constraints for\nyour hypothetical robot arm application: you could build a random dataset using some simulator; train an Offline RL\nagent with it; deploy the agent to interact with the robot arm for a limited period of time; extend the dataset\nwith better data; re-train the agent, and repeat the process.</p>\n\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/diagram.png\" alt=\"Figure 1\" />\n<em>Fig.1 — Schematic comparison between Online RL (a), Offline RL (b), and Turn-Based Offline RL (c). For this diagram\nwe took inspiration from the paper Offline Reinforcement Learning: Tutorial, Review, and Perspectives on Open Problems\n(Levine et al. 2020)</em></p>\n\n<h2 id=\"turn-based-offline-rl-in-practice\">Turn-based Offline RL in practice</h2>\n\n<p>In this blog post, we want to show you how you could make use of the “Turn-based Offline RL” framework to leverage\nthe advances in Offline RL in applications where you could have the possibility of accessing the environment “in turns”.\nFortunately, we don’t need any fancy robotic arm to do so! We have prepared for you a more comprehensive use case\nin order to explain the general idea behind it.</p>\n\n<h3 id=\"experimental-setup\">Experimental setup</h3>\n\n<p>To showcase our idea, we are going to make use of a simplified environment.\nThis tutorial will be in fact inspired by the\n<a href=\"https://colab.research.google.com/drive/1oJOYlAIOl9d1JjlutPY66KmfPkwPCgEE?usp=sharing#scrollTo=4i64GqsO83mA\">NeurIPS 2020 Offline RL Tutorial Colab Exercise</a>\nwhere the authors designed a simple GridWorld environment to test different ideas related to Offline RL.</p>\n\n<p>GridWorld is a standard environment used in the RL community to test if algorithms can work in relatively\neasy situations or simply to debug them. In GridWorld, the agent starts at a starting point (“S”) and aims to\nreach a target point, sometimes called the reward (“R”) cell. The agent can either step up, down, left, or right,\nor stay still. Only empty cells can be stepped in, while non-empty cells, like the ones containing obstacles\n(walls), are not. The authors of the notebook provide an easy way to build such an environment from a string.</p>\n\n<p>For the sake of this tutorial, we will work with a fixed 18x20 grid like the one specified by the string below.\nThe “O” letter indicates empty spaces, “#” stands for walls, “S” is the starting state and “R” the target one.\nFor clarity, we have drawn the grid for you.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOSOOOOOOOOOO#</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOO##OOOOOOOOOO#</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOO#O#OOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOO#OO#OOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOOOOO#O</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOO#OOOOOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'##OOOOOOOO#OOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOO#OOOOO#OO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOO####O</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OO#OOO#OOOOOO#OOOROO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOO##OO#OOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOO#OOOOOOOOOOOO##O#</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOO#OOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'##OOOOO##OOOOOOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOOOOOOOOO#OOO#OOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n    <span class=\"s\">'OOOO##OOOO#O#OOOOOOO</span><span class=\"se\">\\\\</span><span class=\"s\">'</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/gridworld_reduced.png\" alt=\"Figure 2\" />\n<em>Fig.2 — The chosen grid for our experiments: the green cell (S) is the starting point; the\nyellow cell (R) is the target point; white cells are empty while red cells contain walls.</em></p>\n\n<p>Please note that in our experiments we have tested different grid configurations and dimensions and we believe\nthat the chosen dimensionality and obstacle distribution presented for this tutorial do represent a\ngood experimental setup in order to arrive at reasonable conclusions. Indeed, the grid is small enough\nfor the algorithm to be able to quickly iterate through different runs, and its configuration\nis complicated enough to lead to non-trivial results.\nIn general, from our experience, things start to get interesting with grids NxM where N,M &gt;= 12.</p>\n\n<h3 id=\"agents-visualizations\">Agent’s visualizations</h3>\n\n<p>In RL, it’s sometimes beneficial to visualize the policy your agents are learning. Since the environment\nwe are playing with is relatively small, we can actually enumerate all possible state-action (s,a) pairs.\nWhen a specific algorithm runs, we are able to count how many times each of these pairs was visited, and we are\nable to visualize it as a heatmap, superimposed on the grid.</p>\n\n<p>In our case, such heatmaps (that we call state-action visitation maps)\ncan be really useful to understand, for example, the quality of a specific policy:\na good state-action visitation map is created only by applying a good policy.</p>\n\n<p>How would a map built using the optimal policy look like?\nAgain, it’s a question we can answer only because we are in the ideal case of using a simple environment where we can\nknow and do everything, like finding the optimal policy.\nWe can use tabular Q-iteration to find an optimal solution for our case,\nhence producing the optimal state-action map that looks as follows:</p>\n\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/optimal_policy_heatmap_reduced.png\" alt=\"Figure 3\" />\n<em>Fig.3 — State-action visitation heatmap generated by the optimal policy. Most of the time the agent reaches the target\ncell in a few steps and then, it just stays idle without performing any further step.</em></p>\n\n<p>As you can see, in this case, almost every (s,a) pair has a value approaching zero, apart from the reward (“R”) state\nwhich has a big value. This is happening because once the agent knows the optimal policy, it will take very few steps\nfor it to reach the target cell and once it’s reached, it will spend most of the time just waiting, without performing\nany further action. More precisely, the agent will spend the majority of the time in the (s,a) = (“R”, NOOP),\nwhere NOOP stands for “no operation”.</p>\n\n<p>Let’s now visualize the heatmap generated by the uniform policy,\ni.e an agent that decides at random (with uniform probability) which action to take when being in a specific state.\nThis approach would be the way to go in the majority of the cases and is the closest to the real case example.\nSuppose you don’t know anything about the environment you are going to interact with: the best you can do is to\nperform random exploration!</p>\n\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/random_policy_heatmap_reduced.png\" alt=\"Figure 4\" />\n<em>Fig.4 — State-action visitation heatmap generated by the random policy. The agent performs random exploration. As a\nresult of the random behaviour, cells in the surroundings of the initial state are visited on average more often than\nfurther cells.</em></p>\n\n<p>Since we start from the “S” cell at every episode, we have the highest probability of visiting the “S” state and all\nits surroundings. As we go further from it, the agent will start to pick different states depending on the run,\nand thus values on farther cells start to normalize and approach 0.0.</p>\n\n<p>In the following, we will describe the algorithm in detail, and we will make use of these visualizations to understand\nif the turn-based approach is beneficial for learning a good policy when starting from a random one.</p>\n\n<h3 id=\"algorithm\">Algorithm</h3>\n\n<p>Now let’s dive into the algorithm itself. Recalling the steps indicated in the previous section,\nwe can describe the turn-based learning algorithm with the following pythonic pseudocode:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">run_turn_based_algorithm</span><span class=\"p\">(</span><span class=\"n\">init_policy</span><span class=\"p\">,</span>\n                             <span class=\"n\">num_turns</span><span class=\"p\">,</span>\n                             <span class=\"n\">num_seeds</span><span class=\"p\">,</span>\n                             <span class=\"n\">dataset_size</span><span class=\"p\">,</span>\n                             <span class=\"n\">num_iters</span><span class=\"p\">):</span>\n    <span class=\"n\">offline_dataset</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">current_policy</span> <span class=\"o\">=</span> <span class=\"n\">init_policy</span>\n    <span class=\"n\">num_of_trajectories_per_turn</span> <span class=\"o\">=</span> <span class=\"n\">dataset_size</span> <span class=\"o\">/</span> <span class=\"n\">num_turns</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">turn</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_turns</span><span class=\"p\">):</span>\n        <span class=\"n\">runs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">seed</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_seeds</span><span class=\"p\">):</span>\n            <span class=\"n\">temp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">offline_dataset</span><span class=\"p\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"n\">trajectories_from_new_policy</span> <span class=\"o\">=</span> <span class=\"n\">deploy_and_sample</span><span class=\"p\">(</span><span class=\"n\">current_policy</span><span class=\"p\">,</span> <span class=\"n\">num_of_trajectories_per_turn</span><span class=\"p\">)</span>\n            <span class=\"n\">temp_dataset</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">trajectories_from_new_policy</span><span class=\"p\">)</span>\n            <span class=\"n\">policy</span><span class=\"p\">,</span> <span class=\"n\">performances</span> <span class=\"o\">=</span> <span class=\"n\">run_offline_rl_algorithm</span><span class=\"p\">(</span><span class=\"n\">temp_dataset</span><span class=\"p\">,</span> <span class=\"n\">num_iters</span><span class=\"p\">)</span>\n            <span class=\"n\">runs</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">policy</span><span class=\"p\">,</span> <span class=\"n\">performances</span><span class=\"p\">,</span> <span class=\"n\">trajectories_from_new_policy</span><span class=\"p\">))</span>\n\n        <span class=\"n\">best_policy</span><span class=\"p\">,</span> <span class=\"n\">best_trajectories</span> <span class=\"o\">=</span> <span class=\"n\">find_best_run</span><span class=\"p\">(</span><span class=\"n\">runs</span><span class=\"p\">)</span>\n        <span class=\"n\">current_policy</span> <span class=\"o\">=</span> <span class=\"n\">best_policy</span>\n        <span class=\"n\">offline_dataset</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">best_trajectories</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Let’s explain each step involved in the algorithm.  First, let’s define what the main parameters expected by\nthe algorithm are:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">init_policy</code> — it’s the starting policy, most likely the random policy.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">num_turns</code> — this is simply the total number of turns for which you will run the algorithm.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">num_seeds</code> — if you work in RL you will be familiar with this argument: RL algorithms\n(and especially Offline RL ones) present large variability in the results due to their stochastic nature.\nThat’s why instead of having one single run of the Offline RL algorithm,\nwe will have several of them. For each run, we will produce the best policy and the best\n“new set of trajectories” to be used later in the algorithm (more on this step in the following).</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">num_iters</code> — this is simply the number of iterations we will run our Offline RL algorithm.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">dataset_size</code> — as a design choice, we assume that the final dataset size has been fixed beforehand,\nas we do with the number of turns. However, both of these two conditions could be relaxed and one could run\nthe algorithm as many turns as needed, getting a final offline dataset with an undefined size.\nHowever, please remember that in the real scenario you will probably not have the privilege of\naccessing the environment so often! You must do your best with a reasonable number of turns!</li>\n</ul>\n\n<p>Now, following the logic of the pseudo-code, let’s describe the algorithm:</p>\n\n<ul>\n  <li>Initially, we don’t have any transitions to train our Offline RL algorithm, so we initialize our <code class=\"language-plaintext highlighter-rouge\">offline_dataset</code>\nas an empty list.</li>\n  <li>We also initialize <code class=\"language-plaintext highlighter-rouge\">current_policy</code> with <code class=\"language-plaintext highlighter-rouge\">init_policy</code>, which most likely will be the random policy\n(an agent that has previously interacted with the environment taking actions uniformly at random).</li>\n  <li>Now, for each turn we run <code class=\"language-plaintext highlighter-rouge\">num_seeds</code> times the following procedure:\n    <ul>\n      <li>We create a copy of <code class=\"language-plaintext highlighter-rouge\">offline_dataset</code> (<code class=\"language-plaintext highlighter-rouge\">temp_dataset</code>) to train the current agent with the dataset collected\nso far.</li>\n      <li>We deploy the agent to the environment, in order to generate a new set of transitions using the current policy\n(<code class=\"language-plaintext highlighter-rouge\">trajectories_from_new_policy</code>).</li>\n      <li>We extend the temporary dataset by <code class=\"language-plaintext highlighter-rouge\">trajectories_from_new_policy</code> and train an agent with it,\nusing the preferred Offline RL algorithm and getting its corresponding <code class=\"language-plaintext highlighter-rouge\">policy</code> and <code class=\"language-plaintext highlighter-rouge\">performances</code>.</li>\n      <li>We append the results to <code class=\"language-plaintext highlighter-rouge\">runs</code> list.</li>\n      <li>Once we have collected all the results, we pick the best policy and best-generated trajectories\nout of the pool of runs (<code class=\"language-plaintext highlighter-rouge\">find_best_run</code>).</li>\n      <li>The <code class=\"language-plaintext highlighter-rouge\">best_policy</code> is now our <code class=\"language-plaintext highlighter-rouge\">current_policy</code> that will be used for the next turn.</li>\n      <li>The <code class=\"language-plaintext highlighter-rouge\">best_trajectories</code> will are appended to <code class=\"language-plaintext highlighter-rouge\">offline_dataset</code> that will is going to be used for the next turn.</li>\n    </ul>\n  </li>\n  <li>We repeat this procedure until we are satisfied with the performance or as many times (turns)\nwe are able to access the environment.</li>\n</ul>\n\n<p>Now, hoping the algorithm is clear to you, we need to answer two important questions.</p>\n\n<p><em>Which Offline RL algorithm should be run?</em>\nActually here the choice is yours! In our case, we opted for\nusing <a href=\"https://arxiv.org/abs/2006.04779\">Conservative Q-Learning (CQL)</a>.\nAny algorithm may have its pros and cons. In our case we find it hard to set the CQL global parameters only once\nto be good for all the runs. What is happening is that initially our dataset will be full of random transitions,\nbut as long as you proceed in turns, it will become richer in “more-expert” transitions.\nThus, parameters like alpha for the CQL loss should be somehow adjusted in time.\nWhile in this tutorial we did not investigate this aspect, we found that for this very simplistic environment\neven CQL with alpha = 0 (equivalent to offline Q iteration) would work sufficiently.</p>\n\n<p><em>How to aggregate results in order to get a representative policy and dataset for the next turn?</em>\nThat’s a hard question. For the sake of this tutorial, we have opted for the simplest of the approaches:\nout of the N runs, we will pick the one that gave us the best results (in terms of average reward).\nHowever, please note that this may be too optimistic and could lead to unexpected behavior in production.\nA better approach would actually be the one that takes into account the “average policy”. But, to “average out”\npolicies is not a trivial task. We discuss this aspect in detail in the final section.</p>\n\n<h2 id=\"results\">Results</h2>\n\n<h3 id=\"visualizing-the-agent-in-turns\">Visualizing the agent “in turns”</h3>\n\n<p>First, we ask ourselves the following question: does the agent learn “in turns”? We can check this\nby visualizing subsequent state-action visitation maps:</p>\n\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/agent_learns_in_turns_reduced.png\" alt=\"Figure 5\" />\n<em>Fig.5 — Visualization of subsequent state-action visitation heatmaps. Here we visualize 4 subsequent turns — after one\nsingle turn the agent learns the fastest path to reach the target cell. As long as we proceed in turns, the agent\nimproves its performance, eventually approaching a behaviour comparable to the optimal policy.</em></p>\n\n<p>Our algorithm seems to work! When starting with a uniform policy, we can see that even after a\nsingle turn the agent quickly learns the fastest path to reach the target cell. As long as we proceed in turns, the model will\nconsistently improve its performance, by quickly getting to the “R” cell even more often. In this sense, visitation\nmaps get closer to the optimal one where the agent basically reaches the target in a few steps and then just stays\nthere, without performing any further steps.</p>\n\n<h3 id=\"does-the-agent-improve-its-performance-over-time\">Does the agent improve its performance over time?</h3>\n\n<p>How many turns are needed to start having results comparable to\nthe optimal policy? In other words, how much better are we performing if compared to not doing any turn at all?</p>\n\n<p>Let’s analyze the plot below. In this figure we are plotting the algorithm’s performance, measured in\n“averaged reward” (the higher, the better), as the amount of data available offline increases. In general, we expect\nthe curve obtained by running the optimal policy (violet curve) to represent an upper bound: it’s the best we\ncan achieve! On the other hand, we expect the curve obtained by running the random policy without any “turn”\n(green curve), to be our lower bound. Also, generally speaking, we expect that the more offline data is available,\nthe better the achieved scores will be, since our chosen Offline RL will have more data coverage and possibility\nto converge to the optimal policy. Given this, we can observe that the performance of the turn-based procedure falls\nin the middle between the aforementioned upper and lower bounds: as the number of turns increases, the closer we get\nto the upper bound. However, we can observe that 3 turns are already enough to start having better performance than\nthe lower bound. This plot confirms our hypothesis: “Turn-based Offline RL” stands exactly between Online RL\n(upper bound) and Offline RL (lower bound).</p>\n\n<p><img src=\"/img/articles/2022-04-14-turn-based-offline-rl/learning_curves_reduced.png\" alt=\"Figure 6\" />\n<em>Fig.6 — This plot shows the comparison between baselines and the turn-based procedure in terms of average reward (the higher,\nthe better) as the size of the collected data used to train the algorithm offline grows. To obtain this figure,\nwe have run each of the algorithms for 30 seeds. For the optimal policy we run Q-iteration, while for the rest we\napplied CQL with fixed alpha=0. For each run, CQL was fitted for 300 iterations.</em></p>\n\n<h2 id=\"conclusions-and-future-work\">Conclusions and Future Work</h2>\n\n<p>In this blog post we have presented a practical approach you could use to address cases where you have temporary\nand limited access to an environment, and you have computational resources at your disposal to train your RL algorithm\n“offline” only.</p>\n\n<p>In fact, the proposed solution falls halfway between Online RL and Offline RL: our agent is warmed up\nby training it via Offline RL on a dataset generated by running the uniform random policy and then\nsubsequently improved by accessing the environment in “turns”, thus partially simulating what you would get on a\nstandard online RL scenario.</p>\n\n<p>In particular, we show that:</p>\n\n<ul>\n  <li>The turn-based procedure is effective since the policy learned in subsequent turns consistently improves as\nturns increase, matching the expectations. This result is demonstrated through some visualizations, showing how\nthe agent chooses a better and faster path to target turn after turn.</li>\n  <li>The turn-based procedure allows getting an agent that is better than a random one, even after a small number of turns.\nThe performance of the turn-based agent will be upper-bounded by the performance of the optimal policy.</li>\n</ul>\n\n<p>Moreover, we provide an easy-to-understand framework to prove the aforementioned hypothesis.</p>\n\n<p>Finally, we want to point out some limitations of our work that could be addressed as future work:</p>\n\n<ul>\n  <li>From one turn to the other, we pick the “best policy” as the one that achieves the best performance between all\nthe runs via the “max” operator. This single policy is then propagated through the algorithm and used to generate\nthe best new extension of the dataset. The inherent limitation of this approach is that by using the “max” we are\nnot robust to the noise and we do not account for fluctuations in the performance of the Offline RL algorithm.\nA better approach would be aggregating policies by doing, for example, an ensemble of policies, and using this\nas the selected policy that is propagated forward in the algorithm.</li>\n  <li>Running a fixed Offline RL algorithm on a dataset that keeps changing its distribution of states and actions\nin time could be really challenging since a lot of algorithms in the literature require accurate hypertuning\nof the parameters. In future work, we would like to address this problem, proposing, for example, a way one\ncould compute new hyper-parameters using the dataset size and some other properties as parameters for the computation.</li>\n  <li>One could argue that our hypothesis can work only on simplistic environments like GridWorlds.\nEven though we tested different configurations of grids, stressing more or less the algorithms,\nwe admit that a more complete work would require the re-visitation of our hypothesis on a more diverse\nsuite of environments. We plan to investigate this in the future.</li>\n</ul>\n\n","contentSnippet":"This blogpost is the result of a research collaboration between the Allegro Machine Learning Research team and\nthe Institute of Mathematics of the Polish Academy of Sciences (IMPAN), Warsaw.\nIntroduction\nImagine the following scenario: you work in a company as a Research Engineer, and your manager is asking you to design\na state-of-the-art algorithm to control a robot arm that should perform a critical task.\nYou perform some research to find out that Reinforcement Learning (RL) would work really well in this case.\nHowever, you have the following limitations:\nThe robot arm is built with poor hardware and can’t afford long and extensive usage.\nThe robot arm can often be physically unavailable, and you may have access to it only for a limited period of time.\nIn addition to the aforementioned constraints, you also have another big problem: you don’t have any huge dataset\ncontaining past offline behavior of the robotic arm available. What can you do? Should you give up on applying RL\nto this problem? Is the problem even solvable with RL?\nDon’t worry! We are here to help you! And to do so, we will walk you through the concept of “Turn-based Offline RL”.\nSo let’s dive into it!\nStanding between “Online RL” and “Offline RL”\nIn Online RL, we normally have an agent that interacts with the environment, which is assumed to be always available.\nFor each interaction, the agent will get a reward signal that assesses the quality of the action performed.\nThe possibility of constant interaction with the environment marks the difference between the\nonline and offline RL setting: in the latter, we break the environment-agent interaction loop,\nand we only have a buffer of transitions previously gathered using one or multiple unknown policies.\nThus, in Offline RL, since there is no interaction with the environment, the buffer can be thought of as a\nstatic dataset that cannot be extended by any further exploration.\nThe idea behind “Turn-based Offline RL” falls exactly halfway between these two lines of thinking.\nImagine yourself being able to build an initial static dataset filled with transitions generated by a\nrandom policy. Now that you have a static dataset, you can use it to train an agent using a preferred\nOffline RL algorithm. Then, suppose you have access to the target environment for a limited period of time.\nYou have a (random) agent already trained! You can deploy it, interact with the environment,\ngather new experiences based on the policy learned so far, and enrich your static dataset.\nNow, having an updated (and better) dataset, you can re-train your Offline RL agent and repeat this process every time\nyou are accessing the environment. Well, what we have described is exactly what we mean by “Turn-based Offline RL”.\nLet’s sum up the description in a few points:\nStart with a random policy and generate an initial static dataset.\nTrain an agent using a preferred Offline RL algorithm using the dataset built in 1). We can call this phase “turn 0”.\nAccess the environment the first time: collect transitions using the policy learned so far and extend the dataset\nwith new data.\nTrain your Offline RL agent again with a static dataset now composed of old (random) transitions and new (better)\ntransitions (“turn 1”).\nAccess the environment once again and collect new transitions.\nTrain again your Offline agent (“turn 2”).\nRepeat the above steps as many “turns” as you can, i.e. as many times as you have the possibility to access the\nenvironment.\nThe main idea behind the turn-based procedure is that after each “turn” we will extend our dataset with “better”\ntransitions, i.e transitions generated by more expert-like agents, and use Offline RL algorithms to train an even better\n(or at least similar) policy than the one used to generate those transitions.\nWith the “Turn-based Offline RL” framework you can now see how you could possibly overcome the constraints for\nyour hypothetical robot arm application: you could build a random dataset using some simulator; train an Offline RL\nagent with it; deploy the agent to interact with the robot arm for a limited period of time; extend the dataset\nwith better data; re-train the agent, and repeat the process.\n\nFig.1 — Schematic comparison between Online RL (a), Offline RL (b), and Turn-Based Offline RL (c). For this diagram\nwe took inspiration from the paper Offline Reinforcement Learning: Tutorial, Review, and Perspectives on Open Problems\n(Levine et al. 2020)\nTurn-based Offline RL in practice\nIn this blog post, we want to show you how you could make use of the “Turn-based Offline RL” framework to leverage\nthe advances in Offline RL in applications where you could have the possibility of accessing the environment “in turns”.\nFortunately, we don’t need any fancy robotic arm to do so! We have prepared for you a more comprehensive use case\nin order to explain the general idea behind it.\nExperimental setup\nTo showcase our idea, we are going to make use of a simplified environment.\nThis tutorial will be in fact inspired by the\nNeurIPS 2020 Offline RL Tutorial Colab Exercise\nwhere the authors designed a simple GridWorld environment to test different ideas related to Offline RL.\nGridWorld is a standard environment used in the RL community to test if algorithms can work in relatively\neasy situations or simply to debug them. In GridWorld, the agent starts at a starting point (“S”) and aims to\nreach a target point, sometimes called the reward (“R”) cell. The agent can either step up, down, left, or right,\nor stay still. Only empty cells can be stepped in, while non-empty cells, like the ones containing obstacles\n(walls), are not. The authors of the notebook provide an easy way to build such an environment from a string.\nFor the sake of this tutorial, we will work with a fixed 18x20 grid like the one specified by the string below.\nThe “O” letter indicates empty spaces, “#” stands for walls, “S” is the starting state and “R” the target one.\nFor clarity, we have drawn the grid for you.\n\ngrid = (\n    'OOOOOOOOOOOOOOOOOOOO\\\\'\n    'OOOOOOOOOOOOOOOOOOOO\\\\'\n    'OOOOOOOOSOOOOOOOOOO#\\\\'\n    'OOOOOOO##OOOOOOOOOO#\\\\'\n    'OOOOOO#O#OOOOOOOOOOO\\\\'\n    'OOOOOOOOOOO#OO#OOOOO\\\\'\n    'OOOOOOOOOOOOOOOOOO#O\\\\'\n    'OOOO#OOOOOOOOOOOOOOO\\\\'\n    '##OOOOOOOO#OOOOOOOOO\\\\'\n    'OOOOOOOOOOO#OOOOO#OO\\\\'\n    'OOOOOOOOOOOOOOO####O\\\\'\n    'OOOOOOOOOOOOOOOOOOOO\\\\'\n    'OO#OOO#OOOOOO#OOOROO\\\\'\n    'OOOOOO##OO#OOOOOOOOO\\\\'\n    'OOO#OOOOOOOOOOOO##O#\\\\'\n    'OOOOOOO#OOOOOOOOOOOO\\\\'\n    'OOOOOOOOOOOOOOOOOOOO\\\\'\n    '##OOOOO##OOOOOOOOOOO\\\\'\n    'OOOOOOOOOOO#OOO#OOOO\\\\'\n    'OOOO##OOOO#O#OOOOOOO\\\\'\n)\n\n\n\nFig.2 — The chosen grid for our experiments: the green cell (S) is the starting point; the\nyellow cell (R) is the target point; white cells are empty while red cells contain walls.\nPlease note that in our experiments we have tested different grid configurations and dimensions and we believe\nthat the chosen dimensionality and obstacle distribution presented for this tutorial do represent a\ngood experimental setup in order to arrive at reasonable conclusions. Indeed, the grid is small enough\nfor the algorithm to be able to quickly iterate through different runs, and its configuration\nis complicated enough to lead to non-trivial results.\nIn general, from our experience, things start to get interesting with grids NxM where N,M >= 12.\nAgent’s visualizations\nIn RL, it’s sometimes beneficial to visualize the policy your agents are learning. Since the environment\nwe are playing with is relatively small, we can actually enumerate all possible state-action (s,a) pairs.\nWhen a specific algorithm runs, we are able to count how many times each of these pairs was visited, and we are\nable to visualize it as a heatmap, superimposed on the grid.\nIn our case, such heatmaps (that we call state-action visitation maps)\ncan be really useful to understand, for example, the quality of a specific policy:\na good state-action visitation map is created only by applying a good policy.\nHow would a map built using the optimal policy look like?\nAgain, it’s a question we can answer only because we are in the ideal case of using a simple environment where we can\nknow and do everything, like finding the optimal policy.\nWe can use tabular Q-iteration to find an optimal solution for our case,\nhence producing the optimal state-action map that looks as follows:\n\nFig.3 — State-action visitation heatmap generated by the optimal policy. Most of the time the agent reaches the target\ncell in a few steps and then, it just stays idle without performing any further step.\nAs you can see, in this case, almost every (s,a) pair has a value approaching zero, apart from the reward (“R”) state\nwhich has a big value. This is happening because once the agent knows the optimal policy, it will take very few steps\nfor it to reach the target cell and once it’s reached, it will spend most of the time just waiting, without performing\nany further action. More precisely, the agent will spend the majority of the time in the (s,a) = (“R”, NOOP),\nwhere NOOP stands for “no operation”.\nLet’s now visualize the heatmap generated by the uniform policy,\ni.e an agent that decides at random (with uniform probability) which action to take when being in a specific state.\nThis approach would be the way to go in the majority of the cases and is the closest to the real case example.\nSuppose you don’t know anything about the environment you are going to interact with: the best you can do is to\nperform random exploration!\n\nFig.4 — State-action visitation heatmap generated by the random policy. The agent performs random exploration. As a\nresult of the random behaviour, cells in the surroundings of the initial state are visited on average more often than\nfurther cells.\nSince we start from the “S” cell at every episode, we have the highest probability of visiting the “S” state and all\nits surroundings. As we go further from it, the agent will start to pick different states depending on the run,\nand thus values on farther cells start to normalize and approach 0.0.\nIn the following, we will describe the algorithm in detail, and we will make use of these visualizations to understand\nif the turn-based approach is beneficial for learning a good policy when starting from a random one.\nAlgorithm\nNow let’s dive into the algorithm itself. Recalling the steps indicated in the previous section,\nwe can describe the turn-based learning algorithm with the following pythonic pseudocode:\n\ndef run_turn_based_algorithm(init_policy,\n                             num_turns,\n                             num_seeds,\n                             dataset_size,\n                             num_iters):\n    offline_dataset = []\n    current_policy = init_policy\n    num_of_trajectories_per_turn = dataset_size / num_turns\n\n    for turn in range(num_turns):\n        runs = []\n        for seed in range(num_seeds):\n            temp_dataset = offline_dataset.copy()\n            trajectories_from_new_policy = deploy_and_sample(current_policy, num_of_trajectories_per_turn)\n            temp_dataset.extend(trajectories_from_new_policy)\n            policy, performances = run_offline_rl_algorithm(temp_dataset, num_iters)\n            runs.append((policy, performances, trajectories_from_new_policy))\n\n        best_policy, best_trajectories = find_best_run(runs)\n        current_policy = best_policy\n        offline_dataset.extend(best_trajectories)\n\n\nLet’s explain each step involved in the algorithm.  First, let’s define what the main parameters expected by\nthe algorithm are:\ninit_policy — it’s the starting policy, most likely the random policy.\nnum_turns — this is simply the total number of turns for which you will run the algorithm.\nnum_seeds — if you work in RL you will be familiar with this argument: RL algorithms\n(and especially Offline RL ones) present large variability in the results due to their stochastic nature.\nThat’s why instead of having one single run of the Offline RL algorithm,\nwe will have several of them. For each run, we will produce the best policy and the best\n“new set of trajectories” to be used later in the algorithm (more on this step in the following).\nnum_iters — this is simply the number of iterations we will run our Offline RL algorithm.\ndataset_size — as a design choice, we assume that the final dataset size has been fixed beforehand,\nas we do with the number of turns. However, both of these two conditions could be relaxed and one could run\nthe algorithm as many turns as needed, getting a final offline dataset with an undefined size.\nHowever, please remember that in the real scenario you will probably not have the privilege of\naccessing the environment so often! You must do your best with a reasonable number of turns!\nNow, following the logic of the pseudo-code, let’s describe the algorithm:\nInitially, we don’t have any transitions to train our Offline RL algorithm, so we initialize our offline_dataset\nas an empty list.\nWe also initialize current_policy with init_policy, which most likely will be the random policy\n(an agent that has previously interacted with the environment taking actions uniformly at random).\nNow, for each turn we run num_seeds times the following procedure:\n    \nWe create a copy of offline_dataset (temp_dataset) to train the current agent with the dataset collected\nso far.\nWe deploy the agent to the environment, in order to generate a new set of transitions using the current policy\n(trajectories_from_new_policy).\nWe extend the temporary dataset by trajectories_from_new_policy and train an agent with it,\nusing the preferred Offline RL algorithm and getting its corresponding policy and performances.\nWe append the results to runs list.\nOnce we have collected all the results, we pick the best policy and best-generated trajectories\nout of the pool of runs (find_best_run).\nThe best_policy is now our current_policy that will be used for the next turn.\nThe best_trajectories will are appended to offline_dataset that will is going to be used for the next turn.\nWe repeat this procedure until we are satisfied with the performance or as many times (turns)\nwe are able to access the environment.\nNow, hoping the algorithm is clear to you, we need to answer two important questions.\nWhich Offline RL algorithm should be run?\nActually here the choice is yours! In our case, we opted for\nusing Conservative Q-Learning (CQL).\nAny algorithm may have its pros and cons. In our case we find it hard to set the CQL global parameters only once\nto be good for all the runs. What is happening is that initially our dataset will be full of random transitions,\nbut as long as you proceed in turns, it will become richer in “more-expert” transitions.\nThus, parameters like alpha for the CQL loss should be somehow adjusted in time.\nWhile in this tutorial we did not investigate this aspect, we found that for this very simplistic environment\neven CQL with alpha = 0 (equivalent to offline Q iteration) would work sufficiently.\nHow to aggregate results in order to get a representative policy and dataset for the next turn?\nThat’s a hard question. For the sake of this tutorial, we have opted for the simplest of the approaches:\nout of the N runs, we will pick the one that gave us the best results (in terms of average reward).\nHowever, please note that this may be too optimistic and could lead to unexpected behavior in production.\nA better approach would actually be the one that takes into account the “average policy”. But, to “average out”\npolicies is not a trivial task. We discuss this aspect in detail in the final section.\nResults\nVisualizing the agent “in turns”\nFirst, we ask ourselves the following question: does the agent learn “in turns”? We can check this\nby visualizing subsequent state-action visitation maps:\n\nFig.5 — Visualization of subsequent state-action visitation heatmaps. Here we visualize 4 subsequent turns — after one\nsingle turn the agent learns the fastest path to reach the target cell. As long as we proceed in turns, the agent\nimproves its performance, eventually approaching a behaviour comparable to the optimal policy.\nOur algorithm seems to work! When starting with a uniform policy, we can see that even after a\nsingle turn the agent quickly learns the fastest path to reach the target cell. As long as we proceed in turns, the model will\nconsistently improve its performance, by quickly getting to the “R” cell even more often. In this sense, visitation\nmaps get closer to the optimal one where the agent basically reaches the target in a few steps and then just stays\nthere, without performing any further steps.\nDoes the agent improve its performance over time?\nHow many turns are needed to start having results comparable to\nthe optimal policy? In other words, how much better are we performing if compared to not doing any turn at all?\nLet’s analyze the plot below. In this figure we are plotting the algorithm’s performance, measured in\n“averaged reward” (the higher, the better), as the amount of data available offline increases. In general, we expect\nthe curve obtained by running the optimal policy (violet curve) to represent an upper bound: it’s the best we\ncan achieve! On the other hand, we expect the curve obtained by running the random policy without any “turn”\n(green curve), to be our lower bound. Also, generally speaking, we expect that the more offline data is available,\nthe better the achieved scores will be, since our chosen Offline RL will have more data coverage and possibility\nto converge to the optimal policy. Given this, we can observe that the performance of the turn-based procedure falls\nin the middle between the aforementioned upper and lower bounds: as the number of turns increases, the closer we get\nto the upper bound. However, we can observe that 3 turns are already enough to start having better performance than\nthe lower bound. This plot confirms our hypothesis: “Turn-based Offline RL” stands exactly between Online RL\n(upper bound) and Offline RL (lower bound).\n\nFig.6 — This plot shows the comparison between baselines and the turn-based procedure in terms of average reward (the higher,\nthe better) as the size of the collected data used to train the algorithm offline grows. To obtain this figure,\nwe have run each of the algorithms for 30 seeds. For the optimal policy we run Q-iteration, while for the rest we\napplied CQL with fixed alpha=0. For each run, CQL was fitted for 300 iterations.\nConclusions and Future Work\nIn this blog post we have presented a practical approach you could use to address cases where you have temporary\nand limited access to an environment, and you have computational resources at your disposal to train your RL algorithm\n“offline” only.\nIn fact, the proposed solution falls halfway between Online RL and Offline RL: our agent is warmed up\nby training it via Offline RL on a dataset generated by running the uniform random policy and then\nsubsequently improved by accessing the environment in “turns”, thus partially simulating what you would get on a\nstandard online RL scenario.\nIn particular, we show that:\nThe turn-based procedure is effective since the policy learned in subsequent turns consistently improves as\nturns increase, matching the expectations. This result is demonstrated through some visualizations, showing how\nthe agent chooses a better and faster path to target turn after turn.\nThe turn-based procedure allows getting an agent that is better than a random one, even after a small number of turns.\nThe performance of the turn-based agent will be upper-bounded by the performance of the optimal policy.\nMoreover, we provide an easy-to-understand framework to prove the aforementioned hypothesis.\nFinally, we want to point out some limitations of our work that could be addressed as future work:\nFrom one turn to the other, we pick the “best policy” as the one that achieves the best performance between all\nthe runs via the “max” operator. This single policy is then propagated through the algorithm and used to generate\nthe best new extension of the dataset. The inherent limitation of this approach is that by using the “max” we are\nnot robust to the noise and we do not account for fluctuations in the performance of the Offline RL algorithm.\nA better approach would be aggregating policies by doing, for example, an ensemble of policies, and using this\nas the selected policy that is propagated forward in the algorithm.\nRunning a fixed Offline RL algorithm on a dataset that keeps changing its distribution of states and actions\nin time could be really challenging since a lot of algorithms in the literature require accurate hypertuning\nof the parameters. In future work, we would like to address this problem, proposing, for example, a way one\ncould compute new hyper-parameters using the dataset size and some other properties as parameters for the computation.\nOne could argue that our hypothesis can work only on simplistic environments like GridWorlds.\nEven though we tested different configurations of grids, stressing more or less the algorithms,\nwe admit that a more complete work would require the re-visitation of our hypothesis on a more diverse\nsuite of environments. We plan to investigate this in the future.","guid":"https://blog.allegro.tech/2022/04/turn-based-offline-rl.html","categories":["tech","mlr","rl","research"],"isoDate":"2022-04-13T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"}],"jobs":[{"id":"743999810853837","name":"Research Engineer - Machine Learning (Computer Vision)","uuid":"98abcad8-b820-4402-85a6-b6b6e03cfdaa","refNumber":"REF2880R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2022-03-09T12:55:28.000Z","location":{"city":"Warszawa, Kraków, Poznań, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"606235fe248e6f5bea0815ed","fieldLabel":"Katowice","valueId":"185eb5a9-b884-4ee8-8ebc-0e5f3e852b27","valueLabel":"Tak"},{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"606235bcefbac7156d6a470a","fieldLabel":"Łódź","valueId":"7d33e23d-3fa7-4d7d-86ae-7d7caff54fa9","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"6165609ee6b46b6506c66b63","fieldLabel":"Gdańsk","valueId":"cde0f8e7-5c9d-4d78-9f5c-e1c17ee499a8","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61656102a169ed164d546c31","fieldLabel":"Lublin","valueId":"02d54f00-48b9-4669-b7b3-10c16ac4bada","valueLabel":"Tak"},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"CV, Computer Vision, ML, AI, DS, Machine Learning, PyTorch, Python, Deep Learning"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999810853837","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999785421861","name":"Research Engineer - Machine Learning (Ranking and Recommendations)","uuid":"a6b2b59e-28e3-4bfa-89ab-b13ab97f06c8","refNumber":"REF2990T","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-11-08T09:54:52.000Z","location":{"city":"Warszawa, Poznań, Kraków, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"b8a4596e-d9ce-42bb-8de5-10995e9ccf99","valueLabel":"IT - Machine Learning"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, AI, Ranking, Research, Machine Learning"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999785421861","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999779448676","name":"Research Engineer - Machine Learning (Ranking and Recommendations)","uuid":"7cb35dfc-f53c-4b51-81ac-61b683060f4c","refNumber":"REF2990T","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2021-10-14T10:29:00.000Z","location":{"city":"Warszawa, Poznań, Kraków, Toruń, Wrocław, Gdańsk, Katowice, Łódź, Lublin","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572821","label":"IT - Machine Learning"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c1575ee4b01d4b19ddf797","fieldLabel":"Kraków","valueId":"2cfcfcc1-da44-43f7-8eaa-3907faf2797c","valueLabel":"Tak"},{"fieldId":"58c158e9e4b0614667d5973e","fieldLabel":"Więcej lokalizacji","valueId":"3a186e8d-a82c-4955-af81-fcef9a63928a","valueLabel":"Tak"},{"fieldId":"58c1576ee4b0614667d59732","fieldLabel":"Toruń","valueId":"987e8884-bad1-4a8f-b149-99e4184cc221","valueLabel":"Tak"},{"fieldId":"58c156e6e4b01d4b19ddf793","fieldLabel":"Warszawa","valueId":"6a428533-1586-4372-89ec-65fb45366363","valueLabel":"Tak"},{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"b8a4596e-d9ce-42bb-8de5-10995e9ccf99","valueLabel":"IT - Machine Learning"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Proces rekrutacji","valueId":"c807eec2-8a53-4b55-b7c5-c03180f2059b","valueLabel":"(Archive) IT Allegro"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c15788e4b0614667d59733","fieldLabel":"Błonie","valueId":"25f6cb8c-81b3-434a-93ec-6dc851d5808d","valueLabel":"Nie"},{"fieldId":"58c15798e4b01d4b19ddf79b","fieldLabel":"Wrocław","valueId":"64818201-cdba-422e-8e8c-8ec633b0d327","valueLabel":"Tak"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572821","valueLabel":"IT - Machine Learning"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"58c156b9e4b01d4b19ddf792","fieldLabel":"Poznań","valueId":"ac20917b-cb6a-4280-aff3-4fae2532a33e","valueLabel":"Tak"},{"fieldId":"5cdab2c84cedfd0006e7758c","fieldLabel":"Key words","valueLabel":"ML, AI, Ranking, Research, Machine Learning"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999779448676","creator":{"name":"Maciej Matwiejczyk"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}}],"events":[{"created":1657193453000,"duration":7200000,"id":"287035383","name":"Allegro Tech Labs #10 Online: Poskromić stan w React","date_in_series_pattern":false,"status":"upcoming","time":1658415600000,"local_date":"2022-07-21","local_time":"17:00","updated":1657193565000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":23,"is_online_event":false,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/287035383/","description":"❗NA WYDARZENIE OBOWIĄZUJE REJESTRACJA: Liczba miejsc jest organiczona: [https://app.evenea.pl/event/allegro-tech-labs-10/](https://app.evenea.pl/event/allegro-tech-labs-10/?fbclid=IwAR1Zj3sIcfx3WEWiFfS_hgiW6BJQD6stYouSGuSqfxDq9YVeom8fTFcrE1Q) ❗ **Allegro Tech Labs** to w 100% zdalna odsłona naszych stacjonarnych spotkań warsztatowych. Zazwyczaj spotykaliśmy się…","visibility":"public","member_pay_fee":false},{"created":1655131243000,"duration":5400000,"id":"286545395","name":"Allegro Tech Live #29 - Wyzwania Product Managera","date_in_series_pattern":false,"status":"past","time":1656604800000,"local_date":"2022-06-30","local_time":"18:00","updated":1656612323000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":88,"is_online_event":false,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/286545395/","description":"Allegro Tech Live to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Zazwyczaj spotykaliśmy się w naszych biurach, ale tym razem to my…","visibility":"public","member_pay_fee":false},{"created":1650552918000,"duration":100800000,"id":"285416318","name":"UX Research Confetti - II edycja","date_in_series_pattern":false,"status":"past","time":1653562800000,"local_date":"2022-05-26","local_time":"13:00","updated":1653666063000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":48,"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/285416318/","description":"REJESTRACJA NA WYDARZENIE -&gt; https://app.evenea.pl/event/ux-research-confetti-2/ 🎉 Niech ponownie rozsypie się confetti wiedzy o badaniach UX! 🎉 Szukaliśmy konferencji badawczej UX w Polsce i nie znaleźliśmy……","visibility":"public","member_pay_fee":false},{"created":1651656994000,"duration":7200000,"id":"285691203","name":"Allegro Tech Live #28 - Mobile: Architektura softu i architektura sprzętu","date_in_series_pattern":false,"status":"past","time":1652976000000,"local_date":"2022-05-19","local_time":"18:00","updated":1652985850000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":48,"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/285691203/","description":"**Allegro Tech Live** to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Kiedyś spotykaliśmy się w naszych biurach, a teraz to my gościmy…","visibility":"public","member_pay_fee":false}],"podcasts":[{"title":"S02E12 - Piotr Betkier - Rola architekta w Allegro","link":"https://podcast.allegro.tech/rola_architekta_w_allegro/","pubDate":"Wed, 16 Jun 2021 00:00:00 GMT","content":"Od kodowania do tworzenia strategii technicznej... Jak wygląda rola architekta w Allegro? Ile takich osób pracuje w naszej firmie i dlaczego ta rola jest tak różnorodna? Czym jest Andamio i jak rozwijamy naszą platformę – o tym wszystkim opowie Piotr Betkier – Inżynier, Architekt Platformy Technicznej w Allegro oraz twórca piosenek o IT :)","contentSnippet":"Od kodowania do tworzenia strategii technicznej... Jak wygląda rola architekta w Allegro? Ile takich osób pracuje w naszej firmie i dlaczego ta rola jest tak różnorodna? Czym jest Andamio i jak rozwijamy naszą platformę – o tym wszystkim opowie Piotr Betkier – Inżynier, Architekt Platformy Technicznej w Allegro oraz twórca piosenek o IT :)","guid":"https://podcast.allegro.tech/rola_architekta_w_allegro/","isoDate":"2021-06-16T00:00:00.000Z"},{"title":"S02E11 - Piotr Michoński - Infrastruktura Allegro","link":"https://podcast.allegro.tech/infrastruktura_Allegro/","pubDate":"Tue, 01 Jun 2021 00:00:00 GMT","content":"Jak jest zbudowane środowisko uruchomienia aplikacji Allegro? Jak działają serwerownie firmy i ile ich potrzeba, a które elementy Allegro działają w chmurze publicznej? Jak przebiegała transformacja w Allegro i co zmieniało się przez lata? Jak wzrost biznesu wpływa na wielkość infrastruktury i jak infrastruktura Allegro odczuła przyjście pandemii? O tym, a także o rozwoju liderów technologii w Allegro oraz o historii powstania dżingla do naszych podcastów, opowie Piotr Michoński - menadżer Zespołów tworzących infrastrukturę Allegro.","contentSnippet":"Jak jest zbudowane środowisko uruchomienia aplikacji Allegro? Jak działają serwerownie firmy i ile ich potrzeba, a które elementy Allegro działają w chmurze publicznej? Jak przebiegała transformacja w Allegro i co zmieniało się przez lata? Jak wzrost biznesu wpływa na wielkość infrastruktury i jak infrastruktura Allegro odczuła przyjście pandemii? O tym, a także o rozwoju liderów technologii w Allegro oraz o historii powstania dżingla do naszych podcastów, opowie Piotr Michoński - menadżer Zespołów tworzących infrastrukturę Allegro.","guid":"https://podcast.allegro.tech/infrastruktura_Allegro/","isoDate":"2021-06-01T00:00:00.000Z"},{"title":"S02E10 - Dariusz Eliasz - Praca architekta ekosystemu big data w Allegro","link":"https://podcast.allegro.tech/praca_architekta_ekosystemu_big_data_w_Allegro/","pubDate":"Thu, 20 May 2021 00:00:00 GMT","content":"Jak wygląda praca architekta ekosystemu big data w Allegro? Jakie zadania realizuje nasz zespół odpowiedzialny za narzędzia i infrastrukturę dla przetwarzania danych? Kiedy możemy mówić o dużych danych i ile petabajtów przetwarza Allegro? Skąd pochodzą dane Allegro i dlaczego jest ich tak dużo oraz z jakiego powodu dopiero teraz przenosimy się do chmury? O tym wszystkim opowie zdobywca statuetki Allegro Tech Hero - Dariusz Eliasz – Team Manager & Platform Architect w Allegro.","contentSnippet":"Jak wygląda praca architekta ekosystemu big data w Allegro? Jakie zadania realizuje nasz zespół odpowiedzialny za narzędzia i infrastrukturę dla przetwarzania danych? Kiedy możemy mówić o dużych danych i ile petabajtów przetwarza Allegro? Skąd pochodzą dane Allegro i dlaczego jest ich tak dużo oraz z jakiego powodu dopiero teraz przenosimy się do chmury? O tym wszystkim opowie zdobywca statuetki Allegro Tech Hero - Dariusz Eliasz – Team Manager & Platform Architect w Allegro.","guid":"https://podcast.allegro.tech/praca_architekta_ekosystemu_big_data_w_Allegro/","isoDate":"2021-05-20T00:00:00.000Z"},{"title":"S02E09 - Bartosz Gałek - Od inżyniera do lidera w Allegro","link":"https://podcast.allegro.tech/od_inzyniera_do_lidera_w_allegro/","pubDate":"Thu, 06 May 2021 00:00:00 GMT","content":"Czym jest Opbox i jakie wyzwania przed nim stoją? Jak w Allegro angażujemy się w rozwój kultury Open Source? Ile mamy projektów na GitHubie i jak świętujemy Hacktoberfest? W jaki sposób można rozwinąć się od inżyniera do lidera? Na te pytania w najnowszym Allegro Tech Podcast odpowie Bartek Gałek, Team Leader w Allegro.","contentSnippet":"Czym jest Opbox i jakie wyzwania przed nim stoją? Jak w Allegro angażujemy się w rozwój kultury Open Source? Ile mamy projektów na GitHubie i jak świętujemy Hacktoberfest? W jaki sposób można rozwinąć się od inżyniera do lidera? Na te pytania w najnowszym Allegro Tech Podcast odpowie Bartek Gałek, Team Leader w Allegro.","guid":"https://podcast.allegro.tech/od_inzyniera_do_lidera_w_allegro/","isoDate":"2021-05-06T00:00:00.000Z"}]},"__N_SSG":true}