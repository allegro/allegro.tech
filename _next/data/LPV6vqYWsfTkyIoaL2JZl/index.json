{"pageProps":{"posts":[{"title":"The Acrobatics of Switching Between Management and Engineering","link":"https://blog.allegro.tech/2023/08/management-engineering-acrobatics.html","pubDate":"Tue, 22 Aug 2023 00:00:00 +0200","authors":{"author":[{"name":["Michał Kosmulski"],"photo":["https://blog.allegro.tech/img/authors/michal.kosmulski.jpg"],"url":["https://blog.allegro.tech/authors/michal.kosmulski"]}]},"content":"<p>After six years as a Team Leader, I went back to hands-on engineering work, and I’m very happy about taking\nthis step. While it may appear surprising at first, it was a well-thought-out decision, and actually I’ve already\nperformed such a maneuver once before.</p>\n\n<h2 id=\"background\">Background</h2>\n\n<p>A few years ago I stumbled upon <a href=\"https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/\">The Engineer/Manager Pendulum</a>\nby Charity Majors, and the follow-up post <a href=\"https://charity.wtf/2019/01/04/engineering-management-the-pendulum-or-the-ladder/\">Engineering Management: The Pendulum Or The Ladder</a>.\nI found both pieces interesting, and quite in line with my own experiences: in my previous job some time earlier I\nhad been a team leader, but consciously joined <a href=\"https://allegro.tech\">Allegro</a> as a software engineer. After a while, I\nbecame a team leader again, and recently, another few years down the line, I went back to engineering yet again.</p>\n\n<p>Both above-mentioned posts make very good points, so I recommend you read them first. What I want to add on top of\nthem are my personal experiences and some tips on organizing a transition between a management and an individual\ncontributor role. The journey in the other direction (from developer to team leader) has been discussed in depth\nelsewhere, so I won’t delve into that.</p>\n\n<h2 id=\"why\">Why</h2>\n\n<p>Why would I want to switch between developer and team leader roles? The problem is they are both interesting and have\n<a href=\"/2019/06/allegro-culture-tech-leaders-meeting.html\">their own highlights</a>, but you can’t do both at the\nsame time. When you become a manager, not only do you have less time for technical tasks, but you also pretty much\nlose the ability to focus on these tasks even if you do find a time slot. This is because, like it or not, you end\nup with a <a href=\"http://www.paulgraham.com/makersschedule.html\">manager’s schedule</a>.</p>\n\n<p><img src=\"/img/articles/2023-08-22-management-engineering-acrobatics/flying-trapeze-performers.jpg\" alt=\"Circus performers on the flying trapeze, Public Domain image from https://commons.wikimedia.org/wiki/File:Programma_van_Circus_Krone_in_Rotterdam_drie_Alizes_,_vliegende_trapeze_met_o.a.,_Bestanddeelnr_910-4372.jpg\" class=\"small-image\" /></p>\n\n<p>Over time, your technical skills start deteriorating, and if you miss the right moment, you may find yourself at\na point of no return. Like a circus artist on a flying trapeze, you have to time your actions right to avoid\ndisaster. I think this metaphor fits the situation better than that of the pendulum, which moves in its own rhythm,\nindependent of external influences.</p>\n\n<p>Obviously, you need to ask yourself whether you actually want to prevent your technical skills from deteriorating. Some\npeople move on to management, wave goodbye to getting their hands dirty, and are completely fine with that. Some tinker\nwith technology in their spare time. As for me, I like technology and would not only prefer to not lose what I have\nlearned so far, but actually want to learn something new. However, due to a number of other hobbies and already\nspending more time in front of the screen than I would like, doing tech in the afternoons was not a viable option for\nme. Hence, the decision to make technology an important part of my job again.</p>\n\n<h2 id=\"how\">How</h2>\n\n<p>A crucial factor to take into account when planning such a change is that it will take time. If you take your\nteam seriously, you can’t just disappear overnight. You need to think ahead. Do not ask yourself “have I already\nlost my tech skills beyond repair?”. Ask yourself “how will my tech skills be a year from now?”.</p>\n\n<p>Also, keep a cool head. Just as when moving in the opposite direction, from engineer to manager, consider all\nconsequences, both positive and negative. It has been repeated many times that becoming a manager is not a promotion\n(being a lateral move to another career path), but in practice sometimes it is. In particular, it may come with a\nhigher level or salary. Make sure you check all details of your target role in order to avoid unpleasant surprises when\ngoing back. In my case, I was aiming for the Principal Software Engineer role, which is the same level as the Team\nLeader role at Allegro, so there were no issues in this regard.</p>\n\n<p>When I started thinking about making the switch, once I had a rough idea of what I wanted, I talked to my superior.\nThis was an important step: it allowed him to plan ahead, and also to look for opportunities for making the\nreorganization easier. Some elements of the process would depend only on our actions, but some, such as finding a good\nreplacement team leader, would also depend on a number of factors outside our control. Knowing that my boss understood\nmy need, and supported it, mattered a lot, and made the wait and preparations easier.</p>\n\n<p>Chance favors the prepared mind, as Louis Pasteur supposedly said. There happened to be a team leader in\nanother part of the company who was thinking about moving on to a different area. Thanks to being aware of my plan,\nmy boss was able to grab the chance, and we had a perfect match. We discussed with the potential new leader the team\nand the project, and he found them interesting. We planned a transition period, as short as possible, but long enough\nfor me to transfer to him a reasonable part of my knowledge about the team and its work.</p>\n\n<p>Now that we had a specific plan, we could tell the team. It was important to let everyone know as soon as possible, but\nnot before we had a specific plan. Without it, this information would only stir uncertainty. Apart\nfrom telling the team as a whole, I also talked to each person individually, in order to resolve any questions or doubts\nand to try to reduce any problems resulting from the transition as much as possible.</p>\n\n<p>Waiting for the switch date, we kept meeting online with the new leader, transferring knowledge and preparing him for\nworking with the team. There’s actually quite a lot of stuff a leader needs to know: not only how the project\nworks on technical and business levels, but also current plans, who the stakeholders are and how to work with them,\nand each team member’s individual strengths and development plan. The new leader himself also started meeting\npeople he would now work with, both team members and our product’s stakeholders, and attending team meetings such as\nthe daily stand-up. Despite gradually moving on to other tasks after the switch date, I was still available to clarify\nany doubts, and our boss would also help out when necessary, so the new leader knew he would not be left on his own.\nWhile it required quite a bit of work, the switch went smoothly, and we didn’t notice any serious disturbance to the\nteam’s functioning.</p>\n\n<h2 id=\"the-aftermath\">The Aftermath</h2>\n\n<p>It’s been several months since the switch now. Me changing back to a technical role has certainly required extra work,\nfor me, my boss, and the new team leader. Despite our best efforts, it probably put a little extra strain on the team as\nwell. Nonetheless, I think it was a win-win, even more so thanks to us being able to spot and exploit a happy\ncoincidence. I am glad to be closer to technology again, and the new leader also got to try something new, just as he\nwanted.</p>\n\n<p>There is one more subtle advantage to the whole process. When people leave the team, some knowledge inevitably gets\nlost. One of the reasons is <em>tacit knowledge</em>: there are always things you know, but are not aware of knowing. You can\nuse this knowledge when it’s needed, but you will probably not transfer it to others because you are not even aware of\nits existence in the first place. Removing someone from the team in a controlled manner as happened here (and being\nstill able to reach out to them if needed) causes such latent knowledge to be discovered, and once discovered, to be\npropagated. This causes a little disruption short-term, but in the long run it reduces\n<a href=\"https://en.wikipedia.org/wiki/Information_silo\">knowledge silos</a> and increases the\n<a href=\"https://en.wikipedia.org/wiki/Bus_factor\">bus factor</a>.</p>\n\n<p>When I first started thinking about going back to hands-on technical work for the second time, I had some doubts about\nhow much my technical skills had already deteriorated and how difficult it would be to go back. It seems I made it, but\nnot by much. Had I delayed by one more year, I might have really struggled. It’s not a matter of knowledge: theory,\nespecially generic things that do not change that fast with technology, is not lost so quickly. Also, while a team\nleader, I tried to stay in touch with technology by taking part in task refinement, architecture discussions, on-call\nrotation, etc.</p>\n\n<p>However, I really felt, and to some degree still feel, a difference in practical, hands-on work, such as actually\nwriting code. There are many small quirks that you need to be aware of in order to accomplish things quickly that you\ndon’t even notice if you use them every day and know inside-out. Knowing all the little useful tools, the less often\nused features of your IDE, or what to do when something breaks unexpectedly, make a world of a difference, but this\npractical knowledge gets lost when not used and I had to rebuild it almost from scratch. Another thing that I still\nexperience is the difficulty in focusing on a single topic. Working on a manager’s schedule for several years has taken\nits toll, and now that I often have large contiguous blocks of time, I find myself not using them as effectively as I\ncould, because I have become accustomed to always doing multiple things at once and without a chance to stay focused\nanyway. It’s gradually getting better, but I still feel the impact, and this is probably my biggest surprise of the\nwhole process.</p>\n\n<h2 id=\"about-the-principal-software-engineer-role\">About the Principal Software Engineer role</h2>\n\n<p>My current role is that of Principal Software Engineer (PSE). It is a relatively new addition to the junior, mid,\nand senior roles we’ve had so far. It has gone through a number of revisions, and is still evolving. Most people in this\nrole come from a Senior Software Engineer background, so my case of getting there after being a Team Leader is a bit\nuntypical. At many companies, roles like this are called Staff Software Engineer or similar. While still an individual\ncontributor role, a PSE differs from a senior in several ways.</p>\n\n<p>First of all, a PSE is expected to spend significant time on topics whose scope is much larger than a single team can\nhandle. Seniors can also do this, but it’s not a requirement for them. Such topics may be area-wide, such as planning a\nmajor change to a single subsystem’s architecture, or have a company-wide scope. Much work on this level consists of\ncoming up with ideas and discussing them while implementation is often left to others. So, while still technical, this\nrole encompasses less coding than that of a senior. Not very surprising given that generally moving up the career ladder\nmeans more coming up with ideas, teaching others, and planning work, while coding less yourself.</p>\n\n<p>Secondly, a PSE should be very autonomous. Most PSEs are not members of regular development teams since they move from\ntask to task depending on where they can help most. This means you cooperate with more people from different parts of\nthe company, but you don’t have the few peers you work with every day that most people have. You don’t get a backlog\nof tasks to work on, but have to plan your work yourself. People do come to you, asking for support or doing something\nfor their project, but that’s just one of many inputs.</p>\n\n<p>Thirdly, since there are few PSEs compared to other positions, for each person the role is a little different. On one\nhand this means you can’t fully know what to expect when you start. On the other, you get to shape the role yourself,\nand personally I enjoy this flexibility.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>I think the idea of swinging back and forth between engineering and management described in\n<a href=\"https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/\">The Engineer/Manager Pendulum</a>,\nis valid, and my own experience backs it up fully. One element which I want to additionally stress, however, is that\nthe switch is more like a flying trapeze than a pendulum: timing is crucial, and missing the right moment can have\nserious consequences. Becoming a Principal Software Engineer was a unique experience, both on a technical\nlevel and as my de facto last task as a team leader. Who knows what the future holds? Perhaps some time from now I’ll\ntake another swing on the flying trapeze and go back to management?</p>\n","contentSnippet":"After six years as a Team Leader, I went back to hands-on engineering work, and I’m very happy about taking\nthis step. While it may appear surprising at first, it was a well-thought-out decision, and actually I’ve already\nperformed such a maneuver once before.\nBackground\nA few years ago I stumbled upon The Engineer/Manager Pendulum\nby Charity Majors, and the follow-up post Engineering Management: The Pendulum Or The Ladder.\nI found both pieces interesting, and quite in line with my own experiences: in my previous job some time earlier I\nhad been a team leader, but consciously joined Allegro as a software engineer. After a while, I\nbecame a team leader again, and recently, another few years down the line, I went back to engineering yet again.\nBoth above-mentioned posts make very good points, so I recommend you read them first. What I want to add on top of\nthem are my personal experiences and some tips on organizing a transition between a management and an individual\ncontributor role. The journey in the other direction (from developer to team leader) has been discussed in depth\nelsewhere, so I won’t delve into that.\nWhy\nWhy would I want to switch between developer and team leader roles? The problem is they are both interesting and have\ntheir own highlights, but you can’t do both at the\nsame time. When you become a manager, not only do you have less time for technical tasks, but you also pretty much\nlose the ability to focus on these tasks even if you do find a time slot. This is because, like it or not, you end\nup with a manager’s schedule.\n\nOver time, your technical skills start deteriorating, and if you miss the right moment, you may find yourself at\na point of no return. Like a circus artist on a flying trapeze, you have to time your actions right to avoid\ndisaster. I think this metaphor fits the situation better than that of the pendulum, which moves in its own rhythm,\nindependent of external influences.\nObviously, you need to ask yourself whether you actually want to prevent your technical skills from deteriorating. Some\npeople move on to management, wave goodbye to getting their hands dirty, and are completely fine with that. Some tinker\nwith technology in their spare time. As for me, I like technology and would not only prefer to not lose what I have\nlearned so far, but actually want to learn something new. However, due to a number of other hobbies and already\nspending more time in front of the screen than I would like, doing tech in the afternoons was not a viable option for\nme. Hence, the decision to make technology an important part of my job again.\nHow\nA crucial factor to take into account when planning such a change is that it will take time. If you take your\nteam seriously, you can’t just disappear overnight. You need to think ahead. Do not ask yourself “have I already\nlost my tech skills beyond repair?”. Ask yourself “how will my tech skills be a year from now?”.\nAlso, keep a cool head. Just as when moving in the opposite direction, from engineer to manager, consider all\nconsequences, both positive and negative. It has been repeated many times that becoming a manager is not a promotion\n(being a lateral move to another career path), but in practice sometimes it is. In particular, it may come with a\nhigher level or salary. Make sure you check all details of your target role in order to avoid unpleasant surprises when\ngoing back. In my case, I was aiming for the Principal Software Engineer role, which is the same level as the Team\nLeader role at Allegro, so there were no issues in this regard.\nWhen I started thinking about making the switch, once I had a rough idea of what I wanted, I talked to my superior.\nThis was an important step: it allowed him to plan ahead, and also to look for opportunities for making the\nreorganization easier. Some elements of the process would depend only on our actions, but some, such as finding a good\nreplacement team leader, would also depend on a number of factors outside our control. Knowing that my boss understood\nmy need, and supported it, mattered a lot, and made the wait and preparations easier.\nChance favors the prepared mind, as Louis Pasteur supposedly said. There happened to be a team leader in\nanother part of the company who was thinking about moving on to a different area. Thanks to being aware of my plan,\nmy boss was able to grab the chance, and we had a perfect match. We discussed with the potential new leader the team\nand the project, and he found them interesting. We planned a transition period, as short as possible, but long enough\nfor me to transfer to him a reasonable part of my knowledge about the team and its work.\nNow that we had a specific plan, we could tell the team. It was important to let everyone know as soon as possible, but\nnot before we had a specific plan. Without it, this information would only stir uncertainty. Apart\nfrom telling the team as a whole, I also talked to each person individually, in order to resolve any questions or doubts\nand to try to reduce any problems resulting from the transition as much as possible.\nWaiting for the switch date, we kept meeting online with the new leader, transferring knowledge and preparing him for\nworking with the team. There’s actually quite a lot of stuff a leader needs to know: not only how the project\nworks on technical and business levels, but also current plans, who the stakeholders are and how to work with them,\nand each team member’s individual strengths and development plan. The new leader himself also started meeting\npeople he would now work with, both team members and our product’s stakeholders, and attending team meetings such as\nthe daily stand-up. Despite gradually moving on to other tasks after the switch date, I was still available to clarify\nany doubts, and our boss would also help out when necessary, so the new leader knew he would not be left on his own.\nWhile it required quite a bit of work, the switch went smoothly, and we didn’t notice any serious disturbance to the\nteam’s functioning.\nThe Aftermath\nIt’s been several months since the switch now. Me changing back to a technical role has certainly required extra work,\nfor me, my boss, and the new team leader. Despite our best efforts, it probably put a little extra strain on the team as\nwell. Nonetheless, I think it was a win-win, even more so thanks to us being able to spot and exploit a happy\ncoincidence. I am glad to be closer to technology again, and the new leader also got to try something new, just as he\nwanted.\nThere is one more subtle advantage to the whole process. When people leave the team, some knowledge inevitably gets\nlost. One of the reasons is tacit knowledge: there are always things you know, but are not aware of knowing. You can\nuse this knowledge when it’s needed, but you will probably not transfer it to others because you are not even aware of\nits existence in the first place. Removing someone from the team in a controlled manner as happened here (and being\nstill able to reach out to them if needed) causes such latent knowledge to be discovered, and once discovered, to be\npropagated. This causes a little disruption short-term, but in the long run it reduces\nknowledge silos and increases the\nbus factor.\nWhen I first started thinking about going back to hands-on technical work for the second time, I had some doubts about\nhow much my technical skills had already deteriorated and how difficult it would be to go back. It seems I made it, but\nnot by much. Had I delayed by one more year, I might have really struggled. It’s not a matter of knowledge: theory,\nespecially generic things that do not change that fast with technology, is not lost so quickly. Also, while a team\nleader, I tried to stay in touch with technology by taking part in task refinement, architecture discussions, on-call\nrotation, etc.\nHowever, I really felt, and to some degree still feel, a difference in practical, hands-on work, such as actually\nwriting code. There are many small quirks that you need to be aware of in order to accomplish things quickly that you\ndon’t even notice if you use them every day and know inside-out. Knowing all the little useful tools, the less often\nused features of your IDE, or what to do when something breaks unexpectedly, make a world of a difference, but this\npractical knowledge gets lost when not used and I had to rebuild it almost from scratch. Another thing that I still\nexperience is the difficulty in focusing on a single topic. Working on a manager’s schedule for several years has taken\nits toll, and now that I often have large contiguous blocks of time, I find myself not using them as effectively as I\ncould, because I have become accustomed to always doing multiple things at once and without a chance to stay focused\nanyway. It’s gradually getting better, but I still feel the impact, and this is probably my biggest surprise of the\nwhole process.\nAbout the Principal Software Engineer role\nMy current role is that of Principal Software Engineer (PSE). It is a relatively new addition to the junior, mid,\nand senior roles we’ve had so far. It has gone through a number of revisions, and is still evolving. Most people in this\nrole come from a Senior Software Engineer background, so my case of getting there after being a Team Leader is a bit\nuntypical. At many companies, roles like this are called Staff Software Engineer or similar. While still an individual\ncontributor role, a PSE differs from a senior in several ways.\nFirst of all, a PSE is expected to spend significant time on topics whose scope is much larger than a single team can\nhandle. Seniors can also do this, but it’s not a requirement for them. Such topics may be area-wide, such as planning a\nmajor change to a single subsystem’s architecture, or have a company-wide scope. Much work on this level consists of\ncoming up with ideas and discussing them while implementation is often left to others. So, while still technical, this\nrole encompasses less coding than that of a senior. Not very surprising given that generally moving up the career ladder\nmeans more coming up with ideas, teaching others, and planning work, while coding less yourself.\nSecondly, a PSE should be very autonomous. Most PSEs are not members of regular development teams since they move from\ntask to task depending on where they can help most. This means you cooperate with more people from different parts of\nthe company, but you don’t have the few peers you work with every day that most people have. You don’t get a backlog\nof tasks to work on, but have to plan your work yourself. People do come to you, asking for support or doing something\nfor their project, but that’s just one of many inputs.\nThirdly, since there are few PSEs compared to other positions, for each person the role is a little different. On one\nhand this means you can’t fully know what to expect when you start. On the other, you get to shape the role yourself,\nand personally I enjoy this flexibility.\nSummary\nI think the idea of swinging back and forth between engineering and management described in\nThe Engineer/Manager Pendulum,\nis valid, and my own experience backs it up fully. One element which I want to additionally stress, however, is that\nthe switch is more like a flying trapeze than a pendulum: timing is crucial, and missing the right moment can have\nserious consequences. Becoming a Principal Software Engineer was a unique experience, both on a technical\nlevel and as my de facto last task as a team leader. Who knows what the future holds? Perhaps some time from now I’ll\ntake another swing on the flying trapeze and go back to management?","guid":"https://blog.allegro.tech/2023/08/management-engineering-acrobatics.html","categories":["tech","coding","management","developer","team leader","career path"],"isoDate":"2023-08-21T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"From 3TB to 100GB: A Cost-Saving Journey in Database Maintenance","link":"https://blog.allegro.tech/2023/07/save-money-on-large-database.html","pubDate":"Mon, 10 Jul 2023 00:00:00 +0200","authors":{"author":[{"name":["Mateusz Stolecki"],"photo":["https://blog.allegro.tech/img/authors/mateusz.stolecki.jpg"],"url":["https://blog.allegro.tech/authors/mateusz.stolecki"]}]},"content":"<p>In the era of ubiquitous cloud services and an increasingly growing PaaS and serverless-oriented approach, performance\nand resources seem to be becoming less and less important.\nAfter all, we can scale horizontally and vertically at any time, without worrying about potential performance challenges\nthat the business may introduce.</p>\n\n<p>However, there is also another side to the coin – rising costs. While it can be argued that in many situations it is simply\ncheaper to add another instance of the service than to engage a developer who will work tirelessly to diagnose\nand optimize performance problems, the problem will persist and intensify as the business and its requirements grow.</p>\n\n<p>A similar situation arises with databases. We often store huge amounts of data for auditing or historical purposes.\nWhile the cost of maintaining such databases is negligible at a small scale,\nover time it can become a notable burden on our budget.</p>\n\n<p>I wanted to talk about such a case and how we managed to reduce the cost of maintaining a database nearly 30-fold.</p>\n\n<h2 id=\"the-problem\">The problem</h2>\n<p>As the amount of data grows, the need for scaling arises. In the case of <strong>Azure</strong> services, scaling also has its <a href=\"https://learn.microsoft.com/en-us/azure/azure-sql/database/purchasing-models?view=azuresql\">limitations</a>.\nIt is not always possible to infinitely increase the available disk space without scaling other resources (CPU, RAM, I/O).\nIn our case, this limit became apparent when we exceeded 1TB of data. Our database was based on the vCore model,\nwhere we used <strong>4 vCores</strong>.</p>\n\n<p>Unfortunately, this number of vCores limited the available disk space to <strong>1TB</strong>. Due to the increase in the number of users\nand the demand for disk space, we needed more resources. We continued to scale up, adding not only more disk resources\nbut also computational resources (I will mention that at this point we reached a scale of <strong>3TB</strong> of data, which requires\nat least <strong>12 vCores</strong>). At some point, the cost of maintaining the database amounted to several thousand euros.\nThis prompted us to look for solutions.</p>\n\n<p>Comparing the cost of storing substantial amounts of data within <strong>Azure SQL</strong> and <strong>Storage Account</strong>\n(especially blobs in the <strong>archive</strong> tier), we concluded that we could achieve significant cost reduction\nby archiving old/unused data and placing it in a cost-optimized container.</p>\n\n<h3 id=\"monthly-cost-of-storing-3tb-of-data\">Monthly cost of storing 3TB of data</h3>\n\n<table>\n  <tr>\n    <th>Azure SQL 12vCore 3TB</th>\n    <th>Storage Account Archive tier</th>\n  </tr>\n  <tr>\n    <td>$2,876.18</td>\n    <td>$31.12</td>\n  </tr>\n</table>\n\n<h2 id=\"analysis\">Analysis</h2>\n<p>After some investigation, It turned out that significant part of data could be safely archived,\nwhich would certainly provide\npotential savings and eliminate the problem of an overgrown database. Most of this data was actually historical.</p>\n\n<p>We implemented a solution that allows for much more scalable data archiving\nby asynchronously loading data into the warehouse.\nHowever, data from before the implementation of aforementioned solution were still generating considerable storage costs.</p>\n\n<p>The idea seemed simple both in concept and execution. However, we immediately encountered several problems.\nExporting such massive amounts of data is a time-consuming process and puts a heavy load on the database\ncausing responsiveness issues.</p>\n\n<p>Dealing with a production system, we could not reduce the reliability and availability of services.\nIn addition, the export functionality offered by the Azure portal is limited to databases up to <strong>200GB</strong> in size,\nwhich meant that we had to look for another solution.</p>\n\n<h2 id=\"action-plan\">Action plan</h2>\n<h3 id=\"concept\">Concept</h3>\n<p>As it turned out, there are ways to export even huge databases. After some investigation,\nwe found the <strong>SQL Package</strong> tool.\nIt provides <strong>export</strong> option and is great for solving aforementioned problem. It is able to produce a <code class=\"language-plaintext highlighter-rouge\">bacpac</code>\nfile that contains highly compressed content of the database.\nThe tool also allows you to restore data at any time using the <strong>import</strong> operation,\nif there is ever a need to review it, for example for audit purposes.</p>\n\n<p>The next step is to copy the file to the container in the Storage Account using the <strong>AzCopy</strong> tool and ensure\nthat it is stored in the <strong>ARCHIVE</strong> tier, what will massively reduce the costs of maintaining it.</p>\n\n<p>The final stage is to delete unnecessary data from the database, then <strong>SHRINK</strong> it, what will reduce database resources.</p>\n<h3 id=\"script-and-tools\">Script and tools</h3>\n<p>To export and archive the database, we used two tools provided by Microsoft: <a href=\"https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage?view=sql-server-ver16\">SQL Package</a>\nand <a href=\"https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-v10\">AzCopy</a>.</p>\n\n<p>After analyzing their documentation, we prepared the appropriate procedure taking\ninto account performance and operation duration.</p>\n<h3 id=\"infrastructure\">Infrastructure</h3>\n<p>Due to the fact that the export and upload process to the Storage Account container with this amount of data may take\na long time, we decided to set up a temporary <strong>VM</strong> with the accelerated networking option, which served us\nto execute all required scripts. It should be mentioned that the need to set up a dedicated virtual machine also arises\nfrom the fact that it must be located in an internal network, where it is also possible to connect to the machine that\nhandles the database. Thanks to meeting this condition,\nit was possible to successfully connect to the database and perform the export operation.</p>\n\n<p>The virtual machine turned out to be moderately priced, as all performed operations were not computationally demanding\n(both CPU and RAM usage were low), what allowed us to use a very resource-efficient machine. The only notable extension\nof its functionality is <strong>accelerated networking</strong>, as it must work with data transfer over the network\nand we needed good performance.</p>\n\n<h2 id=\"testing\">Testing</h2>\n<h3 id=\"optimization\">Optimization</h3>\n<p>Before we proceeded with the implementation in the production environment, we conducted a series of\ntests using test environments. They mainly involved running all the steps of the process using\ndata packages of approximately <strong>50GB</strong> and <strong>200GB</strong> in size.\nWe spent the majority of time testing and optimizing the use of the SQL Package tool.</p>\n\n<p>Our goal was to shorten the export time and obtain an optimal size for the resulting file,\nso it would not generate excessive costs due to the need to store it. We tested several scenarios\n(mostly by manipulating the <strong>compression level</strong> parameter).</p>\n\n<p>Compression in <strong>FAST</strong> mode showed an average of 10-20% faster export time than <strong>MAXIMUM</strong>, with the resulting file\nsize varying within &lt;10%.</p>\n\n<h3 id=\"performance-testing\">Performance testing</h3>\n<p>We also tested the load on the databases in each environment.\n<strong>Data IO</strong> and <strong>CPU</strong> load were tested using the test environment relying on DTU-based infrastructure utilising <strong>100 DTU</strong>\nunits.</p>\n\n<p>Data IO\n<img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-test-dev-iops.png\" alt=\"Data IO\" /></p>\n\n<p>CPU\n<img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-test-dev-cpu.png\" alt=\"CPU\" /></p>\n\n<p>Notice, that the export operation primarily consumes IO resources.</p>\n<h3 id=\"data-import\">Data Import</h3>\n<p>Due to the possible need to reuse archived data, we had to make sure that the data we imported was suitable for re-import.</p>\n\n<p>Initially, we attempted to import the data using the <strong>SQL Server Management Studio</strong> tool provided by Microsoft.\nUnfortunately, this attempt failed due to errors related to file reading during the import operation.\nWe made an additional attempt to import the archive using the SQL Package tool, which, in addition to the export option,\nalso provides import options.</p>\n\n<p>Command</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlpackage /Action:Import `\n        /tsn:$ServerName `\n        /tdn:$DatabaseName `\n        /tu:$SqlAdminName `\n        /tp:$SqlAdminPassword `\n        /tec:true `\n        /ttsc:false `\n        /d:true `\n        /sf:$SourceFile `\n        /p:CommandTimeout=999 `\n        /p:LongRunningCommandTimeout=0 `\n        /p:DatabaseLockTimeout=-1 `\n</code></pre></div></div>\n\n<p>solved the problem.</p>\n\n<h2 id=\"deployment\">Deployment</h2>\n<h3 id=\"exporting-the-database-using-sql-package-tool\">Exporting the database using SQL Package tool</h3>\n<p>The following script was executed, successfully extracting data from the database and creating the appropriate <code class=\"language-plaintext highlighter-rouge\">bacpac</code> file.\nAs a result, we received a compressed file of around 100GB.\nIt is worth pointing out that data in the database occupied about 3TB, so compression was very efficient.\nThe whole process took several hours.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlpackage\n    /Action:Export `\n    /ssn:$ServerName `\n    /sdn:$DatabaseName `\n    /su:$SqlAdminName `\n    /sp:$SqlAdminPassword `\n    /sec:true `\n    /stsc:false `\n    /tf:$TargetFile `\n    /p:CompressionOption=Fast `\n    /p:CommandTimeout=999 `\n    /p:LongRunningCommandTimeout=0 `\n    /p:DatabaseLockTimeout=-1 `\n    /p:TempDirectoryForTableData=$TempDirectory `\n    /d:true `\n    /df:$SqlLogs `\n</code></pre></div></div>\n\n<p>Many parameters of this operation were evaluated during trials on test environments.\nThe particularly important ones are:</p>\n<ul>\n  <li><strong>CommandTimeout, LongRunningCommandTimeout, DatabaseLockTimeout</strong> - This set of\nparameters ensures that the connection\nis maintained throughout the entire duration of the export operation (assuming that it will be long-running).</li>\n  <li><strong>CompressionOption</strong> - The degree of data compression in the output file.\nTwo variants were tested:\n<strong>FAST</strong> and <strong>MAXIMUM</strong>.\n<strong>FAST</strong> allowed us to shorten the export time by about 2 hours while showing only slightly lower\ndata compression (in our case, the difference was around 10%).</li>\n</ul>\n\n<div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">/p:TableData</span><span class=\"o\">=</span><span class=\"s2\">\"dbo.TestTable\"</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>The parameter allows us to limit the data export only to the tables selected by us, what significantly shortens\nthe overall operation time. It is also worth mentioning that it is possible to set the parameter multiple times.</p>\n\n<p>Since the export was launched at night, the procedure had no negative impact on users. The impact of the\nexport operation on the database load (Data I/O percentage) is presented in the graph below. It can be observed that\nthe resource load increased during this operation.</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-export-iops.png\" alt=\"Data IO\" /></p>\n\n<h3 id=\"copying-the-archived-database-using-azcopy\">Copying the archived database using AzCopy</h3>\n<p>The following script was executed to copy the exported file to the Storage Account:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\\azcopy `\n    copy `\n    $TargetFile `\n\"https://$StorageAccountName.blob.core.windows.net/$StorageContainerName/$StorageBlobName$SAS\" `\n    --recursive `\n    --overwrite=true `\n    --blob-type=BlockBlob `\n    --put-md5 `\n    --log-level=info `\n    --block-blob-tier=archive `\n</code></pre></div></div>\n\n<p>The process went quickly. Copying the 100GB file took only a few minutes, thanks to the high network throughput.\nIt is worth noting that the archive tier is set immediately.</p>\n\n<h3 id=\"conducting-a-shrink-operation\">Conducting a SHRINK operation</h3>\n<p>The SHRINK operation is, unfortunately, required to downscale the Azure SQL database. It took several hours to complete.\n<strong>WAIT_AT_LOW_PRIORITY</strong> was used to reduce the impact of this operation on the database users.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DBCC</span> <span class=\"n\">SHRINKDATABASE</span> <span class=\"p\">([</span><span class=\"n\">DB_NAME</span><span class=\"p\">])</span> <span class=\"k\">WITH</span> <span class=\"n\">WAIT_AT_LOW_PRIORITY</span>\n</code></pre></div></div>\n\n<p>The performance chart (Data IO) during the above operation looked as follows:</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-shrink.png\" alt=\"Data IO\" /></p>\n\n<p>We observed a slight increase in Data IO operations during the SHRINK operation.</p>\n<h3 id=\"performance-analysis-and-index-rebuild\">Performance analysis and index rebuild</h3>\n<p>This step appeared quite unexpectedly in our procedure. After performing the SHRINK operation and successfully\nlowering the parameters of the machine responsible for the database, we began to observe\nthe impact of our operations on performance.</p>\n\n<p>To our concern, we observed a noticeable performance regression.\nEndpoints that use the database on which we performed <strong>SHRINK</strong> operation showed abnormally increased response times.</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-rps-before-index.png\" alt=\"RPS\" /></p>\n\n<p>The database load chart also did not look encouraging, with frequent peaks during query execution.</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-iops-before-index.png\" alt=\"IOPS\" /></p>\n\n<p>Attempts to scale the machine did not bring spectacular results and only increased costs (considering that our goal was\nto lower them, it was not an optimal solution).</p>\n\n<p>As it turned out, the culprit was extraordinarily high index fragmentation. The result of the SHRINK operation was an increase\nin the mentioned fragmentation to almost &gt;90% for practically all existing indexes.\nThis forced us to consider rebuilding all of them.</p>\n\n<p>Even Microsoft recommends rebuilding indexes in their documentation <a href=\"https://learn.microsoft.com/en-us/sql/relational-databases/databases/shrink-a-database?view=sql-server-ver16\">here</a>:</p>\n\n<blockquote>\n  <p>Data that is moved to shrink a file can be scattered to any available location in the file.\nThis causes index fragmentation and can slow the performance of queries that search a range of the index.\nTo eliminate the fragmentation, consider rebuilding the indexes on the file after shrinking.</p>\n</blockquote>\n\n<p>We decided to proceed with the above-mentioned index rebuild process. Here, we also applied possible optimizations\nto avoid negative consequences related to the availability of our services. The <strong>ONLINE</strong> option is particularly noteworthy,\nas it ensures that existing indexes and tables will not be blocked, what is an important issue in the case\nof continuous operation of our services.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">ALTER</span> <span class=\"k\">INDEX</span> <span class=\"k\">ALL</span> <span class=\"k\">ON</span> <span class=\"n\">dbo</span><span class=\"p\">.</span><span class=\"n\">TableName</span> <span class=\"n\">REBUILD</span> <span class=\"k\">WITH</span>\n<span class=\"p\">(</span><span class=\"n\">FILLFACTOR</span> <span class=\"o\">=</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"n\">SORT_IN_TEMPDB</span> <span class=\"o\">=</span> <span class=\"k\">ON</span><span class=\"p\">,</span> <span class=\"n\">STATISTICS_NORECOMPUTE</span> <span class=\"o\">=</span> <span class=\"k\">ON</span><span class=\"p\">,</span> <span class=\"n\">ONLINE</span> <span class=\"o\">=</span> <span class=\"k\">ON</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>It should also be noted that this can be a time-consuming operation, but as a result of its execution,\nthe indexes returned to the required consistency level, reaching a level of fragmentation close to 0%.\nThe response time and resource consumption charts of the database also returned to the values closer to the initial ones.</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-rps-after-rebuild.png\" alt=\"RPS\" /></p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-iops-after-index.png\" alt=\"IOPS\" /></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>After performing all of the described actions, we achieved a reduction\nin the size of the database from over 3TB to slightly below 100GB.\nBy lowering the required disk space, we could also significantly reduce the computational resources of the database,\ngenerating further serious savings.</p>\n\n<p>Before performing all the operations,\nthe monthly cost of maintaining the database was close to €3000.\nBy switching from a database based on a 12 vCore and 3TB model to a Standard DTU with 100 units and 150GB\nwe managed to cut our monthly spendings to mere €125.\nAfter all, our effort paid off.</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/montly-cost-reduction.png\" alt=\"Cost reduction\" /></p>\n\n<p>The above example demonstrates how to greatly reduce infrastructure costs. Of course,\nthe described procedure will apply to specific cases and data characteristics.\nHowever, if you have a similar problem, I think it is worth considering this approach.</p>\n","contentSnippet":"In the era of ubiquitous cloud services and an increasingly growing PaaS and serverless-oriented approach, performance\nand resources seem to be becoming less and less important.\nAfter all, we can scale horizontally and vertically at any time, without worrying about potential performance challenges\nthat the business may introduce.\nHowever, there is also another side to the coin – rising costs. While it can be argued that in many situations it is simply\ncheaper to add another instance of the service than to engage a developer who will work tirelessly to diagnose\nand optimize performance problems, the problem will persist and intensify as the business and its requirements grow.\nA similar situation arises with databases. We often store huge amounts of data for auditing or historical purposes.\nWhile the cost of maintaining such databases is negligible at a small scale,\nover time it can become a notable burden on our budget.\nI wanted to talk about such a case and how we managed to reduce the cost of maintaining a database nearly 30-fold.\nThe problem\nAs the amount of data grows, the need for scaling arises. In the case of Azure services, scaling also has its limitations.\nIt is not always possible to infinitely increase the available disk space without scaling other resources (CPU, RAM, I/O).\nIn our case, this limit became apparent when we exceeded 1TB of data. Our database was based on the vCore model,\nwhere we used 4 vCores.\nUnfortunately, this number of vCores limited the available disk space to 1TB. Due to the increase in the number of users\nand the demand for disk space, we needed more resources. We continued to scale up, adding not only more disk resources\nbut also computational resources (I will mention that at this point we reached a scale of 3TB of data, which requires\nat least 12 vCores). At some point, the cost of maintaining the database amounted to several thousand euros.\nThis prompted us to look for solutions.\nComparing the cost of storing substantial amounts of data within Azure SQL and Storage Account\n(especially blobs in the archive tier), we concluded that we could achieve significant cost reduction\nby archiving old/unused data and placing it in a cost-optimized container.\nMonthly cost of storing 3TB of data\nAzure SQL 12vCore 3TB\n    Storage Account Archive tier\n  \n$2,876.18\n    $31.12\n  \nAnalysis\nAfter some investigation, It turned out that significant part of data could be safely archived,\nwhich would certainly provide\npotential savings and eliminate the problem of an overgrown database. Most of this data was actually historical.\nWe implemented a solution that allows for much more scalable data archiving\nby asynchronously loading data into the warehouse.\nHowever, data from before the implementation of aforementioned solution were still generating considerable storage costs.\nThe idea seemed simple both in concept and execution. However, we immediately encountered several problems.\nExporting such massive amounts of data is a time-consuming process and puts a heavy load on the database\ncausing responsiveness issues.\nDealing with a production system, we could not reduce the reliability and availability of services.\nIn addition, the export functionality offered by the Azure portal is limited to databases up to 200GB in size,\nwhich meant that we had to look for another solution.\nAction plan\nConcept\nAs it turned out, there are ways to export even huge databases. After some investigation,\nwe found the SQL Package tool.\nIt provides export option and is great for solving aforementioned problem. It is able to produce a bacpac\nfile that contains highly compressed content of the database.\nThe tool also allows you to restore data at any time using the import operation,\nif there is ever a need to review it, for example for audit purposes.\nThe next step is to copy the file to the container in the Storage Account using the AzCopy tool and ensure\nthat it is stored in the ARCHIVE tier, what will massively reduce the costs of maintaining it.\nThe final stage is to delete unnecessary data from the database, then SHRINK it, what will reduce database resources.\nScript and tools\nTo export and archive the database, we used two tools provided by Microsoft: SQL Package\nand AzCopy.\nAfter analyzing their documentation, we prepared the appropriate procedure taking\ninto account performance and operation duration.\nInfrastructure\nDue to the fact that the export and upload process to the Storage Account container with this amount of data may take\na long time, we decided to set up a temporary VM with the accelerated networking option, which served us\nto execute all required scripts. It should be mentioned that the need to set up a dedicated virtual machine also arises\nfrom the fact that it must be located in an internal network, where it is also possible to connect to the machine that\nhandles the database. Thanks to meeting this condition,\nit was possible to successfully connect to the database and perform the export operation.\nThe virtual machine turned out to be moderately priced, as all performed operations were not computationally demanding\n(both CPU and RAM usage were low), what allowed us to use a very resource-efficient machine. The only notable extension\nof its functionality is accelerated networking, as it must work with data transfer over the network\nand we needed good performance.\nTesting\nOptimization\nBefore we proceeded with the implementation in the production environment, we conducted a series of\ntests using test environments. They mainly involved running all the steps of the process using\ndata packages of approximately 50GB and 200GB in size.\nWe spent the majority of time testing and optimizing the use of the SQL Package tool.\nOur goal was to shorten the export time and obtain an optimal size for the resulting file,\nso it would not generate excessive costs due to the need to store it. We tested several scenarios\n(mostly by manipulating the compression level parameter).\nCompression in FAST mode showed an average of 10-20% faster export time than MAXIMUM, with the resulting file\nsize varying within <10%.\nPerformance testing\nWe also tested the load on the databases in each environment.\nData IO and CPU load were tested using the test environment relying on DTU-based infrastructure utilising 100 DTU\nunits.\nData IO\n\nCPU\n\nNotice, that the export operation primarily consumes IO resources.\nData Import\nDue to the possible need to reuse archived data, we had to make sure that the data we imported was suitable for re-import.\nInitially, we attempted to import the data using the SQL Server Management Studio tool provided by Microsoft.\nUnfortunately, this attempt failed due to errors related to file reading during the import operation.\nWe made an additional attempt to import the archive using the SQL Package tool, which, in addition to the export option,\nalso provides import options.\nCommand\n\nsqlpackage /Action:Import `\n        /tsn:$ServerName `\n        /tdn:$DatabaseName `\n        /tu:$SqlAdminName `\n        /tp:$SqlAdminPassword `\n        /tec:true `\n        /ttsc:false `\n        /d:true `\n        /sf:$SourceFile `\n        /p:CommandTimeout=999 `\n        /p:LongRunningCommandTimeout=0 `\n        /p:DatabaseLockTimeout=-1 `\n\n\nsolved the problem.\nDeployment\nExporting the database using SQL Package tool\nThe following script was executed, successfully extracting data from the database and creating the appropriate bacpac file.\nAs a result, we received a compressed file of around 100GB.\nIt is worth pointing out that data in the database occupied about 3TB, so compression was very efficient.\nThe whole process took several hours.\n\nsqlpackage\n    /Action:Export `\n    /ssn:$ServerName `\n    /sdn:$DatabaseName `\n    /su:$SqlAdminName `\n    /sp:$SqlAdminPassword `\n    /sec:true `\n    /stsc:false `\n    /tf:$TargetFile `\n    /p:CompressionOption=Fast `\n    /p:CommandTimeout=999 `\n    /p:LongRunningCommandTimeout=0 `\n    /p:DatabaseLockTimeout=-1 `\n    /p:TempDirectoryForTableData=$TempDirectory `\n    /d:true `\n    /df:$SqlLogs `\n\n\nMany parameters of this operation were evaluated during trials on test environments.\nThe particularly important ones are:\nCommandTimeout, LongRunningCommandTimeout, DatabaseLockTimeout - This set of\nparameters ensures that the connection\nis maintained throughout the entire duration of the export operation (assuming that it will be long-running).\nCompressionOption - The degree of data compression in the output file.\nTwo variants were tested:\nFAST and MAXIMUM.\nFAST allowed us to shorten the export time by about 2 hours while showing only slightly lower\ndata compression (in our case, the difference was around 10%).\n\n/p:TableData=\"dbo.TestTable\"\n\n\nThe parameter allows us to limit the data export only to the tables selected by us, what significantly shortens\nthe overall operation time. It is also worth mentioning that it is possible to set the parameter multiple times.\nSince the export was launched at night, the procedure had no negative impact on users. The impact of the\nexport operation on the database load (Data I/O percentage) is presented in the graph below. It can be observed that\nthe resource load increased during this operation.\n\nCopying the archived database using AzCopy\nThe following script was executed to copy the exported file to the Storage Account:\n\n.\\azcopy `\n    copy `\n    $TargetFile `\n\"https://$StorageAccountName.blob.core.windows.net/$StorageContainerName/$StorageBlobName$SAS\" `\n    --recursive `\n    --overwrite=true `\n    --blob-type=BlockBlob `\n    --put-md5 `\n    --log-level=info `\n    --block-blob-tier=archive `\n\n\nThe process went quickly. Copying the 100GB file took only a few minutes, thanks to the high network throughput.\nIt is worth noting that the archive tier is set immediately.\nConducting a SHRINK operation\nThe SHRINK operation is, unfortunately, required to downscale the Azure SQL database. It took several hours to complete.\nWAIT_AT_LOW_PRIORITY was used to reduce the impact of this operation on the database users.\n\nDBCC SHRINKDATABASE ([DB_NAME]) WITH WAIT_AT_LOW_PRIORITY\n\n\nThe performance chart (Data IO) during the above operation looked as follows:\n\nWe observed a slight increase in Data IO operations during the SHRINK operation.\nPerformance analysis and index rebuild\nThis step appeared quite unexpectedly in our procedure. After performing the SHRINK operation and successfully\nlowering the parameters of the machine responsible for the database, we began to observe\nthe impact of our operations on performance.\nTo our concern, we observed a noticeable performance regression.\nEndpoints that use the database on which we performed SHRINK operation showed abnormally increased response times.\n\nThe database load chart also did not look encouraging, with frequent peaks during query execution.\n\nAttempts to scale the machine did not bring spectacular results and only increased costs (considering that our goal was\nto lower them, it was not an optimal solution).\nAs it turned out, the culprit was extraordinarily high index fragmentation. The result of the SHRINK operation was an increase\nin the mentioned fragmentation to almost >90% for practically all existing indexes.\nThis forced us to consider rebuilding all of them.\nEven Microsoft recommends rebuilding indexes in their documentation here:\nData that is moved to shrink a file can be scattered to any available location in the file.\nThis causes index fragmentation and can slow the performance of queries that search a range of the index.\nTo eliminate the fragmentation, consider rebuilding the indexes on the file after shrinking.\nWe decided to proceed with the above-mentioned index rebuild process. Here, we also applied possible optimizations\nto avoid negative consequences related to the availability of our services. The ONLINE option is particularly noteworthy,\nas it ensures that existing indexes and tables will not be blocked, what is an important issue in the case\nof continuous operation of our services.\n\nALTER INDEX ALL ON dbo.TableName REBUILD WITH\n(FILLFACTOR = 80, SORT_IN_TEMPDB = ON, STATISTICS_NORECOMPUTE = ON, ONLINE = ON);\n\n\nIt should also be noted that this can be a time-consuming operation, but as a result of its execution,\nthe indexes returned to the required consistency level, reaching a level of fragmentation close to 0%.\nThe response time and resource consumption charts of the database also returned to the values closer to the initial ones.\n\n\nConclusion\nAfter performing all of the described actions, we achieved a reduction\nin the size of the database from over 3TB to slightly below 100GB.\nBy lowering the required disk space, we could also significantly reduce the computational resources of the database,\ngenerating further serious savings.\nBefore performing all the operations,\nthe monthly cost of maintaining the database was close to €3000.\nBy switching from a database based on a 12 vCore and 3TB model to a Standard DTU with 100 units and 150GB\nwe managed to cut our monthly spendings to mere €125.\nAfter all, our effort paid off.\n\nThe above example demonstrates how to greatly reduce infrastructure costs. Of course,\nthe described procedure will apply to specific cases and data characteristics.\nHowever, if you have a similar problem, I think it is worth considering this approach.","guid":"https://blog.allegro.tech/2023/07/save-money-on-large-database.html","categories":["tech","azure","sql","saving","cloud"],"isoDate":"2023-07-09T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Debugging hangs - piecing together why nothing happens","link":"https://blog.allegro.tech/2023/05/debugging-hangs.html","pubDate":"Wed, 31 May 2023 00:00:00 +0200","authors":{"author":[{"name":["Łukasz Rokita"],"photo":["https://blog.allegro.tech/img/authors/lukasz.rokita.jpg"],"url":["https://blog.allegro.tech/authors/lukasz.rokita"]}]},"content":"<p>As a part of a broader initiative of refreshing Allegro platform, we are upgrading our internal libraries to Spring Boot 3.0 and Java 17.\nThe task is daunting and filled with challenges,\nhowever overall progress is steady and thanks to the modular nature of our code it should end in finite time.\nEveryone who has performed such an upgrade knows that you need to expect the unexpected and at the end of the day prepare for lots of debugging.\nNo amount of migration guide would prepare you for what’s coming in the field.\nIn the words of Donald Rumsfeld there are unknown unknowns and we need to be equipped with the tools to uncover these unknowns and patch them up.\nIn this blog post I’d like to walk you through a process that should show where the application hangs,\nalthough there seems to be nothing wrong with it. I will also show that you don’t always know what code you have – problem known as dependecy hell,\nplace we got quite cosy in during this upgrade.</p>\n\n<h2 id=\"the-change\">The change</h2>\n<p>Note that we keep versions as separate key–value pairs in <code class=\"language-plaintext highlighter-rouge\">build.gradle</code> files and reference them in dependencies by key.\nUpdating often means a single line change. The upgrade is trivial and git diff looks like this.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ext.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n]\n\next.versions = [\n+        spring         : '6.0.5',\n+        spock          : '2.4-M1-groovy-4.0',\n+        groovy         : '4.0.9',\n]\n</code></pre></div></div>\n<p>Nothing much happens. We upgrade Spring and since there are some problems with Spock not working well with the newest Spring\nwe need to upgrade it as well, along with Groovy. This is the easy part.\nNow we run the tests and expect to be either elated with the sight of a successful build or greeted with descriptive error messages\nthat help us quickly patch the issue. Nobody expects anything and in this case this is an unknown unknown.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>97% EXECUTING [15m 55s]\n&gt; :platform-libraries-webclient:integrationTest &gt; 1 test completed, 1 failed\n&gt; :platform-libraries-webclient:integrationTest &gt; Executing test pl.allegro....WebClientContextContainerInterceptorSpec\n</code></pre></div></div>\n<p>After 15 minutes we expect the process to end. A quick cross-check with the master branch confirms that tests run and execute in less than a minute.\nSomething is wrong and it’s on us. However, no error is presented. Adding logging does not help, nothing streams to standard output.\nSomething hangs and refuses to budge. When that happenes there is only one way to inspect what is going on and\nthat is to pop the hood open and look into JVM to see what the threads are doing or where they are slacking.</p>\n\n<h2 id=\"thread-theory\">Thread theory</h2>\n\n<p>Let’s interrupt this story with a short summary of threading in JVM. You can skip this chapter if you are familiar with the topic.\nAs the priceless book Java Concurrency in Practice by Brian Goetz et al. teaches us:</p>\n<blockquote>\n  <p>“Threads may block, or pause, for several reasons: waiting for I/O completion, waiting to acquire a lock,\nwaiting to wake up from Thread.sleep, or waiting for the result of a computation in another thread.\nWhen a thread blocks, it is usually suspended and placed in one of the blocked thread states\n(BLOCKED, WAITING, or TIMED_WAITING). (…) blocked thread must wait for an event beyond its control before it can proceed”.</p>\n</blockquote>\n\n<p>This sounds exactly like the situation we are in. So there is hope. Let’s educate ourselves further.\nAnother excerpt that would prove insightful reads as follows:</p>\n<blockquote>\n  <p>“(…) tasks can block for exteded periods of time, even if deadlock is not a possibility.\n(…) One technique that can mitigate the ill effects of long–running tasks is for tasks to use timed resource waits instead of\nunbound waits.”\nThis seems like an answer to our woes. However, two mysteries remain.\nWhere to put the timeout? What the thread is waiting for? To answer these questions we need to inspect the threads in the JVM itself.</p>\n</blockquote>\n\n<h2 id=\"the-investigation\">The investigation</h2>\n<p>At this point we did two things. First we pushed our code to a branch.\nAfter all at any moment our laptops could burst into flames and all the work would go to waste.\nThe remote CI confirmed our suspicion since it also hung. The problem was real and not only confined to the local machine.\nThe second thing is to scout for the offending thread. This is easy with the help of some JDK binaries:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>jps -lv | grep platform-libraries\n38983 worker.org.gradle.process.internal.worker.GradleWorkerMain -Dorg.gradle.internal.worker.tmpdir=/path/to/code/platform-libraries/platform-libraries-webclient/build/tmp/integrationTest/work -Dorg.gradle.native=false -Xmx512m -Dfile.encoding=UTF-8\n</code></pre></div></div>\n<p>So we have the a lvmid – local JVM identifier, which will help us locate the offending thread in jconsole.\nIn the screen below we can see that the thread waits on <code class=\"language-plaintext highlighter-rouge\">Mono.block()</code> which is left unbounded in a happy path scenario.\nWell, we are in the worst case so first of all we add a simple timeout <code class=\"language-plaintext highlighter-rouge\">Mono.block(Duration.ofSeconds(10))</code>.</p>\n\n<p><img src=\"/img/articles/2023-05-31-debugging-hangs/jconsole.png\" alt=\"jconsole\" /></p>\n\n<p>This fails our tests and for the first time the error appears:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\t08:13:39.556 [Test worker] WARN reactor.core.Exceptions - throwIfFatal detected a jvm fatal exception, which is thrown and logged below:\njava.lang.NoSuchMethodError: 'reactor.core.publisher.Mono reactor.core.publisher.Mono.subscriberContext(reactor.util.context.Context)'\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n\tat reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:427)\n\tat reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onSubscribe(PooledConnectionProvider.java:533)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:676)\n\tat reactor.netty.resources.PooledConnectionProvider.disposableAcquire(PooledConnectionProvider.java:219)\n\tat reactor.netty.resources.PooledConnectionProvider.lambda$acquire$3(PooledConnectionProvider.java:183)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.lambda$subscribe$0(HttpClientConnect.java:326)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.core.publisher.FluxRetryWhen.subscribe(FluxRetryWhen.java:77)\n\tat reactor.core.publisher.MonoRetryWhen.subscribeOrReturn(MonoRetryWhen.java:46)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:57)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.subscribe(HttpClientConnect.java:329)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\tat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2545)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2341)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2215)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)\n\tat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4485)\n\tat reactor.core.publisher.Mono.block(Mono.java:1733)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$Trait$Helper.makeRequest(WebClientContextContainerAdapterConfiguration.groovy:22)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$makeRequest.call(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)\n\tat pl.allegro....AdapterConfiguration$Trait$Helper.makeRequest(AdapterConfiguration.groovy:11)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....SharedInterceptorSpec$makeRequest.callCurrent(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:49)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)\n\tat pl.allegro....SharedInterceptorSpec.$spock_feature_0_0(SharedInterceptorSpec.groovy:44)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.spockframework.util.ReflectionUtil.invokeMethod(ReflectionUtil.java:196)\n\tat org.spockframework.runtime.model.MethodInfo.lambda$new$0(MethodInfo.java:49)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeatureMethod(PlatformSpecRunner.java:324)\n\tat org.spockframework.runtime.IterationNode.execute(IterationNode.java:50)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:58)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.IterationNode.lambda$around$0(IterationNode.java:67)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunIteration$5(PlatformSpecRunner.java:236)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.junit4.AbstractRuleInterceptor$1.evaluate(AbstractRuleInterceptor.java:46)\n\tat com.github.tomakehurst.wiremock.junit.WireMockRule$1.evaluate(WireMockRule.java:79)\n\tat org.spockframework.junit4.MethodRuleInterceptor.intercept(MethodRuleInterceptor.java:40)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runIteration(PlatformSpecRunner.java:218)\n\tat org.spockframework.runtime.IterationNode.around(IterationNode.java:67)\n\tat org.spockframework.runtime.SimpleFeatureNode.lambda$around$0(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.FeatureNode.lambda$around$0(FeatureNode.java:41)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunFeature$4(PlatformSpecRunner.java:199)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeature(PlatformSpecRunner.java:192)\n\tat org.spockframework.runtime.FeatureNode.around(FeatureNode.java:41)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.SpecNode.lambda$around$0(SpecNode.java:63)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunSpec$0(PlatformSpecRunner.java:61)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runSpec(PlatformSpecRunner.java:55)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:63)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:11)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\n\tat org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\n\tat jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)\n\tat org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\n</code></pre></div></div>\n<p>For the first time we force the entire reactive code to finally execute itself and present us with the result,\neven if it is an error this moves us in the right direction.</p>\n\n<h2 id=\"result\">Result</h2>\n\n<p>Like in any good crime story uncovering one mystery presents another.\nA quick <code class=\"language-plaintext highlighter-rouge\">grep</code> shows that there are no calls to <code class=\"language-plaintext highlighter-rouge\">reactor.core.publisher.Mono.subscriberContext</code>.\nWhere could this call be hiding, if it’s not present in our code?</p>\n\n<p>The answer is simple but I assure you that it took us some time to come up with it.\nIf it isn’t in our code and it runs inside our JVM then this must be dependency code.\nThe observant reader is able to spot it from afar. The stack trace confirms where the error lies:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n</code></pre></div></div>\n<p>We need to patch <code class=\"language-plaintext highlighter-rouge\">reactor–netty</code> which in this version still used deprecated code. Referring back to our diff:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ext.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n-        reactorNetty   : '0.9.25.RELEASE',\n]\n\next.versions = [\n+        spring        : '6.0.5',\n+        spock         : '2.4-M1-groovy-4.0',\n+        groovy        : '4.0.9',\n+        reactorNetty  : '1.1.3',\n]\n</code></pre></div></div>\n<p>We escape the dependency hell and are delighted to see the green letters <code class=\"language-plaintext highlighter-rouge\">BUILD SUCCESSFUL in 24s</code>.</p>\n\n<h2 id=\"summary\">Summary</h2>\n<p>Well this was quite a thrilling journey one doesn’t often embark on.\nThe odd peculiarity of the problem combined with peculiarity of the task provided us with a great challange and satisfaction.\nDependency hell is no joke, but armed with the JDK tools and thinking the problem through, there is no obstacle that could not be overcome.\nNext time your code hangs with no apparent reason this is a perfect opportunity to dust off the swiss army knife of JDK binaries and dig in.</p>\n","contentSnippet":"As a part of a broader initiative of refreshing Allegro platform, we are upgrading our internal libraries to Spring Boot 3.0 and Java 17.\nThe task is daunting and filled with challenges,\nhowever overall progress is steady and thanks to the modular nature of our code it should end in finite time.\nEveryone who has performed such an upgrade knows that you need to expect the unexpected and at the end of the day prepare for lots of debugging.\nNo amount of migration guide would prepare you for what’s coming in the field.\nIn the words of Donald Rumsfeld there are unknown unknowns and we need to be equipped with the tools to uncover these unknowns and patch them up.\nIn this blog post I’d like to walk you through a process that should show where the application hangs,\nalthough there seems to be nothing wrong with it. I will also show that you don’t always know what code you have – problem known as dependecy hell,\nplace we got quite cosy in during this upgrade.\nThe change\nNote that we keep versions as separate key–value pairs in build.gradle files and reference them in dependencies by key.\nUpdating often means a single line change. The upgrade is trivial and git diff looks like this.\n\next.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n]\n\next.versions = [\n+        spring         : '6.0.5',\n+        spock          : '2.4-M1-groovy-4.0',\n+        groovy         : '4.0.9',\n]\n\n\nNothing much happens. We upgrade Spring and since there are some problems with Spock not working well with the newest Spring\nwe need to upgrade it as well, along with Groovy. This is the easy part.\nNow we run the tests and expect to be either elated with the sight of a successful build or greeted with descriptive error messages\nthat help us quickly patch the issue. Nobody expects anything and in this case this is an unknown unknown.\n\n97% EXECUTING [15m 55s]\n> :platform-libraries-webclient:integrationTest > 1 test completed, 1 failed\n> :platform-libraries-webclient:integrationTest > Executing test pl.allegro....WebClientContextContainerInterceptorSpec\n\n\nAfter 15 minutes we expect the process to end. A quick cross-check with the master branch confirms that tests run and execute in less than a minute.\nSomething is wrong and it’s on us. However, no error is presented. Adding logging does not help, nothing streams to standard output.\nSomething hangs and refuses to budge. When that happenes there is only one way to inspect what is going on and\nthat is to pop the hood open and look into JVM to see what the threads are doing or where they are slacking.\nThread theory\nLet’s interrupt this story with a short summary of threading in JVM. You can skip this chapter if you are familiar with the topic.\nAs the priceless book Java Concurrency in Practice by Brian Goetz et al. teaches us:\n“Threads may block, or pause, for several reasons: waiting for I/O completion, waiting to acquire a lock,\nwaiting to wake up from Thread.sleep, or waiting for the result of a computation in another thread.\nWhen a thread blocks, it is usually suspended and placed in one of the blocked thread states\n(BLOCKED, WAITING, or TIMED_WAITING). (…) blocked thread must wait for an event beyond its control before it can proceed”.\nThis sounds exactly like the situation we are in. So there is hope. Let’s educate ourselves further.\nAnother excerpt that would prove insightful reads as follows:\n“(…) tasks can block for exteded periods of time, even if deadlock is not a possibility.\n(…) One technique that can mitigate the ill effects of long–running tasks is for tasks to use timed resource waits instead of\nunbound waits.”\nThis seems like an answer to our woes. However, two mysteries remain.\nWhere to put the timeout? What the thread is waiting for? To answer these questions we need to inspect the threads in the JVM itself.\nThe investigation\nAt this point we did two things. First we pushed our code to a branch.\nAfter all at any moment our laptops could burst into flames and all the work would go to waste.\nThe remote CI confirmed our suspicion since it also hung. The problem was real and not only confined to the local machine.\nThe second thing is to scout for the offending thread. This is easy with the help of some JDK binaries:\n\njps -lv | grep platform-libraries\n38983 worker.org.gradle.process.internal.worker.GradleWorkerMain -Dorg.gradle.internal.worker.tmpdir=/path/to/code/platform-libraries/platform-libraries-webclient/build/tmp/integrationTest/work -Dorg.gradle.native=false -Xmx512m -Dfile.encoding=UTF-8\n\n\nSo we have the a lvmid – local JVM identifier, which will help us locate the offending thread in jconsole.\nIn the screen below we can see that the thread waits on Mono.block() which is left unbounded in a happy path scenario.\nWell, we are in the worst case so first of all we add a simple timeout Mono.block(Duration.ofSeconds(10)).\n\nThis fails our tests and for the first time the error appears:\n\n\t08:13:39.556 [Test worker] WARN reactor.core.Exceptions - throwIfFatal detected a jvm fatal exception, which is thrown and logged below:\njava.lang.NoSuchMethodError: 'reactor.core.publisher.Mono reactor.core.publisher.Mono.subscriberContext(reactor.util.context.Context)'\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n\tat reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:427)\n\tat reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onSubscribe(PooledConnectionProvider.java:533)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:676)\n\tat reactor.netty.resources.PooledConnectionProvider.disposableAcquire(PooledConnectionProvider.java:219)\n\tat reactor.netty.resources.PooledConnectionProvider.lambda$acquire$3(PooledConnectionProvider.java:183)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.lambda$subscribe$0(HttpClientConnect.java:326)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.core.publisher.FluxRetryWhen.subscribe(FluxRetryWhen.java:77)\n\tat reactor.core.publisher.MonoRetryWhen.subscribeOrReturn(MonoRetryWhen.java:46)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:57)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.subscribe(HttpClientConnect.java:329)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\tat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2545)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2341)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2215)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)\n\tat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4485)\n\tat reactor.core.publisher.Mono.block(Mono.java:1733)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$Trait$Helper.makeRequest(WebClientContextContainerAdapterConfiguration.groovy:22)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$makeRequest.call(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)\n\tat pl.allegro....AdapterConfiguration$Trait$Helper.makeRequest(AdapterConfiguration.groovy:11)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....SharedInterceptorSpec$makeRequest.callCurrent(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:49)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)\n\tat pl.allegro....SharedInterceptorSpec.$spock_feature_0_0(SharedInterceptorSpec.groovy:44)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.spockframework.util.ReflectionUtil.invokeMethod(ReflectionUtil.java:196)\n\tat org.spockframework.runtime.model.MethodInfo.lambda$new$0(MethodInfo.java:49)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeatureMethod(PlatformSpecRunner.java:324)\n\tat org.spockframework.runtime.IterationNode.execute(IterationNode.java:50)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:58)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.IterationNode.lambda$around$0(IterationNode.java:67)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunIteration$5(PlatformSpecRunner.java:236)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.junit4.AbstractRuleInterceptor$1.evaluate(AbstractRuleInterceptor.java:46)\n\tat com.github.tomakehurst.wiremock.junit.WireMockRule$1.evaluate(WireMockRule.java:79)\n\tat org.spockframework.junit4.MethodRuleInterceptor.intercept(MethodRuleInterceptor.java:40)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runIteration(PlatformSpecRunner.java:218)\n\tat org.spockframework.runtime.IterationNode.around(IterationNode.java:67)\n\tat org.spockframework.runtime.SimpleFeatureNode.lambda$around$0(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.FeatureNode.lambda$around$0(FeatureNode.java:41)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunFeature$4(PlatformSpecRunner.java:199)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeature(PlatformSpecRunner.java:192)\n\tat org.spockframework.runtime.FeatureNode.around(FeatureNode.java:41)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.SpecNode.lambda$around$0(SpecNode.java:63)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunSpec$0(PlatformSpecRunner.java:61)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runSpec(PlatformSpecRunner.java:55)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:63)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:11)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\n\tat org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\n\tat jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)\n\tat org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\n\n\nFor the first time we force the entire reactive code to finally execute itself and present us with the result,\neven if it is an error this moves us in the right direction.\nResult\nLike in any good crime story uncovering one mystery presents another.\nA quick grep shows that there are no calls to reactor.core.publisher.Mono.subscriberContext.\nWhere could this call be hiding, if it’s not present in our code?\nThe answer is simple but I assure you that it took us some time to come up with it.\nIf it isn’t in our code and it runs inside our JVM then this must be dependency code.\nThe observant reader is able to spot it from afar. The stack trace confirms where the error lies:\n\n    at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n\n\nWe need to patch reactor–netty which in this version still used deprecated code. Referring back to our diff:\n\next.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n-        reactorNetty   : '0.9.25.RELEASE',\n]\n\next.versions = [\n+        spring        : '6.0.5',\n+        spock         : '2.4-M1-groovy-4.0',\n+        groovy        : '4.0.9',\n+        reactorNetty  : '1.1.3',\n]\n\n\nWe escape the dependency hell and are delighted to see the green letters BUILD SUCCESSFUL in 24s.\nSummary\nWell this was quite a thrilling journey one doesn’t often embark on.\nThe odd peculiarity of the problem combined with peculiarity of the task provided us with a great challange and satisfaction.\nDependency hell is no joke, but armed with the JDK tools and thinking the problem through, there is no obstacle that could not be overcome.\nNext time your code hangs with no apparent reason this is a perfect opportunity to dust off the swiss army knife of JDK binaries and dig in.","guid":"https://blog.allegro.tech/2023/05/debugging-hangs.html","categories":["tech","java","jvm","debugging","dependency hell"],"isoDate":"2023-05-30T22:00:00.000Z","thumbnail":"images/post-headers/java.png"},{"title":"Trust no one, not even your training data! Machine learning from noisy data","link":"https://blog.allegro.tech/2023/04/learning-from-noisy-data.html","pubDate":"Tue, 18 Apr 2023 00:00:00 +0200","authors":{"author":[{"name":["Łukasz Rączkowski"],"photo":["https://blog.allegro.tech/img/authors/lukasz.raczkowski.jpg"],"url":["https://blog.allegro.tech/authors/lukasz.raczkowski"]},{"name":["Aleksandra Osowska-Kurczab"],"photo":["https://blog.allegro.tech/img/authors/aleksandra.osowska-kurczab.jpg"],"url":["https://blog.allegro.tech/authors/aleksandra.osowska-kurczab"]},{"name":["Jacek Szczerbiński"],"photo":["https://blog.allegro.tech/img/authors/jacek.szczerbinski.jpg"],"url":["https://blog.allegro.tech/authors/jacek.szczerbinski"]},{"name":["Klaudia Nazarko"],"photo":["https://blog.allegro.tech/img/authors/klaudia.nazarko.jpg"],"url":["https://blog.allegro.tech/authors/klaudia.nazarko"]},{"name":["Kalina Kobus"],"photo":["https://blog.allegro.tech/img/authors/kalina.kobus.jpg"],"url":["https://blog.allegro.tech/authors/kalina.kobus"]}]},"content":"<ul>\n  <li>Label noise is ever-present in machine learning practice.</li>\n  <li>Allegro datasets are no exception.</li>\n  <li>We compared 7 methods for training classifiers robust to label noise.</li>\n  <li>All of them improved the model’s performance on noisy datasets.</li>\n  <li>Some of the methods decreased the model’s performance in the absence of label noise.</li>\n</ul>\n\n<h2 id=\"what-is-label-noise-and-why-does-it-matter\">What is label noise and why does it matter?</h2>\n\n<p>In the scope of supervised machine learning, specifically in classification tasks, the problem of label noise\nis of critical importance. It involves cases of incorrectly labelled training data. For example, let’s say that\nwe want to train a classification model to distinguish cats from dogs. For that purpose, we compose a training\ndataset with images labelled as either cat or dog. The labelling process is usually performed by human annotators,\nwho almost certainly produce some labelling errors. Unfortunately, human annotators can be confused by poor image\nquality, ambiguous image contents, or simply click the wrong item. As such, we inevitably end up with a dataset\nwhere some percentage of cats are labelled as dogs and vice versa (<a href=\"#figure1\"><strong>Figure 1</strong></a>).</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure1\"></a>\n    <img alt=\"Cats and dogs are equally nice.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure1-label-noise-example.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b>Figure 1. An example of label noise in a binary classification dataset.</b> Some images in both categories were mislabelled by human annotators, which introduces noise to the training dataset. </p>\n</figure>\n\n<p>Consequently, the model trained with such data learns partially wrong associations, which then can lead to incorrect\npredictions for new images. The more label noise we have, the more we confuse the model during training. We can\nmeasure this by evaluating the classification error on a held-out test dataset (<a href=\"#figure2\"><strong>Figure 2</strong></a>). It is clear\nthat for high noise levels, it is very hard to recover the true training signal from the corrupted training data.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure2\"></a>\n    <img alt=\"Oh no, please, not the noise!\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure2-test-accuracy.png\" style=\"width:70%;margin-bottom:10px\" />\n    <p style=\"width:70%;margin-left:auto;margin-right:auto\"><b> Figure 2. Test accuracy as a function of label noise percentage. </b> The X axis indicates the ratio of mislabelled to correctly labelled examples. The dataset used here was ImageNet, corrupted with synthetic label noise. Image source: <sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup>.</p>\n</figure>\n\n<p>How can this problem be mitigated? One approach is to simply put more effort into the labelling process — we can let\nmultiple annotators label each data point and then evaluate the cross-annotator agreement. With enough time and effort,\nwe hope to obtain a dataset free of label noise. However, in practice this approach is rarely feasible due to large\nvolumes of training data and the need for efficient turnaround of machine learning projects. Consequently, we need\na different approach for handling corrupted training data, <em>i.e.</em> ML models robust to label noise.</p>\n\n<p>In the context of this blog post, we define robustness as the model’s ability to efficiently learn in the presence\nof corrupted training data. In other words, a robust model can recover the correct training signal and ignore\nthe noise, so that it does not overfit to the corrupted traning set and can generalise during prediction. A major\nchallenge in this regard is the difficulty to estimate the proportion of label noise in real-world data. As such,\nrobust models are expected to handle varying amounts of label noise.</p>\n\n<h2 id=\"how-to-train-a-robust-classifier\">How to train a robust classifier?</h2>\n\n<p>We can improve the robustness of deep neural networks (DNNs) with a few tips and tricks presented in the recent\nliterature on <em>Learning from Noisy Data</em>. In general, there are three approaches to boosting the model’s resistance\nto noisy labels (<a href=\"#figure3\"><strong>Figure 3</strong></a>):</p>\n<ul>\n  <li><strong>Robust loss function</strong> boosting the training dynamics in the presence of noise.</li>\n  <li><strong>Implicit regularisation</strong> of the network aiming at decreasing the impact of noisy labels.</li>\n  <li><strong>Filtration of noisy data samples</strong> during the training or at the pre-training stage.</li>\n</ul>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure3\"></a>\n    <img alt=\"Flat-topped pyramids are better than sharp-topped ones.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure3-robustness-strategies.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"><b> Figure 3. Strategies for robustness. </b> In this blog post, we focused on two main approaches improving model robustness: utilisation of a robust loss function and implicit regularisation.</p>\n</figure>\n\n<p>In the scope of this blog post, we present seven different methods that are strong baselines for improving\nthe generalisation of classifiers in the presence of label noise.</p>\n\n<h3 id=\"robust-loss-function\">Robust loss function</h3>\n\n<h4 id=\"self-paced-learning-spl\">Self-Paced Learning (SPL)</h4>\n<p>The authors of <strong>Self-Paced Learning</strong><sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\" rel=\"footnote\">2</a></sup> noticed that large per-sample loss might be an indication of label\ncorruption, especially in the latter stages of training. Clean labels should be easy to learn, while corrupted labels\nwould appear as difficult, resulting in a high per-sample loss.</p>\n\n<p>SPL proposes to exclude some predefined ratio of examples from the batch depending on their per-sample loss values\n(<a href=\"#figure4\"><strong>Figure 4a</strong></a>). Usually, the ratio is set as the estimated noise level in the dataset.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure4\"></a>\n    <img alt=\"PRL makes everything equal.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure4-loss-filtration.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b> Figure 4. Comparison of loss filtration methods (SPL, PRL and CCE, see below). </b> While SPL and PRL exclude samples from loss calculation, CCE decreases the impact of potentially corrupted labels by clipping the per-sample loss values. Orange colour indicates candidate noisy samples. </p>\n</figure>\n\n<h4 id=\"provably-robust-learning-prl\">Provably Robust Learning (PRL)</h4>\n\n<p><strong>Provably Robust Learning</strong><sup id=\"fnref:3\" role=\"doc-noteref\"><a href=\"#fn:3\" class=\"footnote\" rel=\"footnote\">3</a></sup> derives from the ideas presented in the SPL paper, but the authors state that\ncorrupted labels should be detected depending on the gradient norm, instead of per-sample loss (<a href=\"#figure4\"><strong>Figure 4b</strong></a>).\nThe underlying intuition is that corrupted samples provoke the optimiser to make inadequately large steps\nin the optimisation space. The rest of the logic is the same as in SPL.</p>\n\n<h4 id=\"clipped-cross-entropy-cce\">Clipped Cross-Entropy (CCE)</h4>\n\n<p>Rejection of samples might not be optimal from the training’s point of view, because DNNs need vast amounts of data\nto be able to generalise properly. Therefore, <strong>Clipped Cross-Entropy</strong> doesn’t exclude the most contributing samples\nfrom the batch, but rather alleviates their impact by clipping the per-sample loss to a predefined value (<a href=\"#figure4\"><strong>Figure 4c</strong></a>).</p>\n\n<h4 id=\"early-learning-regularisation-elr\">Early Learning Regularisation (ELR)</h4>\n\n<p>It has been recently observed that DNNs first fit clean samples, and then start memorising the noisy ones. This\nphenomenon reduces the generalisation properties of the model, distracting it from learning true patterns present\nin the data. <strong>Early Learning Regularisation</strong><sup id=\"fnref:4\" role=\"doc-noteref\"><a href=\"#fn:4\" class=\"footnote\" rel=\"footnote\">4</a></sup> mitigates memorisation with two tricks:</p>\n\n<ul>\n  <li><em>Temporal ensembling</em> of targets: during the training step \\([k]\\), the original targets \\(\\pmb{\\text{t}}\\) are mixed\nwith the model’s predictions \\(\\pmb{\\text{p}}\\) from previous training steps. This prevents the gradient from diverging\nhugely between subsequent steps. This trick is well-known in semi-supervised learning<sup id=\"fnref:5\" role=\"doc-noteref\"><a href=\"#fn:5\" class=\"footnote\" rel=\"footnote\">5</a></sup>:</li>\n</ul>\n\n\\[\\pmb{\\text{t}}^{[k]} = \\left(\\beta\\ \\pmb{\\text{t}}^{[k-1]} + (1-\\beta)\\ \\pmb{\\text{p}}^{[k-1]}\\right)\\]\n\n<ul>\n  <li><em>Explicit regularisation</em>: an extra term is added to the default cross-entropy loss \\(\\mathcal{L}_{CE}(\\Theta)\\) that\nallows refinement of the early-learnt concepts, but penalises drastically contradicting predictions.</li>\n</ul>\n\n\\[\\mathcal{L}_{ELR}(\\Theta)=\\mathcal{L}_{CE}(\\Theta) + \\frac{\\lambda}{n} \\sum\\text{log}(1-\\langle \\pmb{\\text{p}}, \\pmb{\\text{t}} \\rangle)\\]\n\n<p>Thus, the gradient gets a boost for the clean samples, while the impact of noisy samples is neutralised\nby temporal ensembling.</p>\n\n<h4 id=\"jensen-shannon-divergence-loss-jsd\">Jensen-Shannon Divergence Loss (JSD)</h4>\n\n<p>The authors of <strong>Jensen-Shannon Divergence Loss</strong> <sup id=\"fnref:6\" role=\"doc-noteref\"><a href=\"#fn:6\" class=\"footnote\" rel=\"footnote\">6</a></sup> take yet another approach to loss construction,\nwhich is inspired by an empirical comparison between Cross-Entropy (CE) and Mean Absolute Error (MAE) loss. CE is known\nfor its fast convergence and brilliant training dynamics, while MAE provides spectacular robustness at the price\nof slow convergence.</p>\n\n<p>Englesson et al. came up with the idea to use Jensen-Shannon Divergence, which is a proven generalisation of CE\nand MAE loss (<a href=\"#figure5\"><strong>Figure 5</strong></a>). JSD uses Kullback-Leibler Divergence \\(\\text{D}_{\\text{KL}}\\) between the target\nlabels \\(\\pmb{y}\\) and predictions of the model \\(f(\\pmb{x})\\) vs. their averaged distribution \\(\\pmb{m}\\). Summing up, one\ncan think of JSD as a CE with a robustness boost, or MAE with improved convergence.</p>\n\n\\[\\mathcal{L}_{\\text{JS}}(\\pmb{x}, \\pmb{y}) = \\frac{1}{Z} \\left( \\pi_1 \\text{D}_{\\text{KL}}(\\pmb{y}||\\pmb{m}) + (1-\\pi_1) \\text{D}_{\\text{KL}}(f(\\pmb{x})||\\pmb{m}) \\right)\\]\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure5\"></a>\n    <img alt=\"Big proportion of pie makes your weight high.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure5-jsd.png\" style=\"width:70%;margin-bottom:10px\" />\n    <p style=\"width:70%;margin-left:auto;margin-right:auto\"><b> Figure 5. JSD as a generalisation of CE and MAE loss. </b> Depending on the parameter \\(\\pi_1\\), JSD resembles CE or MAE. Image source: <sup id=\"fnref:6:1\" role=\"doc-noteref\"><a href=\"#fn:6\" class=\"footnote\" rel=\"footnote\">6</a></sup>.</p>\n</figure>\n\n<h3 id=\"implicit-regularisation\">Implicit regularisation</h3>\n\n<h4 id=\"co-teaching-ct\">Co-teaching (CT)</h4>\n\n<p>In <strong>co-teaching</strong> <sup id=\"fnref:7\" role=\"doc-noteref\"><a href=\"#fn:7\" class=\"footnote\" rel=\"footnote\">7</a></sup>, we simultaneously train two independent DNNs (<a href=\"#figure6\"><strong>Figure 6</strong></a>), and let them\nexchange examples during the training. The <em>training feed</em> (learning samples) provided by the peer network should\nideally consist only of clean samples. In CT, each network predicts which samples are clean and provides them to its\ncounterpart. Deciding whether a sample is clean relies on the trick known from SPL: the sample’s label is probably\nclean if its per-sample loss is low.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure6\"></a>\n    <img alt=\"Co-operation is key to success, especially when you want to reduce noise in your garage band.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure6-co-teaching.png\" style=\"width:50%;margin-bottom:10px\" />\n    <p style=\"width:50%;margin-left:auto;margin-right:auto\"><b> Figure 6. Exchange of training feed in co-teaching. </b> Two peer networks exchange samples that are expected\nto be clean from noise. Image source: <sup id=\"fnref:7:1\" role=\"doc-noteref\"><a href=\"#fn:7\" class=\"footnote\" rel=\"footnote\">7</a></sup>.</p>\n</figure>\n\n<p>Co-teaching is one of the most popular and universal baselines in the domain of learning from noisy data. It has\nwell-established empirical results, offers good performance even in extreme noise scenarios and can be simply\nintegrated into almost any architecture or downstream task. Unfortunately, it also has a few downsides. Firstly, there\nis no theoretical guarantee that such a training setup will eventually converge. Secondly, we may end up with\na consensus between the two networks, causing them to produce identical training feeds, and making the CT redundant.</p>\n\n<h4 id=\"mixup\">Mixup</h4>\n\n<p><strong>Mixup</strong><sup id=\"fnref:8\" role=\"doc-noteref\"><a href=\"#fn:8\" class=\"footnote\" rel=\"footnote\">8</a></sup> is a simple augmentation scheme that enforces linear behaviour of the model for in-between\ntraining samples (<a href=\"#figure7\"><strong>Figure 7</strong></a>). It linearly combines two training samples \\((\\pmb{x}_i, \\pmb{y}_i)\\)\nand \\((\\pmb{x}_j, \\pmb{y}_j)\\) with weight \\(\\lambda\\) sampled from the <em>Beta</em> distribution. It results in a new augmented sample with mixed input features \\(\\pmb{x}_{aug}\\) and a soft label \\(\\pmb{y}_{aug}\\):</p>\n\n\\[\\pmb{x}_{aug} = \\lambda \\pmb{x}_i + (1 - \\lambda)\\pmb{x}_j \\\\\n\\pmb{y}_{aug} = \\lambda \\pmb{y}_i + (1 - \\lambda)\\pmb{y}_j \\\\\\]\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure7\"></a>\n    <img alt=\"When you can’t decide between cats and dogs, why don’t have both?\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure7-mixup.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b> Figure 7. Augmentation through mixup. </b> Two samples \\(i\\) and \\(j\\) are linearly combined into a synthetic image \\(\\pmb{x}_{aug}\\) and a soft label \\(\\pmb{y}_{aug}\\). This new augmented input encourages the model to linearly interpolate the predictions between the original samples. </p>\n</figure>\n\n<p>The method is a simple, universal, yet very effective approach. It yields good empirical results while adding\nno severe computational overhead.</p>\n\n<h2 id=\"cleaning-up-allegro\">Cleaning up Allegro</h2>\n\n<p>Every offer has its right place at <a href=\"https://allegro.tech\">Allegro</a>, belonging to one out of over 23,000 categories. The category structure\nis a tree consisting of:</p>\n<ul>\n  <li>the root (Allegro),</li>\n  <li>up to 7 levels of intermediate nodes (departments, metacategories, <em>etc.</em>) — over 2,600 nodes in total,</li>\n  <li>over 23,000 leaves.</li>\n</ul>\n\n<p>Offers located in wrong categories are hard to find and hard to buy. As such, we need a way to properly assign offers\nto correct category leaves. To this end, our Machine Learning Research team has developed a category classifier\nfor Allegro offers.</p>\n\n<p>The model in question is a large language model pre-trained on the Allegro catalogue (see more\nin <a href=\"https://www.youtube.com/watch?v=6T-R4kgIbBs&amp;list=PLzveSKBX_3N7yPb4ErB5HJ83eB6XvH37C&amp;index=20\"><i>Do you speak Allegro?</i></a>) and fine-tuned for offer classification. Specifically, the downstream task here is extreme text classification: each offer is represented by text (title) and is classified into over 23,000 categories — hence the word <i>extreme</i>.</p>\n\n<p>Classification is particularly challenging for offers listed in ambiguous categories such as <em>Other, Accessories, etc.</em>\nThese categories are broad and hard to navigate, as they contain a wide variety of products. Most of those products\nactually belong to some well-defined categories, but the merchant couldn’t find the right place for those offers\nat the time of their listing, because of the very rich taxonomy of the category tree. Consequently, we decided\nto clean up the offers in ambiguous categories.</p>\n\n<p>Here’s the setup (<a href=\"#figure8\"><strong>Figure 8</strong></a>):</p>\n<ul>\n  <li>We train the category classifier on offers in well-defined categories: the model learns what lies where at Allegro.</li>\n  <li>Next, we run inference on offers in ambiguous categories: the model moves the offers to their right destination.</li>\n</ul>\n\n<p>Note that this task is subject to domain shift: the assortment listed in these ambiguous categories may be harder\nto categorise than the regular assortment in other categories.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure8\"></a>\n    <img alt=\"Always trust your friendly neighbourhood language model.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure8-category-classifier.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b> Figure 8. Category classifier: training &amp; inference. </b> The model is trained on offers listed in well-defined categories. Then, it is used to move offers from ambiguous categories (<i>Other, Accessories, etc.</i>) to the well-defined categories. </p>\n</figure>\n\n<h3 id=\"real-world-label-noise-at-allegro\">Real-world label noise at Allegro</h3>\n<p>The training set (offers in well-defined categories) is not 100% correct, for several reasons (<a href=\"#figure9\"><strong>Figure 9</strong></a>):</p>\n<ul>\n  <li>the merchant may have put the offer in the wrong category,</li>\n  <li>there are several similar categories in the catalogue,</li>\n  <li>there is no appropriate category for a given offer,</li>\n  <li>the taxonomy of the Allegro category tree changes over time.</li>\n</ul>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure9\"></a>\n    <img alt=\"AHHH, FRESH MEAT.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure9-mislabelled-offers.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b> Figure 9. Examples of mislabelled offers. </b> With over 23,000 categories at Allegro, listing each offer in its best-matching category can be challenging for merchants. Hence, label noise is an inherent feature of our training dataset. </p>\n</figure>\n\n<p>The ML model is prone to memorisation of the wrong labels in the training set, <em>i.e.</em> overfitting. These errors will\nlikely be reproduced at prediction time. Our goal is to train a robust classifier that will learn the true patterns\nand ignore the mislabelled training instances.</p>\n\n<p>The training methods described in the previous section were developed and evaluated on computer vision tasks,\n<em>e.g.</em> image classification, into a relatively small number of categories. Here, we face the problem of extreme text\nclassification. Thus, we need to adapt those methods for textual input and find out which concepts transfer well between\nthe two domains.</p>\n\n<h3 id=\"synthetic-label-noise\">Synthetic label noise</h3>\n\n<p>To evaluate the model’s robustness experimentally, we need to know <em>a priori</em> which training instances were\nmislabelled. For that, we use a generator of controllable noise. The experimental setup consists of five steps\n(<a href=\"#figure10\"><strong>Figure 10</strong></a>):</p>\n<ul>\n  <li>dumping a clean dataset from a curated pool of offers that are <em>certainly</em> in the right place,</li>\n  <li>splitting it into training, validation and test sets,</li>\n  <li>application of synthetic noise to 20% of instances in the training and validation sets (changing the offer’s category\nto a wrong one),</li>\n  <li>training the model on the noisy dataset,</li>\n  <li>testing the model on a held-out fraction of the clean dataset.</li>\n</ul>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure10\"></a>\n    <img alt=\"Staying clean has many benefits. Stay clean kids!\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure10-datasets.png\" style=\"width:70%;margin-bottom:10px\" />\n    <p style=\"width:70%;margin-left:auto;margin-right:auto\"> <b> Figure 10. Testing the model’s robustness. </b> The full dataset of clean instances (offers with true category labels) is split into training, validation and test sets. Next, label noise is introduced to the training and validation sets and the model is trained. The model is tested on a held-out fraction of the clean dataset. </p>\n</figure>\n\n<p>This setup lets us answer the following question:</p>\n\n<blockquote>\n  <p>How much does the noise in the training set hurt the model’s performance on the clean test set?</p>\n</blockquote>\n\n<p>This way, we can evaluate different methods of training classifiers under label noise and choose the most robust\nclassifier, according to accuracy on the test set.</p>\n\n<h2 id=\"and-it-works\">And… it works!</h2>\n\n<p>Below we present the results of experiments for 1.3M offers listed in the <em>Construction Work &amp; Equipment</em> category.\nSymmetric noise was applied to 20% of the training set. This means that the category labels of that percentage\nof offers were changed to different randomly chosen labels. We evaluated the 7 training methods outlined above\nand compared them to the baseline: classification with cross-entropy loss.</p>\n\n<h3 id=\"baseline-memorising-doesnt-pay-off\">Baseline: Memorising doesn’t pay off</h3>\n\n<p><strong>How does the presence of noise impact the baseline model?</strong></p>\n\n<p>The validation curves for non-corrupted samples clearly show the severe impact of noisy labels on the model’s\nperformance (<a href=\"#figure11\"><strong>Figure 11</strong></a>). In the early stage of training, the performance of the model trained\non noisy data is on par with the metrics of the model trained on clean data. Yet, starting from the 4th epoch,\nthe wrong labels in the noisy dataset appear to prevent the model from discovering the true patterns in the training\ndata, resulting in a 5 p.p. drop in accuracy at the end of the training. We attribute this drop to the <em>memorisation</em>\nof the wrong labels: instead of refining the originally learnt concepts, the network starts to overfit to the noisy\nlabels. The labels memorised for particular offers don’t help with classifying previously unseen offers at test time.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure11\"></a>\n    <img alt=\"Absolute noise corrupts absolutely.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure11-baseline-degradation.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b>Figure 11. Degradation of the baseline model in the presence of noise.</b> The 20% synthetic noise degrades the model throughout the training. In the end, the model trained on the corrupted dataset exhibits 5 p.p. lower accuracy in comparison to its clean counterpart </p>\n</figure>\n\n<h3 id=\"towards-robust-classification\">Towards robust classification</h3>\n\n<p><strong>Does robustness imply underfitting?</strong></p>\n\n<p>To verify if the evaluated methods have any effect on the model’s performance when there is no noise in the training\ndata, we tested all of them on a clean dataset without any synthetic noise.</p>\n\n<p>In the absence of corrupted data, three of the tested methods (SPL, PRL and CT) are effectively reduced to the baseline\nCross-Entropy. Therefore, the accuracy for those methods was exactly the same as for the baseline (<a href=\"#table1\"><strong>Table 1</strong></a>).\nFor mixup, the difference from the baseline was within the standard deviation range, so it was marked as no improvement\nas well.</p>\n\n<p>For CCE and JSD the performance degraded, but only slightly — by 0.04 p.p. for the former and 0.34 p.p. for the latter.\nThis drop is an acceptable compromise considering the robustness to noise that these methods enable (see below).</p>\n\n<p>ELR was the only method that improved upon the baseline, by 0.07 p.p. As ELR relies on temporal ensembling, which\ndiminishes the impact of corrupted samples during training, we hypothesise that our clean dataset contained a small\nnumber of mislabelled examples. Such paradoxes are a frequent case in machine learning practice, even for renowned\nbenchmark datasets like CIFAR-100<sup id=\"fnref:9\" role=\"doc-noteref\"><a href=\"#fn:9\" class=\"footnote\" rel=\"footnote\">9</a></sup>.</p>\n\n<p><a id=\"table1\"></a><strong>Table 1.</strong> Test accuracy scores of the models trained on the clean and corrupted\n(20% synthetic noise) datasets for the 8 training methods. Light red highlight indicates deterioration in comparison\nto the baseline, while light blue denotes improvement. <em>Notation</em>: (mean \\(\\pm\\) std)% from 5 independently seeded runs.</p>\n<table>\n    <thead>\n        <tr>\n            <th rowspan=\"2\" colspan=\"2\" style=\"text-align:center\">Method</th>\n            <th style=\"text-align:center\" colspan=\"2\">Test accuracy [%]</th>\n        </tr>\n        <tr>\n            <th style=\"text-align:center\">clean dataset</th>\n            <th style=\"text-align:center\">noisy dataset</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td colspan=\"2\" style=\"border-bottom-width: thick;text-align:center;font-weight:bold\">Baseline</td>\n            <td style=\"border-bottom-width: thick;\">90.26 ± 0.03</td>\n            <td style=\"border-bottom-width: thick;\">85.31 ± 0.08</td>\n        </tr>\n        <tr>\n            <td rowspan=\"5\" style=\"font-weight:bold;transform: rotate(180deg);writing-mode: vertical-rl;text-align: center;vertical-align: middle;width: 3em\">\n                Robust loss<br />function\n            </td>\n            <td>Self-Paced Learning (SPL)</td>\n            <td>90.26 ± 0.03</td>\n            <td style=\"background:#E1F4F4;color:black\">88.51 ± 0.02</td>\n        </tr>\n        <tr>\n            <td>Provably Robust Learning (PRL)</td>\n            <td>90.26 ± 0.03</td>\n            <td style=\"background:#E1F4F4;color:black\">88.31 ± 0.02</td>\n        </tr>\n        <tr>\n            <td>Clipped Cross-Entropy (CCE)</td>\n            <td style=\"background:#ffdecb;color:black\">90.22 ± 0.03</td>\n            <td style=\"font-weight:bold;background:#E1F4F4;color:black\">89.51 ± 0.01</td>\n        </tr>\n        <tr>\n            <td>Early Learning Regularisation (ELR)</td>\n            <td style=\"font-weight:bold;background:#E1F4F4;color:black\">90.33 ± 0.01</td>\n            <td style=\"background:#E1F4F4;color:black\">89.29 ± 0.03</td>\n        </tr>\n        <tr>\n            <td>Jensen-Shannon Divergence (JSD) </td>\n            <td style=\"background:#ffdecb;color:black\">89.92 ± 0.02</td>\n            <td style=\"background:#E1F4F4;color:black\">89.24 ± 0.01</td>\n        </tr>\n        <tr>\n            <td rowspan=\"2\" style=\"font-weight:bold;transform: rotate(180deg);writing-mode: vertical-rl;white-space: wrap;text-align: center;vertical-align: middle;width: 3em;height: 8em\">\n                Implicit regularisation\n            </td>\n            <td>Co-teaching (CT)</td>\n            <td>90.26 ± 0.03</td>\n            <td style=\"background:#E1F4F4;color:black\">88.72 ± 0.03</td>\n        </tr>\n        <tr>\n            <td>Mixup</td>\n            <td>90.27 ± 0.02</td>\n            <td style=\"background:#E1F4F4;color:black\">86.02 ± 0.06</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><strong>Robust classification results</strong></p>\n\n<p>All methods discussed in this study improved the model’s performance on the noisy dataset when compared to the baseline\n(<a href=\"#table1\"><strong>Table 1</strong></a>). The best results were obtained with CCE (+4.2 p.p.), ELR (+3.98 p.p.) and JSD (+3.93 p.p.).\nCT, SPL, PRL performed a bit worse, but still proved to be quite robust, improving upon the baseline by 3.41 p.p.,\n3.2 p.p. and 3.0 p.p., respectively.</p>\n\n<p>Mixup is a clear outlier — while it does improve upon the baseline by 0.71 p.p., this increase is noticeably smaller\nthan for the other evaluated methods. Our interpretation is that the linear augmentation at the heart of this method\nregularises the DNN, but does not address label noise <em>per se</em>. Mixup treats all samples equally, even if their labels\nare corrupted. The marginal improvement upon the baseline is evident in the validation accuracy training curve\n(<a href=\"#figure12\"><strong>Figure 12</strong></a>). Mixup starts to overfit around the 5th epoch, similarly to the baseline, and unlike all\nthe other methods.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure12\"></a>\n    <img alt=\"Mixing it up doesn’t always work as intended.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure12-validation-accuracy.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b>Figure 12. Validation accuracy during training.</b> Validation accuracy for all methods was measured during training. It is evident that the best methods are CCE, ELR and JSD, with CT, PRL and SPL trailing slightly behind. Mixup behaves similarly to the baseline. </p>\n</figure>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n\n<p>The problem of label noise is unavoidable in machine learning practice, and Allegro datasets are no exception.\nFortunately, there exist numerous methods that diminish the impact of label noise on prediction performance\nby increasing the robustness of machine learning models. In our experiments we implemented 7 of those methods\nand showed that they increase prediction accuracy in the presence of 20% synthetic noise when compared to the baseline\n(Cross-Entropy loss), most of them by a significant margin. The simple Clipped Cross-Entropy proved to be the best,\nwith an accuracy score of 89.51% (increase of 4.2 p.p. vs the baseline trained with noisy labels). This result is very\nclose to the baseline trained with clean labels (90.26%). Thus, we showed that for the case of 20% synthetic label\nnoise, it is possible to increase robustness so that the impact of label noise is negligible.</p>\n\n<p>These experiments are only a first step in making classifiers at Allegro robust to label noise. The case of synthetic\nnoise presented here is not very realistic: real-world label noise tends to be instance-dependent,\ni.e. it is influenced by individual sample features. As such, we plan to further evaluate the methods for increasing\nmodel robustness with a real-world dataset perturbed by instance-dependent noise.</p>\n\n<p>If you’d like to know more about label noise and model robustness, please refer to the papers listed below.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/1705.10694\"><em>Deep Learning is Robust to Massive Label Noise</em>, Rolnick et al., 2018</a> <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\" role=\"doc-endnote\">\n      <p><a href=\"https://papers.nips.cc/paper/2010/hash/e57c6b956a6521b28495f2886ca0977a-Abstract.html\"><em>Self-Paced Learning for Latent Variable Models</em>, Kumar et al., 2010</a> <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/2102.06735\"><em>Learning Deep Neural Networks under Agnostic Corrupted Supervision</em>, Liu et al., 2021</a> <a href=\"#fnref:3\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/2007.00151\"><em>Early-Learning Regularization Prevents Memorization of Noisy Labels</em>, Liu et al., 2020</a> <a href=\"#fnref:4\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:5\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/1610.02242\"><em>Temporal Ensembling for Semi-Supervised Learning</em>, Laine et al., 2017</a> <a href=\"#fnref:5\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:6\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/2105.04522\"><em>Generalized Jensen-Shannon Divergence Loss for Learning with Noisy Labels</em>, Englesson et al., 2021</a> <a href=\"#fnref:6\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a> <a href=\"#fnref:6:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:7\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/1804.06872\"><em>Co-teaching: Robust Training of Deep Neural Networks with Extremely Noisy Labels</em>, Han et al., 2018</a> <a href=\"#fnref:7\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a> <a href=\"#fnref:7:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:8\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/1710.09412\"><em>mixup: Beyond Empirical Risk Minimization</em>, Zhang et al., 2018</a> <a href=\"#fnref:8\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:9\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/2103.14749\"><em>Pervasive Label Errors in Test Sets Destabilize Machine Learning Benchmarks</em>, Northcutt et al., 2021</a> <a href=\"#fnref:9\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n","contentSnippet":"Label noise is ever-present in machine learning practice.\nAllegro datasets are no exception.\nWe compared 7 methods for training classifiers robust to label noise.\nAll of them improved the model’s performance on noisy datasets.\nSome of the methods decreased the model’s performance in the absence of label noise.\nWhat is label noise and why does it matter?\nIn the scope of supervised machine learning, specifically in classification tasks, the problem of label noise\nis of critical importance. It involves cases of incorrectly labelled training data. For example, let’s say that\nwe want to train a classification model to distinguish cats from dogs. For that purpose, we compose a training\ndataset with images labelled as either cat or dog. The labelling process is usually performed by human annotators,\nwho almost certainly produce some labelling errors. Unfortunately, human annotators can be confused by poor image\nquality, ambiguous image contents, or simply click the wrong item. As such, we inevitably end up with a dataset\nwhere some percentage of cats are labelled as dogs and vice versa (Figure 1).\n\n    \n    \n Figure 1. An example of label noise in a binary classification dataset. Some images in both categories were mislabelled by human annotators, which introduces noise to the training dataset. \nConsequently, the model trained with such data learns partially wrong associations, which then can lead to incorrect\npredictions for new images. The more label noise we have, the more we confuse the model during training. We can\nmeasure this by evaluating the classification error on a held-out test dataset (Figure 2). It is clear\nthat for high noise levels, it is very hard to recover the true training signal from the corrupted training data.\n\n    \n    \n Figure 2. Test accuracy as a function of label noise percentage.  The X axis indicates the ratio of mislabelled to correctly labelled examples. The dataset used here was ImageNet, corrupted with synthetic label noise. Image source: 1.\nHow can this problem be mitigated? One approach is to simply put more effort into the labelling process — we can let\nmultiple annotators label each data point and then evaluate the cross-annotator agreement. With enough time and effort,\nwe hope to obtain a dataset free of label noise. However, in practice this approach is rarely feasible due to large\nvolumes of training data and the need for efficient turnaround of machine learning projects. Consequently, we need\na different approach for handling corrupted training data, i.e. ML models robust to label noise.\nIn the context of this blog post, we define robustness as the model’s ability to efficiently learn in the presence\nof corrupted training data. In other words, a robust model can recover the correct training signal and ignore\nthe noise, so that it does not overfit to the corrupted traning set and can generalise during prediction. A major\nchallenge in this regard is the difficulty to estimate the proportion of label noise in real-world data. As such,\nrobust models are expected to handle varying amounts of label noise.\nHow to train a robust classifier?\nWe can improve the robustness of deep neural networks (DNNs) with a few tips and tricks presented in the recent\nliterature on Learning from Noisy Data. In general, there are three approaches to boosting the model’s resistance\nto noisy labels (Figure 3):\nRobust loss function boosting the training dynamics in the presence of noise.\nImplicit regularisation of the network aiming at decreasing the impact of noisy labels.\nFiltration of noisy data samples during the training or at the pre-training stage.\n\n    \n    \n Figure 3. Strategies for robustness.  In this blog post, we focused on two main approaches improving model robustness: utilisation of a robust loss function and implicit regularisation.\nIn the scope of this blog post, we present seven different methods that are strong baselines for improving\nthe generalisation of classifiers in the presence of label noise.\nRobust loss function\nSelf-Paced Learning (SPL)\nThe authors of Self-Paced Learning2 noticed that large per-sample loss might be an indication of label\ncorruption, especially in the latter stages of training. Clean labels should be easy to learn, while corrupted labels\nwould appear as difficult, resulting in a high per-sample loss.\nSPL proposes to exclude some predefined ratio of examples from the batch depending on their per-sample loss values\n(Figure 4a). Usually, the ratio is set as the estimated noise level in the dataset.\n\n    \n    \n  Figure 4. Comparison of loss filtration methods (SPL, PRL and CCE, see below).  While SPL and PRL exclude samples from loss calculation, CCE decreases the impact of potentially corrupted labels by clipping the per-sample loss values. Orange colour indicates candidate noisy samples. \nProvably Robust Learning (PRL)\nProvably Robust Learning3 derives from the ideas presented in the SPL paper, but the authors state that\ncorrupted labels should be detected depending on the gradient norm, instead of per-sample loss (Figure 4b).\nThe underlying intuition is that corrupted samples provoke the optimiser to make inadequately large steps\nin the optimisation space. The rest of the logic is the same as in SPL.\nClipped Cross-Entropy (CCE)\nRejection of samples might not be optimal from the training’s point of view, because DNNs need vast amounts of data\nto be able to generalise properly. Therefore, Clipped Cross-Entropy doesn’t exclude the most contributing samples\nfrom the batch, but rather alleviates their impact by clipping the per-sample loss to a predefined value (Figure 4c).\nEarly Learning Regularisation (ELR)\nIt has been recently observed that DNNs first fit clean samples, and then start memorising the noisy ones. This\nphenomenon reduces the generalisation properties of the model, distracting it from learning true patterns present\nin the data. Early Learning Regularisation4 mitigates memorisation with two tricks:\nTemporal ensembling of targets: during the training step \\([k]\\), the original targets \\(\\pmb{\\text{t}}\\) are mixed\nwith the model’s predictions \\(\\pmb{\\text{p}}\\) from previous training steps. This prevents the gradient from diverging\nhugely between subsequent steps. This trick is well-known in semi-supervised learning5:\nExplicit regularisation: an extra term is added to the default cross-entropy loss \\(\\mathcal{L}_{CE}(\\Theta)\\) that\nallows refinement of the early-learnt concepts, but penalises drastically contradicting predictions.\nThus, the gradient gets a boost for the clean samples, while the impact of noisy samples is neutralised\nby temporal ensembling.\nJensen-Shannon Divergence Loss (JSD)\nThe authors of Jensen-Shannon Divergence Loss 6 take yet another approach to loss construction,\nwhich is inspired by an empirical comparison between Cross-Entropy (CE) and Mean Absolute Error (MAE) loss. CE is known\nfor its fast convergence and brilliant training dynamics, while MAE provides spectacular robustness at the price\nof slow convergence.\nEnglesson et al. came up with the idea to use Jensen-Shannon Divergence, which is a proven generalisation of CE\nand MAE loss (Figure 5). JSD uses Kullback-Leibler Divergence \\(\\text{D}_{\\text{KL}}\\) between the target\nlabels \\(\\pmb{y}\\) and predictions of the model \\(f(\\pmb{x})\\) vs. their averaged distribution \\(\\pmb{m}\\). Summing up, one\ncan think of JSD as a CE with a robustness boost, or MAE with improved convergence.\n\n    \n    \n Figure 5. JSD as a generalisation of CE and MAE loss.  Depending on the parameter \\(\\pi_1\\), JSD resembles CE or MAE. Image source: 6.\nImplicit regularisation\nCo-teaching (CT)\nIn co-teaching 7, we simultaneously train two independent DNNs (Figure 6), and let them\nexchange examples during the training. The training feed (learning samples) provided by the peer network should\nideally consist only of clean samples. In CT, each network predicts which samples are clean and provides them to its\ncounterpart. Deciding whether a sample is clean relies on the trick known from SPL: the sample’s label is probably\nclean if its per-sample loss is low.\n\n    \n    \n Figure 6. Exchange of training feed in co-teaching.  Two peer networks exchange samples that are expected\nto be clean from noise. Image source: 7.\nCo-teaching is one of the most popular and universal baselines in the domain of learning from noisy data. It has\nwell-established empirical results, offers good performance even in extreme noise scenarios and can be simply\nintegrated into almost any architecture or downstream task. Unfortunately, it also has a few downsides. Firstly, there\nis no theoretical guarantee that such a training setup will eventually converge. Secondly, we may end up with\na consensus between the two networks, causing them to produce identical training feeds, and making the CT redundant.\nMixup\nMixup8 is a simple augmentation scheme that enforces linear behaviour of the model for in-between\ntraining samples (Figure 7). It linearly combines two training samples \\((\\pmb{x}_i, \\pmb{y}_i)\\)\nand \\((\\pmb{x}_j, \\pmb{y}_j)\\) with weight \\(\\lambda\\) sampled from the Beta distribution. It results in a new augmented sample with mixed input features \\(\\pmb{x}_{aug}\\) and a soft label \\(\\pmb{y}_{aug}\\):\n\n    \n    \n  Figure 7. Augmentation through mixup.  Two samples \\(i\\) and \\(j\\) are linearly combined into a synthetic image \\(\\pmb{x}_{aug}\\) and a soft label \\(\\pmb{y}_{aug}\\). This new augmented input encourages the model to linearly interpolate the predictions between the original samples. \nThe method is a simple, universal, yet very effective approach. It yields good empirical results while adding\nno severe computational overhead.\nCleaning up Allegro\nEvery offer has its right place at Allegro, belonging to one out of over 23,000 categories. The category structure\nis a tree consisting of:\nthe root (Allegro),\nup to 7 levels of intermediate nodes (departments, metacategories, etc.) — over 2,600 nodes in total,\nover 23,000 leaves.\nOffers located in wrong categories are hard to find and hard to buy. As such, we need a way to properly assign offers\nto correct category leaves. To this end, our Machine Learning Research team has developed a category classifier\nfor Allegro offers.\nThe model in question is a large language model pre-trained on the Allegro catalogue (see more\nin Do you speak Allegro?) and fine-tuned for offer classification. Specifically, the downstream task here is extreme text classification: each offer is represented by text (title) and is classified into over 23,000 categories — hence the word extreme.\nClassification is particularly challenging for offers listed in ambiguous categories such as Other, Accessories, etc.\nThese categories are broad and hard to navigate, as they contain a wide variety of products. Most of those products\nactually belong to some well-defined categories, but the merchant couldn’t find the right place for those offers\nat the time of their listing, because of the very rich taxonomy of the category tree. Consequently, we decided\nto clean up the offers in ambiguous categories.\nHere’s the setup (Figure 8):\nWe train the category classifier on offers in well-defined categories: the model learns what lies where at Allegro.\nNext, we run inference on offers in ambiguous categories: the model moves the offers to their right destination.\nNote that this task is subject to domain shift: the assortment listed in these ambiguous categories may be harder\nto categorise than the regular assortment in other categories.\n\n    \n    \n  Figure 8. Category classifier: training & inference.  The model is trained on offers listed in well-defined categories. Then, it is used to move offers from ambiguous categories (Other, Accessories, etc.) to the well-defined categories. \nReal-world label noise at Allegro\nThe training set (offers in well-defined categories) is not 100% correct, for several reasons (Figure 9):\nthe merchant may have put the offer in the wrong category,\nthere are several similar categories in the catalogue,\nthere is no appropriate category for a given offer,\nthe taxonomy of the Allegro category tree changes over time.\n\n    \n    \n  Figure 9. Examples of mislabelled offers.  With over 23,000 categories at Allegro, listing each offer in its best-matching category can be challenging for merchants. Hence, label noise is an inherent feature of our training dataset. \nThe ML model is prone to memorisation of the wrong labels in the training set, i.e. overfitting. These errors will\nlikely be reproduced at prediction time. Our goal is to train a robust classifier that will learn the true patterns\nand ignore the mislabelled training instances.\nThe training methods described in the previous section were developed and evaluated on computer vision tasks,\ne.g. image classification, into a relatively small number of categories. Here, we face the problem of extreme text\nclassification. Thus, we need to adapt those methods for textual input and find out which concepts transfer well between\nthe two domains.\nSynthetic label noise\nTo evaluate the model’s robustness experimentally, we need to know a priori which training instances were\nmislabelled. For that, we use a generator of controllable noise. The experimental setup consists of five steps\n(Figure 10):\ndumping a clean dataset from a curated pool of offers that are certainly in the right place,\nsplitting it into training, validation and test sets,\napplication of synthetic noise to 20% of instances in the training and validation sets (changing the offer’s category\nto a wrong one),\ntraining the model on the noisy dataset,\ntesting the model on a held-out fraction of the clean dataset.\n\n    \n    \n  Figure 10. Testing the model’s robustness.  The full dataset of clean instances (offers with true category labels) is split into training, validation and test sets. Next, label noise is introduced to the training and validation sets and the model is trained. The model is tested on a held-out fraction of the clean dataset. \nThis setup lets us answer the following question:\nHow much does the noise in the training set hurt the model’s performance on the clean test set?\nThis way, we can evaluate different methods of training classifiers under label noise and choose the most robust\nclassifier, according to accuracy on the test set.\nAnd… it works!\nBelow we present the results of experiments for 1.3M offers listed in the Construction Work & Equipment category.\nSymmetric noise was applied to 20% of the training set. This means that the category labels of that percentage\nof offers were changed to different randomly chosen labels. We evaluated the 7 training methods outlined above\nand compared them to the baseline: classification with cross-entropy loss.\nBaseline: Memorising doesn’t pay off\nHow does the presence of noise impact the baseline model?\nThe validation curves for non-corrupted samples clearly show the severe impact of noisy labels on the model’s\nperformance (Figure 11). In the early stage of training, the performance of the model trained\non noisy data is on par with the metrics of the model trained on clean data. Yet, starting from the 4th epoch,\nthe wrong labels in the noisy dataset appear to prevent the model from discovering the true patterns in the training\ndata, resulting in a 5 p.p. drop in accuracy at the end of the training. We attribute this drop to the memorisation\nof the wrong labels: instead of refining the originally learnt concepts, the network starts to overfit to the noisy\nlabels. The labels memorised for particular offers don’t help with classifying previously unseen offers at test time.\n\n    \n    \n Figure 11. Degradation of the baseline model in the presence of noise. The 20% synthetic noise degrades the model throughout the training. In the end, the model trained on the corrupted dataset exhibits 5 p.p. lower accuracy in comparison to its clean counterpart \nTowards robust classification\nDoes robustness imply underfitting?\nTo verify if the evaluated methods have any effect on the model’s performance when there is no noise in the training\ndata, we tested all of them on a clean dataset without any synthetic noise.\nIn the absence of corrupted data, three of the tested methods (SPL, PRL and CT) are effectively reduced to the baseline\nCross-Entropy. Therefore, the accuracy for those methods was exactly the same as for the baseline (Table 1).\nFor mixup, the difference from the baseline was within the standard deviation range, so it was marked as no improvement\nas well.\nFor CCE and JSD the performance degraded, but only slightly — by 0.04 p.p. for the former and 0.34 p.p. for the latter.\nThis drop is an acceptable compromise considering the robustness to noise that these methods enable (see below).\nELR was the only method that improved upon the baseline, by 0.07 p.p. As ELR relies on temporal ensembling, which\ndiminishes the impact of corrupted samples during training, we hypothesise that our clean dataset contained a small\nnumber of mislabelled examples. Such paradoxes are a frequent case in machine learning practice, even for renowned\nbenchmark datasets like CIFAR-1009.\nTable 1. Test accuracy scores of the models trained on the clean and corrupted\n(20% synthetic noise) datasets for the 8 training methods. Light red highlight indicates deterioration in comparison\nto the baseline, while light blue denotes improvement. Notation: (mean \\(\\pm\\) std)% from 5 independently seeded runs.\nMethod\n            Test accuracy [%]\n        \nclean dataset\n            noisy dataset\n        \nBaseline\n            90.26 ± 0.03\n            85.31 ± 0.08\n        \nfunction\n            \n            Self-Paced Learning (SPL)\n            90.26 ± 0.03\n            88.51 ± 0.02\n        \nProvably Robust Learning (PRL)\n            90.26 ± 0.03\n            88.31 ± 0.02\n        \nClipped Cross-Entropy (CCE)\n            90.22 ± 0.03\n            89.51 ± 0.01\n        \nEarly Learning Regularisation (ELR)\n            90.33 ± 0.01\n            89.29 ± 0.03\n        \nJensen-Shannon Divergence (JSD) \n            89.92 ± 0.02\n            89.24 ± 0.01\n        \nCo-teaching (CT)\n            90.26 ± 0.03\n            88.72 ± 0.03\n        \nMixup\n            90.27 ± 0.02\n            86.02 ± 0.06\n        \nRobust classification results\nAll methods discussed in this study improved the model’s performance on the noisy dataset when compared to the baseline\n(Table 1). The best results were obtained with CCE (+4.2 p.p.), ELR (+3.98 p.p.) and JSD (+3.93 p.p.).\nCT, SPL, PRL performed a bit worse, but still proved to be quite robust, improving upon the baseline by 3.41 p.p.,\n3.2 p.p. and 3.0 p.p., respectively.\nMixup is a clear outlier — while it does improve upon the baseline by 0.71 p.p., this increase is noticeably smaller\nthan for the other evaluated methods. Our interpretation is that the linear augmentation at the heart of this method\nregularises the DNN, but does not address label noise per se. Mixup treats all samples equally, even if their labels\nare corrupted. The marginal improvement upon the baseline is evident in the validation accuracy training curve\n(Figure 12). Mixup starts to overfit around the 5th epoch, similarly to the baseline, and unlike all\nthe other methods.\n\n    \n    \n Figure 12. Validation accuracy during training. Validation accuracy for all methods was measured during training. It is evident that the best methods are CCE, ELR and JSD, with CT, PRL and SPL trailing slightly behind. Mixup behaves similarly to the baseline. \nConclusions\nThe problem of label noise is unavoidable in machine learning practice, and Allegro datasets are no exception.\nFortunately, there exist numerous methods that diminish the impact of label noise on prediction performance\nby increasing the robustness of machine learning models. In our experiments we implemented 7 of those methods\nand showed that they increase prediction accuracy in the presence of 20% synthetic noise when compared to the baseline\n(Cross-Entropy loss), most of them by a significant margin. The simple Clipped Cross-Entropy proved to be the best,\nwith an accuracy score of 89.51% (increase of 4.2 p.p. vs the baseline trained with noisy labels). This result is very\nclose to the baseline trained with clean labels (90.26%). Thus, we showed that for the case of 20% synthetic label\nnoise, it is possible to increase robustness so that the impact of label noise is negligible.\nThese experiments are only a first step in making classifiers at Allegro robust to label noise. The case of synthetic\nnoise presented here is not very realistic: real-world label noise tends to be instance-dependent,\ni.e. it is influenced by individual sample features. As such, we plan to further evaluate the methods for increasing\nmodel robustness with a real-world dataset perturbed by instance-dependent noise.\nIf you’d like to know more about label noise and model robustness, please refer to the papers listed below.\nDeep Learning is Robust to Massive Label Noise, Rolnick et al., 2018 ↩\nSelf-Paced Learning for Latent Variable Models, Kumar et al., 2010 ↩\nLearning Deep Neural Networks under Agnostic Corrupted Supervision, Liu et al., 2021 ↩\nEarly-Learning Regularization Prevents Memorization of Noisy Labels, Liu et al., 2020 ↩\nTemporal Ensembling for Semi-Supervised Learning, Laine et al., 2017 ↩\nGeneralized Jensen-Shannon Divergence Loss for Learning with Noisy Labels, Englesson et al., 2021 ↩ ↩2\nCo-teaching: Robust Training of Deep Neural Networks with Extremely Noisy Labels, Han et al., 2018 ↩ ↩2\nmixup: Beyond Empirical Risk Minimization, Zhang et al., 2018 ↩\nPervasive Label Errors in Test Sets Destabilize Machine Learning Benchmarks, Northcutt et al., 2021 ↩","guid":"https://blog.allegro.tech/2023/04/learning-from-noisy-data.html","categories":["tech","mlr","robustness","research","ml","machine-learning","ai"],"isoDate":"2023-04-17T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"}],"jobs":[{"id":"743999925616021","name":"Mobile Software Engineer iOS - Mobile Core","uuid":"d4cc2fe1-0ea5-4db4-9762-efef55118836","jobAdId":"aa1af78d-bb07-47a1-a5b7-e55056cdc865","defaultJobAd":true,"refNumber":"REF4336M","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-08-21T13:32:48.907Z","location":{"city":"Poznań, Wrocław, Warsaw","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"engineering","label":"Engineering"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3976147c-fe25-42a8-8c97-78273250960b","valueLabel":"4"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999925616021","creator":{"name":"Agnieszka Adamus"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999925568646","name":"Big Data Engineer - Data & AI","uuid":"2c007e9f-491c-44d0-b5a4-19c9a718b6f7","jobAdId":"deda3947-a80a-4ee5-afb7-d478820f54eb","defaultJobAd":true,"refNumber":"REF3096X","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-08-21T08:49:03.728Z","location":{"city":"Poznań, Warsaw, Gdańsk","region":"","country":"pl","address":"","postalCode":"","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999925568646","creator":{"name":"Martyna Stafa"},"language":{"code":"en-GB","label":"English (UK)","labelNative":"English (UK)"}},{"id":"743999925170914","name":"Software Engineer - Java","uuid":"2720def5-35ff-49dc-9dc1-2bb485967c25","jobAdId":"2b53fed0-4b15-488e-a1be-516a97bf5866","defaultJobAd":true,"refNumber":"REF4327W","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-08-17T13:28:43.779Z","location":{"city":"Prague, Remote","region":"","country":"cz","address":"","postalCode":"","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"associate","label":"Associate"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"f2bb5bc2-3fb0-4d5a-96d2-59e7d59ab3d7","valueLabel":"Tech Engineer/Non-Engineer - IC (MG)"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"cz","valueLabel":"Czech republic"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"b61e1897-7104-4a9d-b1cf-04fc2c537081","valueLabel":"N/A"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"0bca93e9-bc16-4156-902e-50465671c8fa","valueLabel":"Mall.cz"},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999925170914","creator":{"name":"Natalia Glińska"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999924312561","name":"Data Engineer - Data&AI","uuid":"3f431eca-028c-4f91-bdab-c3fecf52f808","jobAdId":"4e60f952-459c-476a-96f6-5d655c9b7665","defaultJobAd":true,"refNumber":"REF4278B","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-08-11T14:58:38.416Z","location":{"city":"Warsaw, Poznań, Gdańsk, Cracow","region":"","country":"pl","address":"","postalCode":"","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"analyst","label":"Analyst"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"associate","label":"Associate"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999924312561","creator":{"name":"Natalia Glińska"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999923948994","name":"Front-End Software Engineer - Technical Platform & Operations","uuid":"aea57b5d-96f5-4b2c-948a-17e36b2e93b8","jobAdId":"505b825e-d64d-4f46-b4c8-5e2c86e88336","defaultJobAd":false,"refNumber":"REF3941R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-08-10T14:24:02.712Z","location":{"city":"Poznan, Warsaw, Poznan","region":"","country":"pl","address":"","postalCode":"","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999923948994","creator":{"name":"Dominika Fujarowicz"},"language":{"code":"en-GB","label":"English (UK)","labelNative":"English (UK)"}}],"events":[{"created":1685697967000,"duration":7200000,"id":"293929321","name":"Allegro Tech Talks #38 - Mobile: o iOS bez spinki","date_in_series_pattern":false,"status":"past","time":1686760200000,"local_date":"2023-06-14","local_time":"18:30","updated":1686773845000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":17,"venue":{"id":27549223,"name":"Allegro Warsaw Office","lat":0,"lon":0,"repinned":true,"address_1":"ul. Żelazna 51/53","city":"Warszawa","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/293929321/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-talk-38/](https://app.evenea.pl/event/allegro-tech-talk-38/) Ostatnie przed przerwą wakacyjną, stacjonarne spotkanie z cyklu Allegro Tech Talks, na których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy podczas rozmów…","how_to_find_us":"Biuro Allegro znajduje się w kompleksie Fabryki Norblina (wejście Plater 3 od ul. Żelaznej). W niedalekiej odległości znajdują się dwie stacje metra linii M2, Rondo Daszyńskiego i Rondo ONZ. Autobusy, tramwaje i inne środki transportu sprawdzisz też na: https://fabrykanorblina.pl/dojazd","visibility":"public","member_pay_fee":false},{"created":1678978572000,"duration":111600000,"id":"292278882","name":"UX Research Confetti - III edycja ","date_in_series_pattern":false,"status":"past","time":1684915200000,"local_date":"2023-05-24","local_time":"10:00","updated":1685029049000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":33,"is_online_event":true,"eventType":"ONLINE","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/292278882/","description":"**Rejestracja na wydarzenie ➡ [https://app.evenea.pl/event/ux-research-confetti-3/]( https://app.evenea.pl/event/ux-research-confetti-3/ )**[ ]( https://app.evenea.pl/event/ux-research-confetti-3/ ) **🎉 Przedstawiamy 3. edycję UX Research Confetti organizowaną przez Allegro - bezpłatną, polską konferencję poświęconą badaniom…","visibility":"public","member_pay_fee":false},{"created":1683275557000,"duration":7200000,"id":"293341234","name":"Allegro Tech Talks #37 - Kotlin Native i niebezpieczeństwa współdzielonego stanu","date_in_series_pattern":false,"status":"past","time":1684425600000,"local_date":"2023-05-18","local_time":"18:00","updated":1684437308000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":19,"venue":{"id":27570147,"name":"Allegro Office - Poznań (Nowy Rynek)","lat":52.40021514892578,"lon":16.92083168029785,"repinned":true,"address_1":"Wierzbięcice 1B - budynek D","city":"Poznań","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/293341234/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-talk-37/](https://app.evenea.pl/event/allegro-tech-talk-37/) Ciąg dalszy naszych stacjonarnych spotkań Allegro Tech Talks, na których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy podczas rozmów w kuluarach. 📌…","how_to_find_us":"Biuro Allegro znajduje się w kompleksie Nowy Rynek w budynku D. Najbliższy przystanek to Wierzbięcice i kursują tu linie tramwajowe numer 2, 5, 6, 10, 12, 18. ","visibility":"public","member_pay_fee":false},{"created":1682779438000,"duration":9000000,"id":"293215214","name":"AlleKwanty: o komputerach przyszłości, które na Allegro dopiero będą mieć","date_in_series_pattern":false,"status":"past","time":1684252800000,"local_date":"2023-05-16","local_time":"18:00","updated":1684266490000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":41,"venue":{"id":27549223,"name":"Allegro Warsaw Office","lat":52.23224639892578,"lon":20.992111206054688,"repinned":true,"address_1":"ul. Żelazna 51/53","city":"Warszawa","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/293215214/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-kwanty/](https://app.evenea.pl/event/allegro-tech-kwanty/) Allegro Tech to miejsce, w którym nasi inżynierowie dzielą się wiedzą oraz case study z wybranych projektów w firmie - w formie…","how_to_find_us":"The Allegro office is located in Norblin Factory (entrance Plater 3, from Żelazna Street). You can check the details of the journey (buses, trams, metro) at: https://fabrykanorblina.pl/dojazd/","visibility":"public","member_pay_fee":false}],"podcasts":[{"title":"O społeczności Allegro Tech i rozwoju inżynierów w Allegro","link":"https://podcast.allegro.tech/o-spolecznosci-allegro-tech-i-rozwoju-inzynierow-w-allegro/","pubDate":"Thu, 27 Jul 2023 00:00:00 GMT","content":"Na czym polega rola Principal Software Engineera w Allegro oraz co ma wspólnego z rozwijaniem siebie i dzieleniem się wiedzą? Co warto wiedzieć o turystyce, która pojawia się niemal w każdym odcinku naszych podcastów? Na czym polega, kto, kiedy i jak może z niej skorzystać? Jak pracujemy z talentami Gallupa (także w zespołach technicznych)?  Co dają nam wewnętrzne DevDays, hackhathony, gildie, meetupy, konferencje i jak jeszcze wymieniamy się doświadczeniami? Czym jest Allegro Tech Meeting i jaka idea mu przyświeca? O społeczności Allegro Tech i możliwościach rozwoju w Allegro z perspektywy inżynierów rozmawialiśmy z Marcinem Turkiem i Michałem Kosmulskim.","contentSnippet":"Na czym polega rola Principal Software Engineera w Allegro oraz co ma wspólnego z rozwijaniem siebie i dzieleniem się wiedzą? Co warto wiedzieć o turystyce, która pojawia się niemal w każdym odcinku naszych podcastów? Na czym polega, kto, kiedy i jak może z niej skorzystać? Jak pracujemy z talentami Gallupa (także w zespołach technicznych)?  Co dają nam wewnętrzne DevDays, hackhathony, gildie, meetupy, konferencje i jak jeszcze wymieniamy się doświadczeniami? Czym jest Allegro Tech Meeting i jaka idea mu przyświeca? O społeczności Allegro Tech i możliwościach rozwoju w Allegro z perspektywy inżynierów rozmawialiśmy z Marcinem Turkiem i Michałem Kosmulskim.","guid":"https://podcast.allegro.tech/o-spolecznosci-allegro-tech-i-rozwoju-inzynierow-w-allegro/","isoDate":"2023-07-27T00:00:00.000Z"},{"title":"O Data Science Hub w Allegro","link":"https://podcast.allegro.tech/o-data-science-hub-w-allegro/","pubDate":"Fri, 14 Jul 2023 00:00:00 GMT","content":"Co kryje się pod pojęciem Data Science Hub w Allegro? Jakie działania rozwijamy w tym obszarze i jak oceniamy ich potencjał? O czym jest projekt Wilson i na czym skupiamy się w projekcie przewidywania zakupów cyklicznych? Jak wykorzystujemy sztuczną inteligencję i gdzie jest dla niej miejsce wśród naszych kierunków rozwoju? O AI Transformation, poczuciu sprawczości, mieszance kompetencji i talentów zamkniętej w rolach Data Scientist, Data Engineer i Data Analyst rozmawialiśmy z Karoliną Nieradką i Kamilem Konikiewiczem.,","contentSnippet":"Co kryje się pod pojęciem Data Science Hub w Allegro? Jakie działania rozwijamy w tym obszarze i jak oceniamy ich potencjał? O czym jest projekt Wilson i na czym skupiamy się w projekcie przewidywania zakupów cyklicznych? Jak wykorzystujemy sztuczną inteligencję i gdzie jest dla niej miejsce wśród naszych kierunków rozwoju? O AI Transformation, poczuciu sprawczości, mieszance kompetencji i talentów zamkniętej w rolach Data Scientist, Data Engineer i Data Analyst rozmawialiśmy z Karoliną Nieradką i Kamilem Konikiewiczem.,","guid":"https://podcast.allegro.tech/o-data-science-hub-w-allegro/","isoDate":"2023-07-14T00:00:00.000Z"},{"title":"O technologiach i projektach w Allegro Pay","link":"https://podcast.allegro.tech/o-technologiach-i-projektach-w-allegro-pay/","pubDate":"Thu, 29 Jun 2023 00:00:00 GMT","content":"Jak powstała usługa Allegro Pay i co ma wspólnego z ratatouille? Jakie projekty i technologie stoją za tym rozwiązaniem? Jak to jest pracować w Azure i obsługiwać ruch, który generuje Allegro? Czym inżynierów może zaskoczyć praca w Allegro Pay i co czeka na nich (na przykład) w programie All4Customer? O migrowaniu baz CosmosDB, wymaganiach skali i dostępności, a także o rozwijaniu ludzi i technologii rozmawialiśmy z Mariuszem Budzynem i Tomaszem Szczerbą. Zapraszamy do słuchania! na różnych płaszczyznach?","contentSnippet":"Jak powstała usługa Allegro Pay i co ma wspólnego z ratatouille? Jakie projekty i technologie stoją za tym rozwiązaniem? Jak to jest pracować w Azure i obsługiwać ruch, który generuje Allegro? Czym inżynierów może zaskoczyć praca w Allegro Pay i co czeka na nich (na przykład) w programie All4Customer? O migrowaniu baz CosmosDB, wymaganiach skali i dostępności, a także o rozwijaniu ludzi i technologii rozmawialiśmy z Mariuszem Budzynem i Tomaszem Szczerbą. Zapraszamy do słuchania! na różnych płaszczyznach?","guid":"https://podcast.allegro.tech/o-technologiach-i-projektach-w-allegro-pay/","isoDate":"2023-06-29T00:00:00.000Z"},{"title":"O Developer Experience, czyli jak programuje się w Allegro","link":"https://podcast.allegro.tech/o-developer-experience-czyli-jak-programuje-sie-w-allegro/","pubDate":"Thu, 15 Jun 2023 00:00:00 GMT","content":"Czym jest Developer Experience (DX) w Allegro i kto za nie odpowiada? Co robimy, jako firma, aby nasi developerzy(-ki) mieli(-ły) jak największy komfort pracy? Czym jest Allegro Developer Platform i jak dużą swobodę w wyborze technologii pozostawia developer(k)om? Jak mierzymy zadowolenie użytkowników i efektywność naszych narzędzi? Skąd wiemy co naprawdę się sprawdza na różnych płaszczyznach?","contentSnippet":"Czym jest Developer Experience (DX) w Allegro i kto za nie odpowiada? Co robimy, jako firma, aby nasi developerzy(-ki) mieli(-ły) jak największy komfort pracy? Czym jest Allegro Developer Platform i jak dużą swobodę w wyborze technologii pozostawia developer(k)om? Jak mierzymy zadowolenie użytkowników i efektywność naszych narzędzi? Skąd wiemy co naprawdę się sprawdza na różnych płaszczyznach?","guid":"https://podcast.allegro.tech/o-developer-experience-czyli-jak-programuje-sie-w-allegro/","isoDate":"2023-06-15T00:00:00.000Z"}]},"__N_SSG":true}