{"pageProps":{"posts":[{"title":"Online MongoDB migration","link":"https://blog.allegro.tech/2023/09/online-mongodb-migration.html","pubDate":"Thu, 14 Sep 2023 00:00:00 +0200","authors":{"author":[{"name":["Szymon Marcinkiewicz"],"photo":["https://blog.allegro.tech/img/authors/szymon.marcinkiewicz.jpg"],"url":["https://blog.allegro.tech/authors/szymon.marcinkiewicz"]}]},"content":"<p>MongoDB is the most popular database used at <a href=\"https://allegro.tech\">Allegro</a>. We have hundreds of MongoDB databases running on our on—premise servers.\nIn 2022 we decided that we need to migrate all our MongoDB databases\nfrom existing shared clusters to new MongoDB clusters hosted on Kubernetes pods with separated resources.\nTo perform the migration of all databases we needed a tool for transfering all the data and keeping consistency between old and new databases.\nThat’s how <em>mongo-migration-stream</em> project was born.</p>\n\n<h2 id=\"why-do-we-needed-to-migrate-mongodb-databases-at-all\">Why do we needed to migrate MongoDB databases at all?</h2>\n\n<p>At Allegro we are managing tens of MongoDB clusters, with hundreds of MongoDB databases running on them.\nThis kind of approach, where one MongoDB cluster runs multiple MongoDB databases, allowed us to utilize resources\nmore effectively, while at the same time easing maintenance of clusters.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/one_cluster_multiple_databases.png\" alt=\"Old approach\" /></p>\n\n<p>We’ve been living with this approach for years, but over time, more and more databases were\ncreated on shared clusters, increasing the frequency of the noisy neighbour problem.</p>\n\n<h3 id=\"noisy-neighbour-problem\">Noisy neighbour problem</h3>\n\n<p>Generally speaking, a noisy neighbour situation appears while multiple applications run on shared infrastructure,\nand one of those applications starts to consume so many resources (like CPU, RAM or Storage),\nthat it causes starvation of other applications.</p>\n\n<p>At Allegro this problem started to be visible because over the years we’ve created more and more new MongoDB databases\nwhich were hosted on a fixed number of clusters.</p>\n\n<p>The most common cause of the noisy neighbour problem in the Allegro infrastructure was long time high CPU usage caused by one of MongoDB databases on a given cluster.\nOn various occasions it occurred that a non-optimal query performed on a large collection was consuming too much CPU,\nnegatively affecting all the other databases on that cluster, making them slower or completely unresponsive.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/cluster_cpu.png\" alt=\"Cluster CPU usage\" /></p>\n\n<h3 id=\"mongodb-on-kubernetes-as-a-solution-to-the-noisy-neighbour-problem\">MongoDB on Kubernetes as a solution to the noisy neighbour problem</h3>\n\n<p>To solve the noisy neighbour problem a separate team implemented a solution allowing Allegro engineers to create independent MongoDB clusters on Kubernetes.\nFrom now on, each MongoDB cluster is formed of multiple replicas and an arbiter spread among datacenters, serving only a single MongoDB database.\nRunning each database on a separate cluster with isolated resources managed by Kubernetes was our solution to the noisy neighbour problem.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/k8s_cpu.png\" alt=\"Kubernetes CPU usage\" /></p>\n\n<p>At this point we knew what we needed to do to solve our problems — we had to migrate all MongoDB databases from old shared clusters\nto new independent clusters on Kubernetes. Now came the time to answer the question: <em>How should we do it?</em></p>\n\n<h2 id=\"available-options\">Available options</h2>\n\n<p>Firstly, we prepared a list of requirements which a tool for migrating databases (referred to as <em>migrator</em>) had to meet in order to perform\nsuccessful migrations.</p>\n\n<h3 id=\"requirements\">Requirements</h3>\n\n<ul>\n  <li>Migrator must be able to migrate databases from older MongoDB versions to newer ones,</li>\n  <li>Migrator must be able to migrate <code class=\"language-plaintext highlighter-rouge\">ReplicaSets</code> and sharded clusters,</li>\n  <li>Migrator must copy indexes from source database to destination database,</li>\n  <li>Migrator must be able to handle more than 10k write operations per second,</li>\n  <li>Migration must be performed without any downtime,</li>\n  <li>Migration cannot affect database clients,</li>\n  <li>Database owners (software engineers) need to be able to perform migrations on their own.</li>\n</ul>\n\n<h3 id=\"existing-solutions\">Existing solutions</h3>\n\n<p>Having defined a list of requirements, we checked what tools were available on the market at the time.</p>\n\n<h4 id=\"py-mongo-sync\"><a href=\"https://github.com/caosiyang/py-mongo-sync\">py-mongo-sync</a></h4>\n\n<p>According to documentation <em>py-mongo-sync</em> is:</p>\n\n<blockquote>\n  <p>“Oplog—based data sync tool that synchronizes data from a replica set to another deployment,\ne.g.: standalone, replica set, and sharded cluster.”</p>\n</blockquote>\n\n<p>As you can see, <em>py-mongo-sync</em> is not a tool that would suit our needs from end to end.\n<em>py-mongo-sync</em> focuses on the synchronization of the data stored on the <em>source database</em> after starting the tool.\nIt doesn’t copy already existing data from the <em>source</em> to the <em>destination database</em>.\nWhat’s more, at the time <em>py-mongo-sync</em> supported MongoDB versions between 2.4 to 3.4, which were older than those used at Allegro.</p>\n\n<h4 id=\"mongodb-cluster-to-cluster-sync\"><a href=\"https://www.mongodb.com/docs/cluster-to-cluster-sync/current/\">MongoDB Cluster-to-Cluster Sync</a></h4>\n\n<p>On July 22, 2022 MongoDB released <em>mongosync</em> v1.0 — a tool for migrating and synchronizing data between MongoDB clusters.\nAs described in the <em>mongosync</em> documentation:</p>\n\n<blockquote>\n  <p>“The mongosync binary is the primary process used in Cluster—to—Cluster Sync. mongosync migrates data from one cluster\nto another and can keep the clusters in continuous sync.”</p>\n</blockquote>\n\n<p>This description sounded like a perfect fit for us! Unfortunately, after initial excitement\n(and hours spent on reading <a href=\"https://www.mongodb.com/docs/cluster-to-cluster-sync/current/reference/mongosync/\"><em>mongosync</em> documentation</a>)\nwe realized we couldn’t use <em>mongosync</em> as it was able to perform migration and synchronization process only if source database and destination database\nwere both in the exact same version.\nIt meant that there was no option to migrate databases from older MongoDB versions to the newest one, which was a no-go for us.</p>\n\n<p>When we realised that there wasn’t a tool which met all our requirements, we made a tough decision to implement our own online MongoDB migration tool\nnamed <em>mongo-migration-stream</em>.</p>\n\n<h2 id=\"mongo-migration-stream\">mongo-migration-stream</h2>\n\n<p><a href=\"https://github.com/allegro/mongo-migration-stream\"><em>mongo-migration-stream</em></a> is an open source tool from Allegro, that performs online migrations of MongoDB databases.\nIt’s a <a href=\"https://kotlinlang.org/\">Kotlin</a> application utilising\n<code class=\"language-plaintext highlighter-rouge\">mongodump</code> and <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> <a href=\"https://www.mongodb.com/docs/database-tools/\">MongoDB Command Line Database Tools</a>\nalong with <a href=\"https://www.mongodb.com/docs/manual/changeStreams/\">Mongo Change Streams</a> mechanism.\nIn this section I will explain how <em>mongo-migration-stream</em> works under the hood, by covering its functionalities from a high—level overview and\nproviding details about its low—level implementation.</p>\n\n<h3 id=\"mongo-migration-stream-terminology\">mongo-migration-stream terminology</h3>\n\n<ul>\n  <li><em>Source database</em> - MongoDB database which is a data source for migration,</li>\n  <li><em>Destination database</em> - MongoDB database which is a target for the data from <em>source database</em>,</li>\n  <li><em>Transfer</em> - a process of dumping data from <em>source database</em>, and restoring it on <em>destination database</em>,</li>\n  <li><em>Synchronization</em> - a process of keeping eventual consistency between <em>source database</em> and <em>destination database</em>,</li>\n  <li><em>Migration</em> - an end-to-end migration process combining both <em>transfer</em> and <em>synchronization</em> processes,</li>\n  <li><em>Migrator</em> - a tool for performing <em>migrations</em>.</li>\n</ul>\n\n<h3 id=\"building-blocks\">Building blocks</h3>\n\n<p>As I’ve mentioned at the beginning of this section, <em>mongo-migration-stream</em> utilises <code class=\"language-plaintext highlighter-rouge\">mongodump</code>, <code class=\"language-plaintext highlighter-rouge\">mongorestore</code>, Mongo Change Streams\nand a custom Kotlin application to perform migrations.</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">mongodump</code> is used to dump <em>source database</em> in form of a binary file,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">mongorestore</code> is used to restore previously created dump on <em>destination database</em>,</li>\n  <li>Mongo Change Streams are used to keep eventual consistency between <em>source database</em> and <em>destination database</em>,</li>\n  <li>Kotlin application orchestrates, manages, and monitors all above processes.</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">mongodump</code> and <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> are responsible for the <em>transfer</em> part of migration,\nwhile Mongo Change Streams play the main role in the <em>synchronization</em> process.</p>\n\n<h3 id=\"birds-eye-view\">Bird’s eye view</h3>\n\n<p>To implement a <em>migrator</em>, we needed a robust procedure for <em>migrations</em> which ensures that no data is lost during a <em>migration</em>.\nWe have formulated a procedure consisting of six consecutive steps:</p>\n\n<ol>\n  <li>Start listening for Mongo Change Events on <em>source database</em> and save them in the queue,</li>\n  <li>Dump all the data from <em>source database</em> using <code class=\"language-plaintext highlighter-rouge\">mongodump</code>,</li>\n  <li>Restore all the data on <em>destination database</em> using <code class=\"language-plaintext highlighter-rouge\">mongorestore</code>,</li>\n  <li>Copy indexes definitions from <em>source database</em> and start creating them on <em>destination database</em>,</li>\n  <li>Start to push all the events stored in the queue (changes on <em>source database</em>) to the <em>destination database</em>,</li>\n  <li>Wait for the queue to empty to establish eventual consistency.</li>\n</ol>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/migration_process.png\" alt=\"Migration process\" /></p>\n\n<p>Our migration procedure works flawlessly because processing Mongo Change Events in a sequence guarantees migration idempotency.\nWithout this characteristic, we would have to change the order of steps 1 and 2 in the procedure, creating a possibility of losing data during migration.</p>\n\n<p>To explain this problem in more detail, let’s assume that the <em>source database</em> deals with a continuous high volume of writes.\nIf we had started the migration by performing dump in the first place and then started to listen for events,\nwe would have lost the events stored on the <em>source database</em> in the meantime.\nHowever, as we start the migration by listening for events on the <em>source database</em>, and then proceeding with the dump,\nwe do not lose any of the events stored on the <em>source database</em> during that time.</p>\n\n<p>The diagram below presents how such a kind of <em>write anomaly</em> could happen if we started dumping data before listening for Mongo Change Events.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/avoiding_event_loss.png\" alt=\"Avoiding event loss\" /></p>\n\n<h3 id=\"implementation-details\">Implementation details</h3>\n\n<h4 id=\"concurrency\">Concurrency</h4>\n\n<p>From the beginning we wanted to make <em>mongo-migration-stream</em> fast — we knew that it would need to cope with databases having more than 10k writes per second.\nAs a result <em>mongo-migration-stream</em> parallelizes migration of one MongoDB database into independent migrations of collections.\nEach database migration consists of multiple little <em>migrators</em> — one <em>migrator</em> per collection in the database.</p>\n\n<p>The <em>transfer</em> process is performed in parallel for each collection, in separate <code class=\"language-plaintext highlighter-rouge\">mongodump</code> and <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> processes.\n<em>Synchronization</em> process was also implemented concurrently — at the beginning of migration, each collection on <em>source database</em> is watched individually\nusing <a href=\"https://www.mongodb.com/docs/manual/changeStreams/#watch-a-collection--database--or-deployment\">Mongo Change Streams with collection target</a>.\nAll collections have their own separate queues in which Mongo Change Events are stored.\nAt the final phase of migration, each of these queues is processed independently.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/concurrent_migrations.png\" alt=\"Concurrent migrations\" /></p>\n\n<h4 id=\"initial-data-transfer\">Initial data transfer</h4>\n\n<p>To perform transfer of the database, we’re executing <code class=\"language-plaintext highlighter-rouge\">mongodump</code> and <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> commands for each collection.\nFor that reason, machines on which <em>mongo-migration-stream</em> is running are required to have MongoDB Command Line Database Tools installed.</p>\n\n<p>Dumping data from collection <code class=\"language-plaintext highlighter-rouge\">collectionName</code> in <code class=\"language-plaintext highlighter-rouge\">source</code> database can be achieved by running a command:</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mongodump <span class=\"se\">\\</span>\n <span class=\"nt\">--uri</span> <span class=\"s2\">\"mongodb://mongo_rs36_1:36301,mongo_rs36_2:36302,mongo_rs36_3:36303/?replicaSet=replicaSet36\"</span> <span class=\"se\">\\</span>\n <span class=\"nt\">--db</span> <span class=\"nb\">source</span> <span class=\"se\">\\</span>\n <span class=\"nt\">--collection</span> collectionName <span class=\"se\">\\</span>\n <span class=\"nt\">--out</span> /home/user/mongomigrationstream/dumps <span class=\"se\">\\</span>\n <span class=\"nt\">--readPreference</span> secondary\n <span class=\"nt\">--username</span> username <span class=\"se\">\\</span>\n <span class=\"nt\">--config</span> /home/user/mongomigrationstream/password_config/dump.config <span class=\"se\">\\</span>\n <span class=\"nt\">--authenticationDatabase</span> admin\n</code></pre></div></div>\n\n<p>Starting a <code class=\"language-plaintext highlighter-rouge\">mongodump</code> process from Kotlin code is done with Java’s <code class=\"language-plaintext highlighter-rouge\">ProcessBuilder</code> feature.\n<code class=\"language-plaintext highlighter-rouge\">ProcessBuilder</code> requires us to provide a process program and arguments in the form of a list of Strings.\nWe construct this list using <code class=\"language-plaintext highlighter-rouge\">prepareCommand</code> function:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">prepareCommand</span><span class=\"p\">():</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"nf\">listOf</span><span class=\"p\">(</span>\n    <span class=\"n\">mongoToolsPath</span> <span class=\"p\">+</span> <span class=\"s\">\"mongodump\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--uri\"</span><span class=\"p\">,</span> <span class=\"n\">dbProperties</span><span class=\"p\">.</span><span class=\"n\">uri</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--db\"</span><span class=\"p\">,</span> <span class=\"n\">dbCollection</span><span class=\"p\">.</span><span class=\"n\">dbName</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--collection\"</span><span class=\"p\">,</span> <span class=\"n\">dbCollection</span><span class=\"p\">.</span><span class=\"n\">collectionName</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--out\"</span><span class=\"p\">,</span> <span class=\"n\">dumpPath</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--readPreference\"</span><span class=\"p\">,</span> <span class=\"n\">readPreference</span>\n<span class=\"p\">)</span> <span class=\"p\">+</span> <span class=\"nf\">credentialsIfNotNull</span><span class=\"p\">(</span><span class=\"n\">dbProperties</span><span class=\"p\">.</span><span class=\"n\">authenticationProperties</span><span class=\"p\">,</span> <span class=\"n\">passwordConfigPath</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Having <code class=\"language-plaintext highlighter-rouge\">ProcessBuilder</code> with properly configured list of process program and arguments, we’re ready to start a new process\nusing the <code class=\"language-plaintext highlighter-rouge\">start()</code> function.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">fun</span> <span class=\"nf\">runCommand</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nc\">Command</span><span class=\"p\">):</span> <span class=\"nc\">CommandResult</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">processBuilder</span> <span class=\"p\">=</span> <span class=\"nc\">ProcessBuilder</span><span class=\"p\">().</span><span class=\"nf\">command</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"nf\">prepareCommand</span><span class=\"p\">())</span> <span class=\"c1\">// Configure ProcessBuilder with mongodump command in form of List&lt;String&gt;</span>\n    <span class=\"n\">currentProcess</span> <span class=\"p\">=</span> <span class=\"n\">processBuilder</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"c1\">// Start a new process</span>\n    <span class=\"c1\">// ...</span>\n    <span class=\"kd\">val</span> <span class=\"py\">exitCode</span> <span class=\"p\">=</span> <span class=\"n\">currentProcess</span><span class=\"p\">.</span><span class=\"nf\">waitFor</span><span class=\"p\">()</span>\n    <span class=\"nf\">stopRunningCommand</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"nc\">CommandResult</span><span class=\"p\">(</span><span class=\"n\">exitCode</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>An analogous approach is implemented in <em>mongo-migration-stream</em> to execute the <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> command.</p>\n\n<h4 id=\"event-queue\">Event queue</h4>\n\n<p>During the process of migration <em>source database</em> can constantly receive changes, which <em>mongo-migration-stream</em> is listening to with Mongo Change Streams.\nEvents from the stream are saved in the queue for sending to the <em>destination database</em> at a later time.\nCurrently <em>mongo-migration-stream</em> provides two implementations of the queue,\nwhere one implementation stores the data in RAM, while the other one persists the data to disk.</p>\n\n<p>In-memory implementation can be used for databases with low traffic, or for testing purposes,\nor on machines with a sufficient amount of RAM (as events are stored as objects on the JVM heap).</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// In-memory queue implementation</span>\n<span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">InMemoryEventQueue</span><span class=\"p\">&lt;</span><span class=\"nc\">E</span><span class=\"p\">&gt;</span> <span class=\"p\">:</span> <span class=\"nc\">EventQueue</span><span class=\"p\">&lt;</span><span class=\"nc\">E</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">queue</span> <span class=\"p\">=</span> <span class=\"nc\">ConcurrentLinkedQueue</span><span class=\"p\">&lt;</span><span class=\"nc\">E</span><span class=\"p\">&gt;()</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">offer</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"nc\">E</span><span class=\"p\">):</span> <span class=\"nc\">Boolean</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">offer</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">poll</span><span class=\"p\">():</span> <span class=\"nc\">E</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">poll</span><span class=\"p\">()</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">peek</span><span class=\"p\">():</span> <span class=\"nc\">E</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">peek</span><span class=\"p\">()</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">size</span><span class=\"p\">():</span> <span class=\"nc\">Int</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">size</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">removeAll</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">removeAll</span> <span class=\"p\">{</span> <span class=\"k\">true</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In our production setup we decided to use a persistent event queue, which is implemented on top of <a href=\"https://github.com/bulldog2011/bigqueue\">BigQueue project</a>.\nAs BigQueue only allows enqueuing and dequeuing byte arrays, we had to implement serialization and deserialization of the data from the events.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Persistent queue implementation</span>\n<span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">BigQueueEventQueue</span><span class=\"p\">&lt;</span><span class=\"nc\">E</span> <span class=\"p\">:</span> <span class=\"nc\">Serializable</span><span class=\"p\">&gt;(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"n\">queueName</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">EventQueue</span><span class=\"p\">&lt;</span><span class=\"nc\">E</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">queue</span> <span class=\"p\">=</span> <span class=\"nc\">BigQueueImpl</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">queueName</span><span class=\"p\">)</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">offer</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"nc\">E</span><span class=\"p\">):</span> <span class=\"nc\">Boolean</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">enqueue</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">toByteArray</span><span class=\"p\">()).</span><span class=\"nf\">let</span> <span class=\"p\">{</span> <span class=\"k\">true</span> <span class=\"p\">}</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">poll</span><span class=\"p\">():</span> <span class=\"nc\">E</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">dequeue</span><span class=\"p\">().</span><span class=\"nf\">toE</span><span class=\"p\">()</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">peek</span><span class=\"p\">():</span> <span class=\"nc\">E</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">peek</span><span class=\"p\">().</span><span class=\"nf\">toE</span><span class=\"p\">()</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">size</span><span class=\"p\">():</span> <span class=\"nc\">Int</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">().</span><span class=\"nf\">toInt</span><span class=\"p\">()</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">removeAll</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">removeAll</span><span class=\"p\">()</span>\n        <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">gc</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">E</span><span class=\"p\">.</span><span class=\"nf\">toByteArray</span><span class=\"p\">():</span> <span class=\"nc\">ByteArray</span> <span class=\"p\">=</span> <span class=\"nc\">SerializationUtils</span><span class=\"p\">.</span><span class=\"nf\">serialize</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n    <span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">ByteArray</span><span class=\"p\">.</span><span class=\"nf\">toE</span><span class=\"p\">():</span> <span class=\"nc\">E</span> <span class=\"p\">=</span> <span class=\"nc\">SerializationUtils</span><span class=\"p\">.</span><span class=\"nf\">deserialize</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"migrating-indexes\">Migrating indexes</h4>\n\n<p>In early versions of <em>mongo-migration-stream</em>, to copy indexes from <em>source collection</em> to <em>destination collection</em>, we used\nan <a href=\"https://www.mongodb.com/docs/database-tools/mongorestore/#rebuild-indexes\">index rebuilding feature</a> from <code class=\"language-plaintext highlighter-rouge\">mongodump</code> and <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> tools.\nThis feature works on the principle that the result of <code class=\"language-plaintext highlighter-rouge\">mongodump</code> consists of both documents from the collection and definitions of indexes.\n<code class=\"language-plaintext highlighter-rouge\">mongorestore</code> can use those definitions to rebuild indexes on <em>destination collection</em>.</p>\n\n<p>Unfortunately it occurred that rebuilding indexes on <em>destination collection</em> after <em>transfer</em> phase (before starting <em>synchronization</em> process)\nwith the <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> tool lengthened the entire <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> process, preventing us from emptying the queue in the meantime.\nIt resulted in a growing queue of events to synchronize, ending up with overall longer migration times and higher resources utilisation.\nWe’ve come to the conclusion, that we must rebuild indexes, while at the same time, keep sending events from the queue to <em>destination collection</em>.</p>\n\n<p>To migrate indexes without blocking <em>migration</em> process, we implemented a solution which for each collection,\nfetches all its indexes, and rebuilds them on <em>destination collection</em>.\nLooking from the application perspective, we use <code class=\"language-plaintext highlighter-rouge\">getRawSourceIndexes</code> function to fetch a list of Documents\n(representing indexes definitions) from <em>source collection</em>,\nand then recreate them on <em>destination collection</em> using <code class=\"language-plaintext highlighter-rouge\">createIndexOnDestinationCollection</code>.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">getRawSourceIndexes</span><span class=\"p\">(</span><span class=\"n\">sourceToDestination</span><span class=\"p\">:</span> <span class=\"nc\">SourceToDestination</span><span class=\"p\">):</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">Document</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span>\n    <span class=\"n\">sourceDb</span><span class=\"p\">.</span><span class=\"nf\">getCollection</span><span class=\"p\">(</span><span class=\"n\">sourceToDestination</span><span class=\"p\">.</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">collectionName</span><span class=\"p\">).</span><span class=\"nf\">listIndexes</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">toList</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">filterNot</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"s\">\"key\"</span><span class=\"p\">,</span> <span class=\"nc\">Document</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">.</span><span class=\"n\">java</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"nc\">Document</span><span class=\"p\">().</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\"_id\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span>\n            <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"s\">\"ns\"</span><span class=\"p\">)</span>\n            <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"s\">\"v\"</span><span class=\"p\">)</span>\n            <span class=\"n\">it</span><span class=\"p\">[</span><span class=\"s\">\"background\"</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n            <span class=\"n\">it</span>\n        <span class=\"p\">}</span>\n\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">createIndexOnDestinationCollection</span><span class=\"p\">(</span>\n    <span class=\"n\">sourceToDestination</span><span class=\"p\">:</span> <span class=\"nc\">SourceToDestination</span><span class=\"p\">,</span>\n    <span class=\"n\">indexDefinition</span><span class=\"p\">:</span> <span class=\"nc\">Document</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">destinationDb</span><span class=\"p\">.</span><span class=\"nf\">runCommand</span><span class=\"p\">(</span>\n        <span class=\"nc\">Document</span><span class=\"p\">().</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\"createIndexes\"</span><span class=\"p\">,</span> <span class=\"n\">sourceToDestination</span><span class=\"p\">.</span><span class=\"n\">destination</span><span class=\"p\">.</span><span class=\"n\">collectionName</span><span class=\"p\">)</span>\n            <span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\"indexes\"</span><span class=\"p\">,</span> <span class=\"nf\">listOf</span><span class=\"p\">(</span><span class=\"n\">indexDefinition</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Our solution can rebuild indexes in both older and newer versions of MongoDB.\nTo support older MongoDB versions we specify <code class=\"language-plaintext highlighter-rouge\">{ background: true }</code> option, which does not block all operations on a given database during index creation.\nIn case where <em>destination database</em> is newer than or equal to MongoDB 4.2, the <code class=\"language-plaintext highlighter-rouge\">{ background: true }</code> option is ignored, and\n<a href=\"https://www.mongodb.com/docs/manual/core/index-creation/#comparison-to-foreground-and-background-builds\">optimized index build is used</a>.\nIn both scenarios rebuilding indexes does not block <em>synchronization</em> process, improving overall <em>migration</em> times.</p>\n\n<h4 id=\"verification-of-migration-state\">Verification of migration state</h4>\n\n<p>Throught <em>mongo-migration-stream</em> implementation we kept in mind that <em>migrator</em> user should be aware what’s happening within his/her migration.\nFor that purpose <em>mongo-migration-stream</em> exposes data about migration in multiple different ways:</p>\n\n<ul>\n  <li>\n    <p>Logs — <em>migrator</em> logs all important information, so user can verify what’s going on,</p>\n  </li>\n  <li>\n    <p>Periodical checks — when all migrated collections are in <em>synchronization</em> process, <em>migrator</em> starts a periodical check for each collection, verifying if all the data has been migrated, making collection on <em>destination database</em> ready to use,</p>\n  </li>\n  <li>\n    <p>Metrics — various metrics about migration state are exposed through <a href=\"https://micrometer.io/\">Micrometer</a>.</p>\n  </li>\n</ul>\n\n<p>On top of all that, each migrator internal state change emits an event to in—memory event bus. There are multiple types of events which <em>mongo-migration-stream</em> produces:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Event type</th>\n      <th>When the event is emitted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">StartEvent</code></td>\n      <td>Start of the migration</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">SourceToLocalStartEvent</code></td>\n      <td>Start watching for a collection specific Mongo Change Stream</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">DumpStartEvent</code></td>\n      <td>Start <code class=\"language-plaintext highlighter-rouge\">mongodump</code> for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">DumpUpdateEvent</code></td>\n      <td>Each <code class=\"language-plaintext highlighter-rouge\">mongodump</code> print to stdout</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">DumpFinishEvent</code></td>\n      <td>Finish <code class=\"language-plaintext highlighter-rouge\">mongodump</code> for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">RestoreStartEvent</code></td>\n      <td>Start <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">RestoreUpdateEvent</code></td>\n      <td>Each <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> print to stdout</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">RestoreFinishEvent</code></td>\n      <td>Finish <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">IndexRebuildStartEvent</code></td>\n      <td>Start rebuilding indexes for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">IndexRebuildFinishEvent</code></td>\n      <td>Finish rebuilding indexes for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">LocalToDestinationStartEvent</code></td>\n      <td>Start sending events from queue to destination collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">StopEvent</code></td>\n      <td>Stop of the migration</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">PauseEvent</code></td>\n      <td>Pause of the migration</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">ResumeEvent</code></td>\n      <td>Resume of paused migration</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">FailedEvent</code></td>\n      <td>Fail of collection migration</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"application-modules\">Application modules</h4>\n\n<p><em>mongo-migration-stream</em> code was split into two separate modules:</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">mongo-migration-stream-core</code> module which can be used as a library in JVM application,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">mongo-migration-stream-cli</code> module which can be run as a standalone JAR.</li>\n</ul>\n\n<h2 id=\"mongo-migration-stream-in-production-at-allegro\">mongo-migration-stream in production at Allegro</h2>\n\n<p>Since internal launch in January 2023, we have migrated more than a hundred production databases using <em>mongo-migration-stream</em>.\nThe largest migrated collection stored more than one and a half billion documents.\nAt its peak moments, <em>migrator</em> was synchronizing a collection which emitted about 4 thousand Mongo Change Events per second.\nDuring one of our migrations, one collection queue size reached almost one hundred million events.\nAll of those events were later successfully synchronized into <em>destination collection</em>.</p>\n\n<p>At Allegro we use <em>mongo-migration-stream</em> as a library in a Web application with graphical user interface.\nThis approach allows Allegro engineers to manage database migrations on their own, without involving database team members.\nOn the screenshot below you can see our Web application GUI during a migration.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/mongo_migration_stream_ui.png\" alt=\"mongo-migration-stream Web Application at Allegro\" /></p>\n","contentSnippet":"MongoDB is the most popular database used at Allegro. We have hundreds of MongoDB databases running on our on—premise servers.\nIn 2022 we decided that we need to migrate all our MongoDB databases\nfrom existing shared clusters to new MongoDB clusters hosted on Kubernetes pods with separated resources.\nTo perform the migration of all databases we needed a tool for transfering all the data and keeping consistency between old and new databases.\nThat’s how mongo-migration-stream project was born.\nWhy do we needed to migrate MongoDB databases at all?\nAt Allegro we are managing tens of MongoDB clusters, with hundreds of MongoDB databases running on them.\nThis kind of approach, where one MongoDB cluster runs multiple MongoDB databases, allowed us to utilize resources\nmore effectively, while at the same time easing maintenance of clusters.\n\nWe’ve been living with this approach for years, but over time, more and more databases were\ncreated on shared clusters, increasing the frequency of the noisy neighbour problem.\nNoisy neighbour problem\nGenerally speaking, a noisy neighbour situation appears while multiple applications run on shared infrastructure,\nand one of those applications starts to consume so many resources (like CPU, RAM or Storage),\nthat it causes starvation of other applications.\nAt Allegro this problem started to be visible because over the years we’ve created more and more new MongoDB databases\nwhich were hosted on a fixed number of clusters.\nThe most common cause of the noisy neighbour problem in the Allegro infrastructure was long time high CPU usage caused by one of MongoDB databases on a given cluster.\nOn various occasions it occurred that a non-optimal query performed on a large collection was consuming too much CPU,\nnegatively affecting all the other databases on that cluster, making them slower or completely unresponsive.\n\nMongoDB on Kubernetes as a solution to the noisy neighbour problem\nTo solve the noisy neighbour problem a separate team implemented a solution allowing Allegro engineers to create independent MongoDB clusters on Kubernetes.\nFrom now on, each MongoDB cluster is formed of multiple replicas and an arbiter spread among datacenters, serving only a single MongoDB database.\nRunning each database on a separate cluster with isolated resources managed by Kubernetes was our solution to the noisy neighbour problem.\n\nAt this point we knew what we needed to do to solve our problems — we had to migrate all MongoDB databases from old shared clusters\nto new independent clusters on Kubernetes. Now came the time to answer the question: How should we do it?\nAvailable options\nFirstly, we prepared a list of requirements which a tool for migrating databases (referred to as migrator) had to meet in order to perform\nsuccessful migrations.\nRequirements\nMigrator must be able to migrate databases from older MongoDB versions to newer ones,\nMigrator must be able to migrate ReplicaSets and sharded clusters,\nMigrator must copy indexes from source database to destination database,\nMigrator must be able to handle more than 10k write operations per second,\nMigration must be performed without any downtime,\nMigration cannot affect database clients,\nDatabase owners (software engineers) need to be able to perform migrations on their own.\nExisting solutions\nHaving defined a list of requirements, we checked what tools were available on the market at the time.\npy-mongo-sync\nAccording to documentation py-mongo-sync is:\n“Oplog—based data sync tool that synchronizes data from a replica set to another deployment,\ne.g.: standalone, replica set, and sharded cluster.”\nAs you can see, py-mongo-sync is not a tool that would suit our needs from end to end.\npy-mongo-sync focuses on the synchronization of the data stored on the source database after starting the tool.\nIt doesn’t copy already existing data from the source to the destination database.\nWhat’s more, at the time py-mongo-sync supported MongoDB versions between 2.4 to 3.4, which were older than those used at Allegro.\nMongoDB Cluster-to-Cluster Sync\nOn July 22, 2022 MongoDB released mongosync v1.0 — a tool for migrating and synchronizing data between MongoDB clusters.\nAs described in the mongosync documentation:\n“The mongosync binary is the primary process used in Cluster—to—Cluster Sync. mongosync migrates data from one cluster\nto another and can keep the clusters in continuous sync.”\nThis description sounded like a perfect fit for us! Unfortunately, after initial excitement\n(and hours spent on reading mongosync documentation)\nwe realized we couldn’t use mongosync as it was able to perform migration and synchronization process only if source database and destination database\nwere both in the exact same version.\nIt meant that there was no option to migrate databases from older MongoDB versions to the newest one, which was a no-go for us.\nWhen we realised that there wasn’t a tool which met all our requirements, we made a tough decision to implement our own online MongoDB migration tool\nnamed mongo-migration-stream.\nmongo-migration-stream\nmongo-migration-stream is an open source tool from Allegro, that performs online migrations of MongoDB databases.\nIt’s a Kotlin application utilising\nmongodump and mongorestore MongoDB Command Line Database Tools\nalong with Mongo Change Streams mechanism.\nIn this section I will explain how mongo-migration-stream works under the hood, by covering its functionalities from a high—level overview and\nproviding details about its low—level implementation.\nmongo-migration-stream terminology\nSource database - MongoDB database which is a data source for migration,\nDestination database - MongoDB database which is a target for the data from source database,\nTransfer - a process of dumping data from source database, and restoring it on destination database,\nSynchronization - a process of keeping eventual consistency between source database and destination database,\nMigration - an end-to-end migration process combining both transfer and synchronization processes,\nMigrator - a tool for performing migrations.\nBuilding blocks\nAs I’ve mentioned at the beginning of this section, mongo-migration-stream utilises mongodump, mongorestore, Mongo Change Streams\nand a custom Kotlin application to perform migrations.\nmongodump is used to dump source database in form of a binary file,\nmongorestore is used to restore previously created dump on destination database,\nMongo Change Streams are used to keep eventual consistency between source database and destination database,\nKotlin application orchestrates, manages, and monitors all above processes.\nmongodump and mongorestore are responsible for the transfer part of migration,\nwhile Mongo Change Streams play the main role in the synchronization process.\nBird’s eye view\nTo implement a migrator, we needed a robust procedure for migrations which ensures that no data is lost during a migration.\nWe have formulated a procedure consisting of six consecutive steps:\nStart listening for Mongo Change Events on source database and save them in the queue,\nDump all the data from source database using mongodump,\nRestore all the data on destination database using mongorestore,\nCopy indexes definitions from source database and start creating them on destination database,\nStart to push all the events stored in the queue (changes on source database) to the destination database,\nWait for the queue to empty to establish eventual consistency.\n\nOur migration procedure works flawlessly because processing Mongo Change Events in a sequence guarantees migration idempotency.\nWithout this characteristic, we would have to change the order of steps 1 and 2 in the procedure, creating a possibility of losing data during migration.\nTo explain this problem in more detail, let’s assume that the source database deals with a continuous high volume of writes.\nIf we had started the migration by performing dump in the first place and then started to listen for events,\nwe would have lost the events stored on the source database in the meantime.\nHowever, as we start the migration by listening for events on the source database, and then proceeding with the dump,\nwe do not lose any of the events stored on the source database during that time.\nThe diagram below presents how such a kind of write anomaly could happen if we started dumping data before listening for Mongo Change Events.\n\nImplementation details\nConcurrency\nFrom the beginning we wanted to make mongo-migration-stream fast — we knew that it would need to cope with databases having more than 10k writes per second.\nAs a result mongo-migration-stream parallelizes migration of one MongoDB database into independent migrations of collections.\nEach database migration consists of multiple little migrators — one migrator per collection in the database.\nThe transfer process is performed in parallel for each collection, in separate mongodump and mongorestore processes.\nSynchronization process was also implemented concurrently — at the beginning of migration, each collection on source database is watched individually\nusing Mongo Change Streams with collection target.\nAll collections have their own separate queues in which Mongo Change Events are stored.\nAt the final phase of migration, each of these queues is processed independently.\n\nInitial data transfer\nTo perform transfer of the database, we’re executing mongodump and mongorestore commands for each collection.\nFor that reason, machines on which mongo-migration-stream is running are required to have MongoDB Command Line Database Tools installed.\nDumping data from collection collectionName in source database can be achieved by running a command:\n\nmongodump \\\n --uri \"mongodb://mongo_rs36_1:36301,mongo_rs36_2:36302,mongo_rs36_3:36303/?replicaSet=replicaSet36\" \\\n --db source \\\n --collection collectionName \\\n --out /home/user/mongomigrationstream/dumps \\\n --readPreference secondary\n --username username \\\n --config /home/user/mongomigrationstream/password_config/dump.config \\\n --authenticationDatabase admin\n\n\nStarting a mongodump process from Kotlin code is done with Java’s ProcessBuilder feature.\nProcessBuilder requires us to provide a process program and arguments in the form of a list of Strings.\nWe construct this list using prepareCommand function:\n\noverride fun prepareCommand(): List<String> = listOf(\n    mongoToolsPath + \"mongodump\",\n    \"--uri\", dbProperties.uri,\n    \"--db\", dbCollection.dbName,\n    \"--collection\", dbCollection.collectionName,\n    \"--out\", dumpPath,\n    \"--readPreference\", readPreference\n) + credentialsIfNotNull(dbProperties.authenticationProperties, passwordConfigPath)\n\n\nHaving ProcessBuilder with properly configured list of process program and arguments, we’re ready to start a new process\nusing the start() function.\n\nfun runCommand(command: Command): CommandResult {\n    val processBuilder = ProcessBuilder().command(command.prepareCommand()) // Configure ProcessBuilder with mongodump command in form of List<String>\n    currentProcess = processBuilder.start() // Start a new process\n    // ...\n    val exitCode = currentProcess.waitFor()\n    stopRunningCommand()\n    return CommandResult(exitCode)\n}\n\n\nAn analogous approach is implemented in mongo-migration-stream to execute the mongorestore command.\nEvent queue\nDuring the process of migration source database can constantly receive changes, which mongo-migration-stream is listening to with Mongo Change Streams.\nEvents from the stream are saved in the queue for sending to the destination database at a later time.\nCurrently mongo-migration-stream provides two implementations of the queue,\nwhere one implementation stores the data in RAM, while the other one persists the data to disk.\nIn-memory implementation can be used for databases with low traffic, or for testing purposes,\nor on machines with a sufficient amount of RAM (as events are stored as objects on the JVM heap).\n\n// In-memory queue implementation\ninternal class InMemoryEventQueue<E> : EventQueue<E> {\n    private val queue = ConcurrentLinkedQueue<E>()\n\n    override fun offer(element: E): Boolean = queue.offer(element)\n    override fun poll(): E = queue.poll()\n    override fun peek(): E = queue.peek()\n    override fun size(): Int = queue.size\n    override fun removeAll() {\n        queue.removeAll { true }\n    }\n}\n\n\nIn our production setup we decided to use a persistent event queue, which is implemented on top of BigQueue project.\nAs BigQueue only allows enqueuing and dequeuing byte arrays, we had to implement serialization and deserialization of the data from the events.\n\n// Persistent queue implementation\ninternal class BigQueueEventQueue<E : Serializable>(path: String, queueName: String) : EventQueue<E> {\n    private val queue = BigQueueImpl(path, queueName)\n\n    override fun offer(element: E): Boolean = queue.enqueue(element.toByteArray()).let { true }\n    override fun poll(): E = queue.dequeue().toE()\n    override fun peek(): E = queue.peek().toE()\n    override fun size(): Int = queue.size().toInt()\n    override fun removeAll() {\n        queue.removeAll()\n        queue.gc()\n    }\n\n    private fun E.toByteArray(): ByteArray = SerializationUtils.serialize(this)\n    private fun ByteArray.toE(): E = SerializationUtils.deserialize(this)\n}\n\n\nMigrating indexes\nIn early versions of mongo-migration-stream, to copy indexes from source collection to destination collection, we used\nan index rebuilding feature from mongodump and mongorestore tools.\nThis feature works on the principle that the result of mongodump consists of both documents from the collection and definitions of indexes.\nmongorestore can use those definitions to rebuild indexes on destination collection.\nUnfortunately it occurred that rebuilding indexes on destination collection after transfer phase (before starting synchronization process)\nwith the mongorestore tool lengthened the entire mongorestore process, preventing us from emptying the queue in the meantime.\nIt resulted in a growing queue of events to synchronize, ending up with overall longer migration times and higher resources utilisation.\nWe’ve come to the conclusion, that we must rebuild indexes, while at the same time, keep sending events from the queue to destination collection.\nTo migrate indexes without blocking migration process, we implemented a solution which for each collection,\nfetches all its indexes, and rebuilds them on destination collection.\nLooking from the application perspective, we use getRawSourceIndexes function to fetch a list of Documents\n(representing indexes definitions) from source collection,\nand then recreate them on destination collection using createIndexOnDestinationCollection.\n\nprivate fun getRawSourceIndexes(sourceToDestination: SourceToDestination): List<Document> =\n    sourceDb.getCollection(sourceToDestination.source.collectionName).listIndexes()\n        .toList()\n        .filterNot { it.get(\"key\", Document::class.java) == Document().append(\"_id\", 1) }\n        .map {\n            it.remove(\"ns\")\n            it.remove(\"v\")\n            it[\"background\"] = true\n            it\n        }\n\nprivate fun createIndexOnDestinationCollection(\n    sourceToDestination: SourceToDestination,\n    indexDefinition: Document\n) {\n    destinationDb.runCommand(\n        Document().append(\"createIndexes\", sourceToDestination.destination.collectionName)\n            .append(\"indexes\", listOf(indexDefinition))\n    )\n}\n\n\nOur solution can rebuild indexes in both older and newer versions of MongoDB.\nTo support older MongoDB versions we specify { background: true } option, which does not block all operations on a given database during index creation.\nIn case where destination database is newer than or equal to MongoDB 4.2, the { background: true } option is ignored, and\noptimized index build is used.\nIn both scenarios rebuilding indexes does not block synchronization process, improving overall migration times.\nVerification of migration state\nThrought mongo-migration-stream implementation we kept in mind that migrator user should be aware what’s happening within his/her migration.\nFor that purpose mongo-migration-stream exposes data about migration in multiple different ways:\nLogs — migrator logs all important information, so user can verify what’s going on,\nPeriodical checks — when all migrated collections are in synchronization process, migrator starts a periodical check for each collection, verifying if all the data has been migrated, making collection on destination database ready to use,\nMetrics — various metrics about migration state are exposed through Micrometer.\nOn top of all that, each migrator internal state change emits an event to in—memory event bus. There are multiple types of events which mongo-migration-stream produces:\nEvent type\n      When the event is emitted\n    \nStartEvent\n      Start of the migration\n    \nSourceToLocalStartEvent\n      Start watching for a collection specific Mongo Change Stream\n    \nDumpStartEvent\n      Start mongodump for a collection\n    \nDumpUpdateEvent\n      Each mongodump print to stdout\n    \nDumpFinishEvent\n      Finish mongodump for a collection\n    \nRestoreStartEvent\n      Start mongorestore for a collection\n    \nRestoreUpdateEvent\n      Each mongorestore print to stdout\n    \nRestoreFinishEvent\n      Finish mongorestore for a collection\n    \nIndexRebuildStartEvent\n      Start rebuilding indexes for a collection\n    \nIndexRebuildFinishEvent\n      Finish rebuilding indexes for a collection\n    \nLocalToDestinationStartEvent\n      Start sending events from queue to destination collection\n    \nStopEvent\n      Stop of the migration\n    \nPauseEvent\n      Pause of the migration\n    \nResumeEvent\n      Resume of paused migration\n    \nFailedEvent\n      Fail of collection migration\n    \nApplication modules\nmongo-migration-stream code was split into two separate modules:\nmongo-migration-stream-core module which can be used as a library in JVM application,\nmongo-migration-stream-cli module which can be run as a standalone JAR.\nmongo-migration-stream in production at Allegro\nSince internal launch in January 2023, we have migrated more than a hundred production databases using mongo-migration-stream.\nThe largest migrated collection stored more than one and a half billion documents.\nAt its peak moments, migrator was synchronizing a collection which emitted about 4 thousand Mongo Change Events per second.\nDuring one of our migrations, one collection queue size reached almost one hundred million events.\nAll of those events were later successfully synchronized into destination collection.\nAt Allegro we use mongo-migration-stream as a library in a Web application with graphical user interface.\nThis approach allows Allegro engineers to manage database migrations on their own, without involving database team members.\nOn the screenshot below you can see our Web application GUI during a migration.","guid":"https://blog.allegro.tech/2023/09/online-mongodb-migration.html","categories":["tech","mongodb","nosql","kotlin","open source","mongo change streams"],"isoDate":"2023-09-13T22:00:00.000Z","thumbnail":"images/post-headers/mongodb.png"},{"title":"The Acrobatics of Switching Between Management and Engineering","link":"https://blog.allegro.tech/2023/08/management-engineering-acrobatics.html","pubDate":"Tue, 22 Aug 2023 00:00:00 +0200","authors":{"author":[{"name":["Michał Kosmulski"],"photo":["https://blog.allegro.tech/img/authors/michal.kosmulski.jpg"],"url":["https://blog.allegro.tech/authors/michal.kosmulski"]}]},"content":"<p>After six years as a Team Leader, I went back to hands-on engineering work, and I’m very happy about taking\nthis step. While it may appear surprising at first, it was a well-thought-out decision, and actually I’ve already\nperformed such a maneuver once before.</p>\n\n<h2 id=\"background\">Background</h2>\n\n<p>A few years ago I stumbled upon <a href=\"https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/\">The Engineer/Manager Pendulum</a>\nby Charity Majors, and the follow-up post <a href=\"https://charity.wtf/2019/01/04/engineering-management-the-pendulum-or-the-ladder/\">Engineering Management: The Pendulum Or The Ladder</a>.\nI found both pieces interesting, and quite in line with my own experiences: in my previous job some time earlier I\nhad been a team leader, but consciously joined <a href=\"https://allegro.tech\">Allegro</a> as a software engineer. After a while, I\nbecame a team leader again, and recently, another few years down the line, I went back to engineering yet again.</p>\n\n<p>Both above-mentioned posts make very good points, so I recommend you read them first. What I want to add on top of\nthem are my personal experiences and some tips on organizing a transition between a management and an individual\ncontributor role. The journey in the other direction (from developer to team leader) has been discussed in depth\nelsewhere, so I won’t delve into that.</p>\n\n<h2 id=\"why\">Why</h2>\n\n<p>Why would I want to switch between developer and team leader roles? The problem is they are both interesting and have\n<a href=\"/2019/06/allegro-culture-tech-leaders-meeting.html\">their own highlights</a>, but you can’t do both at the\nsame time. When you become a manager, not only do you have less time for technical tasks, but you also pretty much\nlose the ability to focus on these tasks even if you do find a time slot. This is because, like it or not, you end\nup with a <a href=\"http://www.paulgraham.com/makersschedule.html\">manager’s schedule</a>.</p>\n\n<p><img src=\"/img/articles/2023-08-22-management-engineering-acrobatics/flying-trapeze-performers.jpg\" alt=\"Circus performers on the flying trapeze, Public Domain image from https://commons.wikimedia.org/wiki/File:Programma_van_Circus_Krone_in_Rotterdam_drie_Alizes_,_vliegende_trapeze_met_o.a.,_Bestanddeelnr_910-4372.jpg\" class=\"small-image\" /></p>\n\n<p>Over time, your technical skills start deteriorating, and if you miss the right moment, you may find yourself at\na point of no return. Like a circus artist on a flying trapeze, you have to time your actions right to avoid\ndisaster. I think this metaphor fits the situation better than that of the pendulum, which moves in its own rhythm,\nindependent of external influences.</p>\n\n<p>Obviously, you need to ask yourself whether you actually want to prevent your technical skills from deteriorating. Some\npeople move on to management, wave goodbye to getting their hands dirty, and are completely fine with that. Some tinker\nwith technology in their spare time. As for me, I like technology and would not only prefer to not lose what I have\nlearned so far, but actually want to learn something new. However, due to a number of other hobbies and already\nspending more time in front of the screen than I would like, doing tech in the afternoons was not a viable option for\nme. Hence, the decision to make technology an important part of my job again.</p>\n\n<h2 id=\"how\">How</h2>\n\n<p>A crucial factor to take into account when planning such a change is that it will take time. If you take your\nteam seriously, you can’t just disappear overnight. You need to think ahead. Do not ask yourself “have I already\nlost my tech skills beyond repair?”. Ask yourself “how will my tech skills be a year from now?”.</p>\n\n<p>Also, keep a cool head. Just as when moving in the opposite direction, from engineer to manager, consider all\nconsequences, both positive and negative. It has been repeated many times that becoming a manager is not a promotion\n(being a lateral move to another career path), but in practice sometimes it is. In particular, it may come with a\nhigher level or salary. Make sure you check all details of your target role in order to avoid unpleasant surprises when\ngoing back. In my case, I was aiming for the Principal Software Engineer role, which is the same level as the Team\nLeader role at Allegro, so there were no issues in this regard.</p>\n\n<p>When I started thinking about making the switch, once I had a rough idea of what I wanted, I talked to my superior.\nThis was an important step: it allowed him to plan ahead, and also to look for opportunities for making the\nreorganization easier. Some elements of the process would depend only on our actions, but some, such as finding a good\nreplacement team leader, would also depend on a number of factors outside our control. Knowing that my boss understood\nmy need, and supported it, mattered a lot, and made the wait and preparations easier.</p>\n\n<p>Chance favors the prepared mind, as Louis Pasteur supposedly said. There happened to be a team leader in\nanother part of the company who was thinking about moving on to a different area. Thanks to being aware of my plan,\nmy boss was able to grab the chance, and we had a perfect match. We discussed with the potential new leader the team\nand the project, and he found them interesting. We planned a transition period, as short as possible, but long enough\nfor me to transfer to him a reasonable part of my knowledge about the team and its work.</p>\n\n<p>Now that we had a specific plan, we could tell the team. It was important to let everyone know as soon as possible, but\nnot before we had a specific plan. Without it, this information would only stir uncertainty. Apart\nfrom telling the team as a whole, I also talked to each person individually, in order to resolve any questions or doubts\nand to try to reduce any problems resulting from the transition as much as possible.</p>\n\n<p>Waiting for the switch date, we kept meeting online with the new leader, transferring knowledge and preparing him for\nworking with the team. There’s actually quite a lot of stuff a leader needs to know: not only how the project\nworks on technical and business levels, but also current plans, who the stakeholders are and how to work with them,\nand each team member’s individual strengths and development plan. The new leader himself also started meeting\npeople he would now work with, both team members and our product’s stakeholders, and attending team meetings such as\nthe daily stand-up. Despite gradually moving on to other tasks after the switch date, I was still available to clarify\nany doubts, and our boss would also help out when necessary, so the new leader knew he would not be left on his own.\nWhile it required quite a bit of work, the switch went smoothly, and we didn’t notice any serious disturbance to the\nteam’s functioning.</p>\n\n<h2 id=\"the-aftermath\">The Aftermath</h2>\n\n<p>It’s been several months since the switch now. Me changing back to a technical role has certainly required extra work,\nfor me, my boss, and the new team leader. Despite our best efforts, it probably put a little extra strain on the team as\nwell. Nonetheless, I think it was a win-win, even more so thanks to us being able to spot and exploit a happy\ncoincidence. I am glad to be closer to technology again, and the new leader also got to try something new, just as he\nwanted.</p>\n\n<p>There is one more subtle advantage to the whole process. When people leave the team, some knowledge inevitably gets\nlost. One of the reasons is <em>tacit knowledge</em>: there are always things you know, but are not aware of knowing. You can\nuse this knowledge when it’s needed, but you will probably not transfer it to others because you are not even aware of\nits existence in the first place. Removing someone from the team in a controlled manner as happened here (and being\nstill able to reach out to them if needed) causes such latent knowledge to be discovered, and once discovered, to be\npropagated. This causes a little disruption short-term, but in the long run it reduces\n<a href=\"https://en.wikipedia.org/wiki/Information_silo\">knowledge silos</a> and increases the\n<a href=\"https://en.wikipedia.org/wiki/Bus_factor\">bus factor</a>.</p>\n\n<p>When I first started thinking about going back to hands-on technical work for the second time, I had some doubts about\nhow much my technical skills had already deteriorated and how difficult it would be to go back. It seems I made it, but\nnot by much. Had I delayed by one more year, I might have really struggled. It’s not a matter of knowledge: theory,\nespecially generic things that do not change that fast with technology, is not lost so quickly. Also, while a team\nleader, I tried to stay in touch with technology by taking part in task refinement, architecture discussions, on-call\nrotation, etc.</p>\n\n<p>However, I really felt, and to some degree still feel, a difference in practical, hands-on work, such as actually\nwriting code. There are many small quirks that you need to be aware of in order to accomplish things quickly that you\ndon’t even notice if you use them every day and know inside-out. Knowing all the little useful tools, the less often\nused features of your IDE, or what to do when something breaks unexpectedly, make a world of a difference, but this\npractical knowledge gets lost when not used and I had to rebuild it almost from scratch. Another thing that I still\nexperience is the difficulty in focusing on a single topic. Working on a manager’s schedule for several years has taken\nits toll, and now that I often have large contiguous blocks of time, I find myself not using them as effectively as I\ncould, because I have become accustomed to always doing multiple things at once and without a chance to stay focused\nanyway. It’s gradually getting better, but I still feel the impact, and this is probably my biggest surprise of the\nwhole process.</p>\n\n<h2 id=\"about-the-principal-software-engineer-role\">About the Principal Software Engineer role</h2>\n\n<p>My current role is that of Principal Software Engineer (PSE). It is a relatively new addition to the junior, mid,\nand senior roles we’ve had so far. It has gone through a number of revisions, and is still evolving. Most people in this\nrole come from a Senior Software Engineer background, so my case of getting there after being a Team Leader is a bit\nuntypical. At many companies, roles like this are called Staff Software Engineer or similar. While still an individual\ncontributor role, a PSE differs from a senior in several ways.</p>\n\n<p>First of all, a PSE is expected to spend significant time on topics whose scope is much larger than a single team can\nhandle. Seniors can also do this, but it’s not a requirement for them. Such topics may be area-wide, such as planning a\nmajor change to a single subsystem’s architecture, or have a company-wide scope. Much work on this level consists of\ncoming up with ideas and discussing them while implementation is often left to others. So, while still technical, this\nrole encompasses less coding than that of a senior. Not very surprising given that generally moving up the career ladder\nmeans more coming up with ideas, teaching others, and planning work, while coding less yourself.</p>\n\n<p>Secondly, a PSE should be very autonomous. Most PSEs are not members of regular development teams since they move from\ntask to task depending on where they can help most. This means you cooperate with more people from different parts of\nthe company, but you don’t have the few peers you work with every day that most people have. You don’t get a backlog\nof tasks to work on, but have to plan your work yourself. People do come to you, asking for support or doing something\nfor their project, but that’s just one of many inputs.</p>\n\n<p>Thirdly, since there are few PSEs compared to other positions, for each person the role is a little different. On one\nhand this means you can’t fully know what to expect when you start. On the other, you get to shape the role yourself,\nand personally I enjoy this flexibility.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>I think the idea of swinging back and forth between engineering and management described in\n<a href=\"https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/\">The Engineer/Manager Pendulum</a>,\nis valid, and my own experience backs it up fully. One element which I want to additionally stress, however, is that\nthe switch is more like a flying trapeze than a pendulum: timing is crucial, and missing the right moment can have\nserious consequences. Becoming a Principal Software Engineer was a unique experience, both on a technical\nlevel and as my de facto last task as a team leader. Who knows what the future holds? Perhaps some time from now I’ll\ntake another swing on the flying trapeze and go back to management?</p>\n","contentSnippet":"After six years as a Team Leader, I went back to hands-on engineering work, and I’m very happy about taking\nthis step. While it may appear surprising at first, it was a well-thought-out decision, and actually I’ve already\nperformed such a maneuver once before.\nBackground\nA few years ago I stumbled upon The Engineer/Manager Pendulum\nby Charity Majors, and the follow-up post Engineering Management: The Pendulum Or The Ladder.\nI found both pieces interesting, and quite in line with my own experiences: in my previous job some time earlier I\nhad been a team leader, but consciously joined Allegro as a software engineer. After a while, I\nbecame a team leader again, and recently, another few years down the line, I went back to engineering yet again.\nBoth above-mentioned posts make very good points, so I recommend you read them first. What I want to add on top of\nthem are my personal experiences and some tips on organizing a transition between a management and an individual\ncontributor role. The journey in the other direction (from developer to team leader) has been discussed in depth\nelsewhere, so I won’t delve into that.\nWhy\nWhy would I want to switch between developer and team leader roles? The problem is they are both interesting and have\ntheir own highlights, but you can’t do both at the\nsame time. When you become a manager, not only do you have less time for technical tasks, but you also pretty much\nlose the ability to focus on these tasks even if you do find a time slot. This is because, like it or not, you end\nup with a manager’s schedule.\n\nOver time, your technical skills start deteriorating, and if you miss the right moment, you may find yourself at\na point of no return. Like a circus artist on a flying trapeze, you have to time your actions right to avoid\ndisaster. I think this metaphor fits the situation better than that of the pendulum, which moves in its own rhythm,\nindependent of external influences.\nObviously, you need to ask yourself whether you actually want to prevent your technical skills from deteriorating. Some\npeople move on to management, wave goodbye to getting their hands dirty, and are completely fine with that. Some tinker\nwith technology in their spare time. As for me, I like technology and would not only prefer to not lose what I have\nlearned so far, but actually want to learn something new. However, due to a number of other hobbies and already\nspending more time in front of the screen than I would like, doing tech in the afternoons was not a viable option for\nme. Hence, the decision to make technology an important part of my job again.\nHow\nA crucial factor to take into account when planning such a change is that it will take time. If you take your\nteam seriously, you can’t just disappear overnight. You need to think ahead. Do not ask yourself “have I already\nlost my tech skills beyond repair?”. Ask yourself “how will my tech skills be a year from now?”.\nAlso, keep a cool head. Just as when moving in the opposite direction, from engineer to manager, consider all\nconsequences, both positive and negative. It has been repeated many times that becoming a manager is not a promotion\n(being a lateral move to another career path), but in practice sometimes it is. In particular, it may come with a\nhigher level or salary. Make sure you check all details of your target role in order to avoid unpleasant surprises when\ngoing back. In my case, I was aiming for the Principal Software Engineer role, which is the same level as the Team\nLeader role at Allegro, so there were no issues in this regard.\nWhen I started thinking about making the switch, once I had a rough idea of what I wanted, I talked to my superior.\nThis was an important step: it allowed him to plan ahead, and also to look for opportunities for making the\nreorganization easier. Some elements of the process would depend only on our actions, but some, such as finding a good\nreplacement team leader, would also depend on a number of factors outside our control. Knowing that my boss understood\nmy need, and supported it, mattered a lot, and made the wait and preparations easier.\nChance favors the prepared mind, as Louis Pasteur supposedly said. There happened to be a team leader in\nanother part of the company who was thinking about moving on to a different area. Thanks to being aware of my plan,\nmy boss was able to grab the chance, and we had a perfect match. We discussed with the potential new leader the team\nand the project, and he found them interesting. We planned a transition period, as short as possible, but long enough\nfor me to transfer to him a reasonable part of my knowledge about the team and its work.\nNow that we had a specific plan, we could tell the team. It was important to let everyone know as soon as possible, but\nnot before we had a specific plan. Without it, this information would only stir uncertainty. Apart\nfrom telling the team as a whole, I also talked to each person individually, in order to resolve any questions or doubts\nand to try to reduce any problems resulting from the transition as much as possible.\nWaiting for the switch date, we kept meeting online with the new leader, transferring knowledge and preparing him for\nworking with the team. There’s actually quite a lot of stuff a leader needs to know: not only how the project\nworks on technical and business levels, but also current plans, who the stakeholders are and how to work with them,\nand each team member’s individual strengths and development plan. The new leader himself also started meeting\npeople he would now work with, both team members and our product’s stakeholders, and attending team meetings such as\nthe daily stand-up. Despite gradually moving on to other tasks after the switch date, I was still available to clarify\nany doubts, and our boss would also help out when necessary, so the new leader knew he would not be left on his own.\nWhile it required quite a bit of work, the switch went smoothly, and we didn’t notice any serious disturbance to the\nteam’s functioning.\nThe Aftermath\nIt’s been several months since the switch now. Me changing back to a technical role has certainly required extra work,\nfor me, my boss, and the new team leader. Despite our best efforts, it probably put a little extra strain on the team as\nwell. Nonetheless, I think it was a win-win, even more so thanks to us being able to spot and exploit a happy\ncoincidence. I am glad to be closer to technology again, and the new leader also got to try something new, just as he\nwanted.\nThere is one more subtle advantage to the whole process. When people leave the team, some knowledge inevitably gets\nlost. One of the reasons is tacit knowledge: there are always things you know, but are not aware of knowing. You can\nuse this knowledge when it’s needed, but you will probably not transfer it to others because you are not even aware of\nits existence in the first place. Removing someone from the team in a controlled manner as happened here (and being\nstill able to reach out to them if needed) causes such latent knowledge to be discovered, and once discovered, to be\npropagated. This causes a little disruption short-term, but in the long run it reduces\nknowledge silos and increases the\nbus factor.\nWhen I first started thinking about going back to hands-on technical work for the second time, I had some doubts about\nhow much my technical skills had already deteriorated and how difficult it would be to go back. It seems I made it, but\nnot by much. Had I delayed by one more year, I might have really struggled. It’s not a matter of knowledge: theory,\nespecially generic things that do not change that fast with technology, is not lost so quickly. Also, while a team\nleader, I tried to stay in touch with technology by taking part in task refinement, architecture discussions, on-call\nrotation, etc.\nHowever, I really felt, and to some degree still feel, a difference in practical, hands-on work, such as actually\nwriting code. There are many small quirks that you need to be aware of in order to accomplish things quickly that you\ndon’t even notice if you use them every day and know inside-out. Knowing all the little useful tools, the less often\nused features of your IDE, or what to do when something breaks unexpectedly, make a world of a difference, but this\npractical knowledge gets lost when not used and I had to rebuild it almost from scratch. Another thing that I still\nexperience is the difficulty in focusing on a single topic. Working on a manager’s schedule for several years has taken\nits toll, and now that I often have large contiguous blocks of time, I find myself not using them as effectively as I\ncould, because I have become accustomed to always doing multiple things at once and without a chance to stay focused\nanyway. It’s gradually getting better, but I still feel the impact, and this is probably my biggest surprise of the\nwhole process.\nAbout the Principal Software Engineer role\nMy current role is that of Principal Software Engineer (PSE). It is a relatively new addition to the junior, mid,\nand senior roles we’ve had so far. It has gone through a number of revisions, and is still evolving. Most people in this\nrole come from a Senior Software Engineer background, so my case of getting there after being a Team Leader is a bit\nuntypical. At many companies, roles like this are called Staff Software Engineer or similar. While still an individual\ncontributor role, a PSE differs from a senior in several ways.\nFirst of all, a PSE is expected to spend significant time on topics whose scope is much larger than a single team can\nhandle. Seniors can also do this, but it’s not a requirement for them. Such topics may be area-wide, such as planning a\nmajor change to a single subsystem’s architecture, or have a company-wide scope. Much work on this level consists of\ncoming up with ideas and discussing them while implementation is often left to others. So, while still technical, this\nrole encompasses less coding than that of a senior. Not very surprising given that generally moving up the career ladder\nmeans more coming up with ideas, teaching others, and planning work, while coding less yourself.\nSecondly, a PSE should be very autonomous. Most PSEs are not members of regular development teams since they move from\ntask to task depending on where they can help most. This means you cooperate with more people from different parts of\nthe company, but you don’t have the few peers you work with every day that most people have. You don’t get a backlog\nof tasks to work on, but have to plan your work yourself. People do come to you, asking for support or doing something\nfor their project, but that’s just one of many inputs.\nThirdly, since there are few PSEs compared to other positions, for each person the role is a little different. On one\nhand this means you can’t fully know what to expect when you start. On the other, you get to shape the role yourself,\nand personally I enjoy this flexibility.\nSummary\nI think the idea of swinging back and forth between engineering and management described in\nThe Engineer/Manager Pendulum,\nis valid, and my own experience backs it up fully. One element which I want to additionally stress, however, is that\nthe switch is more like a flying trapeze than a pendulum: timing is crucial, and missing the right moment can have\nserious consequences. Becoming a Principal Software Engineer was a unique experience, both on a technical\nlevel and as my de facto last task as a team leader. Who knows what the future holds? Perhaps some time from now I’ll\ntake another swing on the flying trapeze and go back to management?","guid":"https://blog.allegro.tech/2023/08/management-engineering-acrobatics.html","categories":["tech","coding","management","developer","team leader","career path"],"isoDate":"2023-08-21T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"From 3TB to 100GB: A Cost-Saving Journey in Database Maintenance","link":"https://blog.allegro.tech/2023/07/save-money-on-large-database.html","pubDate":"Mon, 10 Jul 2023 00:00:00 +0200","authors":{"author":[{"name":["Mateusz Stolecki"],"photo":["https://blog.allegro.tech/img/authors/mateusz.stolecki.jpg"],"url":["https://blog.allegro.tech/authors/mateusz.stolecki"]}]},"content":"<p>In the era of ubiquitous cloud services and an increasingly growing PaaS and serverless-oriented approach, performance\nand resources seem to be becoming less and less important.\nAfter all, we can scale horizontally and vertically at any time, without worrying about potential performance challenges\nthat the business may introduce.</p>\n\n<p>However, there is also another side to the coin – rising costs. While it can be argued that in many situations it is simply\ncheaper to add another instance of the service than to engage a developer who will work tirelessly to diagnose\nand optimize performance problems, the problem will persist and intensify as the business and its requirements grow.</p>\n\n<p>A similar situation arises with databases. We often store huge amounts of data for auditing or historical purposes.\nWhile the cost of maintaining such databases is negligible at a small scale,\nover time it can become a notable burden on our budget.</p>\n\n<p>I wanted to talk about such a case and how we managed to reduce the cost of maintaining a database nearly 30-fold.</p>\n\n<h2 id=\"the-problem\">The problem</h2>\n<p>As the amount of data grows, the need for scaling arises. In the case of <strong>Azure</strong> services, scaling also has its <a href=\"https://learn.microsoft.com/en-us/azure/azure-sql/database/purchasing-models?view=azuresql\">limitations</a>.\nIt is not always possible to infinitely increase the available disk space without scaling other resources (CPU, RAM, I/O).\nIn our case, this limit became apparent when we exceeded 1TB of data. Our database was based on the vCore model,\nwhere we used <strong>4 vCores</strong>.</p>\n\n<p>Unfortunately, this number of vCores limited the available disk space to <strong>1TB</strong>. Due to the increase in the number of users\nand the demand for disk space, we needed more resources. We continued to scale up, adding not only more disk resources\nbut also computational resources (I will mention that at this point we reached a scale of <strong>3TB</strong> of data, which requires\nat least <strong>12 vCores</strong>). At some point, the cost of maintaining the database amounted to several thousand euros.\nThis prompted us to look for solutions.</p>\n\n<p>Comparing the cost of storing substantial amounts of data within <strong>Azure SQL</strong> and <strong>Storage Account</strong>\n(especially blobs in the <strong>archive</strong> tier), we concluded that we could achieve significant cost reduction\nby archiving old/unused data and placing it in a cost-optimized container.</p>\n\n<h3 id=\"monthly-cost-of-storing-3tb-of-data\">Monthly cost of storing 3TB of data</h3>\n\n<table>\n  <tr>\n    <th>Azure SQL 12vCore 3TB</th>\n    <th>Storage Account Archive tier</th>\n  </tr>\n  <tr>\n    <td>$2,876.18</td>\n    <td>$31.12</td>\n  </tr>\n</table>\n\n<h2 id=\"analysis\">Analysis</h2>\n<p>After some investigation, It turned out that significant part of data could be safely archived,\nwhich would certainly provide\npotential savings and eliminate the problem of an overgrown database. Most of this data was actually historical.</p>\n\n<p>We implemented a solution that allows for much more scalable data archiving\nby asynchronously loading data into the warehouse.\nHowever, data from before the implementation of aforementioned solution were still generating considerable storage costs.</p>\n\n<p>The idea seemed simple both in concept and execution. However, we immediately encountered several problems.\nExporting such massive amounts of data is a time-consuming process and puts a heavy load on the database\ncausing responsiveness issues.</p>\n\n<p>Dealing with a production system, we could not reduce the reliability and availability of services.\nIn addition, the export functionality offered by the Azure portal is limited to databases up to <strong>200GB</strong> in size,\nwhich meant that we had to look for another solution.</p>\n\n<h2 id=\"action-plan\">Action plan</h2>\n<h3 id=\"concept\">Concept</h3>\n<p>As it turned out, there are ways to export even huge databases. After some investigation,\nwe found the <strong>SQL Package</strong> tool.\nIt provides <strong>export</strong> option and is great for solving aforementioned problem. It is able to produce a <code class=\"language-plaintext highlighter-rouge\">bacpac</code>\nfile that contains highly compressed content of the database.\nThe tool also allows you to restore data at any time using the <strong>import</strong> operation,\nif there is ever a need to review it, for example for audit purposes.</p>\n\n<p>The next step is to copy the file to the container in the Storage Account using the <strong>AzCopy</strong> tool and ensure\nthat it is stored in the <strong>ARCHIVE</strong> tier, what will massively reduce the costs of maintaining it.</p>\n\n<p>The final stage is to delete unnecessary data from the database, then <strong>SHRINK</strong> it, what will reduce database resources.</p>\n<h3 id=\"script-and-tools\">Script and tools</h3>\n<p>To export and archive the database, we used two tools provided by Microsoft: <a href=\"https://learn.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage?view=sql-server-ver16\">SQL Package</a>\nand <a href=\"https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-v10\">AzCopy</a>.</p>\n\n<p>After analyzing their documentation, we prepared the appropriate procedure taking\ninto account performance and operation duration.</p>\n<h3 id=\"infrastructure\">Infrastructure</h3>\n<p>Due to the fact that the export and upload process to the Storage Account container with this amount of data may take\na long time, we decided to set up a temporary <strong>VM</strong> with the accelerated networking option, which served us\nto execute all required scripts. It should be mentioned that the need to set up a dedicated virtual machine also arises\nfrom the fact that it must be located in an internal network, where it is also possible to connect to the machine that\nhandles the database. Thanks to meeting this condition,\nit was possible to successfully connect to the database and perform the export operation.</p>\n\n<p>The virtual machine turned out to be moderately priced, as all performed operations were not computationally demanding\n(both CPU and RAM usage were low), what allowed us to use a very resource-efficient machine. The only notable extension\nof its functionality is <strong>accelerated networking</strong>, as it must work with data transfer over the network\nand we needed good performance.</p>\n\n<h2 id=\"testing\">Testing</h2>\n<h3 id=\"optimization\">Optimization</h3>\n<p>Before we proceeded with the implementation in the production environment, we conducted a series of\ntests using test environments. They mainly involved running all the steps of the process using\ndata packages of approximately <strong>50GB</strong> and <strong>200GB</strong> in size.\nWe spent the majority of time testing and optimizing the use of the SQL Package tool.</p>\n\n<p>Our goal was to shorten the export time and obtain an optimal size for the resulting file,\nso it would not generate excessive costs due to the need to store it. We tested several scenarios\n(mostly by manipulating the <strong>compression level</strong> parameter).</p>\n\n<p>Compression in <strong>FAST</strong> mode showed an average of 10-20% faster export time than <strong>MAXIMUM</strong>, with the resulting file\nsize varying within &lt;10%.</p>\n\n<h3 id=\"performance-testing\">Performance testing</h3>\n<p>We also tested the load on the databases in each environment.\n<strong>Data IO</strong> and <strong>CPU</strong> load were tested using the test environment relying on DTU-based infrastructure utilising <strong>100 DTU</strong>\nunits.</p>\n\n<p>Data IO\n<img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-test-dev-iops.png\" alt=\"Data IO\" /></p>\n\n<p>CPU\n<img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-test-dev-cpu.png\" alt=\"CPU\" /></p>\n\n<p>Notice, that the export operation primarily consumes IO resources.</p>\n<h3 id=\"data-import\">Data Import</h3>\n<p>Due to the possible need to reuse archived data, we had to make sure that the data we imported was suitable for re-import.</p>\n\n<p>Initially, we attempted to import the data using the <strong>SQL Server Management Studio</strong> tool provided by Microsoft.\nUnfortunately, this attempt failed due to errors related to file reading during the import operation.\nWe made an additional attempt to import the archive using the SQL Package tool, which, in addition to the export option,\nalso provides import options.</p>\n\n<p>Command</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlpackage /Action:Import `\n        /tsn:$ServerName `\n        /tdn:$DatabaseName `\n        /tu:$SqlAdminName `\n        /tp:$SqlAdminPassword `\n        /tec:true `\n        /ttsc:false `\n        /d:true `\n        /sf:$SourceFile `\n        /p:CommandTimeout=999 `\n        /p:LongRunningCommandTimeout=0 `\n        /p:DatabaseLockTimeout=-1 `\n</code></pre></div></div>\n\n<p>solved the problem.</p>\n\n<h2 id=\"deployment\">Deployment</h2>\n<h3 id=\"exporting-the-database-using-sql-package-tool\">Exporting the database using SQL Package tool</h3>\n<p>The following script was executed, successfully extracting data from the database and creating the appropriate <code class=\"language-plaintext highlighter-rouge\">bacpac</code> file.\nAs a result, we received a compressed file of around 100GB.\nIt is worth pointing out that data in the database occupied about 3TB, so compression was very efficient.\nThe whole process took several hours.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlpackage\n    /Action:Export `\n    /ssn:$ServerName `\n    /sdn:$DatabaseName `\n    /su:$SqlAdminName `\n    /sp:$SqlAdminPassword `\n    /sec:true `\n    /stsc:false `\n    /tf:$TargetFile `\n    /p:CompressionOption=Fast `\n    /p:CommandTimeout=999 `\n    /p:LongRunningCommandTimeout=0 `\n    /p:DatabaseLockTimeout=-1 `\n    /p:TempDirectoryForTableData=$TempDirectory `\n    /d:true `\n    /df:$SqlLogs `\n</code></pre></div></div>\n\n<p>Many parameters of this operation were evaluated during trials on test environments.\nThe particularly important ones are:</p>\n<ul>\n  <li><strong>CommandTimeout, LongRunningCommandTimeout, DatabaseLockTimeout</strong> - This set of\nparameters ensures that the connection\nis maintained throughout the entire duration of the export operation (assuming that it will be long-running).</li>\n  <li><strong>CompressionOption</strong> - The degree of data compression in the output file.\nTwo variants were tested:\n<strong>FAST</strong> and <strong>MAXIMUM</strong>.\n<strong>FAST</strong> allowed us to shorten the export time by about 2 hours while showing only slightly lower\ndata compression (in our case, the difference was around 10%).</li>\n</ul>\n\n<div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">/p:TableData</span><span class=\"o\">=</span><span class=\"s2\">\"dbo.TestTable\"</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>The parameter allows us to limit the data export only to the tables selected by us, what significantly shortens\nthe overall operation time. It is also worth mentioning that it is possible to set the parameter multiple times.</p>\n\n<p>Since the export was launched at night, the procedure had no negative impact on users. The impact of the\nexport operation on the database load (Data I/O percentage) is presented in the graph below. It can be observed that\nthe resource load increased during this operation.</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-export-iops.png\" alt=\"Data IO\" /></p>\n\n<h3 id=\"copying-the-archived-database-using-azcopy\">Copying the archived database using AzCopy</h3>\n<p>The following script was executed to copy the exported file to the Storage Account:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\\azcopy `\n    copy `\n    $TargetFile `\n\"https://$StorageAccountName.blob.core.windows.net/$StorageContainerName/$StorageBlobName$SAS\" `\n    --recursive `\n    --overwrite=true `\n    --blob-type=BlockBlob `\n    --put-md5 `\n    --log-level=info `\n    --block-blob-tier=archive `\n</code></pre></div></div>\n\n<p>The process went quickly. Copying the 100GB file took only a few minutes, thanks to the high network throughput.\nIt is worth noting that the archive tier is set immediately.</p>\n\n<h3 id=\"conducting-a-shrink-operation\">Conducting a SHRINK operation</h3>\n<p>The SHRINK operation is, unfortunately, required to downscale the Azure SQL database. It took several hours to complete.\n<strong>WAIT_AT_LOW_PRIORITY</strong> was used to reduce the impact of this operation on the database users.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DBCC</span> <span class=\"n\">SHRINKDATABASE</span> <span class=\"p\">([</span><span class=\"n\">DB_NAME</span><span class=\"p\">])</span> <span class=\"k\">WITH</span> <span class=\"n\">WAIT_AT_LOW_PRIORITY</span>\n</code></pre></div></div>\n\n<p>The performance chart (Data IO) during the above operation looked as follows:</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-shrink.png\" alt=\"Data IO\" /></p>\n\n<p>We observed a slight increase in Data IO operations during the SHRINK operation.</p>\n<h3 id=\"performance-analysis-and-index-rebuild\">Performance analysis and index rebuild</h3>\n<p>This step appeared quite unexpectedly in our procedure. After performing the SHRINK operation and successfully\nlowering the parameters of the machine responsible for the database, we began to observe\nthe impact of our operations on performance.</p>\n\n<p>To our concern, we observed a noticeable performance regression.\nEndpoints that use the database on which we performed <strong>SHRINK</strong> operation showed abnormally increased response times.</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-rps-before-index.png\" alt=\"RPS\" /></p>\n\n<p>The database load chart also did not look encouraging, with frequent peaks during query execution.</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-iops-before-index.png\" alt=\"IOPS\" /></p>\n\n<p>Attempts to scale the machine did not bring spectacular results and only increased costs (considering that our goal was\nto lower them, it was not an optimal solution).</p>\n\n<p>As it turned out, the culprit was extraordinarily high index fragmentation. The result of the SHRINK operation was an increase\nin the mentioned fragmentation to almost &gt;90% for practically all existing indexes.\nThis forced us to consider rebuilding all of them.</p>\n\n<p>Even Microsoft recommends rebuilding indexes in their documentation <a href=\"https://learn.microsoft.com/en-us/sql/relational-databases/databases/shrink-a-database?view=sql-server-ver16\">here</a>:</p>\n\n<blockquote>\n  <p>Data that is moved to shrink a file can be scattered to any available location in the file.\nThis causes index fragmentation and can slow the performance of queries that search a range of the index.\nTo eliminate the fragmentation, consider rebuilding the indexes on the file after shrinking.</p>\n</blockquote>\n\n<p>We decided to proceed with the above-mentioned index rebuild process. Here, we also applied possible optimizations\nto avoid negative consequences related to the availability of our services. The <strong>ONLINE</strong> option is particularly noteworthy,\nas it ensures that existing indexes and tables will not be blocked, what is an important issue in the case\nof continuous operation of our services.</p>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">ALTER</span> <span class=\"k\">INDEX</span> <span class=\"k\">ALL</span> <span class=\"k\">ON</span> <span class=\"n\">dbo</span><span class=\"p\">.</span><span class=\"n\">TableName</span> <span class=\"n\">REBUILD</span> <span class=\"k\">WITH</span>\n<span class=\"p\">(</span><span class=\"n\">FILLFACTOR</span> <span class=\"o\">=</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"n\">SORT_IN_TEMPDB</span> <span class=\"o\">=</span> <span class=\"k\">ON</span><span class=\"p\">,</span> <span class=\"n\">STATISTICS_NORECOMPUTE</span> <span class=\"o\">=</span> <span class=\"k\">ON</span><span class=\"p\">,</span> <span class=\"n\">ONLINE</span> <span class=\"o\">=</span> <span class=\"k\">ON</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>It should also be noted that this can be a time-consuming operation, but as a result of its execution,\nthe indexes returned to the required consistency level, reaching a level of fragmentation close to 0%.\nThe response time and resource consumption charts of the database also returned to the values closer to the initial ones.</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-rps-after-rebuild.png\" alt=\"RPS\" /></p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/perf-xyz-iops-after-index.png\" alt=\"IOPS\" /></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>After performing all of the described actions, we achieved a reduction\nin the size of the database from over 3TB to slightly below 100GB.\nBy lowering the required disk space, we could also significantly reduce the computational resources of the database,\ngenerating further serious savings.</p>\n\n<p>Before performing all the operations,\nthe monthly cost of maintaining the database was close to €3000.\nBy switching from a database based on a 12 vCore and 3TB model to a Standard DTU with 100 units and 150GB\nwe managed to cut our monthly spendings to mere €125.\nAfter all, our effort paid off.</p>\n\n<p><img src=\"/img/articles/2023-07-10-save-money-on-large-database/montly-cost-reduction.png\" alt=\"Cost reduction\" /></p>\n\n<p>The above example demonstrates how to greatly reduce infrastructure costs. Of course,\nthe described procedure will apply to specific cases and data characteristics.\nHowever, if you have a similar problem, I think it is worth considering this approach.</p>\n","contentSnippet":"In the era of ubiquitous cloud services and an increasingly growing PaaS and serverless-oriented approach, performance\nand resources seem to be becoming less and less important.\nAfter all, we can scale horizontally and vertically at any time, without worrying about potential performance challenges\nthat the business may introduce.\nHowever, there is also another side to the coin – rising costs. While it can be argued that in many situations it is simply\ncheaper to add another instance of the service than to engage a developer who will work tirelessly to diagnose\nand optimize performance problems, the problem will persist and intensify as the business and its requirements grow.\nA similar situation arises with databases. We often store huge amounts of data for auditing or historical purposes.\nWhile the cost of maintaining such databases is negligible at a small scale,\nover time it can become a notable burden on our budget.\nI wanted to talk about such a case and how we managed to reduce the cost of maintaining a database nearly 30-fold.\nThe problem\nAs the amount of data grows, the need for scaling arises. In the case of Azure services, scaling also has its limitations.\nIt is not always possible to infinitely increase the available disk space without scaling other resources (CPU, RAM, I/O).\nIn our case, this limit became apparent when we exceeded 1TB of data. Our database was based on the vCore model,\nwhere we used 4 vCores.\nUnfortunately, this number of vCores limited the available disk space to 1TB. Due to the increase in the number of users\nand the demand for disk space, we needed more resources. We continued to scale up, adding not only more disk resources\nbut also computational resources (I will mention that at this point we reached a scale of 3TB of data, which requires\nat least 12 vCores). At some point, the cost of maintaining the database amounted to several thousand euros.\nThis prompted us to look for solutions.\nComparing the cost of storing substantial amounts of data within Azure SQL and Storage Account\n(especially blobs in the archive tier), we concluded that we could achieve significant cost reduction\nby archiving old/unused data and placing it in a cost-optimized container.\nMonthly cost of storing 3TB of data\nAzure SQL 12vCore 3TB\n    Storage Account Archive tier\n  \n$2,876.18\n    $31.12\n  \nAnalysis\nAfter some investigation, It turned out that significant part of data could be safely archived,\nwhich would certainly provide\npotential savings and eliminate the problem of an overgrown database. Most of this data was actually historical.\nWe implemented a solution that allows for much more scalable data archiving\nby asynchronously loading data into the warehouse.\nHowever, data from before the implementation of aforementioned solution were still generating considerable storage costs.\nThe idea seemed simple both in concept and execution. However, we immediately encountered several problems.\nExporting such massive amounts of data is a time-consuming process and puts a heavy load on the database\ncausing responsiveness issues.\nDealing with a production system, we could not reduce the reliability and availability of services.\nIn addition, the export functionality offered by the Azure portal is limited to databases up to 200GB in size,\nwhich meant that we had to look for another solution.\nAction plan\nConcept\nAs it turned out, there are ways to export even huge databases. After some investigation,\nwe found the SQL Package tool.\nIt provides export option and is great for solving aforementioned problem. It is able to produce a bacpac\nfile that contains highly compressed content of the database.\nThe tool also allows you to restore data at any time using the import operation,\nif there is ever a need to review it, for example for audit purposes.\nThe next step is to copy the file to the container in the Storage Account using the AzCopy tool and ensure\nthat it is stored in the ARCHIVE tier, what will massively reduce the costs of maintaining it.\nThe final stage is to delete unnecessary data from the database, then SHRINK it, what will reduce database resources.\nScript and tools\nTo export and archive the database, we used two tools provided by Microsoft: SQL Package\nand AzCopy.\nAfter analyzing their documentation, we prepared the appropriate procedure taking\ninto account performance and operation duration.\nInfrastructure\nDue to the fact that the export and upload process to the Storage Account container with this amount of data may take\na long time, we decided to set up a temporary VM with the accelerated networking option, which served us\nto execute all required scripts. It should be mentioned that the need to set up a dedicated virtual machine also arises\nfrom the fact that it must be located in an internal network, where it is also possible to connect to the machine that\nhandles the database. Thanks to meeting this condition,\nit was possible to successfully connect to the database and perform the export operation.\nThe virtual machine turned out to be moderately priced, as all performed operations were not computationally demanding\n(both CPU and RAM usage were low), what allowed us to use a very resource-efficient machine. The only notable extension\nof its functionality is accelerated networking, as it must work with data transfer over the network\nand we needed good performance.\nTesting\nOptimization\nBefore we proceeded with the implementation in the production environment, we conducted a series of\ntests using test environments. They mainly involved running all the steps of the process using\ndata packages of approximately 50GB and 200GB in size.\nWe spent the majority of time testing and optimizing the use of the SQL Package tool.\nOur goal was to shorten the export time and obtain an optimal size for the resulting file,\nso it would not generate excessive costs due to the need to store it. We tested several scenarios\n(mostly by manipulating the compression level parameter).\nCompression in FAST mode showed an average of 10-20% faster export time than MAXIMUM, with the resulting file\nsize varying within <10%.\nPerformance testing\nWe also tested the load on the databases in each environment.\nData IO and CPU load were tested using the test environment relying on DTU-based infrastructure utilising 100 DTU\nunits.\nData IO\n\nCPU\n\nNotice, that the export operation primarily consumes IO resources.\nData Import\nDue to the possible need to reuse archived data, we had to make sure that the data we imported was suitable for re-import.\nInitially, we attempted to import the data using the SQL Server Management Studio tool provided by Microsoft.\nUnfortunately, this attempt failed due to errors related to file reading during the import operation.\nWe made an additional attempt to import the archive using the SQL Package tool, which, in addition to the export option,\nalso provides import options.\nCommand\n\nsqlpackage /Action:Import `\n        /tsn:$ServerName `\n        /tdn:$DatabaseName `\n        /tu:$SqlAdminName `\n        /tp:$SqlAdminPassword `\n        /tec:true `\n        /ttsc:false `\n        /d:true `\n        /sf:$SourceFile `\n        /p:CommandTimeout=999 `\n        /p:LongRunningCommandTimeout=0 `\n        /p:DatabaseLockTimeout=-1 `\n\n\nsolved the problem.\nDeployment\nExporting the database using SQL Package tool\nThe following script was executed, successfully extracting data from the database and creating the appropriate bacpac file.\nAs a result, we received a compressed file of around 100GB.\nIt is worth pointing out that data in the database occupied about 3TB, so compression was very efficient.\nThe whole process took several hours.\n\nsqlpackage\n    /Action:Export `\n    /ssn:$ServerName `\n    /sdn:$DatabaseName `\n    /su:$SqlAdminName `\n    /sp:$SqlAdminPassword `\n    /sec:true `\n    /stsc:false `\n    /tf:$TargetFile `\n    /p:CompressionOption=Fast `\n    /p:CommandTimeout=999 `\n    /p:LongRunningCommandTimeout=0 `\n    /p:DatabaseLockTimeout=-1 `\n    /p:TempDirectoryForTableData=$TempDirectory `\n    /d:true `\n    /df:$SqlLogs `\n\n\nMany parameters of this operation were evaluated during trials on test environments.\nThe particularly important ones are:\nCommandTimeout, LongRunningCommandTimeout, DatabaseLockTimeout - This set of\nparameters ensures that the connection\nis maintained throughout the entire duration of the export operation (assuming that it will be long-running).\nCompressionOption - The degree of data compression in the output file.\nTwo variants were tested:\nFAST and MAXIMUM.\nFAST allowed us to shorten the export time by about 2 hours while showing only slightly lower\ndata compression (in our case, the difference was around 10%).\n\n/p:TableData=\"dbo.TestTable\"\n\n\nThe parameter allows us to limit the data export only to the tables selected by us, what significantly shortens\nthe overall operation time. It is also worth mentioning that it is possible to set the parameter multiple times.\nSince the export was launched at night, the procedure had no negative impact on users. The impact of the\nexport operation on the database load (Data I/O percentage) is presented in the graph below. It can be observed that\nthe resource load increased during this operation.\n\nCopying the archived database using AzCopy\nThe following script was executed to copy the exported file to the Storage Account:\n\n.\\azcopy `\n    copy `\n    $TargetFile `\n\"https://$StorageAccountName.blob.core.windows.net/$StorageContainerName/$StorageBlobName$SAS\" `\n    --recursive `\n    --overwrite=true `\n    --blob-type=BlockBlob `\n    --put-md5 `\n    --log-level=info `\n    --block-blob-tier=archive `\n\n\nThe process went quickly. Copying the 100GB file took only a few minutes, thanks to the high network throughput.\nIt is worth noting that the archive tier is set immediately.\nConducting a SHRINK operation\nThe SHRINK operation is, unfortunately, required to downscale the Azure SQL database. It took several hours to complete.\nWAIT_AT_LOW_PRIORITY was used to reduce the impact of this operation on the database users.\n\nDBCC SHRINKDATABASE ([DB_NAME]) WITH WAIT_AT_LOW_PRIORITY\n\n\nThe performance chart (Data IO) during the above operation looked as follows:\n\nWe observed a slight increase in Data IO operations during the SHRINK operation.\nPerformance analysis and index rebuild\nThis step appeared quite unexpectedly in our procedure. After performing the SHRINK operation and successfully\nlowering the parameters of the machine responsible for the database, we began to observe\nthe impact of our operations on performance.\nTo our concern, we observed a noticeable performance regression.\nEndpoints that use the database on which we performed SHRINK operation showed abnormally increased response times.\n\nThe database load chart also did not look encouraging, with frequent peaks during query execution.\n\nAttempts to scale the machine did not bring spectacular results and only increased costs (considering that our goal was\nto lower them, it was not an optimal solution).\nAs it turned out, the culprit was extraordinarily high index fragmentation. The result of the SHRINK operation was an increase\nin the mentioned fragmentation to almost >90% for practically all existing indexes.\nThis forced us to consider rebuilding all of them.\nEven Microsoft recommends rebuilding indexes in their documentation here:\nData that is moved to shrink a file can be scattered to any available location in the file.\nThis causes index fragmentation and can slow the performance of queries that search a range of the index.\nTo eliminate the fragmentation, consider rebuilding the indexes on the file after shrinking.\nWe decided to proceed with the above-mentioned index rebuild process. Here, we also applied possible optimizations\nto avoid negative consequences related to the availability of our services. The ONLINE option is particularly noteworthy,\nas it ensures that existing indexes and tables will not be blocked, what is an important issue in the case\nof continuous operation of our services.\n\nALTER INDEX ALL ON dbo.TableName REBUILD WITH\n(FILLFACTOR = 80, SORT_IN_TEMPDB = ON, STATISTICS_NORECOMPUTE = ON, ONLINE = ON);\n\n\nIt should also be noted that this can be a time-consuming operation, but as a result of its execution,\nthe indexes returned to the required consistency level, reaching a level of fragmentation close to 0%.\nThe response time and resource consumption charts of the database also returned to the values closer to the initial ones.\n\n\nConclusion\nAfter performing all of the described actions, we achieved a reduction\nin the size of the database from over 3TB to slightly below 100GB.\nBy lowering the required disk space, we could also significantly reduce the computational resources of the database,\ngenerating further serious savings.\nBefore performing all the operations,\nthe monthly cost of maintaining the database was close to €3000.\nBy switching from a database based on a 12 vCore and 3TB model to a Standard DTU with 100 units and 150GB\nwe managed to cut our monthly spendings to mere €125.\nAfter all, our effort paid off.\n\nThe above example demonstrates how to greatly reduce infrastructure costs. Of course,\nthe described procedure will apply to specific cases and data characteristics.\nHowever, if you have a similar problem, I think it is worth considering this approach.","guid":"https://blog.allegro.tech/2023/07/save-money-on-large-database.html","categories":["tech","azure","sql","saving","cloud"],"isoDate":"2023-07-09T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Debugging hangs - piecing together why nothing happens","link":"https://blog.allegro.tech/2023/05/debugging-hangs.html","pubDate":"Wed, 31 May 2023 00:00:00 +0200","authors":{"author":[{"name":["Łukasz Rokita"],"photo":["https://blog.allegro.tech/img/authors/lukasz.rokita.jpg"],"url":["https://blog.allegro.tech/authors/lukasz.rokita"]}]},"content":"<p>As a part of a broader initiative of refreshing Allegro platform, we are upgrading our internal libraries to Spring Boot 3.0 and Java 17.\nThe task is daunting and filled with challenges,\nhowever overall progress is steady and thanks to the modular nature of our code it should end in finite time.\nEveryone who has performed such an upgrade knows that you need to expect the unexpected and at the end of the day prepare for lots of debugging.\nNo amount of migration guide would prepare you for what’s coming in the field.\nIn the words of Donald Rumsfeld there are unknown unknowns and we need to be equipped with the tools to uncover these unknowns and patch them up.\nIn this blog post I’d like to walk you through a process that should show where the application hangs,\nalthough there seems to be nothing wrong with it. I will also show that you don’t always know what code you have – problem known as dependecy hell,\nplace we got quite cosy in during this upgrade.</p>\n\n<h2 id=\"the-change\">The change</h2>\n<p>Note that we keep versions as separate key–value pairs in <code class=\"language-plaintext highlighter-rouge\">build.gradle</code> files and reference them in dependencies by key.\nUpdating often means a single line change. The upgrade is trivial and git diff looks like this.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ext.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n]\n\next.versions = [\n+        spring         : '6.0.5',\n+        spock          : '2.4-M1-groovy-4.0',\n+        groovy         : '4.0.9',\n]\n</code></pre></div></div>\n<p>Nothing much happens. We upgrade Spring and since there are some problems with Spock not working well with the newest Spring\nwe need to upgrade it as well, along with Groovy. This is the easy part.\nNow we run the tests and expect to be either elated with the sight of a successful build or greeted with descriptive error messages\nthat help us quickly patch the issue. Nobody expects anything and in this case this is an unknown unknown.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>97% EXECUTING [15m 55s]\n&gt; :platform-libraries-webclient:integrationTest &gt; 1 test completed, 1 failed\n&gt; :platform-libraries-webclient:integrationTest &gt; Executing test pl.allegro....WebClientContextContainerInterceptorSpec\n</code></pre></div></div>\n<p>After 15 minutes we expect the process to end. A quick cross-check with the master branch confirms that tests run and execute in less than a minute.\nSomething is wrong and it’s on us. However, no error is presented. Adding logging does not help, nothing streams to standard output.\nSomething hangs and refuses to budge. When that happenes there is only one way to inspect what is going on and\nthat is to pop the hood open and look into JVM to see what the threads are doing or where they are slacking.</p>\n\n<h2 id=\"thread-theory\">Thread theory</h2>\n\n<p>Let’s interrupt this story with a short summary of threading in JVM. You can skip this chapter if you are familiar with the topic.\nAs the priceless book Java Concurrency in Practice by Brian Goetz et al. teaches us:</p>\n<blockquote>\n  <p>“Threads may block, or pause, for several reasons: waiting for I/O completion, waiting to acquire a lock,\nwaiting to wake up from Thread.sleep, or waiting for the result of a computation in another thread.\nWhen a thread blocks, it is usually suspended and placed in one of the blocked thread states\n(BLOCKED, WAITING, or TIMED_WAITING). (…) blocked thread must wait for an event beyond its control before it can proceed”.</p>\n</blockquote>\n\n<p>This sounds exactly like the situation we are in. So there is hope. Let’s educate ourselves further.\nAnother excerpt that would prove insightful reads as follows:</p>\n<blockquote>\n  <p>“(…) tasks can block for exteded periods of time, even if deadlock is not a possibility.\n(…) One technique that can mitigate the ill effects of long–running tasks is for tasks to use timed resource waits instead of\nunbound waits.”\nThis seems like an answer to our woes. However, two mysteries remain.\nWhere to put the timeout? What the thread is waiting for? To answer these questions we need to inspect the threads in the JVM itself.</p>\n</blockquote>\n\n<h2 id=\"the-investigation\">The investigation</h2>\n<p>At this point we did two things. First we pushed our code to a branch.\nAfter all at any moment our laptops could burst into flames and all the work would go to waste.\nThe remote CI confirmed our suspicion since it also hung. The problem was real and not only confined to the local machine.\nThe second thing is to scout for the offending thread. This is easy with the help of some JDK binaries:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>jps -lv | grep platform-libraries\n38983 worker.org.gradle.process.internal.worker.GradleWorkerMain -Dorg.gradle.internal.worker.tmpdir=/path/to/code/platform-libraries/platform-libraries-webclient/build/tmp/integrationTest/work -Dorg.gradle.native=false -Xmx512m -Dfile.encoding=UTF-8\n</code></pre></div></div>\n<p>So we have the a lvmid – local JVM identifier, which will help us locate the offending thread in jconsole.\nIn the screen below we can see that the thread waits on <code class=\"language-plaintext highlighter-rouge\">Mono.block()</code> which is left unbounded in a happy path scenario.\nWell, we are in the worst case so first of all we add a simple timeout <code class=\"language-plaintext highlighter-rouge\">Mono.block(Duration.ofSeconds(10))</code>.</p>\n\n<p><img src=\"/img/articles/2023-05-31-debugging-hangs/jconsole.png\" alt=\"jconsole\" /></p>\n\n<p>This fails our tests and for the first time the error appears:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\t08:13:39.556 [Test worker] WARN reactor.core.Exceptions - throwIfFatal detected a jvm fatal exception, which is thrown and logged below:\njava.lang.NoSuchMethodError: 'reactor.core.publisher.Mono reactor.core.publisher.Mono.subscriberContext(reactor.util.context.Context)'\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n\tat reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:427)\n\tat reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onSubscribe(PooledConnectionProvider.java:533)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:676)\n\tat reactor.netty.resources.PooledConnectionProvider.disposableAcquire(PooledConnectionProvider.java:219)\n\tat reactor.netty.resources.PooledConnectionProvider.lambda$acquire$3(PooledConnectionProvider.java:183)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.lambda$subscribe$0(HttpClientConnect.java:326)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.core.publisher.FluxRetryWhen.subscribe(FluxRetryWhen.java:77)\n\tat reactor.core.publisher.MonoRetryWhen.subscribeOrReturn(MonoRetryWhen.java:46)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:57)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.subscribe(HttpClientConnect.java:329)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\tat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2545)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2341)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2215)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)\n\tat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4485)\n\tat reactor.core.publisher.Mono.block(Mono.java:1733)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$Trait$Helper.makeRequest(WebClientContextContainerAdapterConfiguration.groovy:22)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$makeRequest.call(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)\n\tat pl.allegro....AdapterConfiguration$Trait$Helper.makeRequest(AdapterConfiguration.groovy:11)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....SharedInterceptorSpec$makeRequest.callCurrent(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:49)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)\n\tat pl.allegro....SharedInterceptorSpec.$spock_feature_0_0(SharedInterceptorSpec.groovy:44)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.spockframework.util.ReflectionUtil.invokeMethod(ReflectionUtil.java:196)\n\tat org.spockframework.runtime.model.MethodInfo.lambda$new$0(MethodInfo.java:49)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeatureMethod(PlatformSpecRunner.java:324)\n\tat org.spockframework.runtime.IterationNode.execute(IterationNode.java:50)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:58)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.IterationNode.lambda$around$0(IterationNode.java:67)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunIteration$5(PlatformSpecRunner.java:236)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.junit4.AbstractRuleInterceptor$1.evaluate(AbstractRuleInterceptor.java:46)\n\tat com.github.tomakehurst.wiremock.junit.WireMockRule$1.evaluate(WireMockRule.java:79)\n\tat org.spockframework.junit4.MethodRuleInterceptor.intercept(MethodRuleInterceptor.java:40)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runIteration(PlatformSpecRunner.java:218)\n\tat org.spockframework.runtime.IterationNode.around(IterationNode.java:67)\n\tat org.spockframework.runtime.SimpleFeatureNode.lambda$around$0(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.FeatureNode.lambda$around$0(FeatureNode.java:41)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunFeature$4(PlatformSpecRunner.java:199)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeature(PlatformSpecRunner.java:192)\n\tat org.spockframework.runtime.FeatureNode.around(FeatureNode.java:41)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.SpecNode.lambda$around$0(SpecNode.java:63)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunSpec$0(PlatformSpecRunner.java:61)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runSpec(PlatformSpecRunner.java:55)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:63)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:11)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\n\tat org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\n\tat jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)\n\tat org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\n</code></pre></div></div>\n<p>For the first time we force the entire reactive code to finally execute itself and present us with the result,\neven if it is an error this moves us in the right direction.</p>\n\n<h2 id=\"result\">Result</h2>\n\n<p>Like in any good crime story uncovering one mystery presents another.\nA quick <code class=\"language-plaintext highlighter-rouge\">grep</code> shows that there are no calls to <code class=\"language-plaintext highlighter-rouge\">reactor.core.publisher.Mono.subscriberContext</code>.\nWhere could this call be hiding, if it’s not present in our code?</p>\n\n<p>The answer is simple but I assure you that it took us some time to come up with it.\nIf it isn’t in our code and it runs inside our JVM then this must be dependency code.\nThe observant reader is able to spot it from afar. The stack trace confirms where the error lies:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n</code></pre></div></div>\n<p>We need to patch <code class=\"language-plaintext highlighter-rouge\">reactor–netty</code> which in this version still used deprecated code. Referring back to our diff:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ext.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n-        reactorNetty   : '0.9.25.RELEASE',\n]\n\next.versions = [\n+        spring        : '6.0.5',\n+        spock         : '2.4-M1-groovy-4.0',\n+        groovy        : '4.0.9',\n+        reactorNetty  : '1.1.3',\n]\n</code></pre></div></div>\n<p>We escape the dependency hell and are delighted to see the green letters <code class=\"language-plaintext highlighter-rouge\">BUILD SUCCESSFUL in 24s</code>.</p>\n\n<h2 id=\"summary\">Summary</h2>\n<p>Well this was quite a thrilling journey one doesn’t often embark on.\nThe odd peculiarity of the problem combined with peculiarity of the task provided us with a great challange and satisfaction.\nDependency hell is no joke, but armed with the JDK tools and thinking the problem through, there is no obstacle that could not be overcome.\nNext time your code hangs with no apparent reason this is a perfect opportunity to dust off the swiss army knife of JDK binaries and dig in.</p>\n","contentSnippet":"As a part of a broader initiative of refreshing Allegro platform, we are upgrading our internal libraries to Spring Boot 3.0 and Java 17.\nThe task is daunting and filled with challenges,\nhowever overall progress is steady and thanks to the modular nature of our code it should end in finite time.\nEveryone who has performed such an upgrade knows that you need to expect the unexpected and at the end of the day prepare for lots of debugging.\nNo amount of migration guide would prepare you for what’s coming in the field.\nIn the words of Donald Rumsfeld there are unknown unknowns and we need to be equipped with the tools to uncover these unknowns and patch them up.\nIn this blog post I’d like to walk you through a process that should show where the application hangs,\nalthough there seems to be nothing wrong with it. I will also show that you don’t always know what code you have – problem known as dependecy hell,\nplace we got quite cosy in during this upgrade.\nThe change\nNote that we keep versions as separate key–value pairs in build.gradle files and reference them in dependencies by key.\nUpdating often means a single line change. The upgrade is trivial and git diff looks like this.\n\next.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n]\n\next.versions = [\n+        spring         : '6.0.5',\n+        spock          : '2.4-M1-groovy-4.0',\n+        groovy         : '4.0.9',\n]\n\n\nNothing much happens. We upgrade Spring and since there are some problems with Spock not working well with the newest Spring\nwe need to upgrade it as well, along with Groovy. This is the easy part.\nNow we run the tests and expect to be either elated with the sight of a successful build or greeted with descriptive error messages\nthat help us quickly patch the issue. Nobody expects anything and in this case this is an unknown unknown.\n\n97% EXECUTING [15m 55s]\n> :platform-libraries-webclient:integrationTest > 1 test completed, 1 failed\n> :platform-libraries-webclient:integrationTest > Executing test pl.allegro....WebClientContextContainerInterceptorSpec\n\n\nAfter 15 minutes we expect the process to end. A quick cross-check with the master branch confirms that tests run and execute in less than a minute.\nSomething is wrong and it’s on us. However, no error is presented. Adding logging does not help, nothing streams to standard output.\nSomething hangs and refuses to budge. When that happenes there is only one way to inspect what is going on and\nthat is to pop the hood open and look into JVM to see what the threads are doing or where they are slacking.\nThread theory\nLet’s interrupt this story with a short summary of threading in JVM. You can skip this chapter if you are familiar with the topic.\nAs the priceless book Java Concurrency in Practice by Brian Goetz et al. teaches us:\n“Threads may block, or pause, for several reasons: waiting for I/O completion, waiting to acquire a lock,\nwaiting to wake up from Thread.sleep, or waiting for the result of a computation in another thread.\nWhen a thread blocks, it is usually suspended and placed in one of the blocked thread states\n(BLOCKED, WAITING, or TIMED_WAITING). (…) blocked thread must wait for an event beyond its control before it can proceed”.\nThis sounds exactly like the situation we are in. So there is hope. Let’s educate ourselves further.\nAnother excerpt that would prove insightful reads as follows:\n“(…) tasks can block for exteded periods of time, even if deadlock is not a possibility.\n(…) One technique that can mitigate the ill effects of long–running tasks is for tasks to use timed resource waits instead of\nunbound waits.”\nThis seems like an answer to our woes. However, two mysteries remain.\nWhere to put the timeout? What the thread is waiting for? To answer these questions we need to inspect the threads in the JVM itself.\nThe investigation\nAt this point we did two things. First we pushed our code to a branch.\nAfter all at any moment our laptops could burst into flames and all the work would go to waste.\nThe remote CI confirmed our suspicion since it also hung. The problem was real and not only confined to the local machine.\nThe second thing is to scout for the offending thread. This is easy with the help of some JDK binaries:\n\njps -lv | grep platform-libraries\n38983 worker.org.gradle.process.internal.worker.GradleWorkerMain -Dorg.gradle.internal.worker.tmpdir=/path/to/code/platform-libraries/platform-libraries-webclient/build/tmp/integrationTest/work -Dorg.gradle.native=false -Xmx512m -Dfile.encoding=UTF-8\n\n\nSo we have the a lvmid – local JVM identifier, which will help us locate the offending thread in jconsole.\nIn the screen below we can see that the thread waits on Mono.block() which is left unbounded in a happy path scenario.\nWell, we are in the worst case so first of all we add a simple timeout Mono.block(Duration.ofSeconds(10)).\n\nThis fails our tests and for the first time the error appears:\n\n\t08:13:39.556 [Test worker] WARN reactor.core.Exceptions - throwIfFatal detected a jvm fatal exception, which is thrown and logged below:\njava.lang.NoSuchMethodError: 'reactor.core.publisher.Mono reactor.core.publisher.Mono.subscriberContext(reactor.util.context.Context)'\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n\tat reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:427)\n\tat reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onSubscribe(PooledConnectionProvider.java:533)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:676)\n\tat reactor.netty.resources.PooledConnectionProvider.disposableAcquire(PooledConnectionProvider.java:219)\n\tat reactor.netty.resources.PooledConnectionProvider.lambda$acquire$3(PooledConnectionProvider.java:183)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.lambda$subscribe$0(HttpClientConnect.java:326)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.core.publisher.FluxRetryWhen.subscribe(FluxRetryWhen.java:77)\n\tat reactor.core.publisher.MonoRetryWhen.subscribeOrReturn(MonoRetryWhen.java:46)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:57)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.subscribe(HttpClientConnect.java:329)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\tat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2545)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2341)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2215)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)\n\tat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4485)\n\tat reactor.core.publisher.Mono.block(Mono.java:1733)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$Trait$Helper.makeRequest(WebClientContextContainerAdapterConfiguration.groovy:22)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$makeRequest.call(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)\n\tat pl.allegro....AdapterConfiguration$Trait$Helper.makeRequest(AdapterConfiguration.groovy:11)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....SharedInterceptorSpec$makeRequest.callCurrent(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:49)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)\n\tat pl.allegro....SharedInterceptorSpec.$spock_feature_0_0(SharedInterceptorSpec.groovy:44)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.spockframework.util.ReflectionUtil.invokeMethod(ReflectionUtil.java:196)\n\tat org.spockframework.runtime.model.MethodInfo.lambda$new$0(MethodInfo.java:49)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeatureMethod(PlatformSpecRunner.java:324)\n\tat org.spockframework.runtime.IterationNode.execute(IterationNode.java:50)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:58)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.IterationNode.lambda$around$0(IterationNode.java:67)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunIteration$5(PlatformSpecRunner.java:236)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.junit4.AbstractRuleInterceptor$1.evaluate(AbstractRuleInterceptor.java:46)\n\tat com.github.tomakehurst.wiremock.junit.WireMockRule$1.evaluate(WireMockRule.java:79)\n\tat org.spockframework.junit4.MethodRuleInterceptor.intercept(MethodRuleInterceptor.java:40)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runIteration(PlatformSpecRunner.java:218)\n\tat org.spockframework.runtime.IterationNode.around(IterationNode.java:67)\n\tat org.spockframework.runtime.SimpleFeatureNode.lambda$around$0(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.FeatureNode.lambda$around$0(FeatureNode.java:41)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunFeature$4(PlatformSpecRunner.java:199)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeature(PlatformSpecRunner.java:192)\n\tat org.spockframework.runtime.FeatureNode.around(FeatureNode.java:41)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.SpecNode.lambda$around$0(SpecNode.java:63)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunSpec$0(PlatformSpecRunner.java:61)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runSpec(PlatformSpecRunner.java:55)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:63)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:11)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\n\tat org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\n\tat jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)\n\tat org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\n\n\nFor the first time we force the entire reactive code to finally execute itself and present us with the result,\neven if it is an error this moves us in the right direction.\nResult\nLike in any good crime story uncovering one mystery presents another.\nA quick grep shows that there are no calls to reactor.core.publisher.Mono.subscriberContext.\nWhere could this call be hiding, if it’s not present in our code?\nThe answer is simple but I assure you that it took us some time to come up with it.\nIf it isn’t in our code and it runs inside our JVM then this must be dependency code.\nThe observant reader is able to spot it from afar. The stack trace confirms where the error lies:\n\n    at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n\n\nWe need to patch reactor–netty which in this version still used deprecated code. Referring back to our diff:\n\next.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n-        reactorNetty   : '0.9.25.RELEASE',\n]\n\next.versions = [\n+        spring        : '6.0.5',\n+        spock         : '2.4-M1-groovy-4.0',\n+        groovy        : '4.0.9',\n+        reactorNetty  : '1.1.3',\n]\n\n\nWe escape the dependency hell and are delighted to see the green letters BUILD SUCCESSFUL in 24s.\nSummary\nWell this was quite a thrilling journey one doesn’t often embark on.\nThe odd peculiarity of the problem combined with peculiarity of the task provided us with a great challange and satisfaction.\nDependency hell is no joke, but armed with the JDK tools and thinking the problem through, there is no obstacle that could not be overcome.\nNext time your code hangs with no apparent reason this is a perfect opportunity to dust off the swiss army knife of JDK binaries and dig in.","guid":"https://blog.allegro.tech/2023/05/debugging-hangs.html","categories":["tech","java","jvm","debugging","dependency hell"],"isoDate":"2023-05-30T22:00:00.000Z","thumbnail":"images/post-headers/java.png"}],"jobs":[{"id":"743999930016493","name":"Front-End Software Engineer - Technical Platform & Operations","uuid":"4644c5e0-f675-40d0-a446-e2bcbae71020","jobAdId":"505b825e-d64d-4f46-b4c8-5e2c86e88336","defaultJobAd":false,"refNumber":"REF3941R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-09-12T15:11:42.111Z","location":{"city":"Poznan, Warsaw","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999930016493","creator":{"name":"Dominika Fujarowicz"},"language":{"code":"en-GB","label":"English (UK)","labelNative":"English (UK)"}},{"id":"743999930016183","name":"Front-End Software Engineer","uuid":"34a735f8-d691-4e05-b42e-c7e4b94c0943","jobAdId":"05b6643a-43dd-46a2-b998-bfbaa0a31c68","defaultJobAd":true,"refNumber":"REF3941R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-09-12T15:10:49.174Z","location":{"city":"Warsaw, Poznan","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999930016183","creator":{"name":"Dominika Fujarowicz"},"language":{"code":"en-GB","label":"English (UK)","labelNative":"English (UK)"}},{"id":"743999929962756","name":"Senior Software Engineer (Java/Kotlin)","uuid":"636e15e0-318b-444f-a5f3-f86c7e92bc3f","jobAdId":"b1d96cd5-7296-471b-9a31-ab8b188c1afb","defaultJobAd":false,"refNumber":"REF4072X","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-09-12T12:18:48.703Z","location":{"city":"Poznań, Warsaw, Cracow, Wrocław, Gdańsk","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999929962756","creator":{"name":"Monika Walaszek"},"language":{"code":"en-GB","label":"English (UK)","labelNative":"English (UK)"}},{"id":"743999929309124","name":"Software Engineer Java - Mall.cz","uuid":"33d37816-c3ca-4f55-a020-ded6ad76f7c2","jobAdId":"7236e848-3276-4740-a59d-de2209ea6536","defaultJobAd":false,"refNumber":"REF4327W","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-09-08T10:41:30.160Z","location":{"city":"Prague, Remote","country":"cz","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"associate","label":"Associate"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"f2bb5bc2-3fb0-4d5a-96d2-59e7d59ab3d7","valueLabel":"Tech Engineer/Non-Engineer - IC (MG)"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"cz","valueLabel":"Czech republic"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"b61e1897-7104-4a9d-b1cf-04fc2c537081","valueLabel":"N/A"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"0bca93e9-bc16-4156-902e-50465671c8fa","valueLabel":"Mall.cz"},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999929309124","creator":{"name":"Natalia Glińska"},"language":{"code":"cs","label":"Czech","labelNative":"čeština"}},{"id":"743999929308615","name":"Software Engineer Java - Mall.cz","uuid":"994dcf33-072a-46a2-a0f0-080f9572aa85","jobAdId":"2b53fed0-4b15-488e-a1be-516a97bf5866","defaultJobAd":true,"refNumber":"REF4327W","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-09-08T10:37:31.279Z","location":{"city":"Prague, Remote","country":"cz","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"associate","label":"Associate"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"f2bb5bc2-3fb0-4d5a-96d2-59e7d59ab3d7","valueLabel":"Tech Engineer/Non-Engineer - IC (MG)"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"cz","valueLabel":"Czech republic"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"b61e1897-7104-4a9d-b1cf-04fc2c537081","valueLabel":"N/A"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"0bca93e9-bc16-4156-902e-50465671c8fa","valueLabel":"Mall.cz"},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999929308615","creator":{"name":"Natalia Glińska"},"language":{"code":"en","label":"English","labelNative":"English (US)"}}],"events":[{"created":1685697967000,"duration":7200000,"id":"293929321","name":"Allegro Tech Talks #38 - Mobile: o iOS bez spinki","date_in_series_pattern":false,"status":"past","time":1686760200000,"local_date":"2023-06-14","local_time":"18:30","updated":1686773845000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":17,"venue":{"id":27549223,"name":"Allegro Warsaw Office","lat":0,"lon":0,"repinned":true,"address_1":"ul. Żelazna 51/53","city":"Warszawa","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/293929321/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-talk-38/](https://app.evenea.pl/event/allegro-tech-talk-38/) Ostatnie przed przerwą wakacyjną, stacjonarne spotkanie z cyklu Allegro Tech Talks, na których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy podczas rozmów…","how_to_find_us":"Biuro Allegro znajduje się w kompleksie Fabryki Norblina (wejście Plater 3 od ul. Żelaznej). W niedalekiej odległości znajdują się dwie stacje metra linii M2, Rondo Daszyńskiego i Rondo ONZ. Autobusy, tramwaje i inne środki transportu sprawdzisz też na: https://fabrykanorblina.pl/dojazd","visibility":"public","member_pay_fee":false},{"created":1678978572000,"duration":111600000,"id":"292278882","name":"UX Research Confetti - III edycja ","date_in_series_pattern":false,"status":"past","time":1684915200000,"local_date":"2023-05-24","local_time":"10:00","updated":1685029049000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":33,"is_online_event":true,"eventType":"ONLINE","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/292278882/","description":"**Rejestracja na wydarzenie ➡ [https://app.evenea.pl/event/ux-research-confetti-3/]( https://app.evenea.pl/event/ux-research-confetti-3/ )**[ ]( https://app.evenea.pl/event/ux-research-confetti-3/ ) **🎉 Przedstawiamy 3. edycję UX Research Confetti organizowaną przez Allegro - bezpłatną, polską konferencję poświęconą badaniom…","visibility":"public","member_pay_fee":false},{"created":1683275557000,"duration":7200000,"id":"293341234","name":"Allegro Tech Talks #37 - Kotlin Native i niebezpieczeństwa współdzielonego stanu","date_in_series_pattern":false,"status":"past","time":1684425600000,"local_date":"2023-05-18","local_time":"18:00","updated":1684437308000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":19,"venue":{"id":27570147,"name":"Allegro Office - Poznań (Nowy Rynek)","lat":52.40021514892578,"lon":16.92083168029785,"repinned":true,"address_1":"Wierzbięcice 1B - budynek D","city":"Poznań","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/293341234/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-talk-37/](https://app.evenea.pl/event/allegro-tech-talk-37/) Ciąg dalszy naszych stacjonarnych spotkań Allegro Tech Talks, na których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy podczas rozmów w kuluarach. 📌…","how_to_find_us":"Biuro Allegro znajduje się w kompleksie Nowy Rynek w budynku D. Najbliższy przystanek to Wierzbięcice i kursują tu linie tramwajowe numer 2, 5, 6, 10, 12, 18. ","visibility":"public","member_pay_fee":false},{"created":1682779438000,"duration":9000000,"id":"293215214","name":"AlleKwanty: o komputerach przyszłości, które na Allegro dopiero będą mieć","date_in_series_pattern":false,"status":"past","time":1684252800000,"local_date":"2023-05-16","local_time":"18:00","updated":1684266490000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":41,"venue":{"id":27549223,"name":"Allegro Warsaw Office","lat":52.23224639892578,"lon":20.992111206054688,"repinned":true,"address_1":"ul. Żelazna 51/53","city":"Warszawa","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/293215214/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-kwanty/](https://app.evenea.pl/event/allegro-tech-kwanty/) Allegro Tech to miejsce, w którym nasi inżynierowie dzielą się wiedzą oraz case study z wybranych projektów w firmie - w formie…","how_to_find_us":"The Allegro office is located in Norblin Factory (entrance Plater 3, from Żelazna Street). You can check the details of the journey (buses, trams, metro) at: https://fabrykanorblina.pl/dojazd/","visibility":"public","member_pay_fee":false}],"podcasts":[{"title":"O roli analityków biznesowych w Allegro","link":"https://podcast.allegro.tech/o-roli-analitykow-biznesowych-w-allegro/","pubDate":"Thu, 24 Aug 2023 00:00:00 GMT","content":"Czym zajmują się analitycy danych w Allegro i za jakie projekty odpowiadają? Z jakich rodzajów danych i narzędzi korzystają w codziennej pracy? Jakie (przykładowe) obszary tematyczne pokrywamy danymi, które analizujemy w Allegro? Jakich umiejętności szukamy u analityków biznesowych w Allegro i jak można do nas dołączyć? O roli analityków biznesowych i pracy w skali Allegro opowiadają Jakub Król i Mateusz Falkowski - Senior Data Analysts w Allegro.","contentSnippet":"Czym zajmują się analitycy danych w Allegro i za jakie projekty odpowiadają? Z jakich rodzajów danych i narzędzi korzystają w codziennej pracy? Jakie (przykładowe) obszary tematyczne pokrywamy danymi, które analizujemy w Allegro? Jakich umiejętności szukamy u analityków biznesowych w Allegro i jak można do nas dołączyć? O roli analityków biznesowych i pracy w skali Allegro opowiadają Jakub Król i Mateusz Falkowski - Senior Data Analysts w Allegro.","guid":"https://podcast.allegro.tech/o-roli-analitykow-biznesowych-w-allegro/","isoDate":"2023-08-24T00:00:00.000Z"},{"title":"O społeczności Allegro Tech i rozwoju inżynierów w Allegro","link":"https://podcast.allegro.tech/o-spolecznosci-allegro-tech-i-rozwoju-inzynierow-w-allegro/","pubDate":"Thu, 27 Jul 2023 00:00:00 GMT","content":"Na czym polega rola Principal Software Engineera w Allegro oraz co ma wspólnego z rozwijaniem siebie i dzieleniem się wiedzą? Co warto wiedzieć o turystyce, która pojawia się niemal w każdym odcinku naszych podcastów? Na czym polega, kto, kiedy i jak może z niej skorzystać? Jak pracujemy z talentami Gallupa (także w zespołach technicznych)?  Co dają nam wewnętrzne DevDays, hackhathony, gildie, meetupy, konferencje i jak jeszcze wymieniamy się doświadczeniami? Czym jest Allegro Tech Meeting i jaka idea mu przyświeca? O społeczności Allegro Tech i możliwościach rozwoju w Allegro z perspektywy inżynierów rozmawialiśmy z Marcinem Turkiem i Michałem Kosmulskim.","contentSnippet":"Na czym polega rola Principal Software Engineera w Allegro oraz co ma wspólnego z rozwijaniem siebie i dzieleniem się wiedzą? Co warto wiedzieć o turystyce, która pojawia się niemal w każdym odcinku naszych podcastów? Na czym polega, kto, kiedy i jak może z niej skorzystać? Jak pracujemy z talentami Gallupa (także w zespołach technicznych)?  Co dają nam wewnętrzne DevDays, hackhathony, gildie, meetupy, konferencje i jak jeszcze wymieniamy się doświadczeniami? Czym jest Allegro Tech Meeting i jaka idea mu przyświeca? O społeczności Allegro Tech i możliwościach rozwoju w Allegro z perspektywy inżynierów rozmawialiśmy z Marcinem Turkiem i Michałem Kosmulskim.","guid":"https://podcast.allegro.tech/o-spolecznosci-allegro-tech-i-rozwoju-inzynierow-w-allegro/","isoDate":"2023-07-27T00:00:00.000Z"},{"title":"O Data Science Hub w Allegro","link":"https://podcast.allegro.tech/o-data-science-hub-w-allegro/","pubDate":"Fri, 14 Jul 2023 00:00:00 GMT","content":"Co kryje się pod pojęciem Data Science Hub w Allegro? Jakie działania rozwijamy w tym obszarze i jak oceniamy ich potencjał? O czym jest projekt Wilson i na czym skupiamy się w projekcie przewidywania zakupów cyklicznych? Jak wykorzystujemy sztuczną inteligencję i gdzie jest dla niej miejsce wśród naszych kierunków rozwoju? O AI Transformation, poczuciu sprawczości, mieszance kompetencji i talentów zamkniętej w rolach Data Scientist, Data Engineer i Data Analyst rozmawialiśmy z Karoliną Nieradką i Kamilem Konikiewiczem.,","contentSnippet":"Co kryje się pod pojęciem Data Science Hub w Allegro? Jakie działania rozwijamy w tym obszarze i jak oceniamy ich potencjał? O czym jest projekt Wilson i na czym skupiamy się w projekcie przewidywania zakupów cyklicznych? Jak wykorzystujemy sztuczną inteligencję i gdzie jest dla niej miejsce wśród naszych kierunków rozwoju? O AI Transformation, poczuciu sprawczości, mieszance kompetencji i talentów zamkniętej w rolach Data Scientist, Data Engineer i Data Analyst rozmawialiśmy z Karoliną Nieradką i Kamilem Konikiewiczem.,","guid":"https://podcast.allegro.tech/o-data-science-hub-w-allegro/","isoDate":"2023-07-14T00:00:00.000Z"},{"title":"O technologiach i projektach w Allegro Pay","link":"https://podcast.allegro.tech/o-technologiach-i-projektach-w-allegro-pay/","pubDate":"Thu, 29 Jun 2023 00:00:00 GMT","content":"Jak powstała usługa Allegro Pay i co ma wspólnego z ratatouille? Jakie projekty i technologie stoją za tym rozwiązaniem? Jak to jest pracować w Azure i obsługiwać ruch, który generuje Allegro? Czym inżynierów może zaskoczyć praca w Allegro Pay i co czeka na nich (na przykład) w programie All4Customer? O migrowaniu baz CosmosDB, wymaganiach skali i dostępności, a także o rozwijaniu ludzi i technologii rozmawialiśmy z Mariuszem Budzynem i Tomaszem Szczerbą. Zapraszamy do słuchania! na różnych płaszczyznach?","contentSnippet":"Jak powstała usługa Allegro Pay i co ma wspólnego z ratatouille? Jakie projekty i technologie stoją za tym rozwiązaniem? Jak to jest pracować w Azure i obsługiwać ruch, który generuje Allegro? Czym inżynierów może zaskoczyć praca w Allegro Pay i co czeka na nich (na przykład) w programie All4Customer? O migrowaniu baz CosmosDB, wymaganiach skali i dostępności, a także o rozwijaniu ludzi i technologii rozmawialiśmy z Mariuszem Budzynem i Tomaszem Szczerbą. Zapraszamy do słuchania! na różnych płaszczyznach?","guid":"https://podcast.allegro.tech/o-technologiach-i-projektach-w-allegro-pay/","isoDate":"2023-06-29T00:00:00.000Z"}]},"__N_SSG":true}