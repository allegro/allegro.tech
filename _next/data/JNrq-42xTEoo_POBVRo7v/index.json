{"pageProps":{"posts":[{"title":"Clever, surprised and gray-haired","link":"https://blog.allegro.tech/2023/12/lmdb-postmortem.html","pubDate":"Thu, 14 Dec 2023 00:00:00 +0100","authors":{"author":[{"name":["Tomasz Ziółkowski"],"photo":["https://blog.allegro.tech/img/authors/tomasz.ziolkowski.jpg"],"url":["https://blog.allegro.tech/authors/tomasz.ziolkowski"]}]},"content":"<p>This article is a form of a public postmortem in which we would like to share our bumpy way of revealing the cause of a mysterious performance problem.\nBesides unveiling part of our technical stack based on open-source solutions, we also show how some false assumptions made such a bug triage process much\nharder.\nBesides all NOT TO DOs, you can find some exciting information about performance hunting and reproducing performance issues on a small scale.\nAs a perk, we prepared a <a href=\"https://github.com/ziollek/lmdb-modsecurity-perf-issue\">repository</a> where you can reproduce the problem and make yourself familiar with tools\nthat allowed us to confirm the cause.\nThe last part (lessons learned) is the most valuable if you prefer to learn from the mistakes of others.</p>\n\n<p>Before you start reading, I must warn you that it will be a pretty long story, and following it without technical knowledge will be challenging.\nHowever, I tried my best to simplify the technicalities as much as possible. If, despite all discouragement, you are interested in solving technical mysteries,\ntake a sip of coffee and enjoy the story!</p>\n\n<h2 id=\"clever-what-have-we-built\">Clever: what have we built?</h2>\n\n<p>A few years ago, we researched several platforms that can be used as <em>transparent HTTP proxies</em> capable of handling HTTP traffic to our services.\nWe needed a solution that would be able to inspect metadata and user data against any suspicious patterns and decide if such traffic should be processed or banned.\nWe chose <a href=\"https://nginx.org/en/docs/\">nginx</a> in concert with <a href=\"https://github.com/SpiderLabs/ModSecurity\">ModSecurity</a> as a foundation for a more complex\necosystem.</p>\n\n<p>During increasing usage of such a stack, more than simple non-contextual rules was needed for more complex traffic analysis. One of the most crucial needs was providing the ability to store some contextual information connected\nwith session activity in order to better recognize malicious patterns.\nBy default, <em>ModSecurity</em> allows storing contextual information in memory. Such an approach is not very useful in connection with HTTP servers that utilize\nmultiprocessing as <em>nginx</em> does.</p>\n\n<p><img src=\"/img/articles/2023-12-14-lmdb-postmortem/nginx-in-memory.png\" alt=\"In-memory approach\" /></p>\n\n<p>However, we learned that <em>ModSecurity</em> can use <a href=\"http://www.lmdb.tech/doc/\">LMDB</a> as an internal fast storage for contextual information that could be\nshared between requests that come, for example, from the same IP address. <em>LMDB</em> approach ensures that contextual information stored by one nginx worker process\nis accessible by others.</p>\n\n<p><img src=\"/img/articles/2023-12-14-lmdb-postmortem/nginx-with-lmdb.png\" alt=\"LMDB approach\" /></p>\n\n<p>At first glance, it looks great; however, in our case, we could not rely on information that is stored directly by <em>ModSecurity</em>.\nAs you can imagine, our setup is based on more than one server, so we have to be able to pass the same contextual information to each of them.\nMoreover, our algorithms that compute such information are complex and reach for more data than those available to ModSecurity.</p>\n\n<p>Nevertheless, <em>LMDB</em> has one great advantage: it allows connecting to it from outside the <em>nginx</em> process and altering the contextual data that is available to\n<em>ModSecurity</em>.\nWe built a mechanism that syncs contextual information from dedicated service to LMDB on each transparent proxy host.\nA simplified view of the architecture that allows computing and synchronizing contextual information is depicted below (dotted lines represent asynchronous flow):</p>\n\n<p><img src=\"/img/articles/2023-12-14-lmdb-postmortem/nginx-architecture.png\" alt=\"Final architecture\" /></p>\n\n<p>Such a PoC gave us promising results regarding how fast the contextual information could be provided and how fast it was retrieved by <em>ModSecurity</em>.\nFinally, we rolled out the new approach, and everything worked smoothly for such a long time that we assumed it was a rock-solid solution.</p>\n\n<h2 id=\"surprised-once-upon-a-time-the-problem-occurred-for-the-first-time\">Surprised: once upon a time, the problem occurred for the first time</h2>\n\n<p>We noticed that response time from the client’s perspective soared, and the number of established connections also increased.\nSuch a correlation is not strange and was noticed many times in the past when the upstream that handles requests from proxy started responding slower.\nWhat was mysterious in that case was that there was no evidence of a problem on the upstream side besides the metric from <em>nginx</em> that was based on\n<em>$upstream_connect_time</em>.\nAccording to that metric, connecting to the upstream had slowed down significantly.</p>\n\n<p>Having such <em>a clue</em> we blamed the part of infrastructure that is always to blame if no one knows what is happening.\nAs you probably guessed, we assumed that was a temporary network issue (from my experience, it is the best justification to not dig more profound).\nUnfortunately, <em>the network issue</em> started occurring quite often, at least a few times a week.\nStrangely enough, if we disable the transparent proxy, the network seems to be stable. Once again, we were convinced that someone from the network team devised blameless culture.\nHence, we started to verify a lot of new hypotheses, from those scary (cyber war, specialized attacks that are hidden in regular traffic) to those that bring\nsmiles upon our faces at least for today (backdoor left by <em>Russian spy</em> in the nginx source code).\nFalsification of those hypotheses that were at least partially backed up by data is a great story about how to teach engineers that correlation does not mean\ncausation.</p>\n\n<h2 id=\"turn-gray-investigation\">Turn gray: investigation</h2>\n\n<p>Let me introduce a simplified view of our infrastructure to show where we gathered data.</p>\n\n<p><img src=\"/img/articles/2023-12-14-lmdb-postmortem/proxy-chain.png\" alt=\"Proxy chain\" /></p>\n\n<p>All proxies measure at least the total processing time, including the time consumed in the proxy and the time that was consumed outside the proxy (passing the\nrequest to the next server in the above chain and waiting for the response).\nAnd those parts could be analyzed independently. Based on such measurements, we can simply compute the approximate overhead of the proxy as a difference between the whole\nrequest (green box) processing and the upstream (red box) waiting.\nHaving that, we were able to discover that the time consumed in transparent proxy was not increased significantly; only the time consumed outside of proxy was\nraised (red box).\nIt was one of the big lies that hindered revealing the truth. You can find a broader explanation of misleading metrics in the lessons learned part.\nAfter excluding network issues, and upstream issues, we were pretty sure that the problem lay in transparent proxy, and we started to doubt what we saw in\nmetrics.\nIt took a while, but finally, we were able to break our unwavering trust in data. Relying on data is encoded in our company DNA, so trusting it was a natural\ninstinct, unfortunately, a bad one in this case.</p>\n\n<p>Having that, we could not rely on metrics provided by a transparent proxy. We were starting to try out other means to measure what was going on inside the\ntransparent proxy.\nBeing biased by network issues, we started gathering a lot of network-related information that only showed correlations with problems, but it did not give any\nclues about what was happening.</p>\n\n<p>It was a time to use the more straightforward but quite heavy solution - access logs. However, logs are not very useful in giving the overall condition of the proxy;\nthey can be beneficial in analyzing singular problems.\nWhen the problems occurred again, we had some data that we could scrutinize. It turned out that an excellent idea was to log exact timestamps in\na very high resolution (which was not default).\nBelow, you can see a real example reproduced in the local environment (which will be described later).\nEach line contains nginx worker process id, timestamp, request_time, upstream_request_time, upstream_connect_time and the response status code.</p>\n<pre>\npid:41 t:1700163031.929 rt:<b>8.990</b> urt:<b>8.990</b> uct:<b>7.128</b> status:200\npid:41 t:1700163031.929 rt:12.348 urt:12.348 uct:3.358 status:200\npid:41 t:1700163031.929 rt:<b>8.990</b> urt:<b>8.990</b> uct:<b>7.128</b> status:200\npid:41 t:1700163031.929 rt:<b>8.990</b> urt:<b>8.990</b> uct:<b>7.128</b> status:200\n</pre>\n\n<p>It turned out that very often information was logged in bursts with exactly the same timestamp, what was even more intriguing was that some of such entries\nreported the exact same time as an <em>$upstream_request_time</em> or <em>$upstream_connect_time</em>.\nLet’s say that even if you are keen on paranormal mystery, odds, that’s the moment when the big red light should start blinking.\nIt definitely looks like something deterministic, not random. In the production realm, it was even more interesting; some bursts were connected with each other\nin some strange arithmetic way - for example:</p>\n\n<p>Let’s define bursts as:</p>\n<blockquote>\n  <p>B1, B2, B3 - bursts</p>\n\n  <p>B1.TS - timestamp of the burst</p>\n\n  <p>B3.urt, B3.uct - upstream_request_time, upstream_connect_time - reported during last burst</p>\n</blockquote>\n\n<p>then such relation was often noticed:</p>\n\n<blockquote>\n  <p>B1.TS + B3.uct = B2.TS</p>\n\n  <p>B1.TS + B3.urt = B3.TS</p>\n</blockquote>\n\n<p>To better understand such a relation, let’s draw it:</p>\n\n<p><img src=\"/img/articles/2023-12-14-lmdb-postmortem/bursts-relationship.png\" alt=\"Bursts relation\" /></p>\n\n<p>Having a clue that there are extended periods of time when processing for a particular process is stuck, we wanted to know what was going on when processes hung.\nWe used strace to preview what particular system calls were made during such problems. The challenge was to connect to the process when problems occur,\nbut fortunately for us (and less fortunately for our users) we did not wait a long time for the subsequent instability, and we were able to gather strace data.\nIt reveals a large number of <a href=\"https://en.wikipedia.org/wiki/Futex\">futex</a> calls that indicated active waiting for some barer / mutex.</p>\n\n<h2 id=\"connecting-the-dots\">Connecting the dots</h2>\n\n<p>As it was announced earlier, on that stage we have three actors. In order to better understand what was happening under the hood, let’s take a closer look at\neach of them.</p>\n\n<p>First of all <em>nginx</em> server, it uses\n<a href=\"https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/\">an asynchronous event-driven approach to handling connections</a>.\nIt means that a single <em>nginx</em> worker can process a large number of requests simultaneously basically because a significant part of processing a single request\nhappens outside the worker. Instead of actively waiting for a response, the nginx process uses such spare time to handle new incoming requests.\nEverything works very efficiently as long as each blocking (IO consuming) operation is handled in an asynchronous manner\n(the control is returned to event-loop).\nWhen such a requirement is unmet, the processing pace slows dramatically.</p>\n\n<p>The second actor is the ModSecurity-nginx plugin. <em>Nginx</em> plugins allow extending the logic of the server by adding custom logic.\nModSecurity-nginx plugin allows inspecting requests processed by nginx against <em>ModSecurity</em> rules.\nSuch inspection can be considered a CPU-bound operation, so even if it is called in a synchronous manner, it does not break the concept of processing\nblocking operations asynchronously.</p>\n\n<p>The third one is <em>LMDB</em>, a very efficient mapped DB that allows <strong>concurrent reads and exclusive writes</strong>. This database was used as a storage for ModSecurity\ncollections in order to share a state of collections between nginx workers.\nThe documentation and source code of this relatively small project were scrutinized many times as well as integration between ModSecurity and <em>LMDB</em>, but there\nwas no suspicion of what could be wrong.</p>\n\n<p>Finally, it turned out that the version of <em>ModSecurity</em> that we scrutinized was from the master branch. Moreover, the master branch contained an improvement related to misusing\n<em>LMDB</em> exclusive transactions while reading the data. Given that, we had a justified belief that issues came from exclusive transactions. It means that\nnginx workers probably block on acquiring locks.</p>\n\n<p><img src=\"/img/articles/2023-12-14-lmdb-postmortem/locking.png\" alt=\"Exclusive locking\" /></p>\n\n<h2 id=\"reproducing-the-issue-in-the-isolated-environment\">Reproducing the issue in the isolated environment</h2>\n\n<p>To reproduce the issue, we decided to use a technique that we called a fancy name: <em>exaggeration</em>.\nReproducing a problem that occurs under high traffic that is handled by powerful servers is not simple on a local workstation.\nHowever, in this case, we had some clues and justified hypotheses about what could be wrong and what part we should focus on.\nLet me explain what exaggeration means when it comes to reproducing a problem.\nSome sort of problems can be easily noticeable when the probability of the occurrence of rare events is raised to a significant level.\nIf we have different ways to increase such probability, we can use them interchangeably. I am aware that it sounds like theoretical physics, but believe me or\nnot our problems are relatively easier to solve than those worked on by the guys at LHC.</p>\n\n<p>In our case, we were pretty sure that the number of concurrent lookups on a single server to <em>ModSecurity</em> collections is a rare event.\nSo instead of loading a local server in enormous traffic we significantly increased the number of lookups to <em>LMDB</em> that were performed for each processed\nrequest.</p>\n\n<p>All below information is based on data that can be gathered from the docker\n<a href=\"https://github.com/ziollek/lmdb-modsecurity-perf-issue#what-does-the-environment-consist-of\">environment</a> that was prepared as an integral part of this article.\nIt is worth mentioning that the environment can be built in one of two modes:</p>\n<ul>\n  <li>regular that is way faster when it comes to building process</li>\n  <li>profiling that allows revealing the exact point where nginx processes hang based on profiling information from the kernel</li>\n</ul>\n\n<p>I would not like to deep dive into the profiling process based on kernel capabilities, but it is very cumbersome in a containerized environment because\nit breaks the isolation paradigm.\nMoreover, it is hard to prepare due to compatibility requirements between host and container libraries, header files and compilers.\nHowever, for this particular purpose it was tempting to use limited profiling tools based on <a href=\"https://ebpf.io/\">eBPF</a> that do not have such restricted\nrequirements.</p>\n\n<p>The first part of the reproducing process is feeding <em>LMDB</em> collections\nwith <a href=\"https://github.com/ziollek/lmdb-modsecurity-perf-issue#preparing-sample-data\">sample data</a>.\nWhen the collections are prepared, we can run <a href=\"https://github.com/ziollek/lmdb-modsecurity-perf-issue#testing-performance\">performance tests using ab</a>.\nBy increasing the number of lookups against <em>LMDB</em> collections during each request, it is relatively simple to reproduce low performance.\nAnalysis of access logs revealed the bursts mentioned in investigation part.</p>\n\n<p>The more interesting part was finding the exact place that caused hangs. We started from the entry point (for call inspection of the request headers) to\n<em>ModSecurity</em> from the nginx plugin, namely <strong>msc_process_request_headers</strong> function.\nWe helped ourselves with a tool <a href=\"https://manpages.debian.org/unstable/bpfcc-tools/trace-bpfcc.8.en.html\">trace-bpfcc</a> provided within package <strong>bpfcc-tools</strong>.\nBesides all other features, that tool allows logging the exact point in time when a particular function is called and when it is finished.\nWhen we analyzed the time spent on such a function, we realized that was the exact place where we should dig deeper:</p>\n\n<pre>\ntrace-bpfcc -t  'p:/usr/local/modsecurity/lib/libmodsecurity.so.3.0.6:msc_process_request_headers \"start\"' \\\n  'r:/usr/local/modsecurity/lib/libmodsecurity.so.3.0.6:msc_process_request_headers \"stop\"' \\\n  'r:/usr/local/modsecurity/lib/libmodsecurity.so.3.0.6:msc_process_logging \"stop\"' 2&gt;/dev/null\n\nTIME     PID     TID     COMM            FUNC             -\n..\n<b>3.981139 10842   10842   nginx           msc_process_request_headers start</b>\n6.296459 10847   10847   nginx           msc_process_request_headers stop\n6.297111 10847   10847   nginx           msc_process_request_headers start\n6.309465 10844   10844   nginx           msc_process_request_headers stop\n6.310118 10844   10844   nginx           msc_process_request_headers start\n<b>6.314868 10842   10842   nginx           msc_process_request_headers stop</b>\n6.319024 10840   10840   nginx           msc_process_request_headers stop\n6.323392 10839   10839   nginx           msc_process_request_headers stop\n6.328587 10837   10837   nginx           msc_process_request_headers stop\n6.332937 10843   10843   nginx           msc_process_request_headers stop\n6.338358 10841   10841   nginx           msc_process_request_headers stop\n6.339536 10841   10841   nginx           msc_process_request_headers start\n6.349181 10845   10845   nginx           msc_process_request_headers stop\n6.367007 10838   10838   nginx           msc_process_request_headers stop\n6.368100 10838   10838   nginx           msc_process_request_headers start\n<b>6.522875 10842   10842   nginx           msc_process_logging stop</b>\n...\n</pre>\n\n<p>Please pay attention to highlighted lines related to PID=10842.\nIt turned out that the upstream responded within the required time (in the prepared environment, we are able to control the upstream latency by part of the URL path):\n6.522875 - 6.314868 ~ 200ms.\nHowever, the rest of time: <em>6.314868 - 3.981139 ~ 2.230s</em> is consumed in <strong>msc_process_request_headers</strong>, when we search for the access log entry related to\nthis processing we can see:</p>\n\n<pre>\nconnection:5824 timestamp:1700222187.657 request_time:2.440 upstream_response_time:2.439 upstream_connect_time:<b>2.235</b> upstream_header_time:<b>2.438</b> status:200 request:(GET /users/200/random?arg=unknown HTTP/1.0)\n</pre>\n\n<p>I would not bore you with the whole process of tracking down but go directly to the <em>LMDB</em> <strong>mdb_txn_begin</strong> function that starts the <em>LMDB</em> transaction.\nThat function is called for each <em>LMDB</em> lookup, so there are way more calls than in previous profiling.\nHowever, I prepared a command that allows us to aggregate all time consumed while waiting in that function.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># trace-bpfcc -t 'p:/usr/lib/x86_64-linux-gnu/liblmdb.so.0.0.0:mdb_txn_begin \"start\"' \\\n  'r:/usr/lib/x86_64-linux-gnu/liblmdb.so.0.0.0:mdb_txn_begin \"stop\"' 2&gt;/dev/null | tee /tmp/benchmark.log\n# cat /tmp/benchmark.log  | sort -n | awk '{if ($6 == \"start\") { data[$2] = $1} else { summary += 1000 * ($1 - data[$2]); print $1, $2, 1000 * ($1 - data[$2]) }} END {print \"Total time spent on locking: \", summary, \"ms,  number of calls: \", calls}'\n...\nTotal time spent on locking: 105891ms number of calls:  4064\n</code></pre></div></div>\n\n<p>As a comparison, we can execute the same profiling on version with a fix. Such a version is also available in a prepared environment.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cat /tmp/benchmark.log  | sort -n | awk '{if ($6 == \"start\") { data[$2] = $1} else { calls++; summary += 1000 * ($1 - data[$2]); print $1, $2, 1000 * ($1 - data[$2]) }} END {print \"Total time spent on locking: \", summary, \"ms,  number of calls: \", calls}'\n...\nTotal time spent on locking: 1811.19ms  number of calls:  4064\n</code></pre></div></div>\n\n<h3 id=\"fixing-the-fix\">Fixing the fix</h3>\n\n<p>As I have mentioned before, during the investigation we inspected source code that partially solves the problem.\nIt turned out that the fix merged to master does not work at all with the nginx plugin because of some initialization problems.\nThe <a href=\"https://github.com/SpiderLabs/ModSecurity/pull/2688\">PR</a> that fixes the found problem has been merged and released in version <em>3.0.7</em> of <em>ModSecurity</em>.</p>\n\n<h2 id=\"lessons-learned\">Lessons learned</h2>\n\n<h3 id=\"make-sure-that-you-inspect-the-exact-version-of-the-source-code-that-you-run\">Make sure that you inspect the exact version of the source code that you run</h3>\n\n<p>One of the struggles that we faced was scrutinizing the version of ModSecurity that had partially fixed the problem with exclusive read access to <em>LMDB</em>.\nFor sure, we had bad luck that the fix was available in master and not in the last released version that we then used, but at least we can confirm that the\ndevil is in the details.</p>\n\n<h3 id=\"instrumentation-overhead\">Instrumentation overhead</h3>\n\n<p>When using such low level profiling methods you have to bear in mind that approach is quite invasive.\nIt means that such observation impacts the observed process.\nIt implies that it is hard to distinguish if we are observing root problems or just a consequence of harnessing very heavy instrumentation.\nSo, it is risky to draw conclusions from such observations.</p>\n\n<h3 id=\"verify-your-assumptions\">Verify your assumptions</h3>\n\n<p>Our lack of understanding of how the particular phases of processing requests are computed led us to the false assumption that we could compute approximate\n<em>ModSecurity</em> overhead by using simple arithmetic: request time - upstream time.\n<img src=\"/img/articles/2023-12-14-lmdb-postmortem/variables.png\" alt=\"nginx variables\" /></p>\n\n<p>It was one of the biggest mistakes that hindered revealing the truth. It turned out that part of <em>ModSecurity</em> processing was included into upstream time,\nso the red part on above diagram also includes <em>ModSecurity</em> processing that is not part of establishing connection. As a form of self-punishment,\nwe <a href=\"https://github.com/SpiderLabs/ModSecurity-nginx/pull/278\">extended</a> the <em>nginx-ModSecurity</em> plugin in such a way that it allows measuring the overhead of\neach <em>ModSecurity</em> phase in a reliable way.</p>\n\n<h3 id=\"log-timestamps\">Log timestamps</h3>\n\n<p>It may seem redundant because many logger collectors by default add their own timestamp of the moment when log entries are received in the collector.\nHowever, having a timestamp from <strong>the moment when the log is produced</strong> (without any delays) is crucial to reveal suspicious patterns/hangs on the producer\nside that can not be observed if timestamps are affected by random lags.</p>\n\n<h3 id=\"do-not-abuse-undocumented-behavior\">Do (not) abuse undocumented behavior</h3>\n\n<p>One of the reasons that we faced this issue was abusing usage of <em>ModSecurity</em> collections.\nIn regular and <a href=\"https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual-%28v3.x%29#user-content-Persistent_Storage\">documented</a> usage such collections\nare considered to be simple key-value storage.\nWe discovered that under each key, we are able to store a list of values instead of a single value. If you consciously scanned the provided repository\n(especially <em>ModSecurity</em> rules) you could probably find a way to simulate a situation where multiple values are fetched while reading a single key.\nLet’s look at a rule that is available in the repository</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SecRule &amp;REQUEST_HEADERS:x-set-sample \"@eq 1\" \"phase:1,setvar:global.sample%{REQUEST_HEADERS:x-set-sample}=%{REQUEST_HEADERS:x-set-sample},log,deny,status:403,id:50,msg:'value of sample header is blocked',tag:'priority:1',tag:'action:deny'\"\n</code></pre></div></div>\n\n<p>If we call above rule with x-set-sample header with subsequent values <em>1, 2, 3</em>. We can do that by making HTTP requests as below:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>workstation # docker-compose exec nginx-before-fix bash\nnginx-with-lmdb # curl -I -H'x-set-sample: 1' localhost\nnginx-with-lmdb # curl -I -H'x-set-sample: 2' localhost\nnginx-with-lmdb # curl -I -H'x-set-sample: 3' localhost\n</code></pre></div></div>\n\n<p>Then, we can expect that there will be stored three key-value pairs:</p>\n<ul>\n  <li>globals[sample1]=1</li>\n  <li>globals[sample2]=2</li>\n  <li>globals[sample3]=3</li>\n</ul>\n\n<p>Indeed, when we try to read <em>LMDB</em> in a very naive approach, values are stored the way we expect. We can see something like that:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nginx-with-lmdb # strings /tmp/modsec-shared-collections\nsample::::sample11\nsample::::sample22\nsample::::sample33\n</code></pre></div></div>\n\n<p>The following rule that is interesting is supposed to check if a value under a particular key is equal to a query param.\nBasically, if the request contains query parameter <strong>arg=1</strong>, then we check if the value in the collection <strong>global</strong>, under the key <strong>sample</strong> is also “1”.\nIf the condition is met then the request will be blocked, which means that <strong>403</strong> status code will be returned.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SecRule ARGS_GET \".*\" \"chain,phase:1,log,capture,deny,status:403,id:1001,msg:'value of param %{TX.0} is blocked',setvar:tx.param=%{TX.0}\"\n    SecRule global.sample \"@streq %{tx.param}\" \"t:none\"\n</code></pre></div></div>\n\n<p>You may be confused why we are reading the key <strong>sample</strong> that was never set.\nLet’s look what happens when we try to make a request with value 1 and -1.\nAs I described earlier, our intention was to check if <strong>global[sample] == 1</strong>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nginx-with-lmdb  # curl -I \"http://localhost/users/200/random?arg=1\"\nHTTP/1.1 403 Forbidden\nServer: nginx/1.22.0 (Ubuntu)\nDate: Fri, 17 Nov 2023 10:58:39 GMT\nContent-Type: text/html\nContent-Length: 162\nConnection: keep-alive\nnginx-with-lmdb\n\nnginx-with-lmdb  # curl -I \"http://localhost/users/200/random?arg=-1\"\nHTTP/1.1 200\nServer: nginx/1.22.0 (Ubuntu)\nDate: Fri, 17 Nov 2023 10:58:42 GMT\nContent-Type: application/json\nContent-Length: 79\nConnection: keep-alive\n\n</code></pre></div></div>\n\n<p>Quite interesting? It turns out that the match is fulfilled for value “1”, and surprisingly there is a log that gives us an insight:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nginx-with-lmdb  # tail -5 /var/log/nginx/modsec_audit.log\n---TL9qTmAS---H--\nModSecurity: Access denied with code 403 (phase 1). Matched \"Operator `StrEq' with parameter `' against variable `GLOBAL:sample::::sample1' (Value: `1' ) [file \"/etc/nginx/rules/rules.conf\"] [line \"32\"] [id \"1001\"] [rev \"\"] [msg \"value of param 1 is blocked\"] [data \"\"] [severity \"0\"] [ver \"\"] [maturity \"0\"] [accuracy \"0\"] [hostname \"127.0.0.1\"] [uri \"/users/200/random\"] [unique_id \"1700218719\"] [ref \"o0,1v27,1\"]\n\n---TL9qTmAS---Z--\n</code></pre></div></div>\n\n<p>As you can see, internally <em>ModSecurity</em> read the value that was stored under the key <em>sample1</em> instead of <em>sample</em>.\nThe same works for each key with matching prefix.</p>\n\n<p>To wrap up this somewhat too long digression, we abused undocumented behavior on purpose,\nand it increased the time it took to fetch data. Moreover, such fetching was redundant and nonsense because after fetching all those values we check only\nif the list contains a particular value.\nDue to the increased time of exclusive locks (acquired for the whole time of fetching data), the problem started to be noticeable. On the other hand, if\nwe had not abused it, we would unconsciously still be using buggy code that slowly degrades efficiency.</p>\n\n","contentSnippet":"This article is a form of a public postmortem in which we would like to share our bumpy way of revealing the cause of a mysterious performance problem.\nBesides unveiling part of our technical stack based on open-source solutions, we also show how some false assumptions made such a bug triage process much\nharder.\nBesides all NOT TO DOs, you can find some exciting information about performance hunting and reproducing performance issues on a small scale.\nAs a perk, we prepared a repository where you can reproduce the problem and make yourself familiar with tools\nthat allowed us to confirm the cause.\nThe last part (lessons learned) is the most valuable if you prefer to learn from the mistakes of others.\nBefore you start reading, I must warn you that it will be a pretty long story, and following it without technical knowledge will be challenging.\nHowever, I tried my best to simplify the technicalities as much as possible. If, despite all discouragement, you are interested in solving technical mysteries,\ntake a sip of coffee and enjoy the story!\nClever: what have we built?\nA few years ago, we researched several platforms that can be used as transparent HTTP proxies capable of handling HTTP traffic to our services.\nWe needed a solution that would be able to inspect metadata and user data against any suspicious patterns and decide if such traffic should be processed or banned.\nWe chose nginx in concert with ModSecurity as a foundation for a more complex\necosystem.\nDuring increasing usage of such a stack, more than simple non-contextual rules was needed for more complex traffic analysis. One of the most crucial needs was providing the ability to store some contextual information connected\nwith session activity in order to better recognize malicious patterns.\nBy default, ModSecurity allows storing contextual information in memory. Such an approach is not very useful in connection with HTTP servers that utilize\nmultiprocessing as nginx does.\n\nHowever, we learned that ModSecurity can use LMDB as an internal fast storage for contextual information that could be\nshared between requests that come, for example, from the same IP address. LMDB approach ensures that contextual information stored by one nginx worker process\nis accessible by others.\n\nAt first glance, it looks great; however, in our case, we could not rely on information that is stored directly by ModSecurity.\nAs you can imagine, our setup is based on more than one server, so we have to be able to pass the same contextual information to each of them.\nMoreover, our algorithms that compute such information are complex and reach for more data than those available to ModSecurity.\nNevertheless, LMDB has one great advantage: it allows connecting to it from outside the nginx process and altering the contextual data that is available to\nModSecurity.\nWe built a mechanism that syncs contextual information from dedicated service to LMDB on each transparent proxy host.\nA simplified view of the architecture that allows computing and synchronizing contextual information is depicted below (dotted lines represent asynchronous flow):\n\nSuch a PoC gave us promising results regarding how fast the contextual information could be provided and how fast it was retrieved by ModSecurity.\nFinally, we rolled out the new approach, and everything worked smoothly for such a long time that we assumed it was a rock-solid solution.\nSurprised: once upon a time, the problem occurred for the first time\nWe noticed that response time from the client’s perspective soared, and the number of established connections also increased.\nSuch a correlation is not strange and was noticed many times in the past when the upstream that handles requests from proxy started responding slower.\nWhat was mysterious in that case was that there was no evidence of a problem on the upstream side besides the metric from nginx that was based on\n$upstream_connect_time.\nAccording to that metric, connecting to the upstream had slowed down significantly.\nHaving such a clue we blamed the part of infrastructure that is always to blame if no one knows what is happening.\nAs you probably guessed, we assumed that was a temporary network issue (from my experience, it is the best justification to not dig more profound).\nUnfortunately, the network issue started occurring quite often, at least a few times a week.\nStrangely enough, if we disable the transparent proxy, the network seems to be stable. Once again, we were convinced that someone from the network team devised blameless culture.\nHence, we started to verify a lot of new hypotheses, from those scary (cyber war, specialized attacks that are hidden in regular traffic) to those that bring\nsmiles upon our faces at least for today (backdoor left by Russian spy in the nginx source code).\nFalsification of those hypotheses that were at least partially backed up by data is a great story about how to teach engineers that correlation does not mean\ncausation.\nTurn gray: investigation\nLet me introduce a simplified view of our infrastructure to show where we gathered data.\n\nAll proxies measure at least the total processing time, including the time consumed in the proxy and the time that was consumed outside the proxy (passing the\nrequest to the next server in the above chain and waiting for the response).\nAnd those parts could be analyzed independently. Based on such measurements, we can simply compute the approximate overhead of the proxy as a difference between the whole\nrequest (green box) processing and the upstream (red box) waiting.\nHaving that, we were able to discover that the time consumed in transparent proxy was not increased significantly; only the time consumed outside of proxy was\nraised (red box).\nIt was one of the big lies that hindered revealing the truth. You can find a broader explanation of misleading metrics in the lessons learned part.\nAfter excluding network issues, and upstream issues, we were pretty sure that the problem lay in transparent proxy, and we started to doubt what we saw in\nmetrics.\nIt took a while, but finally, we were able to break our unwavering trust in data. Relying on data is encoded in our company DNA, so trusting it was a natural\ninstinct, unfortunately, a bad one in this case.\nHaving that, we could not rely on metrics provided by a transparent proxy. We were starting to try out other means to measure what was going on inside the\ntransparent proxy.\nBeing biased by network issues, we started gathering a lot of network-related information that only showed correlations with problems, but it did not give any\nclues about what was happening.\nIt was a time to use the more straightforward but quite heavy solution - access logs. However, logs are not very useful in giving the overall condition of the proxy;\nthey can be beneficial in analyzing singular problems.\nWhen the problems occurred again, we had some data that we could scrutinize. It turned out that an excellent idea was to log exact timestamps in\na very high resolution (which was not default).\nBelow, you can see a real example reproduced in the local environment (which will be described later).\nEach line contains nginx worker process id, timestamp, request_time, upstream_request_time, upstream_connect_time and the response status code.\n8.990 urt:8.990 uct:7.128 status:200\npid:41 t:1700163031.929 rt:12.348 urt:12.348 uct:3.358 status:200\npid:41 t:1700163031.929 rt:8.990 urt:8.990 uct:7.128 status:200\npid:41 t:1700163031.929 rt:8.990 urt:8.990 uct:7.128 status:200\n\n\nIt turned out that very often information was logged in bursts with exactly the same timestamp, what was even more intriguing was that some of such entries\nreported the exact same time as an $upstream_request_time or $upstream_connect_time.\nLet’s say that even if you are keen on paranormal mystery, odds, that’s the moment when the big red light should start blinking.\nIt definitely looks like something deterministic, not random. In the production realm, it was even more interesting; some bursts were connected with each other\nin some strange arithmetic way - for example:\nLet’s define bursts as:\nB1, B2, B3 - bursts\nB1.TS - timestamp of the burst\nB3.urt, B3.uct - upstream_request_time, upstream_connect_time - reported during last burst\nthen such relation was often noticed:\nB1.TS + B3.uct = B2.TS\nB1.TS + B3.urt = B3.TS\nTo better understand such a relation, let’s draw it:\n\nHaving a clue that there are extended periods of time when processing for a particular process is stuck, we wanted to know what was going on when processes hung.\nWe used strace to preview what particular system calls were made during such problems. The challenge was to connect to the process when problems occur,\nbut fortunately for us (and less fortunately for our users) we did not wait a long time for the subsequent instability, and we were able to gather strace data.\nIt reveals a large number of futex calls that indicated active waiting for some barer / mutex.\nConnecting the dots\nAs it was announced earlier, on that stage we have three actors. In order to better understand what was happening under the hood, let’s take a closer look at\neach of them.\nFirst of all nginx server, it uses\nan asynchronous event-driven approach to handling connections.\nIt means that a single nginx worker can process a large number of requests simultaneously basically because a significant part of processing a single request\nhappens outside the worker. Instead of actively waiting for a response, the nginx process uses such spare time to handle new incoming requests.\nEverything works very efficiently as long as each blocking (IO consuming) operation is handled in an asynchronous manner\n(the control is returned to event-loop).\nWhen such a requirement is unmet, the processing pace slows dramatically.\nThe second actor is the ModSecurity-nginx plugin. Nginx plugins allow extending the logic of the server by adding custom logic.\nModSecurity-nginx plugin allows inspecting requests processed by nginx against ModSecurity rules.\nSuch inspection can be considered a CPU-bound operation, so even if it is called in a synchronous manner, it does not break the concept of processing\nblocking operations asynchronously.\nThe third one is LMDB, a very efficient mapped DB that allows concurrent reads and exclusive writes. This database was used as a storage for ModSecurity\ncollections in order to share a state of collections between nginx workers.\nThe documentation and source code of this relatively small project were scrutinized many times as well as integration between ModSecurity and LMDB, but there\nwas no suspicion of what could be wrong.\nFinally, it turned out that the version of ModSecurity that we scrutinized was from the master branch. Moreover, the master branch contained an improvement related to misusing\nLMDB exclusive transactions while reading the data. Given that, we had a justified belief that issues came from exclusive transactions. It means that\nnginx workers probably block on acquiring locks.\n\nReproducing the issue in the isolated environment\nTo reproduce the issue, we decided to use a technique that we called a fancy name: exaggeration.\nReproducing a problem that occurs under high traffic that is handled by powerful servers is not simple on a local workstation.\nHowever, in this case, we had some clues and justified hypotheses about what could be wrong and what part we should focus on.\nLet me explain what exaggeration means when it comes to reproducing a problem.\nSome sort of problems can be easily noticeable when the probability of the occurrence of rare events is raised to a significant level.\nIf we have different ways to increase such probability, we can use them interchangeably. I am aware that it sounds like theoretical physics, but believe me or\nnot our problems are relatively easier to solve than those worked on by the guys at LHC.\nIn our case, we were pretty sure that the number of concurrent lookups on a single server to ModSecurity collections is a rare event.\nSo instead of loading a local server in enormous traffic we significantly increased the number of lookups to LMDB that were performed for each processed\nrequest.\nAll below information is based on data that can be gathered from the docker\nenvironment that was prepared as an integral part of this article.\nIt is worth mentioning that the environment can be built in one of two modes:\nregular that is way faster when it comes to building process\nprofiling that allows revealing the exact point where nginx processes hang based on profiling information from the kernel\nI would not like to deep dive into the profiling process based on kernel capabilities, but it is very cumbersome in a containerized environment because\nit breaks the isolation paradigm.\nMoreover, it is hard to prepare due to compatibility requirements between host and container libraries, header files and compilers.\nHowever, for this particular purpose it was tempting to use limited profiling tools based on eBPF that do not have such restricted\nrequirements.\nThe first part of the reproducing process is feeding LMDB collections\nwith sample data.\nWhen the collections are prepared, we can run performance tests using ab.\nBy increasing the number of lookups against LMDB collections during each request, it is relatively simple to reproduce low performance.\nAnalysis of access logs revealed the bursts mentioned in investigation part.\nThe more interesting part was finding the exact place that caused hangs. We started from the entry point (for call inspection of the request headers) to\nModSecurity from the nginx plugin, namely msc_process_request_headers function.\nWe helped ourselves with a tool trace-bpfcc provided within package bpfcc-tools.\nBesides all other features, that tool allows logging the exact point in time when a particular function is called and when it is finished.\nWhen we analyzed the time spent on such a function, we realized that was the exact place where we should dig deeper:\n3.981139 10842   10842   nginx           msc_process_request_headers start\n6.296459 10847   10847   nginx           msc_process_request_headers stop\n6.297111 10847   10847   nginx           msc_process_request_headers start\n6.309465 10844   10844   nginx           msc_process_request_headers stop\n6.310118 10844   10844   nginx           msc_process_request_headers start\n6.314868 10842   10842   nginx           msc_process_request_headers stop\n6.319024 10840   10840   nginx           msc_process_request_headers stop\n6.323392 10839   10839   nginx           msc_process_request_headers stop\n6.328587 10837   10837   nginx           msc_process_request_headers stop\n6.332937 10843   10843   nginx           msc_process_request_headers stop\n6.338358 10841   10841   nginx           msc_process_request_headers stop\n6.339536 10841   10841   nginx           msc_process_request_headers start\n6.349181 10845   10845   nginx           msc_process_request_headers stop\n6.367007 10838   10838   nginx           msc_process_request_headers stop\n6.368100 10838   10838   nginx           msc_process_request_headers start\n6.522875 10842   10842   nginx           msc_process_logging stop\n...\n\n\nPlease pay attention to highlighted lines related to PID=10842.\nIt turned out that the upstream responded within the required time (in the prepared environment, we are able to control the upstream latency by part of the URL path):\n6.522875 - 6.314868 ~ 200ms.\nHowever, the rest of time: 6.314868 - 3.981139 ~ 2.230s is consumed in msc_process_request_headers, when we search for the access log entry related to\nthis processing we can see:\n2.235 upstream_header_time:2.438 status:200 request:(GET /users/200/random?arg=unknown HTTP/1.0)\n\n\nI would not bore you with the whole process of tracking down but go directly to the LMDB mdb_txn_begin function that starts the LMDB transaction.\nThat function is called for each LMDB lookup, so there are way more calls than in previous profiling.\nHowever, I prepared a command that allows us to aggregate all time consumed while waiting in that function.\n\n# trace-bpfcc -t 'p:/usr/lib/x86_64-linux-gnu/liblmdb.so.0.0.0:mdb_txn_begin \"start\"' \\\n  'r:/usr/lib/x86_64-linux-gnu/liblmdb.so.0.0.0:mdb_txn_begin \"stop\"' 2>/dev/null | tee /tmp/benchmark.log\n# cat /tmp/benchmark.log  | sort -n | awk '{if ($6 == \"start\") { data[$2] = $1} else { summary += 1000 * ($1 - data[$2]); print $1, $2, 1000 * ($1 - data[$2]) }} END {print \"Total time spent on locking: \", summary, \"ms,  number of calls: \", calls}'\n...\nTotal time spent on locking: 105891ms number of calls:  4064\n\n\nAs a comparison, we can execute the same profiling on version with a fix. Such a version is also available in a prepared environment.\n\ncat /tmp/benchmark.log  | sort -n | awk '{if ($6 == \"start\") { data[$2] = $1} else { calls++; summary += 1000 * ($1 - data[$2]); print $1, $2, 1000 * ($1 - data[$2]) }} END {print \"Total time spent on locking: \", summary, \"ms,  number of calls: \", calls}'\n...\nTotal time spent on locking: 1811.19ms  number of calls:  4064\n\n\nFixing the fix\nAs I have mentioned before, during the investigation we inspected source code that partially solves the problem.\nIt turned out that the fix merged to master does not work at all with the nginx plugin because of some initialization problems.\nThe PR that fixes the found problem has been merged and released in version 3.0.7 of ModSecurity.\nLessons learned\nMake sure that you inspect the exact version of the source code that you run\nOne of the struggles that we faced was scrutinizing the version of ModSecurity that had partially fixed the problem with exclusive read access to LMDB.\nFor sure, we had bad luck that the fix was available in master and not in the last released version that we then used, but at least we can confirm that the\ndevil is in the details.\nInstrumentation overhead\nWhen using such low level profiling methods you have to bear in mind that approach is quite invasive.\nIt means that such observation impacts the observed process.\nIt implies that it is hard to distinguish if we are observing root problems or just a consequence of harnessing very heavy instrumentation.\nSo, it is risky to draw conclusions from such observations.\nVerify your assumptions\nOur lack of understanding of how the particular phases of processing requests are computed led us to the false assumption that we could compute approximate\nModSecurity overhead by using simple arithmetic: request time - upstream time.\n\nIt was one of the biggest mistakes that hindered revealing the truth. It turned out that part of ModSecurity processing was included into upstream time,\nso the red part on above diagram also includes ModSecurity processing that is not part of establishing connection. As a form of self-punishment,\nwe extended the nginx-ModSecurity plugin in such a way that it allows measuring the overhead of\neach ModSecurity phase in a reliable way.\nLog timestamps\nIt may seem redundant because many logger collectors by default add their own timestamp of the moment when log entries are received in the collector.\nHowever, having a timestamp from the moment when the log is produced (without any delays) is crucial to reveal suspicious patterns/hangs on the producer\nside that can not be observed if timestamps are affected by random lags.\nDo (not) abuse undocumented behavior\nOne of the reasons that we faced this issue was abusing usage of ModSecurity collections.\nIn regular and documented usage such collections\nare considered to be simple key-value storage.\nWe discovered that under each key, we are able to store a list of values instead of a single value. If you consciously scanned the provided repository\n(especially ModSecurity rules) you could probably find a way to simulate a situation where multiple values are fetched while reading a single key.\nLet’s look at a rule that is available in the repository\n\nSecRule &REQUEST_HEADERS:x-set-sample \"@eq 1\" \"phase:1,setvar:global.sample%{REQUEST_HEADERS:x-set-sample}=%{REQUEST_HEADERS:x-set-sample},log,deny,status:403,id:50,msg:'value of sample header is blocked',tag:'priority:1',tag:'action:deny'\"\n\n\nIf we call above rule with x-set-sample header with subsequent values 1, 2, 3. We can do that by making HTTP requests as below:\n\nworkstation # docker-compose exec nginx-before-fix bash\nnginx-with-lmdb # curl -I -H'x-set-sample: 1' localhost\nnginx-with-lmdb # curl -I -H'x-set-sample: 2' localhost\nnginx-with-lmdb # curl -I -H'x-set-sample: 3' localhost\n\n\nThen, we can expect that there will be stored three key-value pairs:\nglobals[sample1]=1\nglobals[sample2]=2\nglobals[sample3]=3\nIndeed, when we try to read LMDB in a very naive approach, values are stored the way we expect. We can see something like that:\n\nnginx-with-lmdb # strings /tmp/modsec-shared-collections\nsample::::sample11\nsample::::sample22\nsample::::sample33\n\n\nThe following rule that is interesting is supposed to check if a value under a particular key is equal to a query param.\nBasically, if the request contains query parameter arg=1, then we check if the value in the collection global, under the key sample is also “1”.\nIf the condition is met then the request will be blocked, which means that 403 status code will be returned.\n\nSecRule ARGS_GET \".*\" \"chain,phase:1,log,capture,deny,status:403,id:1001,msg:'value of param %{TX.0} is blocked',setvar:tx.param=%{TX.0}\"\n    SecRule global.sample \"@streq %{tx.param}\" \"t:none\"\n\n\nYou may be confused why we are reading the key sample that was never set.\nLet’s look what happens when we try to make a request with value 1 and -1.\nAs I described earlier, our intention was to check if global[sample] == 1.\n\nnginx-with-lmdb  # curl -I \"http://localhost/users/200/random?arg=1\"\nHTTP/1.1 403 Forbidden\nServer: nginx/1.22.0 (Ubuntu)\nDate: Fri, 17 Nov 2023 10:58:39 GMT\nContent-Type: text/html\nContent-Length: 162\nConnection: keep-alive\nnginx-with-lmdb\n\nnginx-with-lmdb  # curl -I \"http://localhost/users/200/random?arg=-1\"\nHTTP/1.1 200\nServer: nginx/1.22.0 (Ubuntu)\nDate: Fri, 17 Nov 2023 10:58:42 GMT\nContent-Type: application/json\nContent-Length: 79\nConnection: keep-alive\n\n\n\nQuite interesting? It turns out that the match is fulfilled for value “1”, and surprisingly there is a log that gives us an insight:\n\nnginx-with-lmdb  # tail -5 /var/log/nginx/modsec_audit.log\n---TL9qTmAS---H--\nModSecurity: Access denied with code 403 (phase 1). Matched \"Operator `StrEq' with parameter `' against variable `GLOBAL:sample::::sample1' (Value: `1' ) [file \"/etc/nginx/rules/rules.conf\"] [line \"32\"] [id \"1001\"] [rev \"\"] [msg \"value of param 1 is blocked\"] [data \"\"] [severity \"0\"] [ver \"\"] [maturity \"0\"] [accuracy \"0\"] [hostname \"127.0.0.1\"] [uri \"/users/200/random\"] [unique_id \"1700218719\"] [ref \"o0,1v27,1\"]\n\n---TL9qTmAS---Z--\n\n\nAs you can see, internally ModSecurity read the value that was stored under the key sample1 instead of sample.\nThe same works for each key with matching prefix.\nTo wrap up this somewhat too long digression, we abused undocumented behavior on purpose,\nand it increased the time it took to fetch data. Moreover, such fetching was redundant and nonsense because after fetching all those values we check only\nif the list contains a particular value.\nDue to the increased time of exclusive locks (acquired for the whole time of fetching data), the problem started to be noticeable. On the other hand, if\nwe had not abused it, we would unconsciously still be using buggy code that slowly degrades efficiency.","guid":"https://blog.allegro.tech/2023/12/lmdb-postmortem.html","categories":["tech","postmortem","nginx","libmodsecurity","LMDB","performance bottleneck","open source","debugging","profiling"],"isoDate":"2023-12-13T23:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"How does B-tree make your queries fast?","link":"https://blog.allegro.tech/2023/11/how-does-btree-make-your-queries-fast.html","pubDate":"Mon, 27 Nov 2023 00:00:00 +0100","authors":{"author":[{"name":["Mateusz Kuźmik"],"photo":["https://blog.allegro.tech/img/authors/mateusz.kuzmik.jpg"],"url":["https://blog.allegro.tech/authors/mateusz.kuzmik"]}]},"content":"<p><strong>B-tree</strong> is a structure that helps to search through great amounts of data.\nIt was invented over 40 years ago, yet it is still employed by the majority of modern databases.\nAlthough there are newer index structures, like LSM trees,\n<strong>B-tree</strong> is unbeaten when handling most of the database queries.</p>\n\n<p>After reading this post, you will know how <strong>B-tree</strong> organises the data and how it performs search queries.</p>\n\n<h2 id=\"origins\">Origins</h2>\n\n<p>In order to understand <strong>B-tree</strong> let’s focus on <strong>Binary Search Tree (BST)</strong> first.</p>\n\n<p>Wait, isn’t it the same?</p>\n\n<p>What does “B” stand for then?</p>\n\n<p>According to <a href=\"https://en.wikipedia.org/wiki/B-tree\">wikipedia.org</a>, Edward M. McCreight, the inventor of B-tree, once said:</p>\n\n<blockquote>\n  <p>“the more you think about what the B in B-trees means, the better you understand B-trees.”</p>\n</blockquote>\n\n<p>Confusing <strong>B-tree</strong> with <strong>BST</strong> is a really common misconception.\nAnyway, in my opinion, BST is a great starting point for reinventing B-tree.\nLet’s start with a simple example of BST:</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/bst-basic.webp\" alt=\"Binary Search Tree with three nodes\" class=\"small-image\" /></p>\n\n<p>The greater number is always on the right, the lower on the left. It may become clearer when we add more numbers.</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/bst-bigger.webp\" alt=\"Binary Search Tree with seven nodes\" class=\"small-image\" /></p>\n\n<p>This tree contains seven numbers, but we need to visit at most three nodes to locate any number.\nThe following example visualizes searching for 14.\nI used SQL to define the query in order to think about this tree as if it were an actual database index.</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/bst-bigger-searching.webp\" alt=\"Searching for single node within Binary Search Tree with seven nodes\" class=\"small-image\" /></p>\n\n<h2 id=\"hardware\">Hardware</h2>\n\n<p>In theory, using Binary Search Tree for running our queries looks fine. Its time complexity (when searching) is \\(O(log\nn)\\), <a href=\"https://en.wikipedia.org/wiki/B-tree\">same as B-tree</a>. However, in practice, this data structure needs to work on actual hardware. An index must be\nstored somewhere on your machine.</p>\n\n<p>The computer has three places where the data can be stored:</p>\n\n<ul>\n  <li>CPU caches</li>\n  <li>RAM (memory)</li>\n  <li>Disk (storage)</li>\n</ul>\n\n<p>The cache is managed fully by CPUs. Moreover, it is relatively small, usually a few megabytes.\nIndex may contain gigabytes of data, so it won’t fit there.</p>\n\n<p>Databases vastly use Memory (RAM). It has some great advantages:</p>\n\n<ul>\n  <li>assures fast random access (more on that in the next paragraph)</li>\n  <li>its size may be pretty big (e.g. AWS RDS cloud service <a href=\"https://aws.amazon.com/rds/instance-types/\">provides instances</a>\nwith a few terabytes of memory available).</li>\n</ul>\n\n<p>Cons? You lose the data when the power supply goes off. Moreover, when compared to the disk, it is pretty expensive.</p>\n\n<p>Finally, the cons of a memory are the pros of a disk storage.\nIt’s cheap, and data will remain there even if we lose the power.\nHowever, there are no free lunches!\nThe catch is that we need to be careful about random and sequential access.\nReading from the disk is fast, but only under certain conditions!\nI’ll try to explain them simply.</p>\n\n<h3 id=\"random-and-sequential-access\">Random and sequential access</h3>\n\n<p>Memory may be visualized as a line of containers for values, where every container is numbered.</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/memory.webp\" alt=\"Simple memory visualization\" class=\"small-image\" /></p>\n\n<p>Now let’s assume we want to read data from containers 1, 4, and 6. It requires random access:</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/memory-random-access.webp\" alt=\"Random access visualized on a small chunk of a memory\" class=\"small-image\" /></p>\n\n<p>And then let’s compare it with reading containers 3, 4, and 5. It may be done sequentially:</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/memory-sequential-access.webp\" alt=\"Sequential access visualized on a small chunk of a memory\" class=\"small-image\" /></p>\n\n<p>The difference between a “random jump” and a “sequential read” can be explained based on Hard Disk Drive.\nIt consists of the head and the disk.</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/hdd-disk.webp\" alt=\"Hard Disk Drive with cover removed, Public Domain image from https://en.wikipedia.org/wiki/Hard_disk_drive#/media/File:Laptop-hard-drive-exposed.jpg\" class=\"small-image\" /></p>\n\n<p>“Random jump” requires moving the head to the given place on the disk.\n“Sequential read” is simply spinning the disk, allowing the head to read consecutive values.\nWhen reading megabytes of data, the difference between these two types of access is enormous.\nUsing “sequential reads” lowers the time needed to fetch the data significantly.</p>\n\n<p>Differences in speed between random and sequential access were researched in the article “The Pathologies of Big Data”\nby Adam Jacobs, <a href=\"https://queue.acm.org/detail.cfm?id=1563874\">published in Acm Queue</a>.\nIt revealed a few mind-blowing facts:</p>\n\n<ul>\n  <li>Sequential access on HDD may be hundreds of thousands of times faster than random access. 🤯</li>\n  <li>It may be faster to read sequentially from the disk than randomly from the memory.</li>\n</ul>\n\n<p>Who even uses HDD nowadays?\nWhat about SSD?\nThis research shows that reading fully sequentially from HDD may be faster than SSD.\nHowever, please note that the article is from 2009 and SSD developed significantly through the last decade,\nthus these results are probably outdated.</p>\n\n<p>To sum up, the key takeaway is <strong>to prefer sequential access wherever we can</strong>.\nIn the next paragraph, I will explain how to apply it to our index structure.</p>\n\n<h2 id=\"optimizing-a-tree-for-sequential-access\">Optimizing a tree for sequential access</h2>\n\n<p>Binary Search Tree may be represented in memory in the same way\nas <a href=\"https://en.wikipedia.org/wiki/Binary_heap\">the heap</a>:</p>\n\n<ul>\n  <li>parent node position is \\(i\\)</li>\n  <li>left node position is \\(2i\\)</li>\n  <li>right node position is \\(2i+1\\)</li>\n</ul>\n\n<p>That’s how these positions are calculated based on the example (the parent node starts at 1):</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/tree-representation-in-memory-1.webp\" alt=\"Binary tree representation in the memory—part 1/2\" class=\"small-image\" /></p>\n\n<p>According to the calculated positions, nodes are aligned into the memory:</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/tree-representation-in-memory-2.webp\" alt=\"Binary tree representation in the memory—part 2/2\" class=\"small-image\" /></p>\n\n<p>Do you remember the query visualized a few chapters ago?</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/bst-bigger-searching.webp\" alt=\"Searching for single node within Binary Search Tree with seven nodes\" class=\"small-image\" /></p>\n\n<p>That’s what it looks like on the memory level:</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/tree-representation-in-memory-query.webp\" alt=\"Binary tree representation in the memory - querying\" class=\"small-image\" /></p>\n\n<p>When performing the query, memory addresses 1, 3, and 6 need to be visited.\nVisiting three nodes is not a problem; however, as we store more data, the tree gets higher.\nStoring more than one million values requires a tree of height at least 20. It means\nthat 20 values from different places in memory must be read.\nIt causes completely random access!</p>\n\n<h3 id=\"pages\">Pages</h3>\n\n<p>While a tree grows in height, random access is causing more and more delay.\nThe solution to reduce this problem is simple: grow the tree in width rather than in height.\nIt may be achieved by packing more than one value into a single node.</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/tree-with-3-values-in-node.webp\" alt=\"A tree with three values in single node\" /></p>\n\n<p>It brings us the following benefits:</p>\n\n<ul>\n  <li>the tree is shallower (two levels instead of three)</li>\n  <li>it still has a lot of space for new values without the need for growing further</li>\n</ul>\n\n<p>The query performed on such index looks as follows:</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/tree-with-3-values-query.webp\" alt=\"A query performed on a tree with three values in a single node\" /></p>\n\n<p>Please note that every time we visit a node, we need to load all its values.\nIn this example, we need to load 4 values (or 6 if the tree is full) in order to reach the one we are looking for.\nBelow, you will find a visualization of this tree in a memory:</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/tree-with-3-values-memory.webp\" alt=\"A tree with three values in a single node represented in a memory\" /></p>\n\n<p>Compared to <a href=\"#optimizing-a-tree-for-sequential-access\">the previous example</a> (where the tree grows in height),\nthis search should be faster.\nWe need random access only twice (jump to cells 0 and 9) and then sequentially read the rest of values.</p>\n\n<p>This solution works better and better as our database grows. If you want to store one million values, then you need:</p>\n\n<ul>\n  <li>Binary Search Tree which has <strong>20</strong> levels</li>\n</ul>\n\n<p>OR</p>\n\n<ul>\n  <li>3-value node Tree which has <strong>10</strong> levels</li>\n</ul>\n\n<p>Values from a single node make a page.\nIn the example above, each page consists of three values.\nA page is a set of values placed on a disk next to each other,\nso the database may reach the whole page at once with one sequential read.</p>\n\n<p>And how does it refer to the reality?\n<a href=\"https://www.postgresql.org/docs/current/storage-toast.html#:~:text=PostgreSQL%20uses%20a%20fixed%20page,tuples%20to%20span%20multiple%20pages.\">Postgres page size is 8kB</a>.\nLet’s assume that 20% is for metadata, so it’s 6kB left.\nHalf of the page is needed to store\npointers to node’s children, so it gives us 3kB for values.\nBIGINT size is 8 bytes, thus we may store ~375 values in a\nsingle page.</p>\n\n<p>Assuming that some pretty big tables in a database have one billion rows,\nhow many levels in the Postgres tree do we need to store them?\nAccording to the calculations above,\nif we create a tree that can handle 375 values in a single node,\nit may store <strong>1 billion</strong> values with a tree that has only <strong>four</strong> levels.\nBinary Search Tree would require 30 levels for such amount of data.</p>\n\n<p>To sum up, placing multiple values in a single node of the tree helped us to reduce its height, thus using the benefits of sequential access.\nMoreover, a B-tree may grow not only in height, but also in width (by using larger pages).</p>\n\n<h2 id=\"balancing\">Balancing</h2>\n\n<p>There are two types of operations in databases: writing and reading.\nIn the previous section, we addressed the problems with reading the data from the B-tree.\nNonetheless, writing is also a crucial part.\nWhen writing the data to a database, B-tree needs to be constantly updated with new values.</p>\n\n<p>The tree shape depends on the order of values added to the tree.\nIt’s easily visible in a binary tree.\nWe may obtain trees with different depths if the values are added in an incorrect order.</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/bst-imbalance.webp\" alt=\"Two Binary Trees with shapes depending on the order of inserted values.\" class=\"small-image\" /></p>\n\n<p>When the tree has different depths on different nodes, it is called an unbalanced tree.\nThere are basically two ways of returning such a tree to a balanced state:</p>\n\n<ol>\n  <li>Rebuilding it from the very beginning just by adding the values in the correct order.</li>\n  <li>Keeping it balanced all the time, as the new values are added.</li>\n</ol>\n\n<p>B-tree implements the second option. A feature that makes the tree balanced all the time is called self-balancing.</p>\n\n<h3 id=\"self-balancing-algorithm-by-example\">Self-balancing algorithm by example</h3>\n\n<p>Building a B-tree can be started simply by creating a single node\nand adding new values until there is no free space in it.</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/self-balancing-step-1.webp\" alt=\"Self-balancing, step 1, Add new values until there is a free space in existing nodes.\" class=\"small-image\" /></p>\n\n<p>If there is no space on the corresponding page, it needs to be split.\nTo perform a split, a „split point” is chosen.\nIn that case, it will be 12, because it is in the middle.\nThe „Split point” is a value that will be moved to the upper page.</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/self-balancing-step-2a.webp\" alt=\"Self-balancing, step 2a, Splitting the page.\" class=\"small-image\" /></p>\n\n<p>Now, it gets us to an interesting point where there is no upper page.\nIn such a case, a new one needs to be generated (and it becomes the new root page!).</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/self-balancing-step-2b.webp\" alt=\"Self-balancing, step 2b, Generating a new root page.\" class=\"small-image\" /></p>\n\n<p>And finally, there is some free space in the three, so value 14 may be added.</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/self-balancing-step-2c.webp\" alt=\"Self-balancing, step 2c, Adding the 14 to B-tree.\" class=\"small-image\" /></p>\n\n<p>Following this algorithm, we may constantly add new values to the B-tree, and it will remain balanced all the time!</p>\n\n<p><img src=\"/img/articles/2023-11-27-how-does-btree-make-your-queries-fast/self-balancing-step-final.webp\" alt=\"Self-balancing, Final state of the B-tree, after adding multiple values.\" /></p>\n\n<p><em>At this point, you may have a valid concern that there is a lot of free space that has no chance to be\nfilled.\nFor example, values 14, 15, and 16, are on different pages, so these pages will remain with only one value and two free spaces forever.</em></p>\n\n<p><em>It was caused by the split location choice.\nWe always split the page in the middle.\nBut every time we do a split, we may choose any split location we want.</em></p>\n\n<p><em>Postgres has an algorithm that is run every time a split is performed!\nIts implementation may be found in the <a href=\"https://github.com/postgres/postgres/blob/54ccfd65868c013a8c6906bc894bc5ea3640740a/src/backend/access/nbtree/nbtsplitloc.c#L87\">_bt_findsplitloc() function in Postgres source code</a>.\nIts goal is to leave as little free space as possible.</em></p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>In this article, you learned how a B-tree works.\nAll in all, it may be simply described as a Binary Search Tree with two changes:</p>\n\n<ul>\n  <li>every node may contain more than one value</li>\n  <li>inserting a new value is followed by a self-balancing algorithm.</li>\n</ul>\n\n<p>Although the structures used by modern databases are usually some variants of a B-tree (like B+tree), they are still based on the original conception.\nIn my opinion, one great strength of a B-tree is the fact that it was designed directly to handle large amounts of data on actual hardware.\nIt may be the reason why the B-tree has remained with us for such a long time.</p>\n","contentSnippet":"B-tree is a structure that helps to search through great amounts of data.\nIt was invented over 40 years ago, yet it is still employed by the majority of modern databases.\nAlthough there are newer index structures, like LSM trees,\nB-tree is unbeaten when handling most of the database queries.\nAfter reading this post, you will know how B-tree organises the data and how it performs search queries.\nOrigins\nIn order to understand B-tree let’s focus on Binary Search Tree (BST) first.\nWait, isn’t it the same?\nWhat does “B” stand for then?\nAccording to wikipedia.org, Edward M. McCreight, the inventor of B-tree, once said:\n“the more you think about what the B in B-trees means, the better you understand B-trees.”\nConfusing B-tree with BST is a really common misconception.\nAnyway, in my opinion, BST is a great starting point for reinventing B-tree.\nLet’s start with a simple example of BST:\n\nThe greater number is always on the right, the lower on the left. It may become clearer when we add more numbers.\n\nThis tree contains seven numbers, but we need to visit at most three nodes to locate any number.\nThe following example visualizes searching for 14.\nI used SQL to define the query in order to think about this tree as if it were an actual database index.\n\nHardware\nIn theory, using Binary Search Tree for running our queries looks fine. Its time complexity (when searching) is \\(O(log\nn)\\), same as B-tree. However, in practice, this data structure needs to work on actual hardware. An index must be\nstored somewhere on your machine.\nThe computer has three places where the data can be stored:\nCPU caches\nRAM (memory)\nDisk (storage)\nThe cache is managed fully by CPUs. Moreover, it is relatively small, usually a few megabytes.\nIndex may contain gigabytes of data, so it won’t fit there.\nDatabases vastly use Memory (RAM). It has some great advantages:\nassures fast random access (more on that in the next paragraph)\nits size may be pretty big (e.g. AWS RDS cloud service provides instances\nwith a few terabytes of memory available).\nCons? You lose the data when the power supply goes off. Moreover, when compared to the disk, it is pretty expensive.\nFinally, the cons of a memory are the pros of a disk storage.\nIt’s cheap, and data will remain there even if we lose the power.\nHowever, there are no free lunches!\nThe catch is that we need to be careful about random and sequential access.\nReading from the disk is fast, but only under certain conditions!\nI’ll try to explain them simply.\nRandom and sequential access\nMemory may be visualized as a line of containers for values, where every container is numbered.\n\nNow let’s assume we want to read data from containers 1, 4, and 6. It requires random access:\n\nAnd then let’s compare it with reading containers 3, 4, and 5. It may be done sequentially:\n\nThe difference between a “random jump” and a “sequential read” can be explained based on Hard Disk Drive.\nIt consists of the head and the disk.\n\n“Random jump” requires moving the head to the given place on the disk.\n“Sequential read” is simply spinning the disk, allowing the head to read consecutive values.\nWhen reading megabytes of data, the difference between these two types of access is enormous.\nUsing “sequential reads” lowers the time needed to fetch the data significantly.\nDifferences in speed between random and sequential access were researched in the article “The Pathologies of Big Data”\nby Adam Jacobs, published in Acm Queue.\nIt revealed a few mind-blowing facts:\nSequential access on HDD may be hundreds of thousands of times faster than random access. 🤯\nIt may be faster to read sequentially from the disk than randomly from the memory.\nWho even uses HDD nowadays?\nWhat about SSD?\nThis research shows that reading fully sequentially from HDD may be faster than SSD.\nHowever, please note that the article is from 2009 and SSD developed significantly through the last decade,\nthus these results are probably outdated.\nTo sum up, the key takeaway is to prefer sequential access wherever we can.\nIn the next paragraph, I will explain how to apply it to our index structure.\nOptimizing a tree for sequential access\nBinary Search Tree may be represented in memory in the same way\nas the heap:\nparent node position is \\(i\\)\nleft node position is \\(2i\\)\nright node position is \\(2i+1\\)\nThat’s how these positions are calculated based on the example (the parent node starts at 1):\n\nAccording to the calculated positions, nodes are aligned into the memory:\n\nDo you remember the query visualized a few chapters ago?\n\nThat’s what it looks like on the memory level:\n\nWhen performing the query, memory addresses 1, 3, and 6 need to be visited.\nVisiting three nodes is not a problem; however, as we store more data, the tree gets higher.\nStoring more than one million values requires a tree of height at least 20. It means\nthat 20 values from different places in memory must be read.\nIt causes completely random access!\nPages\nWhile a tree grows in height, random access is causing more and more delay.\nThe solution to reduce this problem is simple: grow the tree in width rather than in height.\nIt may be achieved by packing more than one value into a single node.\n\nIt brings us the following benefits:\nthe tree is shallower (two levels instead of three)\nit still has a lot of space for new values without the need for growing further\nThe query performed on such index looks as follows:\n\nPlease note that every time we visit a node, we need to load all its values.\nIn this example, we need to load 4 values (or 6 if the tree is full) in order to reach the one we are looking for.\nBelow, you will find a visualization of this tree in a memory:\n\nCompared to the previous example (where the tree grows in height),\nthis search should be faster.\nWe need random access only twice (jump to cells 0 and 9) and then sequentially read the rest of values.\nThis solution works better and better as our database grows. If you want to store one million values, then you need:\nBinary Search Tree which has 20 levels\nOR\n3-value node Tree which has 10 levels\nValues from a single node make a page.\nIn the example above, each page consists of three values.\nA page is a set of values placed on a disk next to each other,\nso the database may reach the whole page at once with one sequential read.\nAnd how does it refer to the reality?\nPostgres page size is 8kB.\nLet’s assume that 20% is for metadata, so it’s 6kB left.\nHalf of the page is needed to store\npointers to node’s children, so it gives us 3kB for values.\nBIGINT size is 8 bytes, thus we may store ~375 values in a\nsingle page.\nAssuming that some pretty big tables in a database have one billion rows,\nhow many levels in the Postgres tree do we need to store them?\nAccording to the calculations above,\nif we create a tree that can handle 375 values in a single node,\nit may store 1 billion values with a tree that has only four levels.\nBinary Search Tree would require 30 levels for such amount of data.\nTo sum up, placing multiple values in a single node of the tree helped us to reduce its height, thus using the benefits of sequential access.\nMoreover, a B-tree may grow not only in height, but also in width (by using larger pages).\nBalancing\nThere are two types of operations in databases: writing and reading.\nIn the previous section, we addressed the problems with reading the data from the B-tree.\nNonetheless, writing is also a crucial part.\nWhen writing the data to a database, B-tree needs to be constantly updated with new values.\nThe tree shape depends on the order of values added to the tree.\nIt’s easily visible in a binary tree.\nWe may obtain trees with different depths if the values are added in an incorrect order.\n\nWhen the tree has different depths on different nodes, it is called an unbalanced tree.\nThere are basically two ways of returning such a tree to a balanced state:\nRebuilding it from the very beginning just by adding the values in the correct order.\nKeeping it balanced all the time, as the new values are added.\nB-tree implements the second option. A feature that makes the tree balanced all the time is called self-balancing.\nSelf-balancing algorithm by example\nBuilding a B-tree can be started simply by creating a single node\nand adding new values until there is no free space in it.\n\nIf there is no space on the corresponding page, it needs to be split.\nTo perform a split, a „split point” is chosen.\nIn that case, it will be 12, because it is in the middle.\nThe „Split point” is a value that will be moved to the upper page.\n\nNow, it gets us to an interesting point where there is no upper page.\nIn such a case, a new one needs to be generated (and it becomes the new root page!).\n\nAnd finally, there is some free space in the three, so value 14 may be added.\n\nFollowing this algorithm, we may constantly add new values to the B-tree, and it will remain balanced all the time!\n\nAt this point, you may have a valid concern that there is a lot of free space that has no chance to be\nfilled.\nFor example, values 14, 15, and 16, are on different pages, so these pages will remain with only one value and two free spaces forever.\nIt was caused by the split location choice.\nWe always split the page in the middle.\nBut every time we do a split, we may choose any split location we want.\nPostgres has an algorithm that is run every time a split is performed!\nIts implementation may be found in the _bt_findsplitloc() function in Postgres source code.\nIts goal is to leave as little free space as possible.\nSummary\nIn this article, you learned how a B-tree works.\nAll in all, it may be simply described as a Binary Search Tree with two changes:\nevery node may contain more than one value\ninserting a new value is followed by a self-balancing algorithm.\nAlthough the structures used by modern databases are usually some variants of a B-tree (like B+tree), they are still based on the original conception.\nIn my opinion, one great strength of a B-tree is the fact that it was designed directly to handle large amounts of data on actual hardware.\nIt may be the reason why the B-tree has remained with us for such a long time.","guid":"https://blog.allegro.tech/2023/11/how-does-btree-make-your-queries-fast.html","categories":["tech"],"isoDate":"2023-11-26T23:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Beyond the Code - An Engineer’s Battle Against Knowledge Loss","link":"https://blog.allegro.tech/2023/10/battle-against-knowledge-loss.html","pubDate":"Mon, 30 Oct 2023 00:00:00 +0100","authors":{"author":[{"name":["Krzysztof Przychodzki"],"photo":["https://blog.allegro.tech/img/authors/krzysztof.przychodzki.jpg"],"url":["https://blog.allegro.tech/authors/krzysztof.przychodzki"]}]},"content":"<p>The idea for this article arose during a meeting where we learned that our supervisor would be leaving the company to pursue new opportunities. In response, a\ncolleague lamented that what we would miss most is the knowledge departing with the leader. Unfortunately, that’s how it goes. Not only do we lose a colleague,\nbut we also lose valuable knowledge and experience. However, this isn’t a story about my supervisor; it’s a story about all those individuals who are experts in\ntheir fields, who understand the paths to success and paths that lead to catastrophic failures. When they leave, they take with them knowledge that you won’t\nfind in any book, note, or Jira ticket. And this leads to a fundamental question: <em>What can be done to avoid this “black hole” of knowledge? How can we ensure\nit doesn’t vanish along with them?</em> That’s what this article is all about.</p>\n\n<h2 id=\"business-decisions-somebody-made-and-didnt-tell-you\">Business Decisions Somebody Made… and didn’t tell you</h2>\n\n<p>Specifically for this article I created the term <em>Biological Data Storage</em> or <em>BDS</em> for short. This term encompasses nearly every employee in a company. I\nunderstand that nobody wants to be seen as just a resource, and certainly not as part of the <em>Biological Data Storage</em>. However, in the context of a company’s\nresources, an employee can be likened to a technical data repository, but with the valuable addition of context.</p>\n\n<p>I wanted to examine this issue more broadly from an engineer’s perspective. We often hear about Conway’s Law:</p>\n\n<blockquote>\n  <p>Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure. <sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup></p>\n</blockquote>\n\n<p>And I perceive the loss of knowledge as a depletion of communication, which can ultimately result in its imperfections within the created system.</p>\n\n<p>The engineering approach is marked by our commitment to gauging the impact of various events and assessing their real significance using specific metrics. When\ndealing with the challenge of an employee departing, consider these metrics to evaluate organizational effectiveness:</p>\n\n<ol>\n  <li>Time to Problem Resolution:\n    <ul>\n      <li>measures how quickly issues or challenges are resolved and helps identify the efficiency of problem-solving processes.</li>\n    </ul>\n  </li>\n  <li>Knowledge Transfer Rate:\n    <ul>\n      <li>measures how long it takes for a new employee to become self-sufficient and also indicates the effectiveness of knowledge transfer and onboarding.</li>\n    </ul>\n  </li>\n</ol>\n\n<p>I think these metrics provide valuable insights into organizational efficiency and its capacity to seamlessly integrate new team members.\nIn the context of Conway’s Law, the loss of knowledge becomes a critical factor influencing not only communication but also the very design of systems within\nthe company.</p>\n\n<p>Consider this: when a team member with a wealth of knowledge and expertise departs, they take with them not just facts and figures but also their unique\ninsights, problem-solving approaches, and understanding of the organization’s intricacies. The lack of such knowledge can disrupt the flow of information within\nteams and across departments. As a result, the communication structure can falter, hindering the organization’s ability to respond to challenges effectively.</p>\n\n<p>Moreover, the design of systems can be profoundly impacted. Engineers and developers who were privy to invaluable knowledge may have made design choices based\non their expertise. These decisions may not have been documented or clearly understood by others, and when their authors leave, may become opaque. This can lead\nto difficulties in maintaining and developing these systems, potentially causing inefficiencies and vulnerabilities.</p>\n\n<p>Now, when we introduce the <em>Knowledge Transfer Rate</em> metric into this context, it becomes evident that measuring how long it takes for a new employee to become\nself-sufficient is crucial. The longer this duration, the more pronounced the knowledge gap becomes, affecting both communication and system design.\nOrganizations must recognize that knowledge isn’t just about data; it’s about understanding and context, and its loss can significantly impede the smooth\nfunctioning of teams and the evolution of systems.</p>\n\n<h2 id=\"organizations-have-no-memory\">Organizations have no memory</h2>\n\n<p>You might ask, “What’s the impact of losing this knowledge on a company?” Is it that business processes start collapsing like houses of cards? Innovation loses\nits wings? The company’s efficiency plummets like leaves in an autumn storm?\nThe answer to the above questions in 98% of cases is - of course, no - because we can manage such risks. Companies have ways of dealing with them, but do they,\nreally?</p>\n\n<p><em>Organizations have no memory</em> is a quote from Trevor Kletz’s book <em>Lessons from Disaster</em>, which highlights the concept of organizational memory and how\nincidents and accidents can recur due to the lack of effective learning from past mistakes within an organization. Prof. Kletz highlights the organization’s\ninability to learn from accidents, even those occurring within the company. I sometimes feel that a similar pattern emerges when knowledge departs from our\ncompany. Perhaps because it can’t be easily measured in money, it’s often downplayed.</p>\n\n<p>While Kletz’s book pertains to chemical engineering, I see several universal truths that apply to any situation and industry. For example, another quote, “What\nyou don’t have, can’t leak” is remarkably similar to the idea that code you don’t have is <em>maintainless</em> and won’t have bugs. There are likely analogous\nprinciples in our field.</p>\n\n<p>However, even at this stage, the process of knowledge acquisition can be accelerated. There are several ways to do it, such as creating procedures, diagrams,\ncharts, and documentation.</p>\n\n<p>Documentation is like treasure maps in the business world. Creating documentation is one thing, but keeping it up-to-date within an organization (regardless of\nits size) is a challenge. Encouraging the team to regularly update documentation is also a challenge. Even the best-prepared documentation often lacks many\ndetails, like the rationale behind specific business decisions, why a particular database or framework was chosen, or why we use technology <em>Y</em> instead of the\nmore prevalent <em>X</em> throughout the company.</p>\n\n<p>So, while documentation is like treasure maps for your company, recorded, organized, and structured information about processes, systems, and practices within\nthe company are akin to Architecture Decision Records (ADRs). ADRs are like the flight recorders of our business. They contain records of critical decisions\nmade during system design or significant technological choices.</p>\n\n<p>Why is this important? When creating new things, we make numerous decisions that may appear irrational without the right context later on. ADRs are like opening\na box that explains why these decisions were made. It’s the key to understanding the company’s history and evolution. In the context of our <em>BDS</em>, ADRs are\nlike recordings of experts’ thoughts when making key decisions. When these experts leave, these recordings become a treasure trove of knowledge, helping us\navoid repeating the same mistakes.</p>\n\n<p>A common scenario emerges: the team tasked with addressing the problem must invest valuable time in rediscovering solutions, experimenting with potential fixes,\nor even resorting to trial and error. This not only prolongs the problem-solving process but can also result in suboptimal resolutions, increased frustration,\nand a negative impact on overall productivity. Thanks to documentation and ADR we can significantly reduce this time.</p>\n\n<h2 id=\"an-alternative-to-lengthy-documentation\">An alternative to lengthy documentation?</h2>\n\n<blockquote>\n  <p>No one reads.\nIf someone does read, he doesn’t understand.\nIf he understands, he immediately forgets.</p>\n</blockquote>\n\n<p>Unfortunately, just as is the case in the above quote from Stanisław Lem <sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\" rel=\"footnote\">2</a></sup>, the problem with documentation, procedures, and ADRs is that people need to\nfamiliarize themselves with them. I suppose that even at SpaceX, it’s doubtful this would be considered the most thrilling reading material, or maybe I am just\nmistaken. Anyway, even if someone manages to get through the documentation, they’ll only retain what they understand. We’re presented with the work of others,\nwith their imposed ways of thinking and decision-making. Often, questions arise to which no one knows the answers, and the people who do know are no longer with\nthe company.</p>\n\n<p>Since we now know our mental limitations, instead of forcing people to sift through stacks of documentation, we can\nuse <a href=\"https://blog.allegro.tech/2022/07/event-storming-workshops.html\">EventStorming</a>. This technique helps understand business processes, identify events and\nactivities, and integrate knowledge in an understandable way. We focus on behaviors, on what changes and why. Together, we develop a solution and understand the\nprocesses because we see them from start to finish. Understanding a process through EventStorming is faster and easier than reading documentation. During an\nEventStorming session, most questions find answers, and knowledge can be conveyed to many people simultaneously, whether they are technical or not. The most\nsignificant artifact of such sessions is that you can discuss why the process looks the way it does, why a specific sequence was chosen, and not another —\nessentially, a mega-mix of documentation, ADR, and conversation. I emphasize once more that this understanding of the process is developed collectively —\neveryone feels as a part of the solution. In the case of our <em>BDS</em>, EventStorming is like capturing the thoughts of experts when making crucial decisions.</p>\n\n<h3 id=\"real-life-example\">Real life example</h3>\n\n<p>At <a href=\"https://allegro.tech/\">Allegro</a>, we recently had a situation where the entire development team responsible for a critical service was moved to a different\nproject. The new team, which inherited the service, had the opportunity to collaborate with the departing team for a period. However, in this context, we also\nconducted EventStorming sessions. To provide more detail, these sessions extended over two full days, each lasting 8 hours. The knowledge accumulated over the\npast five years was not merely confined to two plotter paper-sized sheets, each stretching 6 meters in length, but was primarily assimilated within the\nparticipants’ minds in a seamless manner. I believe this facilitated the new team in gaining greater confidence when taking over the domain.</p>\n\n<p>Interestingly, you don’t need to spend a lot of time on EventStorming to uncover enough business knowledge. In the case mentioned earlier, the session lasted\ntwo days, but it involved an entire team. For an individual, a two-hour workshop can be enough to see the big picture of our process. Although EventStorming\nallows us to absorb a dose of knowledge relatively easily to know <em>what and why</em> is changing in our process, the devil is in the detail. To really understand\n<em>how</em> this process is changing, it’s best to start by doing small tasks under the guidance of an experienced person.</p>\n\n<h2 id=\"seeking-uml-like-alternatives\">Seeking UML-like Alternatives?</h2>\n\n<p>Unfortunately, EventStorming is not the answer to all knowledge loss-related problems. While I don’t question how fantastic this tool is, the knowledge acquired\nthrough it will remain only in the participants’ minds. If it’s not somehow preserved in the form of documentation or ADRs, it may turn out to be just as\nfleeting as departing employees. What can be done about this? Our initial thoughts may lead us to create some form of description or documentation, which, as we\nknow, comes with the challenge of its preparation and the cognitive overload for someone trying to assimilate new knowledge.</p>\n\n<p>It seems that when dealing with the issue of knowledge loss and its effective transfer, it’s worth mentioning tools like BPMN, which stands for Business Process\nModel and Notation. BPMN provides a standardized graphical representation of business processes. By using BPMN diagrams, we can visually map\nworkflows and procedures. Such an approach not only simplifies the understanding of complex processes but also aids in comprehensive documentation. When\ncombined with other knowledge-sharing techniques, such as EventStorming, BPMN can be a powerful asset in preserving and transferring critical business\nknowledge.</p>\n\n<p>However, BPMN has an elaborate set of symbols and notation rules, which can make creating and interpreting diagrams complicated for some individuals. Creating\nadvanced BPMN diagrams and fully utilizing the notation’s potential requires specialized knowledge and experience. People unfamiliar with BPMN may struggle\nto use it effectively. Despite these inconveniences, BPMN still remains a valuable tool for modeling and documenting business processes in many organizations. I\nbelieve it complements the previously mentioned techniques perfectly.</p>\n\n<p>Just remember to have the right tools in your arsenal and, more importantly, to choose the appropriate tool for the situation, considering both its strengths\nand weaknesses.</p>\n\n<h2 id=\"one-more-thing\">One more thing…</h2>\n\n<p><em>Time to Problem Resolution</em> metric serves as a clear indicator of an organization’s efficiency in addressing challenges. A shorter time to resolution signifies\nthat issues are tackled swiftly, minimizing disruptions and ensuring that the organization operates smoothly.\n<em>Knowledge Transfer Rate</em> metric is a means to quantify and address the loss of knowledge, shedding light on its impact on communication structures and system\ndesign within an organization.</p>\n\n<p>Both metrics are directly influenced by the use of appropriate tools such as documentation, ADRs, EventStorming or BPMN. I have tried to highlight their\nadvantages and disadvantages in the context of knowledge transfer.</p>\n\n<p>However, there is another challenge - changing the company’s culture. Employees must know what tools they have and feel that sharing knowledge is key to\nsuccess. Leadership plays a crucial role here, as leaders need to actively promote and engage in knowledge sharing and open communication. If company leaders\nactively endorse and engage in knowledge sharing, other employees are more likely to follow suit. However, changing organizational culture is a time-consuming\nprocess. Patience and perseverance are essential until new behaviors and beliefs prevail over old ones.</p>\n\n<h2 id=\"this-can-be-done\">This can be done</h2>\n\n<p>As an engineer in an organisation, regardless of size, there are several proactive steps you can take to facilitate knowledge transfer. First and foremost,\nactively engage in open communication with your colleagues. Encourage discussion and information sharing, especially within your area of expertise, to ensure\nthat valuable insights are shared. Second, mentorship can be a powerful tool. Offer to mentor junior team members or be open to seeking guidance from more\nexperienced colleagues. In addition, participate in knowledge-sharing initiatives within the company, such as brown bag sessions, workshops or cross-functional\nprojects. Finally, consider creating or contributing to internal documentation and repositories. These resources can serve as valuable references for your\ncolleagues and future team members, ensuring that knowledge is retained within the organisation. By actively participating in these practices, you can play a\nkey role in preserving and transferring critical knowledge within your organisation.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>In this article, I aimed to discuss how knowledge loss in a company appears through an engineer’s eyes and why it can pose a threat. The term <em>Biological Data\nStorage</em> may sound unconventional, but it emphasises the critical role that every team member plays in preserving and transferring knowledge. It’s important to\nremember that employees are not just resources; they are the living repositories of valuable information, experience and expertise. In the world of <em>BDS</em>, every\nmember contributes to the collective body of knowledge, shaping the organisation’s communication structure.\nAs we say goodbye to departing colleagues, let’s also say goodbye to the notion that knowledge should be confined to individual minds. Instead, let’s adopt a\nculture of open communication, active knowledge sharing and the right tools, such as EventStorming and BPMN, to capture, preserve and share critical knowledge\nacross our organisation.</p>\n\n<h3 id=\"footnotes\">Footnotes</h3>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Quote from https://en.wikipedia.org/wiki/Conway%27s_law <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\" role=\"doc-endnote\">\n      <p>https://en.wikipedia.org/wiki/Stanis%C5%82aw_Lem <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n","contentSnippet":"The idea for this article arose during a meeting where we learned that our supervisor would be leaving the company to pursue new opportunities. In response, a\ncolleague lamented that what we would miss most is the knowledge departing with the leader. Unfortunately, that’s how it goes. Not only do we lose a colleague,\nbut we also lose valuable knowledge and experience. However, this isn’t a story about my supervisor; it’s a story about all those individuals who are experts in\ntheir fields, who understand the paths to success and paths that lead to catastrophic failures. When they leave, they take with them knowledge that you won’t\nfind in any book, note, or Jira ticket. And this leads to a fundamental question: What can be done to avoid this “black hole” of knowledge? How can we ensure\nit doesn’t vanish along with them? That’s what this article is all about.\nBusiness Decisions Somebody Made… and didn’t tell you\nSpecifically for this article I created the term Biological Data Storage or BDS for short. This term encompasses nearly every employee in a company. I\nunderstand that nobody wants to be seen as just a resource, and certainly not as part of the Biological Data Storage. However, in the context of a company’s\nresources, an employee can be likened to a technical data repository, but with the valuable addition of context.\nI wanted to examine this issue more broadly from an engineer’s perspective. We often hear about Conway’s Law:\nAny organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure. 1\nAnd I perceive the loss of knowledge as a depletion of communication, which can ultimately result in its imperfections within the created system.\nThe engineering approach is marked by our commitment to gauging the impact of various events and assessing their real significance using specific metrics. When\ndealing with the challenge of an employee departing, consider these metrics to evaluate organizational effectiveness:\nTime to Problem Resolution:\n    \nmeasures how quickly issues or challenges are resolved and helps identify the efficiency of problem-solving processes.\nKnowledge Transfer Rate:\n    \nmeasures how long it takes for a new employee to become self-sufficient and also indicates the effectiveness of knowledge transfer and onboarding.\nI think these metrics provide valuable insights into organizational efficiency and its capacity to seamlessly integrate new team members.\nIn the context of Conway’s Law, the loss of knowledge becomes a critical factor influencing not only communication but also the very design of systems within\nthe company.\nConsider this: when a team member with a wealth of knowledge and expertise departs, they take with them not just facts and figures but also their unique\ninsights, problem-solving approaches, and understanding of the organization’s intricacies. The lack of such knowledge can disrupt the flow of information within\nteams and across departments. As a result, the communication structure can falter, hindering the organization’s ability to respond to challenges effectively.\nMoreover, the design of systems can be profoundly impacted. Engineers and developers who were privy to invaluable knowledge may have made design choices based\non their expertise. These decisions may not have been documented or clearly understood by others, and when their authors leave, may become opaque. This can lead\nto difficulties in maintaining and developing these systems, potentially causing inefficiencies and vulnerabilities.\nNow, when we introduce the Knowledge Transfer Rate metric into this context, it becomes evident that measuring how long it takes for a new employee to become\nself-sufficient is crucial. The longer this duration, the more pronounced the knowledge gap becomes, affecting both communication and system design.\nOrganizations must recognize that knowledge isn’t just about data; it’s about understanding and context, and its loss can significantly impede the smooth\nfunctioning of teams and the evolution of systems.\nOrganizations have no memory\nYou might ask, “What’s the impact of losing this knowledge on a company?” Is it that business processes start collapsing like houses of cards? Innovation loses\nits wings? The company’s efficiency plummets like leaves in an autumn storm?\nThe answer to the above questions in 98% of cases is - of course, no - because we can manage such risks. Companies have ways of dealing with them, but do they,\nreally?\nOrganizations have no memory is a quote from Trevor Kletz’s book Lessons from Disaster, which highlights the concept of organizational memory and how\nincidents and accidents can recur due to the lack of effective learning from past mistakes within an organization. Prof. Kletz highlights the organization’s\ninability to learn from accidents, even those occurring within the company. I sometimes feel that a similar pattern emerges when knowledge departs from our\ncompany. Perhaps because it can’t be easily measured in money, it’s often downplayed.\nWhile Kletz’s book pertains to chemical engineering, I see several universal truths that apply to any situation and industry. For example, another quote, “What\nyou don’t have, can’t leak” is remarkably similar to the idea that code you don’t have is maintainless and won’t have bugs. There are likely analogous\nprinciples in our field.\nHowever, even at this stage, the process of knowledge acquisition can be accelerated. There are several ways to do it, such as creating procedures, diagrams,\ncharts, and documentation.\nDocumentation is like treasure maps in the business world. Creating documentation is one thing, but keeping it up-to-date within an organization (regardless of\nits size) is a challenge. Encouraging the team to regularly update documentation is also a challenge. Even the best-prepared documentation often lacks many\ndetails, like the rationale behind specific business decisions, why a particular database or framework was chosen, or why we use technology Y instead of the\nmore prevalent X throughout the company.\nSo, while documentation is like treasure maps for your company, recorded, organized, and structured information about processes, systems, and practices within\nthe company are akin to Architecture Decision Records (ADRs). ADRs are like the flight recorders of our business. They contain records of critical decisions\nmade during system design or significant technological choices.\nWhy is this important? When creating new things, we make numerous decisions that may appear irrational without the right context later on. ADRs are like opening\na box that explains why these decisions were made. It’s the key to understanding the company’s history and evolution. In the context of our BDS, ADRs are\nlike recordings of experts’ thoughts when making key decisions. When these experts leave, these recordings become a treasure trove of knowledge, helping us\navoid repeating the same mistakes.\nA common scenario emerges: the team tasked with addressing the problem must invest valuable time in rediscovering solutions, experimenting with potential fixes,\nor even resorting to trial and error. This not only prolongs the problem-solving process but can also result in suboptimal resolutions, increased frustration,\nand a negative impact on overall productivity. Thanks to documentation and ADR we can significantly reduce this time.\nAn alternative to lengthy documentation?\nNo one reads.\nIf someone does read, he doesn’t understand.\nIf he understands, he immediately forgets.\nUnfortunately, just as is the case in the above quote from Stanisław Lem 2, the problem with documentation, procedures, and ADRs is that people need to\nfamiliarize themselves with them. I suppose that even at SpaceX, it’s doubtful this would be considered the most thrilling reading material, or maybe I am just\nmistaken. Anyway, even if someone manages to get through the documentation, they’ll only retain what they understand. We’re presented with the work of others,\nwith their imposed ways of thinking and decision-making. Often, questions arise to which no one knows the answers, and the people who do know are no longer with\nthe company.\nSince we now know our mental limitations, instead of forcing people to sift through stacks of documentation, we can\nuse EventStorming. This technique helps understand business processes, identify events and\nactivities, and integrate knowledge in an understandable way. We focus on behaviors, on what changes and why. Together, we develop a solution and understand the\nprocesses because we see them from start to finish. Understanding a process through EventStorming is faster and easier than reading documentation. During an\nEventStorming session, most questions find answers, and knowledge can be conveyed to many people simultaneously, whether they are technical or not. The most\nsignificant artifact of such sessions is that you can discuss why the process looks the way it does, why a specific sequence was chosen, and not another —\nessentially, a mega-mix of documentation, ADR, and conversation. I emphasize once more that this understanding of the process is developed collectively —\neveryone feels as a part of the solution. In the case of our BDS, EventStorming is like capturing the thoughts of experts when making crucial decisions.\nReal life example\nAt Allegro, we recently had a situation where the entire development team responsible for a critical service was moved to a different\nproject. The new team, which inherited the service, had the opportunity to collaborate with the departing team for a period. However, in this context, we also\nconducted EventStorming sessions. To provide more detail, these sessions extended over two full days, each lasting 8 hours. The knowledge accumulated over the\npast five years was not merely confined to two plotter paper-sized sheets, each stretching 6 meters in length, but was primarily assimilated within the\nparticipants’ minds in a seamless manner. I believe this facilitated the new team in gaining greater confidence when taking over the domain.\nInterestingly, you don’t need to spend a lot of time on EventStorming to uncover enough business knowledge. In the case mentioned earlier, the session lasted\ntwo days, but it involved an entire team. For an individual, a two-hour workshop can be enough to see the big picture of our process. Although EventStorming\nallows us to absorb a dose of knowledge relatively easily to know what and why is changing in our process, the devil is in the detail. To really understand\nhow this process is changing, it’s best to start by doing small tasks under the guidance of an experienced person.\nSeeking UML-like Alternatives?\nUnfortunately, EventStorming is not the answer to all knowledge loss-related problems. While I don’t question how fantastic this tool is, the knowledge acquired\nthrough it will remain only in the participants’ minds. If it’s not somehow preserved in the form of documentation or ADRs, it may turn out to be just as\nfleeting as departing employees. What can be done about this? Our initial thoughts may lead us to create some form of description or documentation, which, as we\nknow, comes with the challenge of its preparation and the cognitive overload for someone trying to assimilate new knowledge.\nIt seems that when dealing with the issue of knowledge loss and its effective transfer, it’s worth mentioning tools like BPMN, which stands for Business Process\nModel and Notation. BPMN provides a standardized graphical representation of business processes. By using BPMN diagrams, we can visually map\nworkflows and procedures. Such an approach not only simplifies the understanding of complex processes but also aids in comprehensive documentation. When\ncombined with other knowledge-sharing techniques, such as EventStorming, BPMN can be a powerful asset in preserving and transferring critical business\nknowledge.\nHowever, BPMN has an elaborate set of symbols and notation rules, which can make creating and interpreting diagrams complicated for some individuals. Creating\nadvanced BPMN diagrams and fully utilizing the notation’s potential requires specialized knowledge and experience. People unfamiliar with BPMN may struggle\nto use it effectively. Despite these inconveniences, BPMN still remains a valuable tool for modeling and documenting business processes in many organizations. I\nbelieve it complements the previously mentioned techniques perfectly.\nJust remember to have the right tools in your arsenal and, more importantly, to choose the appropriate tool for the situation, considering both its strengths\nand weaknesses.\nOne more thing…\nTime to Problem Resolution metric serves as a clear indicator of an organization’s efficiency in addressing challenges. A shorter time to resolution signifies\nthat issues are tackled swiftly, minimizing disruptions and ensuring that the organization operates smoothly.\nKnowledge Transfer Rate metric is a means to quantify and address the loss of knowledge, shedding light on its impact on communication structures and system\ndesign within an organization.\nBoth metrics are directly influenced by the use of appropriate tools such as documentation, ADRs, EventStorming or BPMN. I have tried to highlight their\nadvantages and disadvantages in the context of knowledge transfer.\nHowever, there is another challenge - changing the company’s culture. Employees must know what tools they have and feel that sharing knowledge is key to\nsuccess. Leadership plays a crucial role here, as leaders need to actively promote and engage in knowledge sharing and open communication. If company leaders\nactively endorse and engage in knowledge sharing, other employees are more likely to follow suit. However, changing organizational culture is a time-consuming\nprocess. Patience and perseverance are essential until new behaviors and beliefs prevail over old ones.\nThis can be done\nAs an engineer in an organisation, regardless of size, there are several proactive steps you can take to facilitate knowledge transfer. First and foremost,\nactively engage in open communication with your colleagues. Encourage discussion and information sharing, especially within your area of expertise, to ensure\nthat valuable insights are shared. Second, mentorship can be a powerful tool. Offer to mentor junior team members or be open to seeking guidance from more\nexperienced colleagues. In addition, participate in knowledge-sharing initiatives within the company, such as brown bag sessions, workshops or cross-functional\nprojects. Finally, consider creating or contributing to internal documentation and repositories. These resources can serve as valuable references for your\ncolleagues and future team members, ensuring that knowledge is retained within the organisation. By actively participating in these practices, you can play a\nkey role in preserving and transferring critical knowledge within your organisation.\nSummary\nIn this article, I aimed to discuss how knowledge loss in a company appears through an engineer’s eyes and why it can pose a threat. The term Biological Data\nStorage may sound unconventional, but it emphasises the critical role that every team member plays in preserving and transferring knowledge. It’s important to\nremember that employees are not just resources; they are the living repositories of valuable information, experience and expertise. In the world of BDS, every\nmember contributes to the collective body of knowledge, shaping the organisation’s communication structure.\nAs we say goodbye to departing colleagues, let’s also say goodbye to the notion that knowledge should be confined to individual minds. Instead, let’s adopt a\nculture of open communication, active knowledge sharing and the right tools, such as EventStorming and BPMN, to capture, preserve and share critical knowledge\nacross our organisation.\nFootnotes\nQuote from https://en.wikipedia.org/wiki/Conway%27s_law ↩\nhttps://en.wikipedia.org/wiki/Stanis%C5%82aw_Lem ↩","guid":"https://blog.allegro.tech/2023/10/battle-against-knowledge-loss.html","categories":["eventstorming","knowledge-preservation","tech","communication"],"isoDate":"2023-10-29T23:00:00.000Z","thumbnail":"images/post-headers/eventstorming.png"},{"title":"Online MongoDB migration","link":"https://blog.allegro.tech/2023/09/online-mongodb-migration.html","pubDate":"Thu, 14 Sep 2023 00:00:00 +0200","authors":{"author":[{"name":["Szymon Marcinkiewicz"],"photo":["https://blog.allegro.tech/img/authors/szymon.marcinkiewicz.jpg"],"url":["https://blog.allegro.tech/authors/szymon.marcinkiewicz"]}]},"content":"<p>MongoDB is the most popular database used at <a href=\"https://allegro.tech\">Allegro</a>. We have hundreds of MongoDB databases running on our on—premise servers.\nIn 2022 we decided that we need to migrate all our MongoDB databases\nfrom existing shared clusters to new MongoDB clusters hosted on Kubernetes pods with separated resources.\nTo perform the migration of all databases we needed a tool for transfering all the data and keeping consistency between old and new databases.\nThat’s how <em>mongo-migration-stream</em> project was born.</p>\n\n<h2 id=\"why-do-we-needed-to-migrate-mongodb-databases-at-all\">Why do we needed to migrate MongoDB databases at all?</h2>\n\n<p>At Allegro we are managing tens of MongoDB clusters, with hundreds of MongoDB databases running on them.\nThis kind of approach, where one MongoDB cluster runs multiple MongoDB databases, allowed us to utilize resources\nmore effectively, while at the same time easing maintenance of clusters.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/one_cluster_multiple_databases.png\" alt=\"Old approach\" /></p>\n\n<p>We’ve been living with this approach for years, but over time, more and more databases were\ncreated on shared clusters, increasing the frequency of the noisy neighbour problem.</p>\n\n<h3 id=\"noisy-neighbour-problem\">Noisy neighbour problem</h3>\n\n<p>Generally speaking, a noisy neighbour situation appears while multiple applications run on shared infrastructure,\nand one of those applications starts to consume so many resources (like CPU, RAM or Storage),\nthat it causes starvation of other applications.</p>\n\n<p>At Allegro this problem started to be visible because over the years we’ve created more and more new MongoDB databases\nwhich were hosted on a fixed number of clusters.</p>\n\n<p>The most common cause of the noisy neighbour problem in the Allegro infrastructure was long time high CPU usage caused by one of MongoDB databases on a given cluster.\nOn various occasions it occurred that a non-optimal query performed on a large collection was consuming too much CPU,\nnegatively affecting all the other databases on that cluster, making them slower or completely unresponsive.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/cluster_cpu.png\" alt=\"Cluster CPU usage\" /></p>\n\n<h3 id=\"mongodb-on-kubernetes-as-a-solution-to-the-noisy-neighbour-problem\">MongoDB on Kubernetes as a solution to the noisy neighbour problem</h3>\n\n<p>To solve the noisy neighbour problem a separate team implemented a solution allowing Allegro engineers to create independent MongoDB clusters on Kubernetes.\nFrom now on, each MongoDB cluster is formed of multiple replicas and an arbiter spread among datacenters, serving only a single MongoDB database.\nRunning each database on a separate cluster with isolated resources managed by Kubernetes was our solution to the noisy neighbour problem.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/k8s_cpu.png\" alt=\"Kubernetes CPU usage\" /></p>\n\n<p>At this point we knew what we needed to do to solve our problems — we had to migrate all MongoDB databases from old shared clusters\nto new independent clusters on Kubernetes. Now came the time to answer the question: <em>How should we do it?</em></p>\n\n<h2 id=\"available-options\">Available options</h2>\n\n<p>Firstly, we prepared a list of requirements which a tool for migrating databases (referred to as <em>migrator</em>) had to meet in order to perform\nsuccessful migrations.</p>\n\n<h3 id=\"requirements\">Requirements</h3>\n\n<ul>\n  <li>Migrator must be able to migrate databases from older MongoDB versions to newer ones,</li>\n  <li>Migrator must be able to migrate <code class=\"language-plaintext highlighter-rouge\">ReplicaSets</code> and sharded clusters,</li>\n  <li>Migrator must copy indexes from source database to destination database,</li>\n  <li>Migrator must be able to handle more than 10k write operations per second,</li>\n  <li>Migration must be performed without any downtime,</li>\n  <li>Migration cannot affect database clients,</li>\n  <li>Database owners (software engineers) need to be able to perform migrations on their own.</li>\n</ul>\n\n<h3 id=\"existing-solutions\">Existing solutions</h3>\n\n<p>Having defined a list of requirements, we checked what tools were available on the market at the time.</p>\n\n<h4 id=\"py-mongo-sync\"><a href=\"https://github.com/caosiyang/py-mongo-sync\">py-mongo-sync</a></h4>\n\n<p>According to documentation <em>py-mongo-sync</em> is:</p>\n\n<blockquote>\n  <p>“Oplog—based data sync tool that synchronizes data from a replica set to another deployment,\ne.g.: standalone, replica set, and sharded cluster.”</p>\n</blockquote>\n\n<p>As you can see, <em>py-mongo-sync</em> is not a tool that would suit our needs from end to end.\n<em>py-mongo-sync</em> focuses on the synchronization of the data stored on the <em>source database</em> after starting the tool.\nIt doesn’t copy already existing data from the <em>source</em> to the <em>destination database</em>.\nWhat’s more, at the time <em>py-mongo-sync</em> supported MongoDB versions between 2.4 to 3.4, which were older than those used at Allegro.</p>\n\n<h4 id=\"mongodb-cluster-to-cluster-sync\"><a href=\"https://www.mongodb.com/docs/cluster-to-cluster-sync/current/\">MongoDB Cluster-to-Cluster Sync</a></h4>\n\n<p>On July 22, 2022 MongoDB released <em>mongosync</em> v1.0 — a tool for migrating and synchronizing data between MongoDB clusters.\nAs described in the <em>mongosync</em> documentation:</p>\n\n<blockquote>\n  <p>“The mongosync binary is the primary process used in Cluster—to—Cluster Sync. mongosync migrates data from one cluster\nto another and can keep the clusters in continuous sync.”</p>\n</blockquote>\n\n<p>This description sounded like a perfect fit for us! Unfortunately, after initial excitement\n(and hours spent on reading <a href=\"https://www.mongodb.com/docs/cluster-to-cluster-sync/current/reference/mongosync/\"><em>mongosync</em> documentation</a>)\nwe realized we couldn’t use <em>mongosync</em> as it was able to perform migration and synchronization process only if source database and destination database\nwere both in the exact same version.\nIt meant that there was no option to migrate databases from older MongoDB versions to the newest one, which was a no-go for us.</p>\n\n<p>When we realised that there wasn’t a tool which met all our requirements, we made a tough decision to implement our own online MongoDB migration tool\nnamed <em>mongo-migration-stream</em>.</p>\n\n<h2 id=\"mongo-migration-stream\">mongo-migration-stream</h2>\n\n<p><a href=\"https://github.com/allegro/mongo-migration-stream\"><em>mongo-migration-stream</em></a> is an open source tool from Allegro, that performs online migrations of MongoDB databases.\nIt’s a <a href=\"https://kotlinlang.org/\">Kotlin</a> application utilising\n<code class=\"language-plaintext highlighter-rouge\">mongodump</code> and <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> <a href=\"https://www.mongodb.com/docs/database-tools/\">MongoDB Command Line Database Tools</a>\nalong with <a href=\"https://www.mongodb.com/docs/manual/changeStreams/\">Mongo Change Streams</a> mechanism.\nIn this section I will explain how <em>mongo-migration-stream</em> works under the hood, by covering its functionalities from a high—level overview and\nproviding details about its low—level implementation.</p>\n\n<h3 id=\"mongo-migration-stream-terminology\">mongo-migration-stream terminology</h3>\n\n<ul>\n  <li><em>Source database</em> - MongoDB database which is a data source for migration,</li>\n  <li><em>Destination database</em> - MongoDB database which is a target for the data from <em>source database</em>,</li>\n  <li><em>Transfer</em> - a process of dumping data from <em>source database</em>, and restoring it on <em>destination database</em>,</li>\n  <li><em>Synchronization</em> - a process of keeping eventual consistency between <em>source database</em> and <em>destination database</em>,</li>\n  <li><em>Migration</em> - an end-to-end migration process combining both <em>transfer</em> and <em>synchronization</em> processes,</li>\n  <li><em>Migrator</em> - a tool for performing <em>migrations</em>.</li>\n</ul>\n\n<h3 id=\"building-blocks\">Building blocks</h3>\n\n<p>As I’ve mentioned at the beginning of this section, <em>mongo-migration-stream</em> utilises <code class=\"language-plaintext highlighter-rouge\">mongodump</code>, <code class=\"language-plaintext highlighter-rouge\">mongorestore</code>, Mongo Change Streams\nand a custom Kotlin application to perform migrations.</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">mongodump</code> is used to dump <em>source database</em> in form of a binary file,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">mongorestore</code> is used to restore previously created dump on <em>destination database</em>,</li>\n  <li>Mongo Change Streams are used to keep eventual consistency between <em>source database</em> and <em>destination database</em>,</li>\n  <li>Kotlin application orchestrates, manages, and monitors all above processes.</li>\n</ul>\n\n<p><code class=\"language-plaintext highlighter-rouge\">mongodump</code> and <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> are responsible for the <em>transfer</em> part of migration,\nwhile Mongo Change Streams play the main role in the <em>synchronization</em> process.</p>\n\n<h3 id=\"birds-eye-view\">Bird’s eye view</h3>\n\n<p>To implement a <em>migrator</em>, we needed a robust procedure for <em>migrations</em> which ensures that no data is lost during a <em>migration</em>.\nWe have formulated a procedure consisting of six consecutive steps:</p>\n\n<ol>\n  <li>Start listening for Mongo Change Events on <em>source database</em> and save them in the queue,</li>\n  <li>Dump all the data from <em>source database</em> using <code class=\"language-plaintext highlighter-rouge\">mongodump</code>,</li>\n  <li>Restore all the data on <em>destination database</em> using <code class=\"language-plaintext highlighter-rouge\">mongorestore</code>,</li>\n  <li>Copy indexes definitions from <em>source database</em> and start creating them on <em>destination database</em>,</li>\n  <li>Start to push all the events stored in the queue (changes on <em>source database</em>) to the <em>destination database</em>,</li>\n  <li>Wait for the queue to empty to establish eventual consistency.</li>\n</ol>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/migration_process.png\" alt=\"Migration process\" /></p>\n\n<p>Our migration procedure works flawlessly because processing Mongo Change Events in a sequence guarantees migration idempotency.\nWithout this characteristic, we would have to change the order of steps 1 and 2 in the procedure, creating a possibility of losing data during migration.</p>\n\n<p>To explain this problem in more detail, let’s assume that the <em>source database</em> deals with a continuous high volume of writes.\nIf we had started the migration by performing dump in the first place and then started to listen for events,\nwe would have lost the events stored on the <em>source database</em> in the meantime.\nHowever, as we start the migration by listening for events on the <em>source database</em>, and then proceeding with the dump,\nwe do not lose any of the events stored on the <em>source database</em> during that time.</p>\n\n<p>The diagram below presents how such a kind of <em>write anomaly</em> could happen if we started dumping data before listening for Mongo Change Events.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/avoiding_event_loss.png\" alt=\"Avoiding event loss\" /></p>\n\n<h3 id=\"implementation-details\">Implementation details</h3>\n\n<h4 id=\"concurrency\">Concurrency</h4>\n\n<p>From the beginning we wanted to make <em>mongo-migration-stream</em> fast — we knew that it would need to cope with databases having more than 10k writes per second.\nAs a result <em>mongo-migration-stream</em> parallelizes migration of one MongoDB database into independent migrations of collections.\nEach database migration consists of multiple little <em>migrators</em> — one <em>migrator</em> per collection in the database.</p>\n\n<p>The <em>transfer</em> process is performed in parallel for each collection, in separate <code class=\"language-plaintext highlighter-rouge\">mongodump</code> and <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> processes.\n<em>Synchronization</em> process was also implemented concurrently — at the beginning of migration, each collection on <em>source database</em> is watched individually\nusing <a href=\"https://www.mongodb.com/docs/manual/changeStreams/#watch-a-collection--database--or-deployment\">Mongo Change Streams with collection target</a>.\nAll collections have their own separate queues in which Mongo Change Events are stored.\nAt the final phase of migration, each of these queues is processed independently.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/concurrent_migrations.png\" alt=\"Concurrent migrations\" /></p>\n\n<h4 id=\"initial-data-transfer\">Initial data transfer</h4>\n\n<p>To perform transfer of the database, we’re executing <code class=\"language-plaintext highlighter-rouge\">mongodump</code> and <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> commands for each collection.\nFor that reason, machines on which <em>mongo-migration-stream</em> is running are required to have MongoDB Command Line Database Tools installed.</p>\n\n<p>Dumping data from collection <code class=\"language-plaintext highlighter-rouge\">collectionName</code> in <code class=\"language-plaintext highlighter-rouge\">source</code> database can be achieved by running a command:</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mongodump <span class=\"se\">\\</span>\n <span class=\"nt\">--uri</span> <span class=\"s2\">\"mongodb://mongo_rs36_1:36301,mongo_rs36_2:36302,mongo_rs36_3:36303/?replicaSet=replicaSet36\"</span> <span class=\"se\">\\</span>\n <span class=\"nt\">--db</span> <span class=\"nb\">source</span> <span class=\"se\">\\</span>\n <span class=\"nt\">--collection</span> collectionName <span class=\"se\">\\</span>\n <span class=\"nt\">--out</span> /home/user/mongomigrationstream/dumps <span class=\"se\">\\</span>\n <span class=\"nt\">--readPreference</span> secondary\n <span class=\"nt\">--username</span> username <span class=\"se\">\\</span>\n <span class=\"nt\">--config</span> /home/user/mongomigrationstream/password_config/dump.config <span class=\"se\">\\</span>\n <span class=\"nt\">--authenticationDatabase</span> admin\n</code></pre></div></div>\n\n<p>Starting a <code class=\"language-plaintext highlighter-rouge\">mongodump</code> process from Kotlin code is done with Java’s <code class=\"language-plaintext highlighter-rouge\">ProcessBuilder</code> feature.\n<code class=\"language-plaintext highlighter-rouge\">ProcessBuilder</code> requires us to provide a process program and arguments in the form of a list of Strings.\nWe construct this list using <code class=\"language-plaintext highlighter-rouge\">prepareCommand</code> function:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">prepareCommand</span><span class=\"p\">():</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"nf\">listOf</span><span class=\"p\">(</span>\n    <span class=\"n\">mongoToolsPath</span> <span class=\"p\">+</span> <span class=\"s\">\"mongodump\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--uri\"</span><span class=\"p\">,</span> <span class=\"n\">dbProperties</span><span class=\"p\">.</span><span class=\"n\">uri</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--db\"</span><span class=\"p\">,</span> <span class=\"n\">dbCollection</span><span class=\"p\">.</span><span class=\"n\">dbName</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--collection\"</span><span class=\"p\">,</span> <span class=\"n\">dbCollection</span><span class=\"p\">.</span><span class=\"n\">collectionName</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--out\"</span><span class=\"p\">,</span> <span class=\"n\">dumpPath</span><span class=\"p\">,</span>\n    <span class=\"s\">\"--readPreference\"</span><span class=\"p\">,</span> <span class=\"n\">readPreference</span>\n<span class=\"p\">)</span> <span class=\"p\">+</span> <span class=\"nf\">credentialsIfNotNull</span><span class=\"p\">(</span><span class=\"n\">dbProperties</span><span class=\"p\">.</span><span class=\"n\">authenticationProperties</span><span class=\"p\">,</span> <span class=\"n\">passwordConfigPath</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Having <code class=\"language-plaintext highlighter-rouge\">ProcessBuilder</code> with properly configured list of process program and arguments, we’re ready to start a new process\nusing the <code class=\"language-plaintext highlighter-rouge\">start()</code> function.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">fun</span> <span class=\"nf\">runCommand</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nc\">Command</span><span class=\"p\">):</span> <span class=\"nc\">CommandResult</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">processBuilder</span> <span class=\"p\">=</span> <span class=\"nc\">ProcessBuilder</span><span class=\"p\">().</span><span class=\"nf\">command</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"nf\">prepareCommand</span><span class=\"p\">())</span> <span class=\"c1\">// Configure ProcessBuilder with mongodump command in form of List&lt;String&gt;</span>\n    <span class=\"n\">currentProcess</span> <span class=\"p\">=</span> <span class=\"n\">processBuilder</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"c1\">// Start a new process</span>\n    <span class=\"c1\">// ...</span>\n    <span class=\"kd\">val</span> <span class=\"py\">exitCode</span> <span class=\"p\">=</span> <span class=\"n\">currentProcess</span><span class=\"p\">.</span><span class=\"nf\">waitFor</span><span class=\"p\">()</span>\n    <span class=\"nf\">stopRunningCommand</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"nc\">CommandResult</span><span class=\"p\">(</span><span class=\"n\">exitCode</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>An analogous approach is implemented in <em>mongo-migration-stream</em> to execute the <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> command.</p>\n\n<h4 id=\"event-queue\">Event queue</h4>\n\n<p>During the process of migration <em>source database</em> can constantly receive changes, which <em>mongo-migration-stream</em> is listening to with Mongo Change Streams.\nEvents from the stream are saved in the queue for sending to the <em>destination database</em> at a later time.\nCurrently <em>mongo-migration-stream</em> provides two implementations of the queue,\nwhere one implementation stores the data in RAM, while the other one persists the data to disk.</p>\n\n<p>In-memory implementation can be used for databases with low traffic, or for testing purposes,\nor on machines with a sufficient amount of RAM (as events are stored as objects on the JVM heap).</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// In-memory queue implementation</span>\n<span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">InMemoryEventQueue</span><span class=\"p\">&lt;</span><span class=\"nc\">E</span><span class=\"p\">&gt;</span> <span class=\"p\">:</span> <span class=\"nc\">EventQueue</span><span class=\"p\">&lt;</span><span class=\"nc\">E</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">queue</span> <span class=\"p\">=</span> <span class=\"nc\">ConcurrentLinkedQueue</span><span class=\"p\">&lt;</span><span class=\"nc\">E</span><span class=\"p\">&gt;()</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">offer</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"nc\">E</span><span class=\"p\">):</span> <span class=\"nc\">Boolean</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">offer</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">poll</span><span class=\"p\">():</span> <span class=\"nc\">E</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">poll</span><span class=\"p\">()</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">peek</span><span class=\"p\">():</span> <span class=\"nc\">E</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">peek</span><span class=\"p\">()</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">size</span><span class=\"p\">():</span> <span class=\"nc\">Int</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">size</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">removeAll</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">removeAll</span> <span class=\"p\">{</span> <span class=\"k\">true</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In our production setup we decided to use a persistent event queue, which is implemented on top of <a href=\"https://github.com/bulldog2011/bigqueue\">BigQueue project</a>.\nAs BigQueue only allows enqueuing and dequeuing byte arrays, we had to implement serialization and deserialization of the data from the events.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Persistent queue implementation</span>\n<span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">BigQueueEventQueue</span><span class=\"p\">&lt;</span><span class=\"nc\">E</span> <span class=\"p\">:</span> <span class=\"nc\">Serializable</span><span class=\"p\">&gt;(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"n\">queueName</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">EventQueue</span><span class=\"p\">&lt;</span><span class=\"nc\">E</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">queue</span> <span class=\"p\">=</span> <span class=\"nc\">BigQueueImpl</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">queueName</span><span class=\"p\">)</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">offer</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"nc\">E</span><span class=\"p\">):</span> <span class=\"nc\">Boolean</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">enqueue</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">toByteArray</span><span class=\"p\">()).</span><span class=\"nf\">let</span> <span class=\"p\">{</span> <span class=\"k\">true</span> <span class=\"p\">}</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">poll</span><span class=\"p\">():</span> <span class=\"nc\">E</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">dequeue</span><span class=\"p\">().</span><span class=\"nf\">toE</span><span class=\"p\">()</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">peek</span><span class=\"p\">():</span> <span class=\"nc\">E</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">peek</span><span class=\"p\">().</span><span class=\"nf\">toE</span><span class=\"p\">()</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">size</span><span class=\"p\">():</span> <span class=\"nc\">Int</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">().</span><span class=\"nf\">toInt</span><span class=\"p\">()</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">removeAll</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">removeAll</span><span class=\"p\">()</span>\n        <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">gc</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">E</span><span class=\"p\">.</span><span class=\"nf\">toByteArray</span><span class=\"p\">():</span> <span class=\"nc\">ByteArray</span> <span class=\"p\">=</span> <span class=\"nc\">SerializationUtils</span><span class=\"p\">.</span><span class=\"nf\">serialize</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n    <span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">ByteArray</span><span class=\"p\">.</span><span class=\"nf\">toE</span><span class=\"p\">():</span> <span class=\"nc\">E</span> <span class=\"p\">=</span> <span class=\"nc\">SerializationUtils</span><span class=\"p\">.</span><span class=\"nf\">deserialize</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"migrating-indexes\">Migrating indexes</h4>\n\n<p>In early versions of <em>mongo-migration-stream</em>, to copy indexes from <em>source collection</em> to <em>destination collection</em>, we used\nan <a href=\"https://www.mongodb.com/docs/database-tools/mongorestore/#rebuild-indexes\">index rebuilding feature</a> from <code class=\"language-plaintext highlighter-rouge\">mongodump</code> and <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> tools.\nThis feature works on the principle that the result of <code class=\"language-plaintext highlighter-rouge\">mongodump</code> consists of both documents from the collection and definitions of indexes.\n<code class=\"language-plaintext highlighter-rouge\">mongorestore</code> can use those definitions to rebuild indexes on <em>destination collection</em>.</p>\n\n<p>Unfortunately it occurred that rebuilding indexes on <em>destination collection</em> after <em>transfer</em> phase (before starting <em>synchronization</em> process)\nwith the <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> tool lengthened the entire <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> process, preventing us from emptying the queue in the meantime.\nIt resulted in a growing queue of events to synchronize, ending up with overall longer migration times and higher resources utilisation.\nWe’ve come to the conclusion, that we must rebuild indexes, while at the same time, keep sending events from the queue to <em>destination collection</em>.</p>\n\n<p>To migrate indexes without blocking <em>migration</em> process, we implemented a solution which for each collection,\nfetches all its indexes, and rebuilds them on <em>destination collection</em>.\nLooking from the application perspective, we use <code class=\"language-plaintext highlighter-rouge\">getRawSourceIndexes</code> function to fetch a list of Documents\n(representing indexes definitions) from <em>source collection</em>,\nand then recreate them on <em>destination collection</em> using <code class=\"language-plaintext highlighter-rouge\">createIndexOnDestinationCollection</code>.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">getRawSourceIndexes</span><span class=\"p\">(</span><span class=\"n\">sourceToDestination</span><span class=\"p\">:</span> <span class=\"nc\">SourceToDestination</span><span class=\"p\">):</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">Document</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span>\n    <span class=\"n\">sourceDb</span><span class=\"p\">.</span><span class=\"nf\">getCollection</span><span class=\"p\">(</span><span class=\"n\">sourceToDestination</span><span class=\"p\">.</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">collectionName</span><span class=\"p\">).</span><span class=\"nf\">listIndexes</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">toList</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">filterNot</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"s\">\"key\"</span><span class=\"p\">,</span> <span class=\"nc\">Document</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">.</span><span class=\"n\">java</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"nc\">Document</span><span class=\"p\">().</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\"_id\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span>\n            <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"s\">\"ns\"</span><span class=\"p\">)</span>\n            <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"s\">\"v\"</span><span class=\"p\">)</span>\n            <span class=\"n\">it</span><span class=\"p\">[</span><span class=\"s\">\"background\"</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n            <span class=\"n\">it</span>\n        <span class=\"p\">}</span>\n\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">createIndexOnDestinationCollection</span><span class=\"p\">(</span>\n    <span class=\"n\">sourceToDestination</span><span class=\"p\">:</span> <span class=\"nc\">SourceToDestination</span><span class=\"p\">,</span>\n    <span class=\"n\">indexDefinition</span><span class=\"p\">:</span> <span class=\"nc\">Document</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">destinationDb</span><span class=\"p\">.</span><span class=\"nf\">runCommand</span><span class=\"p\">(</span>\n        <span class=\"nc\">Document</span><span class=\"p\">().</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\"createIndexes\"</span><span class=\"p\">,</span> <span class=\"n\">sourceToDestination</span><span class=\"p\">.</span><span class=\"n\">destination</span><span class=\"p\">.</span><span class=\"n\">collectionName</span><span class=\"p\">)</span>\n            <span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\"indexes\"</span><span class=\"p\">,</span> <span class=\"nf\">listOf</span><span class=\"p\">(</span><span class=\"n\">indexDefinition</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Our solution can rebuild indexes in both older and newer versions of MongoDB.\nTo support older MongoDB versions we specify <code class=\"language-plaintext highlighter-rouge\">{ background: true }</code> option, which does not block all operations on a given database during index creation.\nIn case where <em>destination database</em> is newer than or equal to MongoDB 4.2, the <code class=\"language-plaintext highlighter-rouge\">{ background: true }</code> option is ignored, and\n<a href=\"https://www.mongodb.com/docs/manual/core/index-creation/#comparison-to-foreground-and-background-builds\">optimized index build is used</a>.\nIn both scenarios rebuilding indexes does not block <em>synchronization</em> process, improving overall <em>migration</em> times.</p>\n\n<h4 id=\"verification-of-migration-state\">Verification of migration state</h4>\n\n<p>Throught <em>mongo-migration-stream</em> implementation we kept in mind that <em>migrator</em> user should be aware what’s happening within his/her migration.\nFor that purpose <em>mongo-migration-stream</em> exposes data about migration in multiple different ways:</p>\n\n<ul>\n  <li>\n    <p>Logs — <em>migrator</em> logs all important information, so user can verify what’s going on,</p>\n  </li>\n  <li>\n    <p>Periodical checks — when all migrated collections are in <em>synchronization</em> process, <em>migrator</em> starts a periodical check for each collection, verifying if all the data has been migrated, making collection on <em>destination database</em> ready to use,</p>\n  </li>\n  <li>\n    <p>Metrics — various metrics about migration state are exposed through <a href=\"https://micrometer.io/\">Micrometer</a>.</p>\n  </li>\n</ul>\n\n<p>On top of all that, each migrator internal state change emits an event to in—memory event bus. There are multiple types of events which <em>mongo-migration-stream</em> produces:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Event type</th>\n      <th>When the event is emitted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">StartEvent</code></td>\n      <td>Start of the migration</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">SourceToLocalStartEvent</code></td>\n      <td>Start watching for a collection specific Mongo Change Stream</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">DumpStartEvent</code></td>\n      <td>Start <code class=\"language-plaintext highlighter-rouge\">mongodump</code> for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">DumpUpdateEvent</code></td>\n      <td>Each <code class=\"language-plaintext highlighter-rouge\">mongodump</code> print to stdout</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">DumpFinishEvent</code></td>\n      <td>Finish <code class=\"language-plaintext highlighter-rouge\">mongodump</code> for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">RestoreStartEvent</code></td>\n      <td>Start <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">RestoreUpdateEvent</code></td>\n      <td>Each <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> print to stdout</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">RestoreFinishEvent</code></td>\n      <td>Finish <code class=\"language-plaintext highlighter-rouge\">mongorestore</code> for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">IndexRebuildStartEvent</code></td>\n      <td>Start rebuilding indexes for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">IndexRebuildFinishEvent</code></td>\n      <td>Finish rebuilding indexes for a collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">LocalToDestinationStartEvent</code></td>\n      <td>Start sending events from queue to destination collection</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">StopEvent</code></td>\n      <td>Stop of the migration</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">PauseEvent</code></td>\n      <td>Pause of the migration</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">ResumeEvent</code></td>\n      <td>Resume of paused migration</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">FailedEvent</code></td>\n      <td>Fail of collection migration</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"application-modules\">Application modules</h4>\n\n<p><em>mongo-migration-stream</em> code was split into two separate modules:</p>\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">mongo-migration-stream-core</code> module which can be used as a library in JVM application,</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">mongo-migration-stream-cli</code> module which can be run as a standalone JAR.</li>\n</ul>\n\n<h2 id=\"mongo-migration-stream-in-production-at-allegro\">mongo-migration-stream in production at Allegro</h2>\n\n<p>Since internal launch in January 2023, we have migrated more than a hundred production databases using <em>mongo-migration-stream</em>.\nThe largest migrated collection stored more than one and a half billion documents.\nAt its peak moments, <em>migrator</em> was synchronizing a collection which emitted about 4 thousand Mongo Change Events per second.\nDuring one of our migrations, one collection queue size reached almost one hundred million events.\nAll of those events were later successfully synchronized into <em>destination collection</em>.</p>\n\n<p>At Allegro we use <em>mongo-migration-stream</em> as a library in a Web application with graphical user interface.\nThis approach allows Allegro engineers to manage database migrations on their own, without involving database team members.\nOn the screenshot below you can see our Web application GUI during a migration.</p>\n\n<p><img src=\"/img/articles/2023-09-14-online-mongodb-migration/mongo_migration_stream_ui.png\" alt=\"mongo-migration-stream Web Application at Allegro\" /></p>\n","contentSnippet":"MongoDB is the most popular database used at Allegro. We have hundreds of MongoDB databases running on our on—premise servers.\nIn 2022 we decided that we need to migrate all our MongoDB databases\nfrom existing shared clusters to new MongoDB clusters hosted on Kubernetes pods with separated resources.\nTo perform the migration of all databases we needed a tool for transfering all the data and keeping consistency between old and new databases.\nThat’s how mongo-migration-stream project was born.\nWhy do we needed to migrate MongoDB databases at all?\nAt Allegro we are managing tens of MongoDB clusters, with hundreds of MongoDB databases running on them.\nThis kind of approach, where one MongoDB cluster runs multiple MongoDB databases, allowed us to utilize resources\nmore effectively, while at the same time easing maintenance of clusters.\n\nWe’ve been living with this approach for years, but over time, more and more databases were\ncreated on shared clusters, increasing the frequency of the noisy neighbour problem.\nNoisy neighbour problem\nGenerally speaking, a noisy neighbour situation appears while multiple applications run on shared infrastructure,\nand one of those applications starts to consume so many resources (like CPU, RAM or Storage),\nthat it causes starvation of other applications.\nAt Allegro this problem started to be visible because over the years we’ve created more and more new MongoDB databases\nwhich were hosted on a fixed number of clusters.\nThe most common cause of the noisy neighbour problem in the Allegro infrastructure was long time high CPU usage caused by one of MongoDB databases on a given cluster.\nOn various occasions it occurred that a non-optimal query performed on a large collection was consuming too much CPU,\nnegatively affecting all the other databases on that cluster, making them slower or completely unresponsive.\n\nMongoDB on Kubernetes as a solution to the noisy neighbour problem\nTo solve the noisy neighbour problem a separate team implemented a solution allowing Allegro engineers to create independent MongoDB clusters on Kubernetes.\nFrom now on, each MongoDB cluster is formed of multiple replicas and an arbiter spread among datacenters, serving only a single MongoDB database.\nRunning each database on a separate cluster with isolated resources managed by Kubernetes was our solution to the noisy neighbour problem.\n\nAt this point we knew what we needed to do to solve our problems — we had to migrate all MongoDB databases from old shared clusters\nto new independent clusters on Kubernetes. Now came the time to answer the question: How should we do it?\nAvailable options\nFirstly, we prepared a list of requirements which a tool for migrating databases (referred to as migrator) had to meet in order to perform\nsuccessful migrations.\nRequirements\nMigrator must be able to migrate databases from older MongoDB versions to newer ones,\nMigrator must be able to migrate ReplicaSets and sharded clusters,\nMigrator must copy indexes from source database to destination database,\nMigrator must be able to handle more than 10k write operations per second,\nMigration must be performed without any downtime,\nMigration cannot affect database clients,\nDatabase owners (software engineers) need to be able to perform migrations on their own.\nExisting solutions\nHaving defined a list of requirements, we checked what tools were available on the market at the time.\npy-mongo-sync\nAccording to documentation py-mongo-sync is:\n“Oplog—based data sync tool that synchronizes data from a replica set to another deployment,\ne.g.: standalone, replica set, and sharded cluster.”\nAs you can see, py-mongo-sync is not a tool that would suit our needs from end to end.\npy-mongo-sync focuses on the synchronization of the data stored on the source database after starting the tool.\nIt doesn’t copy already existing data from the source to the destination database.\nWhat’s more, at the time py-mongo-sync supported MongoDB versions between 2.4 to 3.4, which were older than those used at Allegro.\nMongoDB Cluster-to-Cluster Sync\nOn July 22, 2022 MongoDB released mongosync v1.0 — a tool for migrating and synchronizing data between MongoDB clusters.\nAs described in the mongosync documentation:\n“The mongosync binary is the primary process used in Cluster—to—Cluster Sync. mongosync migrates data from one cluster\nto another and can keep the clusters in continuous sync.”\nThis description sounded like a perfect fit for us! Unfortunately, after initial excitement\n(and hours spent on reading mongosync documentation)\nwe realized we couldn’t use mongosync as it was able to perform migration and synchronization process only if source database and destination database\nwere both in the exact same version.\nIt meant that there was no option to migrate databases from older MongoDB versions to the newest one, which was a no-go for us.\nWhen we realised that there wasn’t a tool which met all our requirements, we made a tough decision to implement our own online MongoDB migration tool\nnamed mongo-migration-stream.\nmongo-migration-stream\nmongo-migration-stream is an open source tool from Allegro, that performs online migrations of MongoDB databases.\nIt’s a Kotlin application utilising\nmongodump and mongorestore MongoDB Command Line Database Tools\nalong with Mongo Change Streams mechanism.\nIn this section I will explain how mongo-migration-stream works under the hood, by covering its functionalities from a high—level overview and\nproviding details about its low—level implementation.\nmongo-migration-stream terminology\nSource database - MongoDB database which is a data source for migration,\nDestination database - MongoDB database which is a target for the data from source database,\nTransfer - a process of dumping data from source database, and restoring it on destination database,\nSynchronization - a process of keeping eventual consistency between source database and destination database,\nMigration - an end-to-end migration process combining both transfer and synchronization processes,\nMigrator - a tool for performing migrations.\nBuilding blocks\nAs I’ve mentioned at the beginning of this section, mongo-migration-stream utilises mongodump, mongorestore, Mongo Change Streams\nand a custom Kotlin application to perform migrations.\nmongodump is used to dump source database in form of a binary file,\nmongorestore is used to restore previously created dump on destination database,\nMongo Change Streams are used to keep eventual consistency between source database and destination database,\nKotlin application orchestrates, manages, and monitors all above processes.\nmongodump and mongorestore are responsible for the transfer part of migration,\nwhile Mongo Change Streams play the main role in the synchronization process.\nBird’s eye view\nTo implement a migrator, we needed a robust procedure for migrations which ensures that no data is lost during a migration.\nWe have formulated a procedure consisting of six consecutive steps:\nStart listening for Mongo Change Events on source database and save them in the queue,\nDump all the data from source database using mongodump,\nRestore all the data on destination database using mongorestore,\nCopy indexes definitions from source database and start creating them on destination database,\nStart to push all the events stored in the queue (changes on source database) to the destination database,\nWait for the queue to empty to establish eventual consistency.\n\nOur migration procedure works flawlessly because processing Mongo Change Events in a sequence guarantees migration idempotency.\nWithout this characteristic, we would have to change the order of steps 1 and 2 in the procedure, creating a possibility of losing data during migration.\nTo explain this problem in more detail, let’s assume that the source database deals with a continuous high volume of writes.\nIf we had started the migration by performing dump in the first place and then started to listen for events,\nwe would have lost the events stored on the source database in the meantime.\nHowever, as we start the migration by listening for events on the source database, and then proceeding with the dump,\nwe do not lose any of the events stored on the source database during that time.\nThe diagram below presents how such a kind of write anomaly could happen if we started dumping data before listening for Mongo Change Events.\n\nImplementation details\nConcurrency\nFrom the beginning we wanted to make mongo-migration-stream fast — we knew that it would need to cope with databases having more than 10k writes per second.\nAs a result mongo-migration-stream parallelizes migration of one MongoDB database into independent migrations of collections.\nEach database migration consists of multiple little migrators — one migrator per collection in the database.\nThe transfer process is performed in parallel for each collection, in separate mongodump and mongorestore processes.\nSynchronization process was also implemented concurrently — at the beginning of migration, each collection on source database is watched individually\nusing Mongo Change Streams with collection target.\nAll collections have their own separate queues in which Mongo Change Events are stored.\nAt the final phase of migration, each of these queues is processed independently.\n\nInitial data transfer\nTo perform transfer of the database, we’re executing mongodump and mongorestore commands for each collection.\nFor that reason, machines on which mongo-migration-stream is running are required to have MongoDB Command Line Database Tools installed.\nDumping data from collection collectionName in source database can be achieved by running a command:\n\nmongodump \\\n --uri \"mongodb://mongo_rs36_1:36301,mongo_rs36_2:36302,mongo_rs36_3:36303/?replicaSet=replicaSet36\" \\\n --db source \\\n --collection collectionName \\\n --out /home/user/mongomigrationstream/dumps \\\n --readPreference secondary\n --username username \\\n --config /home/user/mongomigrationstream/password_config/dump.config \\\n --authenticationDatabase admin\n\n\nStarting a mongodump process from Kotlin code is done with Java’s ProcessBuilder feature.\nProcessBuilder requires us to provide a process program and arguments in the form of a list of Strings.\nWe construct this list using prepareCommand function:\n\noverride fun prepareCommand(): List<String> = listOf(\n    mongoToolsPath + \"mongodump\",\n    \"--uri\", dbProperties.uri,\n    \"--db\", dbCollection.dbName,\n    \"--collection\", dbCollection.collectionName,\n    \"--out\", dumpPath,\n    \"--readPreference\", readPreference\n) + credentialsIfNotNull(dbProperties.authenticationProperties, passwordConfigPath)\n\n\nHaving ProcessBuilder with properly configured list of process program and arguments, we’re ready to start a new process\nusing the start() function.\n\nfun runCommand(command: Command): CommandResult {\n    val processBuilder = ProcessBuilder().command(command.prepareCommand()) // Configure ProcessBuilder with mongodump command in form of List<String>\n    currentProcess = processBuilder.start() // Start a new process\n    // ...\n    val exitCode = currentProcess.waitFor()\n    stopRunningCommand()\n    return CommandResult(exitCode)\n}\n\n\nAn analogous approach is implemented in mongo-migration-stream to execute the mongorestore command.\nEvent queue\nDuring the process of migration source database can constantly receive changes, which mongo-migration-stream is listening to with Mongo Change Streams.\nEvents from the stream are saved in the queue for sending to the destination database at a later time.\nCurrently mongo-migration-stream provides two implementations of the queue,\nwhere one implementation stores the data in RAM, while the other one persists the data to disk.\nIn-memory implementation can be used for databases with low traffic, or for testing purposes,\nor on machines with a sufficient amount of RAM (as events are stored as objects on the JVM heap).\n\n// In-memory queue implementation\ninternal class InMemoryEventQueue<E> : EventQueue<E> {\n    private val queue = ConcurrentLinkedQueue<E>()\n\n    override fun offer(element: E): Boolean = queue.offer(element)\n    override fun poll(): E = queue.poll()\n    override fun peek(): E = queue.peek()\n    override fun size(): Int = queue.size\n    override fun removeAll() {\n        queue.removeAll { true }\n    }\n}\n\n\nIn our production setup we decided to use a persistent event queue, which is implemented on top of BigQueue project.\nAs BigQueue only allows enqueuing and dequeuing byte arrays, we had to implement serialization and deserialization of the data from the events.\n\n// Persistent queue implementation\ninternal class BigQueueEventQueue<E : Serializable>(path: String, queueName: String) : EventQueue<E> {\n    private val queue = BigQueueImpl(path, queueName)\n\n    override fun offer(element: E): Boolean = queue.enqueue(element.toByteArray()).let { true }\n    override fun poll(): E = queue.dequeue().toE()\n    override fun peek(): E = queue.peek().toE()\n    override fun size(): Int = queue.size().toInt()\n    override fun removeAll() {\n        queue.removeAll()\n        queue.gc()\n    }\n\n    private fun E.toByteArray(): ByteArray = SerializationUtils.serialize(this)\n    private fun ByteArray.toE(): E = SerializationUtils.deserialize(this)\n}\n\n\nMigrating indexes\nIn early versions of mongo-migration-stream, to copy indexes from source collection to destination collection, we used\nan index rebuilding feature from mongodump and mongorestore tools.\nThis feature works on the principle that the result of mongodump consists of both documents from the collection and definitions of indexes.\nmongorestore can use those definitions to rebuild indexes on destination collection.\nUnfortunately it occurred that rebuilding indexes on destination collection after transfer phase (before starting synchronization process)\nwith the mongorestore tool lengthened the entire mongorestore process, preventing us from emptying the queue in the meantime.\nIt resulted in a growing queue of events to synchronize, ending up with overall longer migration times and higher resources utilisation.\nWe’ve come to the conclusion, that we must rebuild indexes, while at the same time, keep sending events from the queue to destination collection.\nTo migrate indexes without blocking migration process, we implemented a solution which for each collection,\nfetches all its indexes, and rebuilds them on destination collection.\nLooking from the application perspective, we use getRawSourceIndexes function to fetch a list of Documents\n(representing indexes definitions) from source collection,\nand then recreate them on destination collection using createIndexOnDestinationCollection.\n\nprivate fun getRawSourceIndexes(sourceToDestination: SourceToDestination): List<Document> =\n    sourceDb.getCollection(sourceToDestination.source.collectionName).listIndexes()\n        .toList()\n        .filterNot { it.get(\"key\", Document::class.java) == Document().append(\"_id\", 1) }\n        .map {\n            it.remove(\"ns\")\n            it.remove(\"v\")\n            it[\"background\"] = true\n            it\n        }\n\nprivate fun createIndexOnDestinationCollection(\n    sourceToDestination: SourceToDestination,\n    indexDefinition: Document\n) {\n    destinationDb.runCommand(\n        Document().append(\"createIndexes\", sourceToDestination.destination.collectionName)\n            .append(\"indexes\", listOf(indexDefinition))\n    )\n}\n\n\nOur solution can rebuild indexes in both older and newer versions of MongoDB.\nTo support older MongoDB versions we specify { background: true } option, which does not block all operations on a given database during index creation.\nIn case where destination database is newer than or equal to MongoDB 4.2, the { background: true } option is ignored, and\noptimized index build is used.\nIn both scenarios rebuilding indexes does not block synchronization process, improving overall migration times.\nVerification of migration state\nThrought mongo-migration-stream implementation we kept in mind that migrator user should be aware what’s happening within his/her migration.\nFor that purpose mongo-migration-stream exposes data about migration in multiple different ways:\nLogs — migrator logs all important information, so user can verify what’s going on,\nPeriodical checks — when all migrated collections are in synchronization process, migrator starts a periodical check for each collection, verifying if all the data has been migrated, making collection on destination database ready to use,\nMetrics — various metrics about migration state are exposed through Micrometer.\nOn top of all that, each migrator internal state change emits an event to in—memory event bus. There are multiple types of events which mongo-migration-stream produces:\nEvent type\n      When the event is emitted\n    \nStartEvent\n      Start of the migration\n    \nSourceToLocalStartEvent\n      Start watching for a collection specific Mongo Change Stream\n    \nDumpStartEvent\n      Start mongodump for a collection\n    \nDumpUpdateEvent\n      Each mongodump print to stdout\n    \nDumpFinishEvent\n      Finish mongodump for a collection\n    \nRestoreStartEvent\n      Start mongorestore for a collection\n    \nRestoreUpdateEvent\n      Each mongorestore print to stdout\n    \nRestoreFinishEvent\n      Finish mongorestore for a collection\n    \nIndexRebuildStartEvent\n      Start rebuilding indexes for a collection\n    \nIndexRebuildFinishEvent\n      Finish rebuilding indexes for a collection\n    \nLocalToDestinationStartEvent\n      Start sending events from queue to destination collection\n    \nStopEvent\n      Stop of the migration\n    \nPauseEvent\n      Pause of the migration\n    \nResumeEvent\n      Resume of paused migration\n    \nFailedEvent\n      Fail of collection migration\n    \nApplication modules\nmongo-migration-stream code was split into two separate modules:\nmongo-migration-stream-core module which can be used as a library in JVM application,\nmongo-migration-stream-cli module which can be run as a standalone JAR.\nmongo-migration-stream in production at Allegro\nSince internal launch in January 2023, we have migrated more than a hundred production databases using mongo-migration-stream.\nThe largest migrated collection stored more than one and a half billion documents.\nAt its peak moments, migrator was synchronizing a collection which emitted about 4 thousand Mongo Change Events per second.\nDuring one of our migrations, one collection queue size reached almost one hundred million events.\nAll of those events were later successfully synchronized into destination collection.\nAt Allegro we use mongo-migration-stream as a library in a Web application with graphical user interface.\nThis approach allows Allegro engineers to manage database migrations on their own, without involving database team members.\nOn the screenshot below you can see our Web application GUI during a migration.","guid":"https://blog.allegro.tech/2023/09/online-mongodb-migration.html","categories":["tech","mongodb","nosql","kotlin","open source","mongo change streams"],"isoDate":"2023-09-13T22:00:00.000Z","thumbnail":"images/post-headers/mongodb.png"}],"jobs":[{"id":"743999951198299","name":"Engineering Team Manager (.Net)","uuid":"282610a2-cb34-44e0-95e9-4729b933b7f2","jobAdId":"563fffd8-f0db-494f-8bcd-eb761d1c8354","defaultJobAd":true,"refNumber":"REF4638D","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-12-13T11:10:20.854Z","location":{"city":"Warsaw","region":"Masovian Voivodeship","country":"pl","remote":false,"latitude":"52.2296756","longitude":"21.0122287"},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"63c62385-eb34-4cd3-a7ad-a2479d862d05","valueLabel":"Technology Manager (CL 4-6)"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"78540d72-e837-4a9d-af54-6a8def1cc2bc","valueLabel":"6"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"f7af19b5-5d6a-43a0-9a2b-1e99277515c7","valueLabel":"Opennet.pl Sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999951198299","creator":{"name":"Dominika Fujarowicz"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999949758070","name":"Senior Front-end Software Engineer","uuid":"929b463b-e5bb-4e42-a5a7-f809a792b217","jobAdId":"05b6643a-43dd-46a2-b998-bfbaa0a31c68","defaultJobAd":true,"refNumber":"REF3941R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-12-07T09:55:20.550Z","location":{"city":"Warsaw, Poznan","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999949758070","language":{"code":"en-GB","label":"English (UK)","labelNative":"English (UK)"}},{"id":"743999949756869","name":"Senior Front-End Software Engineer - Merchant Experience","uuid":"96fe4551-eb9b-4889-95f8-c0e842781d84","jobAdId":"db0fc952-c047-4dd0-9c96-c4b6650982fc","defaultJobAd":false,"refNumber":"REF3941R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-12-07T09:54:51.960Z","location":{"city":"Warszawa, Poznań, Wrocław","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999949756869","language":{"code":"en-GB","label":"English (UK)","labelNative":"English (UK)"}},{"id":"743999948427702","name":"Integration Engineer","uuid":"6861c4c8-f07a-4adb-817b-2d94c06d32f5","jobAdId":"22b63dc3-61fa-488b-b1cd-ef8588ccfe28","defaultJobAd":true,"refNumber":"REF2138N","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-12-04T13:24:30.613Z","location":{"city":"Warsaw, Poznań, Cracow, Gdańsk, Wroclaw","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3976147c-fe25-42a8-8c97-78273250960b","valueLabel":"4"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999948427702","creator":{"name":"Wiktoria Mitruk"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999948395138","name":"Software Engineer (.NET) - Allegro Pay","uuid":"e19d2ead-31e1-461c-a8b4-ae5b734d1806","jobAdId":"64d12e40-8ee1-468f-8e95-52bff85e0d14","defaultJobAd":true,"refNumber":"REF3170Y","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-12-04T09:50:34.747Z","location":{"city":"Warsaw","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"9c8396d4-11a6-443c-897c-15f29221a3fd","valueLabel":"Allegro Pay sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999948395138","creator":{"name":"Wiktoria Mitruk"},"language":{"code":"en","label":"English","labelNative":"English (US)"}}],"events":[{"created":1701092071000,"duration":7200000,"id":"297614064","name":"Allegro Tech Talks #40 - Testy: dynamiczne dashboardy & optymalizacja pracy","date_in_series_pattern":false,"status":"past","time":1701968400000,"local_date":"2023-12-07","local_time":"18:00","updated":1701978668000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":13,"venue":{"id":27528185,"name":"Allegro Kraków Office","lat":50.06517028808594,"lon":19.951927185058594,"repinned":true,"address_1":"Lubicz Park A (5 piętro)","address_2":"ul. Lubicz 23","city":"Kraków","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/297614064/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-talk-40/](https://app.evenea.pl/event/allegro-tech-talk-40/) Jeszcze przed świętami zapraszamy Was na #40 wydarzenie z serii Allegro Tech Talk, podczas których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy…","how_to_find_us":"Biuro Allegro znajduje się w Centrum Biurowym Lubicz. \n\nObok budynku znajduje się przystanek Lubicz. Przy przystanku zatrzymują się tramwaje 2, 4, 10, 14, 20, 52, 62, 64 oraz autobusy: 124, 152, 424, 601, 611, 662, 664.\n\n","visibility":"public","member_pay_fee":false},{"created":1700495058000,"duration":7200000,"id":"297480100","name":"Allegro Tech Talks #39 - Big Data: o podejściu do pracy z danymi","date_in_series_pattern":false,"status":"past","time":1701363600000,"local_date":"2023-11-30","local_time":"18:00","updated":1701377876000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":50,"venue":{"id":27549223,"name":"Allegro Warsaw Office","lat":52.23224639892578,"lon":20.992111206054688,"repinned":true,"address_1":"ul. Żelazna 51/53","city":"Warszawa","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/297480100/","description":"**Rejestracja: [https://app.evenea.pl/event/allegro-tech-talk-39/](https://app.evenea.pl/event/allegro-tech-talk-39/)** Bądźcie z nami podczas #39 wydarzenia z serii **Allegro Tech Talk**, podczas których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy podczas rozmów przy…","how_to_find_us":"Biuro Allegro znajduje się w kompleksie Fabryki Norblina (wejście Plater 3 od ul. Żelaznej). W niedalekiej odległości znajdują się dwie stacje metra linii M2, Rondo Daszyńskiego i Rondo ONZ. Autobusy, tramwaje i inne środki transportu sprawdzisz też na: https://fabrykanorblina.pl/dojazd","visibility":"public","member_pay_fee":false},{"created":1685697967000,"duration":7200000,"id":"293929321","name":"Allegro Tech Talks #38 - Mobile: o iOS bez spinki","date_in_series_pattern":false,"status":"past","time":1686760200000,"local_date":"2023-06-14","local_time":"18:30","updated":1686773845000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":17,"venue":{"id":27549223,"name":"Allegro Warsaw Office","lat":0,"lon":0,"repinned":true,"address_1":"ul. Żelazna 51/53","city":"Warszawa","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/293929321/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-talk-38/](https://app.evenea.pl/event/allegro-tech-talk-38/) Ostatnie przed przerwą wakacyjną, stacjonarne spotkanie z cyklu Allegro Tech Talks, na których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy podczas rozmów…","how_to_find_us":"Biuro Allegro znajduje się w kompleksie Fabryki Norblina (wejście Plater 3 od ul. Żelaznej). W niedalekiej odległości znajdują się dwie stacje metra linii M2, Rondo Daszyńskiego i Rondo ONZ. Autobusy, tramwaje i inne środki transportu sprawdzisz też na: https://fabrykanorblina.pl/dojazd","visibility":"public","member_pay_fee":false},{"created":1678978572000,"duration":111600000,"id":"292278882","name":"UX Research Confetti - III edycja ","date_in_series_pattern":false,"status":"past","time":1684915200000,"local_date":"2023-05-24","local_time":"10:00","updated":1685029049000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":33,"is_online_event":true,"eventType":"ONLINE","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/292278882/","description":"**Rejestracja na wydarzenie ➡ [https://app.evenea.pl/event/ux-research-confetti-3/]( https://app.evenea.pl/event/ux-research-confetti-3/ )**[ ]( https://app.evenea.pl/event/ux-research-confetti-3/ ) **🎉 Przedstawiamy 3. edycję UX Research Confetti organizowaną przez Allegro - bezpłatną, polską konferencję poświęconą badaniom…","visibility":"public","member_pay_fee":false}],"podcasts":[{"title":"MBox: server-driven UI dla aplikacji mobilnych","link":"https://podcast.allegro.tech/mbox-server-driven-ui-dla-aplikacji-mobilnych/","pubDate":"Thu, 16 Nov 2023 00:00:00 GMT","content":"Czym jest i jak powstał MBox: wewnętrzna platforma server-driven UI dla aplikacji mobilnych w Allegro? Skąd wziął się pomysł na to rozwiązanie i na jakie bolączki odpowiada? Dlaczego zdecydowaliśmy się na budowanie tego typu rozwiązania in-house i z jakimi wyzwaniami mierzyliśmy się w procesie tworzenia? Co wyróżnia zespoły pracujące nad tym narzędziem i jak pracuje im się bez Product Ownera? Posłuchajcie siódmego odcinka Allegro Tech Podcast z udziałem Pauliny Sadowskiej i Tomasza Gębarowskiego - Managerów w obszarze Technical Platform Services w Allegro.","contentSnippet":"Czym jest i jak powstał MBox: wewnętrzna platforma server-driven UI dla aplikacji mobilnych w Allegro? Skąd wziął się pomysł na to rozwiązanie i na jakie bolączki odpowiada? Dlaczego zdecydowaliśmy się na budowanie tego typu rozwiązania in-house i z jakimi wyzwaniami mierzyliśmy się w procesie tworzenia? Co wyróżnia zespoły pracujące nad tym narzędziem i jak pracuje im się bez Product Ownera? Posłuchajcie siódmego odcinka Allegro Tech Podcast z udziałem Pauliny Sadowskiej i Tomasza Gębarowskiego - Managerów w obszarze Technical Platform Services w Allegro.","guid":"https://podcast.allegro.tech/mbox-server-driven-ui-dla-aplikacji-mobilnych/","isoDate":"2023-11-16T00:00:00.000Z"},{"title":"O chatbotach i ich wpływie na Allegro","link":"https://podcast.allegro.tech/o-chatbotach-i-ich-wplywie-na-allegro/","pubDate":"Wed, 11 Oct 2023 00:00:00 GMT","content":"Jakie procesy automatyzujemy w Allegro i co warto o nich wiedzieć w kontekście obszaru Customer Experience? W czym pomagają nam chatboty, jak je rozwijamy i dbamy o ich jakość? Kim są Allina oraz Albert i co mają wspólnego z automatyzacją? Za jakie rozwiązania otrzymaliśmy nagrodę hiperautomatyzacji? O tym wszystkim posłuchacie w odcinku z udziałem Rafała Gajewskiego - Managera w obszarze IT Services w Allegro.","contentSnippet":"Jakie procesy automatyzujemy w Allegro i co warto o nich wiedzieć w kontekście obszaru Customer Experience? W czym pomagają nam chatboty, jak je rozwijamy i dbamy o ich jakość? Kim są Allina oraz Albert i co mają wspólnego z automatyzacją? Za jakie rozwiązania otrzymaliśmy nagrodę hiperautomatyzacji? O tym wszystkim posłuchacie w odcinku z udziałem Rafała Gajewskiego - Managera w obszarze IT Services w Allegro.","guid":"https://podcast.allegro.tech/o-chatbotach-i-ich-wplywie-na-allegro/","isoDate":"2023-10-11T00:00:00.000Z"},{"title":"O roli analityków biznesowych w Allegro","link":"https://podcast.allegro.tech/o-roli-analitykow-biznesowych-w-allegro/","pubDate":"Thu, 24 Aug 2023 00:00:00 GMT","content":"Czym zajmują się analitycy danych w Allegro i za jakie projekty odpowiadają? Z jakich rodzajów danych i narzędzi korzystają w codziennej pracy? Jakie (przykładowe) obszary tematyczne pokrywamy danymi, które analizujemy w Allegro? Jakich umiejętności szukamy u analityków biznesowych w Allegro i jak można do nas dołączyć? O roli analityków biznesowych i pracy w skali Allegro opowiadają Jakub Król i Mateusz Falkowski - Senior Data Analysts w Allegro.","contentSnippet":"Czym zajmują się analitycy danych w Allegro i za jakie projekty odpowiadają? Z jakich rodzajów danych i narzędzi korzystają w codziennej pracy? Jakie (przykładowe) obszary tematyczne pokrywamy danymi, które analizujemy w Allegro? Jakich umiejętności szukamy u analityków biznesowych w Allegro i jak można do nas dołączyć? O roli analityków biznesowych i pracy w skali Allegro opowiadają Jakub Król i Mateusz Falkowski - Senior Data Analysts w Allegro.","guid":"https://podcast.allegro.tech/o-roli-analitykow-biznesowych-w-allegro/","isoDate":"2023-08-24T00:00:00.000Z"},{"title":"O społeczności Allegro Tech i rozwoju inżynierów w Allegro","link":"https://podcast.allegro.tech/o-spolecznosci-allegro-tech-i-rozwoju-inzynierow-w-allegro/","pubDate":"Thu, 27 Jul 2023 00:00:00 GMT","content":"Na czym polega rola Principal Software Engineera w Allegro oraz co ma wspólnego z rozwijaniem siebie i dzieleniem się wiedzą? Co warto wiedzieć o turystyce, która pojawia się niemal w każdym odcinku naszych podcastów? Na czym polega, kto, kiedy i jak może z niej skorzystać? Jak pracujemy z talentami Gallupa (także w zespołach technicznych)?  Co dają nam wewnętrzne DevDays, hackhathony, gildie, meetupy, konferencje i jak jeszcze wymieniamy się doświadczeniami? Czym jest Allegro Tech Meeting i jaka idea mu przyświeca? O społeczności Allegro Tech i możliwościach rozwoju w Allegro z perspektywy inżynierów rozmawialiśmy z Marcinem Turkiem i Michałem Kosmulskim.","contentSnippet":"Na czym polega rola Principal Software Engineera w Allegro oraz co ma wspólnego z rozwijaniem siebie i dzieleniem się wiedzą? Co warto wiedzieć o turystyce, która pojawia się niemal w każdym odcinku naszych podcastów? Na czym polega, kto, kiedy i jak może z niej skorzystać? Jak pracujemy z talentami Gallupa (także w zespołach technicznych)?  Co dają nam wewnętrzne DevDays, hackhathony, gildie, meetupy, konferencje i jak jeszcze wymieniamy się doświadczeniami? Czym jest Allegro Tech Meeting i jaka idea mu przyświeca? O społeczności Allegro Tech i możliwościach rozwoju w Allegro z perspektywy inżynierów rozmawialiśmy z Marcinem Turkiem i Michałem Kosmulskim.","guid":"https://podcast.allegro.tech/o-spolecznosci-allegro-tech-i-rozwoju-inzynierow-w-allegro/","isoDate":"2023-07-27T00:00:00.000Z"}]},"__N_SSG":true}