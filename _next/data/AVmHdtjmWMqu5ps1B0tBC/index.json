{"pageProps":{"posts":[{"title":"Onion Architecture","link":"https://blog.allegro.tech/2023/02/onion-architecture.html","pubDate":"Mon, 13 Feb 2023 00:00:00 +0100","authors":{"author":[{"name":["Tomasz Tarczyński"],"photo":["https://blog.allegro.tech/img/authors/tomasz.tarczynski.jpg"],"url":["https://blog.allegro.tech/authors/tomasz.tarczynski"]}]},"content":"<p>Software Architecture is an elusive thing which, if neglected, can lead to a hard-to-develop and maintain codebase, and\nin more drastic circumstances to the failure of a product. This article discusses one of the backend application\narchitecture styles which proved to be successful in providing a good foundation for building and maintaining an\napplication in the long run: Onion Architecture.</p>\n\n<h2 id=\"onion-architecture\">Onion Architecture</h2>\n\n<p>Onion Architecture is a software architectural style which strongly promotes the separation of concerns between the most\nimportant part of a business application — the domain code — and its technical aspects like HTTP or database. It does so\nwith ideas similar to <a href=\"https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)\">Hexagonal Architecture</a>,\n<a href=\"/2021/12/clean-architecture-story.html\">Clean Architecture</a> and\n<a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">other related architecture styles</a>.</p>\n\n<p>This post gives a description of the ideas of Onion Architecture and discusses a sample implementation which explicitly\ndefines layers in the code and build setup.</p>\n\n<p>Additional complexity to the build setup and extra learning curve introduced by the layered approach pays back during\ndevelopment. It reduces the cognitive load on the programmer by giving a more concrete structural foundation and guidance.</p>\n\n<h3 id=\"the-repository\">The Repository</h3>\n\n<p>The code samples are taken from an example repository, which you can find\non <a href=\"https://github.com/tarczynskitomek/onion-library\">GitHub</a>.</p>\n\n<h3 id=\"why-does-software-architecture-matter\">Why does Software Architecture matter?</h3>\n\n<p>During my Engineering career, I’ve worked on multiple projects using different architectural styles. From a happy-go-lucky\napproach without any obvious structure, through “classic”<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup> three-tier enterprise style, to highly structured\narchitecture, reflected by the setup of the build tool and supported by the compiler.</p>\n\n<p>The experience of working on those projects was also very different. Having to introduce a change in a shapeless blob of\nspaghetti code was always a painful experience, connected with stressful moments of <em>Have I broken something?</em> Or <em>Oh\nno! A gazillion of unrelated tests broke…</em></p>\n\n<p>On the other hand, working in a more rigid, but at the same time more expressive, and structured environment of\na well-architected application, was a breeze and a real pleasure. Not to mention that the time required to introduce the\nchange was smaller, and the estimates were more precise and predictable.</p>\n\n<p>Good architecture guides the implementation makes it easy to introduce new changes, and — to some degree — prevents\nless experienced team members from making doubtful decisions. It allows developers to focus on the value-providing\nimplementation rather than thinking <em>Hmm where should I put this class?</em>.</p>\n\n<p>Last but not least, software architecture is often defined as <em>the things that are hard to change</em>, so choosing a proper\narchitectural approach to your new application is of key importance to its future development and maintenance.</p>\n\n<h3 id=\"about-the-onion\">About the Onion</h3>\n\n<p>The idea of Onion Architecture, first introduced by Jeffrey Palermo in\na <a href=\"https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/\">series of articles</a>, is similar to other clean\narchitecture approaches presented in Robert “Uncle Bob” Martin’s\n<a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">blog post</a>, his book\n<a href=\"https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164\">Clean Architecture</a>, and\nquite recently on our <a href=\"/2021/12/clean-architecture-story.html\">blog</a>. It can be successfully used as an alternative to a\npopular Hexagonal / Ports and Adapters architecture, and as such is predominantly used in the backend, business\napplications and services.</p>\n\n<p>The core concept in all the above styles is the same — to make the domain the most central part of the application, and\nremove all infrastructure concerns, such as talking via HTTP, messaging, database mapping, testing, etc., away from the\ndomain code. The core of the business logic should be free (in theory at least) from any of the technical, and\nframework-related problems, allowing for easy testing and rapid development.</p>\n\n<p>To put it using Uncle Bob’s words: <em>Though these architectures all vary somewhat in their details, they are very\nsimilar. They all have the same objective, which is the separation of concerns. They all achieve this separation by\ndividing the software into layers. Each has at least one layer for business rules, and another for interfaces</em>.</p>\n\n<p>The main difference I’ve found in the implementations of Hexagonal Architecture and Onion Architecture lies mostly in\nthe overall, more structured approach to the code layout of the latter. Both styles rely on the conscious usage of\ninterfaces, and the <code class=\"language-plaintext highlighter-rouge\">Dependency Inversion Principle</code>, which is the layer and encapsulation, but the Onion, like a real vegetable, has explicitly defined layers. Making the concept a\nfirst-class citizen represented in the code guides implementation and gives more clear overall structure to the\ncodebase.</p>\n\n<p>This Architecture style does have some learning curve for developers in the project, but once mastered, pays back many\ntimes. Finally, as with every solution in the IT industry, it is not a one-size-fits-all, and you should always consider\nif the architectural style matches your needs.</p>\n\n<h3 id=\"the-onion-has-layers\">The Onion has Layers</h3>\n\n<p>Onion Architecture is a form of layered architecture. The main difference between “the classic” three-tier architecture\nand the Onion, is that every outer layer sees classes from all inner layers, not only the one directly below. Moreover,\nthe dependency direction always goes from the outside to the inside, never the other way around.</p>\n\n<p>But wait, what are the layers of Onion Architecture, what do they describe, and why do they matter?</p>\n\n<p>There are three<sup id=\"fnref:3\" role=\"doc-noteref\"><a href=\"#fn:3\" class=\"footnote\" rel=\"footnote\">2</a></sup> main layers in Onion Architecture:</p>\n\n<ul>\n  <li>The domain layer</li>\n  <li>The application layer</li>\n  <li>The infrastructure layer\neach of which has its responsibilities.</li>\n</ul>\n\n<p><img src=\"/img/articles/2023-12-13-onion-architecture/onion-layers.png\" alt=\"Onion Architecture Layers\" /></p>\n\n<h4 id=\"the-domain-layer\">The Domain Layer</h4>\n\n<p>This is the layer where you place classes describing the core of your business.</p>\n\n<p>Let’s use a simple example. An application written to help manage a Library would most probably have classes like Book,\nReader, Copy and so on. The classes, relations and interactions between them describe the core of the domain of the\napplication, i.e. what business needs it fulfils and in what way. In the Library, there would be a process of adding new\ntitles to the catalogue, a process of borrowing and returning copies of a book, charging readers for overdue books, and\nmany more.</p>\n\n<p>A sample domain class could look like the one below:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"nd\">@ToString</span>\n<span class=\"nd\">@EqualsAndHashCode</span><span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"o\">=</span> <span class=\"s\">\"id\"</span><span class=\"o\">)</span>\n<span class=\"nd\">@AllArgsConstructor</span><span class=\"o\">(</span><span class=\"n\">access</span> <span class=\"o\">=</span> <span class=\"nc\">AccessLevel</span><span class=\"o\">.</span><span class=\"na\">PRIVATE</span><span class=\"o\">)</span>\n<span class=\"kd\">abstract</span> <span class=\"n\">sealed</span> <span class=\"kd\">class</span> <span class=\"nc\">Book</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">protected</span> <span class=\"kd\">final</span> <span class=\"nc\">BookId</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n    <span class=\"kd\">protected</span> <span class=\"kd\">final</span> <span class=\"nc\">Version</span> <span class=\"n\">version</span><span class=\"o\">;</span>\n    <span class=\"kd\">protected</span> <span class=\"kd\">final</span> <span class=\"nc\">AuthorId</span> <span class=\"n\">author</span><span class=\"o\">;</span>\n    <span class=\"kd\">protected</span> <span class=\"kd\">final</span> <span class=\"nc\">Title</span> <span class=\"n\">title</span><span class=\"o\">;</span>\n    <span class=\"kd\">protected</span> <span class=\"kd\">final</span> <span class=\"nc\">CreatedAt</span> <span class=\"n\">createdAt</span><span class=\"o\">;</span>\n    <span class=\"kd\">protected</span> <span class=\"kd\">final</span> <span class=\"nc\">ApprovedAt</span> <span class=\"n\">approvedAt</span><span class=\"o\">;</span>\n    <span class=\"kd\">protected</span> <span class=\"kd\">final</span> <span class=\"nc\">RejectedAt</span> <span class=\"n\">rejectedAt</span><span class=\"o\">;</span>\n    <span class=\"kd\">protected</span> <span class=\"kd\">final</span> <span class=\"nc\">ArchivedAt</span> <span class=\"n\">archivedAt</span><span class=\"o\">;</span>\n\n    <span class=\"c1\">// static factory method for assembling a new instance of a Book — hides the internal representation</span>\n    <span class=\"kd\">static</span> <span class=\"nc\">Book</span> <span class=\"nf\">create</span><span class=\"o\">(</span><span class=\"nc\">AuthorId</span> <span class=\"n\">author</span><span class=\"o\">,</span> <span class=\"nc\">Title</span> <span class=\"n\">title</span><span class=\"o\">,</span> <span class=\"nc\">CreatedAt</span> <span class=\"n\">createdAt</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">NewBook</span><span class=\"o\">(</span><span class=\"nc\">BookId</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">(),</span> <span class=\"nc\">Version</span><span class=\"o\">.</span><span class=\"na\">first</span><span class=\"o\">(),</span> <span class=\"n\">author</span><span class=\"o\">,</span> <span class=\"n\">title</span><span class=\"o\">,</span> <span class=\"n\">createdAt</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// One of the subclasses representing the current state of the book entity</span>\n    <span class=\"c1\">// Other subclasses omitted for brevity.</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"nc\">NewBook</span> <span class=\"kd\">extends</span> <span class=\"nc\">Book</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">private</span> <span class=\"nf\">NewBook</span><span class=\"o\">(</span><span class=\"nc\">BookId</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"nc\">Version</span> <span class=\"n\">version</span><span class=\"o\">,</span> <span class=\"nc\">AuthorId</span> <span class=\"n\">author</span><span class=\"o\">,</span> <span class=\"nc\">Title</span> <span class=\"n\">title</span><span class=\"o\">,</span> <span class=\"nc\">CreatedAt</span> <span class=\"n\">createdAt</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">version</span><span class=\"o\">,</span> <span class=\"n\">author</span><span class=\"o\">,</span> <span class=\"n\">title</span><span class=\"o\">,</span> <span class=\"n\">createdAt</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">protected</span> <span class=\"nc\">BookSnapshot</span><span class=\"o\">.</span><span class=\"na\">Status</span> <span class=\"nf\">status</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"nc\">BookSnapshot</span><span class=\"o\">.</span><span class=\"na\">Status</span><span class=\"o\">.</span><span class=\"na\">AWAITING_APPROVAL</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"nc\">Book</span> <span class=\"nf\">approve</span><span class=\"o\">(</span><span class=\"nc\">ApprovedAt</span> <span class=\"n\">approvedAt</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">ApprovedBook</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">version</span><span class=\"o\">,</span> <span class=\"n\">author</span><span class=\"o\">,</span> <span class=\"n\">title</span><span class=\"o\">,</span> <span class=\"n\">createdAt</span><span class=\"o\">,</span> <span class=\"n\">approvedAt</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"nc\">Book</span> <span class=\"nf\">reject</span><span class=\"o\">(</span><span class=\"nc\">RejectedAt</span> <span class=\"n\">rejectedAt</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">RejectedBook</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">version</span><span class=\"o\">,</span> <span class=\"n\">author</span><span class=\"o\">,</span> <span class=\"n\">title</span><span class=\"o\">,</span> <span class=\"n\">createdAt</span><span class=\"o\">,</span> <span class=\"n\">rejectedAt</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// Available domain operations</span>\n    <span class=\"nc\">Book</span> <span class=\"nf\">approve</span><span class=\"o\">(</span><span class=\"nc\">ApprovedAt</span> <span class=\"n\">approvedAt</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">UnsupportedOperationException</span><span class=\"o\">(</span><span class=\"s\">\"Unsupported state transition. Cannot approve book in state [%s]\"</span>\n                <span class=\"o\">.</span><span class=\"na\">formatted</span><span class=\"o\">(</span><span class=\"n\">status</span><span class=\"o\">()));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nc\">Book</span> <span class=\"nf\">reject</span><span class=\"o\">(</span><span class=\"nc\">RejectedAt</span> <span class=\"n\">rejectedAt</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">UnsupportedOperationException</span><span class=\"o\">(</span><span class=\"s\">\"Unsupported state transition. Cannot reject book in state [%s]\"</span>\n                <span class=\"o\">.</span><span class=\"na\">formatted</span><span class=\"o\">(</span><span class=\"n\">status</span><span class=\"o\">()));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nc\">Book</span> <span class=\"nf\">archive</span><span class=\"o\">(</span><span class=\"nc\">ArchivedAt</span> <span class=\"n\">archivedAt</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">UnsupportedOperationException</span><span class=\"o\">(</span>\n                <span class=\"s\">\"Unsupported state transition. Cannot archive book in state [%s]\"</span><span class=\"o\">.</span><span class=\"na\">formatted</span><span class=\"o\">(</span><span class=\"n\">status</span><span class=\"o\">())</span>\n        <span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span> \n</code></pre></div></div>\n\n<p>Since the domain changes the most — here is the place where you put all the new features, and business requirements — it\nshould be as easy as possible to modify and test. Thus, it should not be concerned which database is used in the\nproject, nor should it know which communication style, synchronous RPC calls, asynchronous messaging, or a mix of is\nused to trigger the logic or maybe that it’s triggered by unit tests and not real user interactions. This doesn’t mean\nof course, that the domain classes can’t have any dependencies. Like it the example above — the code uses Lombok\nannotations, generating the boilerplate which otherwise needs to be written by the programmer.</p>\n\n<h4 id=\"the-application-layer\">The Application Layer</h4>\n\n<p>This is the layer where you place your classes, which describe the use cases of the application and coordinate the work\nof the domain classes. For example, we can imagine that a new title added to the library undergoes an approval process:\nthe book is fetched from the repository, a timestamp of approval is generated, the book state (only new books can be\napproved) is checked, and if it’s OK, a modified book is then saved using the repository.</p>\n\n<p>The code describing such a use case can look like this:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Books</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// other fields and methods omitted   </span>\n    <span class=\"kd\">public</span> <span class=\"nc\">BookSnapshot</span> <span class=\"nf\">approve</span><span class=\"o\">(</span><span class=\"nc\">BookId</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">transactions</span><span class=\"o\">.</span><span class=\"na\">execute</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">Book</span> <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">bookRepository</span><span class=\"o\">.</span><span class=\"na\">getById</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">);</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">ApprovedAt</span> <span class=\"n\">approvedAt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ApprovedAt</span><span class=\"o\">(</span><span class=\"n\">timeMachine</span><span class=\"o\">.</span><span class=\"na\">now</span><span class=\"o\">());</span>\n            <span class=\"kd\">final</span> <span class=\"nc\">Book</span> <span class=\"n\">approved</span> <span class=\"o\">=</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"na\">approve</span><span class=\"o\">(</span><span class=\"n\">approvedAt</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">bookRepository</span><span class=\"o\">.</span><span class=\"na\">update</span><span class=\"o\">(</span><span class=\"n\">approved</span><span class=\"o\">).</span><span class=\"na\">snapshot</span><span class=\"o\">();</span>\n        <span class=\"o\">});</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<p>This is also the layer that “knows” which operations should be performed atomically, thus the transaction-related code\nis placed here. Note, however, that in the example above, the <code class=\"language-plaintext highlighter-rouge\">transactions</code> field is actually an interface reference.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"nd\">@FunctionalInterface</span>\n<span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">Transactions</span> <span class=\"o\">{</span>\n\n    <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span> <span class=\"nf\">execute</span><span class=\"o\">(</span><span class=\"nc\">Supplier</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">operation</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>The application uses the <em>behaviour</em> expressed by the interface, the details of how the behaviour is executed lie in the\ninfrastructure layer.</p>\n\n<h4 id=\"the-infrastructure-layer\">The Infrastructure Layer</h4>\n\n<p>This layer, the outermost layer of Onion, is a place where all framework and technology related stuff goes. It tends to\nbe the most “thick” since it contains the implementations of the interfaces defined in the inner layers. Need an\nHTTP controller, a message listener or a database adapter (an implementation of repository interface defined at the domain layer)? Infrastructure is the place to go.</p>\n\n<p>The domain, although the most important part of the application, tends to be also the smallest in terms of code size.\nThe reverse is true about the infrastructure code — all the supporting mechanisms, which are placed at the\ninfrastructure layer, are the backbone which animates the domain behaviour, and as such that part of the service should\nnot be neglected.</p>\n\n<p>Staying with the example of the <code class=\"language-plaintext highlighter-rouge\">Transactions</code> interface, let’s take a look at possible implementations. A simple approach\nusing Spring’s programmatic transaction handling could look like this:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"nd\">@Component</span>\n<span class=\"nd\">@AllArgsConstructor</span>\n<span class=\"kd\">class</span> <span class=\"nc\">JdbcTransactions</span> <span class=\"kd\">implements</span> <span class=\"nc\">Transactions</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">TransactionTemplate</span> <span class=\"n\">transactionTemplate</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span> <span class=\"nf\">execute</span><span class=\"o\">(</span><span class=\"nc\">Supplier</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">operation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">transactionTemplate</span><span class=\"o\">.</span><span class=\"na\">execute</span><span class=\"o\">(</span><span class=\"n\">status</span> <span class=\"o\">-&gt;</span> <span class=\"n\">operation</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>and for unit test, one can set up a fake, noop implementation:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">NoOpTransactionsFake</span> <span class=\"kd\">implements</span> <span class=\"nc\">Transactions</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"no\">T</span> <span class=\"nf\">execute</span><span class=\"o\">(</span><span class=\"nc\">Supplier</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">operation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">operation</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"the-flavours-of-the-onion-or-how-to-represent-layers-in-code\">The Flavours of The Onion or how to represent layers in code?</h2>\n\n<p>There are two basic approaches to representing the layers in the code. The one that we used in our most recent\nproject was to use a package naming convention.</p>\n\n<p><img src=\"/img/articles/2023-12-13-onion-architecture/onion-packages.png\" alt=\"onion packages\" /></p>\n\n<p>Every domain package has three subpackages: domain, application and infrastructure. This method is clear, easy to\nunderstand and navigate, and does not require changes to the build tool setup. The downside is that, except for the\nagreed convention, and Code Review process to check them, there is no mechanism preventing you from using a class\ndefined in the application layer in the domain layer, thus breaking the direction of the dependencies. One can always\nuse such tools as <a href=\"https://www.archunit.org/\">ArchUnit</a> to write tests checking if there are no “prohibited” imports,\nbut in my opinion, we can do better by employing build tool modules support.</p>\n\n<h3 id=\"build-tools-to-the-rescue\">Build tools to the rescue</h3>\n\n<p>The more involved approach is to define compilation modules representing the layers. Its disadvantage is a more\ncomplicated build structure and setup of your build tool of choice. On the other side though, having the compiler on\nyour side is very helpful, and prevents the above-mentioned issue. The direction of the dependencies between layers is\nclearly defined in the module build files.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// settings.gradle</span>\n<span class=\"n\">rootProject</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'onion'</span>\n\n<span class=\"n\">include</span><span class=\"o\">(</span><span class=\"s1\">'domain'</span><span class=\"o\">,</span> <span class=\"s1\">'application'</span><span class=\"o\">,</span> <span class=\"s1\">'infrastructure'</span><span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>Using Gradle setup as an example, one can define three modules — domain, application, and infrastructure —\nin <code class=\"language-plaintext highlighter-rouge\">settings.gradle</code> file. Then, in the build files corresponding to each of the modules, declare their dependencies,\nclearly defining the direction of dependencies.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// /application/build.gradle</span>\n<span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n    <span class=\"n\">implementation</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">(</span><span class=\"s1\">':domain'</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">// /infrastructure/build.gradle</span>\n<span class=\"n\">plugins</span> <span class=\"o\">{</span>\n    <span class=\"n\">id</span> <span class=\"s1\">'org.springframework.boot'</span>\n    <span class=\"n\">id</span> <span class=\"s1\">'io.spring.dependency-management'</span>\n    <span class=\"n\">id</span> <span class=\"s1\">'com.revolut.jooq-docker'</span> <span class=\"n\">version</span> <span class=\"s1\">'0.3.7'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n    <span class=\"n\">implementation</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">(</span><span class=\"s1\">':domain'</span><span class=\"o\">))</span>\n    <span class=\"n\">implementation</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">(</span><span class=\"s1\">':application'</span><span class=\"o\">))</span>\n\n    <span class=\"n\">implementation</span><span class=\"o\">(</span><span class=\"s1\">'org.springframework.boot:spring-boot-starter-web'</span><span class=\"o\">)</span>\n    <span class=\"n\">implementation</span><span class=\"o\">(</span><span class=\"s1\">'org.springframework.boot:spring-boot-starter-jooq'</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">// other dependencies and settings removed for brevity</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Notice, that the biggest file is the one for the infrastructure layer. It should not be a surprise by now. The\ninfrastructure has all the framework — in this case Spring Boot — database driver, and other dependencies, and itself\ndepends on both domain and application. There’s of course nothing preventing you from declaring extra dependencies,\nsay Lombok. The most important thing to note here is that with this build setup, it will not be possible to reverse the\norder of dependencies between the layers.</p>\n\n<h2 id=\"final-thoughts\">Final Thoughts</h2>\n\n<p>Problems Onion Architecture solves</p>\n\n<ul>\n  <li>A more structured, layered layout of the code makes code navigation easier and makes the relationship between\ndifferent parts of the codebase more visible at first glance</li>\n  <li>Loose coupling between the domain and the infrastructure</li>\n  <li>Coupling is towards the centre of The Onion — expressed by the relationship between the layers</li>\n  <li>(Usually) No coupling between the domain and the infrastructure concerns of the application</li>\n  <li>Build tool support in enforcing layers</li>\n</ul>\n\n<p>Problems Onion Architecture creates</p>\n<ul>\n  <li>Additional learning curve for new developers, and those used to other architecture styles</li>\n  <li>Increased overall complexity of the codebase — especially with the flavour utilising the modularizing capabilities of build tools such as Gradle or Maven</li>\n  <li>Not everyone likes the smell of it</li>\n</ul>\n\n<p>As mentioned above at the beginning of the article, Onion Architecture is not a one-size-fits-all solution. It has its\nlearning curve and is best suited for services with a clear domain definition. This makes it a bad choice, for more\ntechnical-oriented services, e.g. a high-throughput proxy written in a reactive framework.</p>\n\n<h3 id=\"footnotes\">Footnotes</h3>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>The typical, “classic” enterprise architecture, usually consists of three layers: the presentation layer, the domain layer and the persistence (data) layer. The dependency direction goes top-down, and in the strict approach a layer sees only its nearest neighbour. The clear advantage is the separation of concerns, and the reduction of the scope of responsibilities of each layer. There are two issues though — that architecture style often leads to a so-called <a href=\"https://martinfowler.com/bliki/AnemicDomainModel.html\">anemic domain model</a>, since most of the business logic is placed in service classes, because, and that’s the second issue, domain classes depend on the persistence layer — and often become only data carriers without behaviour. For a comparison of different software architecture styles, see <a href=\"https://www.oreilly.com/library/view/software-architecture-patterns/9781491971437/\">Software Architecture Patterns</a> (e-book, pdf) <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\" role=\"doc-endnote\">\n      <p>The number of layers may differ. The three-tier division is usually called Simplified Onion Architecture. Another possible rendition of the division is to have five layers with a separate Repository layer above the domain and a service layer above the repositories. I find that division to be a step towards over-engineering and found that the 3-layered approach strikes the best balance. <a href=\"#fnref:3\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n","contentSnippet":"Software Architecture is an elusive thing which, if neglected, can lead to a hard-to-develop and maintain codebase, and\nin more drastic circumstances to the failure of a product. This article discusses one of the backend application\narchitecture styles which proved to be successful in providing a good foundation for building and maintaining an\napplication in the long run: Onion Architecture.\nOnion Architecture\nOnion Architecture is a software architectural style which strongly promotes the separation of concerns between the most\nimportant part of a business application — the domain code — and its technical aspects like HTTP or database. It does so\nwith ideas similar to Hexagonal Architecture,\nClean Architecture and\nother related architecture styles.\nThis post gives a description of the ideas of Onion Architecture and discusses a sample implementation which explicitly\ndefines layers in the code and build setup.\nAdditional complexity to the build setup and extra learning curve introduced by the layered approach pays back during\ndevelopment. It reduces the cognitive load on the programmer by giving a more concrete structural foundation and guidance.\nThe Repository\nThe code samples are taken from an example repository, which you can find\non GitHub.\nWhy does Software Architecture matter?\nDuring my Engineering career, I’ve worked on multiple projects using different architectural styles. From a happy-go-lucky\napproach without any obvious structure, through “classic”1 three-tier enterprise style, to highly structured\narchitecture, reflected by the setup of the build tool and supported by the compiler.\nThe experience of working on those projects was also very different. Having to introduce a change in a shapeless blob of\nspaghetti code was always a painful experience, connected with stressful moments of Have I broken something? Or Oh\nno! A gazillion of unrelated tests broke…\nOn the other hand, working in a more rigid, but at the same time more expressive, and structured environment of\na well-architected application, was a breeze and a real pleasure. Not to mention that the time required to introduce the\nchange was smaller, and the estimates were more precise and predictable.\nGood architecture guides the implementation makes it easy to introduce new changes, and — to some degree — prevents\nless experienced team members from making doubtful decisions. It allows developers to focus on the value-providing\nimplementation rather than thinking Hmm where should I put this class?.\nLast but not least, software architecture is often defined as the things that are hard to change, so choosing a proper\narchitectural approach to your new application is of key importance to its future development and maintenance.\nAbout the Onion\nThe idea of Onion Architecture, first introduced by Jeffrey Palermo in\na series of articles, is similar to other clean\narchitecture approaches presented in Robert “Uncle Bob” Martin’s\nblog post, his book\nClean Architecture, and\nquite recently on our blog. It can be successfully used as an alternative to a\npopular Hexagonal / Ports and Adapters architecture, and as such is predominantly used in the backend, business\napplications and services.\nThe core concept in all the above styles is the same — to make the domain the most central part of the application, and\nremove all infrastructure concerns, such as talking via HTTP, messaging, database mapping, testing, etc., away from the\ndomain code. The core of the business logic should be free (in theory at least) from any of the technical, and\nframework-related problems, allowing for easy testing and rapid development.\nTo put it using Uncle Bob’s words: Though these architectures all vary somewhat in their details, they are very\nsimilar. They all have the same objective, which is the separation of concerns. They all achieve this separation by\ndividing the software into layers. Each has at least one layer for business rules, and another for interfaces.\nThe main difference I’ve found in the implementations of Hexagonal Architecture and Onion Architecture lies mostly in\nthe overall, more structured approach to the code layout of the latter. Both styles rely on the conscious usage of\ninterfaces, and the Dependency Inversion Principle, which is the layer and encapsulation, but the Onion, like a real vegetable, has explicitly defined layers. Making the concept a\nfirst-class citizen represented in the code guides implementation and gives more clear overall structure to the\ncodebase.\nThis Architecture style does have some learning curve for developers in the project, but once mastered, pays back many\ntimes. Finally, as with every solution in the IT industry, it is not a one-size-fits-all, and you should always consider\nif the architectural style matches your needs.\nThe Onion has Layers\nOnion Architecture is a form of layered architecture. The main difference between “the classic” three-tier architecture\nand the Onion, is that every outer layer sees classes from all inner layers, not only the one directly below. Moreover,\nthe dependency direction always goes from the outside to the inside, never the other way around.\nBut wait, what are the layers of Onion Architecture, what do they describe, and why do they matter?\nThere are three2 main layers in Onion Architecture:\nThe domain layer\nThe application layer\nThe infrastructure layer\neach of which has its responsibilities.\n\nThe Domain Layer\nThis is the layer where you place classes describing the core of your business.\nLet’s use a simple example. An application written to help manage a Library would most probably have classes like Book,\nReader, Copy and so on. The classes, relations and interactions between them describe the core of the domain of the\napplication, i.e. what business needs it fulfils and in what way. In the Library, there would be a process of adding new\ntitles to the catalogue, a process of borrowing and returning copies of a book, charging readers for overdue books, and\nmany more.\nA sample domain class could look like the one below:\n\n\n@ToString\n@EqualsAndHashCode(of = \"id\")\n@AllArgsConstructor(access = AccessLevel.PRIVATE)\nabstract sealed class Book {\n\n    protected final BookId id;\n    protected final Version version;\n    protected final AuthorId author;\n    protected final Title title;\n    protected final CreatedAt createdAt;\n    protected final ApprovedAt approvedAt;\n    protected final RejectedAt rejectedAt;\n    protected final ArchivedAt archivedAt;\n\n    // static factory method for assembling a new instance of a Book — hides the internal representation\n    static Book create(AuthorId author, Title title, CreatedAt createdAt) {\n        return new NewBook(BookId.next(), Version.first(), author, title, createdAt);\n    }\n\n    // One of the subclasses representing the current state of the book entity\n    // Other subclasses omitted for brevity.\n    private static final class NewBook extends Book {\n\n        private NewBook(BookId id, Version version, AuthorId author, Title title, CreatedAt createdAt) {\n            super(id, version, author, title, createdAt, null, null, null);\n        }\n\n        @Override\n        protected BookSnapshot.Status status() {\n            return BookSnapshot.Status.AWAITING_APPROVAL;\n        }\n\n        @Override\n        Book approve(ApprovedAt approvedAt) {\n            return new ApprovedBook(id, version, author, title, createdAt, approvedAt);\n        }\n\n        @Override\n        Book reject(RejectedAt rejectedAt) {\n            return new RejectedBook(id, version, author, title, createdAt, rejectedAt);\n        }\n    }\n\n    // Available domain operations\n    Book approve(ApprovedAt approvedAt) {\n        throw new UnsupportedOperationException(\"Unsupported state transition. Cannot approve book in state [%s]\"\n                .formatted(status()));\n    }\n\n    Book reject(RejectedAt rejectedAt) {\n        throw new UnsupportedOperationException(\"Unsupported state transition. Cannot reject book in state [%s]\"\n                .formatted(status()));\n    }\n\n    Book archive(ArchivedAt archivedAt) {\n        throw new UnsupportedOperationException(\n                \"Unsupported state transition. Cannot archive book in state [%s]\".formatted(status())\n        );\n    }\n} \n\n\nSince the domain changes the most — here is the place where you put all the new features, and business requirements — it\nshould be as easy as possible to modify and test. Thus, it should not be concerned which database is used in the\nproject, nor should it know which communication style, synchronous RPC calls, asynchronous messaging, or a mix of is\nused to trigger the logic or maybe that it’s triggered by unit tests and not real user interactions. This doesn’t mean\nof course, that the domain classes can’t have any dependencies. Like it the example above — the code uses Lombok\nannotations, generating the boilerplate which otherwise needs to be written by the programmer.\nThe Application Layer\nThis is the layer where you place your classes, which describe the use cases of the application and coordinate the work\nof the domain classes. For example, we can imagine that a new title added to the library undergoes an approval process:\nthe book is fetched from the repository, a timestamp of approval is generated, the book state (only new books can be\napproved) is checked, and if it’s OK, a modified book is then saved using the repository.\nThe code describing such a use case can look like this:\n\nclass Books {\n    // other fields and methods omitted   \n    public BookSnapshot approve(BookId id) {\n        return transactions.execute(() -> {\n            final Book book = bookRepository.getById(id);\n            final ApprovedAt approvedAt = new ApprovedAt(timeMachine.now());\n            final Book approved = book.approve(approvedAt);\n            return bookRepository.update(approved).snapshot();\n        });\n    }\n}\n\n\n\nThis is also the layer that “knows” which operations should be performed atomically, thus the transaction-related code\nis placed here. Note, however, that in the example above, the transactions field is actually an interface reference.\n\n\n@FunctionalInterface\npublic interface Transactions {\n\n    <T> T execute(Supplier<T> operation);\n}\n\n\nThe application uses the behaviour expressed by the interface, the details of how the behaviour is executed lie in the\ninfrastructure layer.\nThe Infrastructure Layer\nThis layer, the outermost layer of Onion, is a place where all framework and technology related stuff goes. It tends to\nbe the most “thick” since it contains the implementations of the interfaces defined in the inner layers. Need an\nHTTP controller, a message listener or a database adapter (an implementation of repository interface defined at the domain layer)? Infrastructure is the place to go.\nThe domain, although the most important part of the application, tends to be also the smallest in terms of code size.\nThe reverse is true about the infrastructure code — all the supporting mechanisms, which are placed at the\ninfrastructure layer, are the backbone which animates the domain behaviour, and as such that part of the service should\nnot be neglected.\nStaying with the example of the Transactions interface, let’s take a look at possible implementations. A simple approach\nusing Spring’s programmatic transaction handling could look like this:\n\n\n@Component\n@AllArgsConstructor\nclass JdbcTransactions implements Transactions {\n\n    private final TransactionTemplate transactionTemplate;\n\n    @Override\n    public <T> T execute(Supplier<T> operation) {\n        return transactionTemplate.execute(status -> operation.get());\n    }\n}\n\n\nand for unit test, one can set up a fake, noop implementation:\n\nclass NoOpTransactionsFake implements Transactions {\n\n    @Override\n    <T> T execute(Supplier<T> operation) {\n        operation.get()\n    }\n}\n\n\nThe Flavours of The Onion or how to represent layers in code?\nThere are two basic approaches to representing the layers in the code. The one that we used in our most recent\nproject was to use a package naming convention.\n\nEvery domain package has three subpackages: domain, application and infrastructure. This method is clear, easy to\nunderstand and navigate, and does not require changes to the build tool setup. The downside is that, except for the\nagreed convention, and Code Review process to check them, there is no mechanism preventing you from using a class\ndefined in the application layer in the domain layer, thus breaking the direction of the dependencies. One can always\nuse such tools as ArchUnit to write tests checking if there are no “prohibited” imports,\nbut in my opinion, we can do better by employing build tool modules support.\nBuild tools to the rescue\nThe more involved approach is to define compilation modules representing the layers. Its disadvantage is a more\ncomplicated build structure and setup of your build tool of choice. On the other side though, having the compiler on\nyour side is very helpful, and prevents the above-mentioned issue. The direction of the dependencies between layers is\nclearly defined in the module build files.\n\n// settings.gradle\nrootProject.name = 'onion'\n\ninclude('domain', 'application', 'infrastructure')\n\n\nUsing Gradle setup as an example, one can define three modules — domain, application, and infrastructure —\nin settings.gradle file. Then, in the build files corresponding to each of the modules, declare their dependencies,\nclearly defining the direction of dependencies.\n\n// /application/build.gradle\ndependencies {\n    implementation(project(':domain'))\n}\n// /infrastructure/build.gradle\nplugins {\n    id 'org.springframework.boot'\n    id 'io.spring.dependency-management'\n    id 'com.revolut.jooq-docker' version '0.3.7'\n}\n\ndependencies {\n    implementation(project(':domain'))\n    implementation(project(':application'))\n\n    implementation('org.springframework.boot:spring-boot-starter-web')\n    implementation('org.springframework.boot:spring-boot-starter-jooq')\n\n    // other dependencies and settings removed for brevity\n}\n\n\nNotice, that the biggest file is the one for the infrastructure layer. It should not be a surprise by now. The\ninfrastructure has all the framework — in this case Spring Boot — database driver, and other dependencies, and itself\ndepends on both domain and application. There’s of course nothing preventing you from declaring extra dependencies,\nsay Lombok. The most important thing to note here is that with this build setup, it will not be possible to reverse the\norder of dependencies between the layers.\nFinal Thoughts\nProblems Onion Architecture solves\nA more structured, layered layout of the code makes code navigation easier and makes the relationship between\ndifferent parts of the codebase more visible at first glance\nLoose coupling between the domain and the infrastructure\nCoupling is towards the centre of The Onion — expressed by the relationship between the layers\n(Usually) No coupling between the domain and the infrastructure concerns of the application\nBuild tool support in enforcing layers\nProblems Onion Architecture creates\nAdditional learning curve for new developers, and those used to other architecture styles\nIncreased overall complexity of the codebase — especially with the flavour utilising the modularizing capabilities of build tools such as Gradle or Maven\nNot everyone likes the smell of it\nAs mentioned above at the beginning of the article, Onion Architecture is not a one-size-fits-all solution. It has its\nlearning curve and is best suited for services with a clear domain definition. This makes it a bad choice, for more\ntechnical-oriented services, e.g. a high-throughput proxy written in a reactive framework.\nFootnotes\nThe typical, “classic” enterprise architecture, usually consists of three layers: the presentation layer, the domain layer and the persistence (data) layer. The dependency direction goes top-down, and in the strict approach a layer sees only its nearest neighbour. The clear advantage is the separation of concerns, and the reduction of the scope of responsibilities of each layer. There are two issues though — that architecture style often leads to a so-called anemic domain model, since most of the business logic is placed in service classes, because, and that’s the second issue, domain classes depend on the persistence layer — and often become only data carriers without behaviour. For a comparison of different software architecture styles, see Software Architecture Patterns (e-book, pdf) ↩\nThe number of layers may differ. The three-tier division is usually called Simplified Onion Architecture. Another possible rendition of the division is to have five layers with a separate Repository layer above the domain and a service layer above the repositories. I find that division to be a step towards over-engineering and found that the 3-layered approach strikes the best balance. ↩","guid":"https://blog.allegro.tech/2023/02/onion-architecture.html","categories":["tech","architecture","software","engineering"],"isoDate":"2023-02-12T23:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"How we solved a mobile application performance issue with a few lines of code?","link":"https://blog.allegro.tech/2023/01/lazy-loading-with-mbox.html","pubDate":"Wed, 25 Jan 2023 00:00:00 +0100","authors":{"author":[{"name":["Łukasz Solniczek"],"photo":["https://blog.allegro.tech/img/authors/lukasz.solniczek.jpg"],"url":["https://blog.allegro.tech/authors/lukasz.solniczek"]}]},"content":"<p>Sometimes great results in code performance come with a small amount of work.\nWe’d like to tell you a story about how we changed the <a href=\"/about-us/\">Allegro</a> mobile homepage\nand reduced usage of Allegro service infrastructure with only a few lines of code.</p>\n\n<h3 id=\"the-problem\">The problem</h3>\n\n<p>The story is about the homepage in the Allegro app on <a href=\"https://play.google.com/store/apps/details?id=pl.allegro\">Android</a>\nand <a href=\"https://apps.apple.com/pl/app/allegro/id305659772\">iOS</a>, the first screen a user sees when opening the app.\nOriginally it was a long screen with a lot of content rendered with data from tens of, sometimes costly, data sources (services we use to prepare data for our frontend).</p>\n\n<p>A lot was happening there.</p>\n\n<p>It was not a big problem earlier but became one when the number of users of our applications started growing, after the outbreak of the COVID-19 pandemic.\nWithin one year, the number of requests sent to our infrastructure from the Allegro homepage increased almost 3 times, consequently becoming a performance issue.</p>\n\n<p><img src=\"/img/articles/2023-01-25-lazy-loading-with-mbox/lazy-loading-rps.png\" alt=\"Lazy Loading Homepage\" /></p>\n\n<h3 id=\"the-idea\">The idea</h3>\n\n<p>We decided to split the homepage content into two parts. The first would load when the user opens the app and would be available immediately.\nAnd the second part would load when the user scrolls to the end of the first part.\nThis technique is called lazy loading.\nIt is not something new, it is used web-wide in many places, but in our case, we had to think about it differently because …</p>\n\n<p>… we built the Allego homepage in applications using <strong>MBox</strong>, the server-driven UI solution created at Allegro, which means that the content and screen logic is defined entirely on the server side.\nImplementation of lazy loading for the Allegro homepage also had to be done on the server side.</p>\n\n<blockquote>\n  <p>What is <strong>MBox</strong>? It is our <strong>Server-Driven UI (SDUI)</strong> solution, which we use at Allegro to create and release mobile screens faster on both platforms (iOS and Android). It is a collection of building blocks that let us develop views and actions that link MBox screens with other parts of the application or introduce some interaction on a screen.\nIf you want to learn more about MBox, you can read its introduction on our blog: <a href=\"/2022/08/mbox-server-driven-ui-for-mobile-apps.html\">MBox: server-driven UI for mobile apps</a>.</p>\n</blockquote>\n\n<p>After discussing the problem and potential solution, it turned out that all the <strong>MBox</strong> building blocks and actions we\nneeded to implement lazy-loading with MBox were already there.</p>\n\n<h3 id=\"the-solution\">The solution</h3>\n\n<p>Thanks to modular architecture, independent elements, and a clear interface between them, all we needed to do was combine already existing mechanisms.</p>\n\n<p>We used the <strong>Spinner</strong> component, which shows the native spinner view in the applications, and <strong>replaceComponent</strong> action, which can fetch the next portion of the mobile screen and display it in place of some other component.\nThe homepage endpoint had already supported pagination.</p>\n\n<p>At the end of the first part of the Allegro homepage, we added <strong>Spinner</strong> component with <strong>replaceComponent</strong> action triggered when the <strong>Spinner</strong> shows.</p>\n\n<p>Action <strong>replaceComponent</strong> loads the second part of the homepage and alters <strong>Spinner</strong> with it.</p>\n\n<p><img src=\"/img/articles/2023-01-25-lazy-loading-with-mbox/lazy-loading-homepage.png\" alt=\"Lazy Loading Homepage\" /></p>\n\n<p>This change was implemented entirely server-side and was available on both platforms (iOS and Android) <strong>without a new application release</strong>.</p>\n\n<p>These few lines of <strong>MBox</strong> code helped us divide the Allegro homepage into two parts, and fix our original performance problem.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">spinner</span> <span class=\"p\">{</span>\n    <span class=\"n\">id</span> <span class=\"p\">=</span> <span class=\"s\">\"spinnerID\"</span>\n    <span class=\"nf\">actions</span> <span class=\"p\">{</span>\n        <span class=\"nf\">show</span> <span class=\"p\">{</span>\n            <span class=\"nf\">replaceComponent</span><span class=\"p\">(</span><span class=\"n\">componentId</span> <span class=\"p\">=</span> <span class=\"s\">\"spinnerID\"</span><span class=\"p\">,</span> <span class=\"n\">route</span> <span class=\"p\">=</span> <span class=\"s\">\"url-to-second-part\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>And here are some results.</p>\n\n<h3 id=\"the-result\">The result</h3>\n\n<p>We have added metrics to our lazy loading solution to gather information about how our users interact with new Allegro homepage.\nWe learned that only about <strong>5% of iOS</strong>,</p>\n\n<p><img src=\"/img/articles/2023-01-25-lazy-loading-with-mbox/lazy-loading-mobile-requests-ios.png\" alt=\"Lazy Loading mobile requests\" /></p>\n\n<p>and about <strong>10% of Android</strong> users</p>\n\n<p><img src=\"/img/articles/2023-01-25-lazy-loading-with-mbox/lazy-loading-mobile-requests-android.png\" alt=\"Lazy Loading mobile requests\" /></p>\n\n<p>load the second part of the Allegro homepage.\nMost users do not scroll down, and preparing the entire homepage at once was an unnecessary use of our resources.</p>\n\n<p>The Allegro app measures <strong>First Meaningful Paint (FMP)</strong> for screen content. This metric shows us how quickly the primary content is visible to the user.</p>\n\n<p><img src=\"/img/articles/2023-01-25-lazy-loading-with-mbox/lazy-loading-fmp.png\" alt=\"Lazy loading fmp\" /></p>\n\n<p>After introducing lazy loading, <strong>FMP</strong> improved, and the first content is visible to users <strong>61% faster</strong> than before on both platforms (iOS and Android).</p>\n\n<p><strong>FMP</strong> improved because we reduced the response size of the Allegro homepage load by <strong>about 90%</strong>,</p>\n\n<p><img src=\"/img/articles/2023-01-25-lazy-loading-with-mbox/lazy-loading-response-size.png\" alt=\"Lazy loading response size\" /></p>\n\n<p>and the backend rendering time by <strong>about 56%</strong>.</p>\n\n<p><img src=\"/img/articles/2023-01-25-lazy-loading-with-mbox/lazy-loading-render-time.png\" alt=\"Lazy loading render time\" /></p>\n\n<p>We could do that because, when we load the homepage for a user, we use <strong>about 90% fewer</strong> data sources than before.</p>\n\n<h3 id=\"summary\">Summary</h3>\n\n<p>We designed <strong>MBox</strong> to allow developers to create and modify mobile screens faster and easier, but we are pleased that it also helps improve app performance. Thanks to MBox, and its modular architecture, we were able to modify\ncode on the server and introduce this improvement on both platforms (iOS and Android) fast, and deliver it to users of the Allegro apps without a long mobile release process.</p>\n","contentSnippet":"Sometimes great results in code performance come with a small amount of work.\nWe’d like to tell you a story about how we changed the Allegro mobile homepage\nand reduced usage of Allegro service infrastructure with only a few lines of code.\nThe problem\nThe story is about the homepage in the Allegro app on Android\nand iOS, the first screen a user sees when opening the app.\nOriginally it was a long screen with a lot of content rendered with data from tens of, sometimes costly, data sources (services we use to prepare data for our frontend).\nA lot was happening there.\nIt was not a big problem earlier but became one when the number of users of our applications started growing, after the outbreak of the COVID-19 pandemic.\nWithin one year, the number of requests sent to our infrastructure from the Allegro homepage increased almost 3 times, consequently becoming a performance issue.\n\nThe idea\nWe decided to split the homepage content into two parts. The first would load when the user opens the app and would be available immediately.\nAnd the second part would load when the user scrolls to the end of the first part.\nThis technique is called lazy loading.\nIt is not something new, it is used web-wide in many places, but in our case, we had to think about it differently because …\n… we built the Allego homepage in applications using MBox, the server-driven UI solution created at Allegro, which means that the content and screen logic is defined entirely on the server side.\nImplementation of lazy loading for the Allegro homepage also had to be done on the server side.\nWhat is MBox? It is our Server-Driven UI (SDUI) solution, which we use at Allegro to create and release mobile screens faster on both platforms (iOS and Android). It is a collection of building blocks that let us develop views and actions that link MBox screens with other parts of the application or introduce some interaction on a screen.\nIf you want to learn more about MBox, you can read its introduction on our blog: MBox: server-driven UI for mobile apps.\nAfter discussing the problem and potential solution, it turned out that all the MBox building blocks and actions we\nneeded to implement lazy-loading with MBox were already there.\nThe solution\nThanks to modular architecture, independent elements, and a clear interface between them, all we needed to do was combine already existing mechanisms.\nWe used the Spinner component, which shows the native spinner view in the applications, and replaceComponent action, which can fetch the next portion of the mobile screen and display it in place of some other component.\nThe homepage endpoint had already supported pagination.\nAt the end of the first part of the Allegro homepage, we added Spinner component with replaceComponent action triggered when the Spinner shows.\nAction replaceComponent loads the second part of the homepage and alters Spinner with it.\n\nThis change was implemented entirely server-side and was available on both platforms (iOS and Android) without a new application release.\nThese few lines of MBox code helped us divide the Allegro homepage into two parts, and fix our original performance problem.\n\nspinner {\n    id = \"spinnerID\"\n    actions {\n        show {\n            replaceComponent(componentId = \"spinnerID\", route = \"url-to-second-part\")\n        }\n    }\n}\n\n\nAnd here are some results.\nThe result\nWe have added metrics to our lazy loading solution to gather information about how our users interact with new Allegro homepage.\nWe learned that only about 5% of iOS,\n\nand about 10% of Android users\n\nload the second part of the Allegro homepage.\nMost users do not scroll down, and preparing the entire homepage at once was an unnecessary use of our resources.\nThe Allegro app measures First Meaningful Paint (FMP) for screen content. This metric shows us how quickly the primary content is visible to the user.\n\nAfter introducing lazy loading, FMP improved, and the first content is visible to users 61% faster than before on both platforms (iOS and Android).\nFMP improved because we reduced the response size of the Allegro homepage load by about 90%,\n\nand the backend rendering time by about 56%.\n\nWe could do that because, when we load the homepage for a user, we use about 90% fewer data sources than before.\nSummary\nWe designed MBox to allow developers to create and modify mobile screens faster and easier, but we are pleased that it also helps improve app performance. Thanks to MBox, and its modular architecture, we were able to modify\ncode on the server and introduce this improvement on both platforms (iOS and Android) fast, and deliver it to users of the Allegro apps without a long mobile release process.","guid":"https://blog.allegro.tech/2023/01/lazy-loading-with-mbox.html","categories":["tech","Server-driven UI","mobile","mbox","performance"],"isoDate":"2023-01-24T23:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Transactions in MongoDB","link":"https://blog.allegro.tech/2022/12/transactions-in-mongodb.html","pubDate":"Wed, 21 Dec 2022 00:00:00 +0100","authors":{"author":[{"name":["Piotr Kisielewicz"],"photo":["https://blog.allegro.tech/img/authors/piotr.kisielewicz.jpg"],"url":["https://blog.allegro.tech/authors/piotr.kisielewicz"]}]},"content":"<p>Since version 4.0, transactions have been introduced to the world of Mongo databases. However, the way they work differs greatly from the tried and true world of SQL.</p>\n\n<p>In databases like PostgreSQL or MySQL there are transactions based on tables and relations with isolation levels such as <code class=\"language-plaintext highlighter-rouge\">READ_UNCOMMITED</code>, <code class=\"language-plaintext highlighter-rouge\">READ_COMMITED</code>, <code class=\"language-plaintext highlighter-rouge\">REPEATABLE_READ</code> and <code class=\"language-plaintext highlighter-rouge\">SERIALIZABLE</code>. These help us to recognize if the record we’re working on is dirty, both when we want to access it or when someone else wants to do it after we’ve made some changes. In the world of documents, shards and replicas, the changes made to a single document are already atomic by design.</p>\n\n<p>Why do we need transactions then? I only talked about single documents, but after all, documents can be modified in bulk, and these operations are no longer atomic.</p>\n\n<p>That’s why transactions were introduced into MongoDB. In this blog post, we will check how they work and what their use cases are.</p>\n\n<h3 id=\"what-is-a-transaction\">What is a transaction?</h3>\n\n<p>A database transaction is a unit of work, designed to handle the changes of data in the database. It makes sure that the output of the data is consistent and doesn’t generate errors. It helps with concurrent changes to the database, and makes the database more scalable.</p>\n\n<p>By definition, database transactions are atomic, consistent, isolated and durable. Sounds familiar? Exactly, it’s <strong>ACID</strong>.</p>\n\n<h3 id=\"does-mongodb-implement-acid\">Does MongoDB implement ACID?</h3>\n\n<p>Before implementing transactions? Not really. Of course, there are some properties of ACID that are present (as stated earlier), but before version 4.0 they were impossible to achieve in a distributed ecosystem.</p>\n\n<p>Here’s an excerpt from the MongoDB website: <a href=\"https://www.mongodb.com/basics/acid-transactions\">we estimate that 80%-90% of applications that leverage the document model will not need to utilize transactions in MongoDB</a>.</p>\n\n<p>Alas, when you need to make changes to multiple documents, or worse, if they are split across multiple shards, then there is no guarantee that the changes will adhere to ACID properties. That’s why the need for ACID transactions arose.</p>\n\n<p>Fortunately, since version 4.0 transactions were added to MongoDB, first for multi-document changes, and then, in 4.2, for distributed data.</p>\n\n<h3 id=\"specifics-of-mongodb-transactions\">Specifics of MongoDB transactions</h3>\n\n<p>Having in mind the differences between MongoDB and SQL DB engines, we need to first take a look at how transactions in Mongo are specified. Since the problems that arise from having multiple documents, replica sets and shards differ from the issues of concurrent access to a table row, resolutions to these problems are also different in nature.</p>\n\n<p>The transaction in MongoDB is denoted by two properties: <strong>ReadConcern</strong> and <strong>WriteConcern</strong>.</p>\n\n<p>A <strong>ReadConcern</strong> property is used to control the consistency and isolation of the data we read from the database.</p>\n\n<p>Similarly, the <strong>WriteConcern</strong> property is us defining when we consider the data we write to be consistent in the database.</p>\n\n<p>(Side note: when we are talking about majority we are talking about calculated majority. You can read more about it in <a href=\"https://www.mongodb.com/docs/manual/reference/write-concern/#std-label-calculating-majority-count\">Calculating majority count</a>)</p>\n\n<p>We distinguish between three levels of <code class=\"language-plaintext highlighter-rouge\">ReadConcern</code> for transactions (others are unavailable to use in this case):</p>\n\n<ul>\n  <li>local, which reads the latest data from a node that has been queried. There are no guarantees that the data read is the most recent across the system,</li>\n  <li>majority, which reads the data at the point of majority-commit. Said point is calculated by the primary node. This ReadConcern doesn’t guarantee consistency unless WriteConcern of at least majority is also stated,</li>\n  <li>snapshot, which reads from a snapshot of majority-commited data. This ReadConcern level is mainly only available in transactions (so we can’t use it in single-document reads save for some outliers) and provides its benefits mainly with sharded transactions as it guarantees that the data is synchronized across shards</li>\n</ul>\n\n<p>As we can see, we can draw some parallels between MongoDB’s ReadConcern options and the SQL world, where local would be equal to READ UNCOMMITED, majority would be similar to REPEATABLE READ and snapshot has near likeness to SERIALIZABLE.</p>\n\n<p>What about WriteConcerns? There are three main descriptors:</p>\n<ul>\n  <li>1, which basically means that we are only interested in primary node committing the changes. Unfortunately, using this WriteConcern means that you will have no guarantees for any of the ReadConcerns stated above,</li>\n  <li>Any {number} greater than 1 states that we want to get the data committed by the primary and {number - 1} of secondary nodes. This WriteConcern depends on the number of nodes in the system, since it can denote more than the majority of the nodes and in this case would provide us with read guarantees,</li>\n  <li>majority, which means that majority of nodes acknowledge the changes in data. This WriteConcern provides us with read guarantees, and also gives us benefits of eventual consistency.</li>\n</ul>\n\n<h3 id=\"enough-theory-i-want-to-see-it-in-action\">Enough theory, I want to see it in action!</h3>\n\n<p>For this example I’m using <a href=\"https://www.mongodb.com/docs/manual/installation/\">MongoDB community edition 6.0 for macOS</a>.</p>\n\n<p>I’ve created a MongoDB server consisting of one config database and one shard replica set with three members. You can find the steps in the official MongoDB <a href=\"https://www.mongodb.com/docs/manual/tutorial/deploy-shard-cluster/\">documentation</a>.</p>\n\n<p>To start, we need some data that’s already present in the database, so that we can see the changes that are being made. First, let’s connect to one of our nodes in a replica set:</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">mongosh --host localhost --port 27027</code></p>\n\n<p>Then, let’s insert the following data:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">blog</span><span class=\"p\">.</span><span class=\"nx\">insertMany</span><span class=\"p\">([</span>\n    <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">GC, hands off my data!</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">author</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Allegro Blogperson</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">date</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-06-30</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">url</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">https://blog.allegro.tech/2022/06/gc-hands-off-my-data.html</span><span class=\"dl\">\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">How to facilitate EventStorming workshops</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">author</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Blog Stormer</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">date</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-07-19</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">url</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">https://blog.allegro.tech/2022/07/event-storming-workshops.html</span><span class=\"dl\">\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">MBox: server-driven UI for mobile apps</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">author</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Mobile Guru</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">date</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-08-03</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">url</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">https://blog.allegro.tech/2022/08/mbox-server-driven-ui-for-mobile-apps.html</span><span class=\"dl\">\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>Let’s also connect to a different node in our replica set:</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">mongosh --host localhost --port 27028</code></p>\n\n<p>We can verify here that the data is present:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>db.blog.find()\n</code></pre></div></div>\n\n<p>This should return all our data that we inserted earlier.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n    <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"nx\">ObjectId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">6311eebd6effda71326b35d3</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">MBox: server-driven UI for mobile apps</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Mobile Guru</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-08-03</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://blog.allegro.tech/2022/08/mbox-server-driven-ui-for-mobile-apps.html</span><span class=\"dl\">'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n    <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"nx\">ObjectId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">6311eebd6effda71326b35d2</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">How to facilitate EventStorming workshops</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Blog Stormer</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-07-19</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://blog.allegro.tech/2022/07/event-storming-workshops.html</span><span class=\"dl\">'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n    <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"nx\">ObjectId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">6311eebd6effda71326b35d1</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">GC, hands off my data!</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Allegro Blogperson</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-06-30</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://blog.allegro.tech/2022/06/gc-hands-off-my-data.html</span><span class=\"dl\">'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>Time to add some data in a transaction. To do that, we first need to establish a transaction using the following command (in the first shell):</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">var session = db.getMongo().startSession()</code></p>\n\n<p>After we start the session, it’s time to open the transaction:</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">session.startTransaction({\"readConcern\": {\"level\": \"snapshot\"}, \"writeConcern\": {\"w\": \"majority\"}})</code></p>\n\n<p>Then, to make sure that we are using our collection in the context of a session, we need to run this:</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">var blog = session.getDatabase('test').getCollection('blog');</code></p>\n\n<p>We can now insert new data into our collection while transaction is active:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">blog</span><span class=\"p\">.</span><span class=\"nx\">insertOne</span><span class=\"p\">({</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Transactions in MongoDB</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">author</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Piotr Kisielewicz</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">date</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-11-30</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">url</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">https://blog.allegro.tech/2022/11/transactions-in-mongodb.html</span><span class=\"dl\">\"</span>\n    <span class=\"p\">})</span>\n</code></pre></div></div>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{acknowledged: true, insertedId: ObjectId(\"6319e60accc51dfa32ca495a\")}\n</code></pre></div></div>\n\n<p>Before committing our transaction, let’s try to read the data from another replica (in the second shell which we opened previously):</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">blog</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n    <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"nx\">ObjectId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">6311eebd6effda71326b35d3</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">MBox: server-driven UI for mobile apps</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Mobile Guru</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-08-03</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://blog.allegro.tech/2022/08/mbox-server-driven-ui-for-mobile-apps.html</span><span class=\"dl\">'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n    <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"nx\">ObjectId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">6311eebd6effda71326b35d2</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">How to facilitate EventStorming workshops</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Blog Stormer</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-07-19</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://blog.allegro.tech/2022/07/event-storming-workshops.html</span><span class=\"dl\">'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n    <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"nx\">ObjectId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">6311eebd6effda71326b35d1</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">GC, hands off my data!</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Allegro Blogperson</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-06-30</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://blog.allegro.tech/2022/06/gc-hands-off-my-data.html</span><span class=\"dl\">'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>As you can see, the new record is nowhere to be found. Let’s now commit the transaction (in the first shell):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>session.commitTransaction();\n{\n    readOnly: false,\n    ok: 1,\n    lastCommittedOpTime: Timestamp({ t: 1662641697, i: 1 }),\n    '$clusterTime': {\n        clusterTime: Timestamp({ t: 1662641697, i: 1 }),\n        signature: {\n            hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n            keyId: 0\n        }\n    },\n    operationTime: Timestamp({ t: 1662641697, i: 1 })\n}\n</code></pre></div></div>\n\n<p>And now, let’s run the same query (in the second shell):</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">blog</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n    <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"nx\">ObjectId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">6311eebd6effda71326b35d3</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">MBox: server-driven UI for mobile apps</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Mobile Guru</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-08-03</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://blog.allegro.tech/2022/08/mbox-server-driven-ui-for-mobile-apps.html</span><span class=\"dl\">'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n    <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"nx\">ObjectId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">6311eebd6effda71326b35d2</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">How to facilitate EventStorming workshops</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Blog Stormer</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-07-19</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://blog.allegro.tech/2022/07/event-storming-workshops.html</span><span class=\"dl\">'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n    <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"nx\">ObjectId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">6311eebd6effda71326b35d1</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">GC, hands off my data!</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Allegro Blogperson</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-06-30</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://blog.allegro.tech/2022/06/gc-hands-off-my-data.html</span><span class=\"dl\">'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n    <span class=\"na\">_id</span><span class=\"p\">:</span> <span class=\"nx\">ObjectId</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">6319e60accc51dfa32ca495a</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Transactions in MongoDB</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Piotr Kisielewicz</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">date</span><span class=\"p\">:</span> <span class=\"nx\">ISODate</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2022-09-30</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://blog.allegro.tech/2022/09/transactions-in-mongodb.html</span><span class=\"dl\">'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>Success! The data is now present after the commit, and we could see it being absent before committing the change.</p>\n\n<h3 id=\"it-was-all-in-cli-is-there-support-for-transactions-in-code\">It was all in CLI, is there support for transactions in code?</h3>\n\n<p>Yeah, the drivers are already there! For example, if you are using Spring, the only thing you need to do to get MongoDB transaction support is to annotate your methods with <code class=\"language-plaintext highlighter-rouge\">@Transactional</code>.</p>\n\n<p>If you’re using specific driver libraries, e.g. mongo-java-driver, then here’s a code snippet for you:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">val</span> <span class=\"py\">client</span> <span class=\"p\">=</span> <span class=\"n\">new</span> <span class=\"nc\">MongoClient</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">)</span>\n<span class=\"kd\">val</span> <span class=\"py\">db</span> <span class=\"p\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">getDatabase</span><span class=\"p\">(</span><span class=\"s\">\"blog\"</span><span class=\"p\">)</span>\n<span class=\"kd\">val</span> <span class=\"py\">blogCollection</span> <span class=\"p\">=</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">getCollection</span><span class=\"p\">(</span><span class=\"s\">\"blogPost\"</span><span class=\"p\">,</span> <span class=\"nc\">BlogPost</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">.</span><span class=\"n\">java</span><span class=\"p\">)</span>\n<span class=\"kd\">val</span> <span class=\"py\">session</span> <span class=\"p\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">startSession</span><span class=\"p\">()</span>\n<span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">startTransaction</span><span class=\"p\">(</span><span class=\"nc\">TransactionOptions</span><span class=\"p\">.</span><span class=\"nf\">builder</span><span class=\"p\">().</span><span class=\"nf\">writeConcern</span><span class=\"p\">(</span><span class=\"nc\">WriteConcern</span><span class=\"p\">.</span><span class=\"nc\">MAJORITY</span><span class=\"p\">).</span><span class=\"nf\">build</span><span class=\"p\">())</span>\n    <span class=\"n\">blogCollection</span><span class=\"p\">.</span><span class=\"nf\">insertOne</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"nc\">BlogPost</span><span class=\"p\">())</span>\n    <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">commitTransaction</span><span class=\"p\">()</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"nc\">MongoCommandException</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">abortTransaction</span><span class=\"p\">()</span>\n<span class=\"p\">}</span> <span class=\"k\">finally</span> <span class=\"p\">{</span>\n    <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"do-we-use-mongodb-transactions-at-allegro\">Do we use MongoDB transactions at Allegro?</h3>\n\n<p>Not yet. We are evaluating transactions internally and are checking whether they would fit our use cases.</p>\n\n<h3 id=\"further-reading\">Further reading</h3>\n\n<p><a href=\"https://www.mongodb.com/basics/acid-transactions\">ACID transactions in MongoDB</a></p>\n\n<p><a href=\"https://www.mongodb.com/docs/manual/core/transactions/\">MongoDB transactions</a></p>\n\n<p><a href=\"https://www.mongodb.com/docs/manual/reference/read-concern/\">Read concern</a></p>\n\n<p><a href=\"https://www.mongodb.com/docs/manual/reference/write-concern/\">Write concern</a></p>\n\n<p><a href=\"https://spring.io/projects/spring-data-mongodb\">spring-data-mongodb</a></p>\n\n<p><a href=\"https://mongodb.github.io/mongo-java-driver/3.12/javadoc/com/mongodb/client/package-summary.html\">mongo-java-driver</a></p>\n\n","contentSnippet":"Since version 4.0, transactions have been introduced to the world of Mongo databases. However, the way they work differs greatly from the tried and true world of SQL.\nIn databases like PostgreSQL or MySQL there are transactions based on tables and relations with isolation levels such as READ_UNCOMMITED, READ_COMMITED, REPEATABLE_READ and SERIALIZABLE. These help us to recognize if the record we’re working on is dirty, both when we want to access it or when someone else wants to do it after we’ve made some changes. In the world of documents, shards and replicas, the changes made to a single document are already atomic by design.\nWhy do we need transactions then? I only talked about single documents, but after all, documents can be modified in bulk, and these operations are no longer atomic.\nThat’s why transactions were introduced into MongoDB. In this blog post, we will check how they work and what their use cases are.\nWhat is a transaction?\nA database transaction is a unit of work, designed to handle the changes of data in the database. It makes sure that the output of the data is consistent and doesn’t generate errors. It helps with concurrent changes to the database, and makes the database more scalable.\nBy definition, database transactions are atomic, consistent, isolated and durable. Sounds familiar? Exactly, it’s ACID.\nDoes MongoDB implement ACID?\nBefore implementing transactions? Not really. Of course, there are some properties of ACID that are present (as stated earlier), but before version 4.0 they were impossible to achieve in a distributed ecosystem.\nHere’s an excerpt from the MongoDB website: we estimate that 80%-90% of applications that leverage the document model will not need to utilize transactions in MongoDB.\nAlas, when you need to make changes to multiple documents, or worse, if they are split across multiple shards, then there is no guarantee that the changes will adhere to ACID properties. That’s why the need for ACID transactions arose.\nFortunately, since version 4.0 transactions were added to MongoDB, first for multi-document changes, and then, in 4.2, for distributed data.\nSpecifics of MongoDB transactions\nHaving in mind the differences between MongoDB and SQL DB engines, we need to first take a look at how transactions in Mongo are specified. Since the problems that arise from having multiple documents, replica sets and shards differ from the issues of concurrent access to a table row, resolutions to these problems are also different in nature.\nThe transaction in MongoDB is denoted by two properties: ReadConcern and WriteConcern.\nA ReadConcern property is used to control the consistency and isolation of the data we read from the database.\nSimilarly, the WriteConcern property is us defining when we consider the data we write to be consistent in the database.\n(Side note: when we are talking about majority we are talking about calculated majority. You can read more about it in Calculating majority count)\nWe distinguish between three levels of ReadConcern for transactions (others are unavailable to use in this case):\nlocal, which reads the latest data from a node that has been queried. There are no guarantees that the data read is the most recent across the system,\nmajority, which reads the data at the point of majority-commit. Said point is calculated by the primary node. This ReadConcern doesn’t guarantee consistency unless WriteConcern of at least majority is also stated,\nsnapshot, which reads from a snapshot of majority-commited data. This ReadConcern level is mainly only available in transactions (so we can’t use it in single-document reads save for some outliers) and provides its benefits mainly with sharded transactions as it guarantees that the data is synchronized across shards\nAs we can see, we can draw some parallels between MongoDB’s ReadConcern options and the SQL world, where local would be equal to READ UNCOMMITED, majority would be similar to REPEATABLE READ and snapshot has near likeness to SERIALIZABLE.\nWhat about WriteConcerns? There are three main descriptors:\n1, which basically means that we are only interested in primary node committing the changes. Unfortunately, using this WriteConcern means that you will have no guarantees for any of the ReadConcerns stated above,\nAny {number} greater than 1 states that we want to get the data committed by the primary and {number - 1} of secondary nodes. This WriteConcern depends on the number of nodes in the system, since it can denote more than the majority of the nodes and in this case would provide us with read guarantees,\nmajority, which means that majority of nodes acknowledge the changes in data. This WriteConcern provides us with read guarantees, and also gives us benefits of eventual consistency.\nEnough theory, I want to see it in action!\nFor this example I’m using MongoDB community edition 6.0 for macOS.\nI’ve created a MongoDB server consisting of one config database and one shard replica set with three members. You can find the steps in the official MongoDB documentation.\nTo start, we need some data that’s already present in the database, so that we can see the changes that are being made. First, let’s connect to one of our nodes in a replica set:\nmongosh --host localhost --port 27027\nThen, let’s insert the following data:\n\ndb.blog.insertMany([\n    {\n    \"title\": \"GC, hands off my data!\",\n    \"author\": \"Allegro Blogperson\",\n    \"date\": ISODate(\"2022-06-30\"),\n    \"url\": \"https://blog.allegro.tech/2022/06/gc-hands-off-my-data.html\"\n    },\n    {\n    \"title\": \"How to facilitate EventStorming workshops\",\n    \"author\": \"Blog Stormer\",\n    \"date\": ISODate(\"2022-07-19\"),\n    \"url\": \"https://blog.allegro.tech/2022/07/event-storming-workshops.html\"\n    },\n    {\n    \"title\": \"MBox: server-driven UI for mobile apps\",\n    \"author\": \"Mobile Guru\",\n    \"date\": ISODate(\"2022-08-03\"),\n    \"url\": \"https://blog.allegro.tech/2022/08/mbox-server-driven-ui-for-mobile-apps.html\"\n    }\n])\n\n\nLet’s also connect to a different node in our replica set:\nmongosh --host localhost --port 27028\nWe can verify here that the data is present:\n\ndb.blog.find()\n\n\nThis should return all our data that we inserted earlier.\n\n[\n    {\n    _id: ObjectId(\"6311eebd6effda71326b35d3\"),\n    title: 'MBox: server-driven UI for mobile apps',\n    author: 'Mobile Guru',\n    date: ISODate(\"2022-08-03\"),\n    url: 'https://blog.allegro.tech/2022/08/mbox-server-driven-ui-for-mobile-apps.html'\n    },\n    {\n    _id: ObjectId(\"6311eebd6effda71326b35d2\"),\n    title: 'How to facilitate EventStorming workshops',\n    author: 'Blog Stormer',\n    date: ISODate(\"2022-07-19\"),\n    url: 'https://blog.allegro.tech/2022/07/event-storming-workshops.html'\n    },\n    {\n    _id: ObjectId(\"6311eebd6effda71326b35d1\"),\n    title: 'GC, hands off my data!',\n    author: 'Allegro Blogperson',\n    date: ISODate(\"2022-06-30\"),\n    url: 'https://blog.allegro.tech/2022/06/gc-hands-off-my-data.html'\n    }\n]\n\n\nTime to add some data in a transaction. To do that, we first need to establish a transaction using the following command (in the first shell):\nvar session = db.getMongo().startSession()\nAfter we start the session, it’s time to open the transaction:\nsession.startTransaction({\"readConcern\": {\"level\": \"snapshot\"}, \"writeConcern\": {\"w\": \"majority\"}})\nThen, to make sure that we are using our collection in the context of a session, we need to run this:\nvar blog = session.getDatabase('test').getCollection('blog');\nWe can now insert new data into our collection while transaction is active:\n\nblog.insertOne({\n        \"title\": \"Transactions in MongoDB\",\n        \"author\": \"Piotr Kisielewicz\",\n        \"date\": ISODate(\"2022-11-30\"),\n        \"url\": \"https://blog.allegro.tech/2022/11/transactions-in-mongodb.html\"\n    })\n\n\n\n{acknowledged: true, insertedId: ObjectId(\"6319e60accc51dfa32ca495a\")}\n\n\nBefore committing our transaction, let’s try to read the data from another replica (in the second shell which we opened previously):\n\ndb.blog.find()\n[\n    {\n    _id: ObjectId(\"6311eebd6effda71326b35d3\"),\n    title: 'MBox: server-driven UI for mobile apps',\n    author: 'Mobile Guru',\n    date: ISODate(\"2022-08-03\"),\n    url: 'https://blog.allegro.tech/2022/08/mbox-server-driven-ui-for-mobile-apps.html'\n    },\n    {\n    _id: ObjectId(\"6311eebd6effda71326b35d2\"),\n    title: 'How to facilitate EventStorming workshops',\n    author: 'Blog Stormer',\n    date: ISODate(\"2022-07-19\"),\n    url: 'https://blog.allegro.tech/2022/07/event-storming-workshops.html'\n    },\n    {\n    _id: ObjectId(\"6311eebd6effda71326b35d1\"),\n    title: 'GC, hands off my data!',\n    author: 'Allegro Blogperson',\n    date: ISODate(\"2022-06-30\"),\n    url: 'https://blog.allegro.tech/2022/06/gc-hands-off-my-data.html'\n    }\n]\n\n\nAs you can see, the new record is nowhere to be found. Let’s now commit the transaction (in the first shell):\n\nsession.commitTransaction();\n{\n    readOnly: false,\n    ok: 1,\n    lastCommittedOpTime: Timestamp({ t: 1662641697, i: 1 }),\n    '$clusterTime': {\n        clusterTime: Timestamp({ t: 1662641697, i: 1 }),\n        signature: {\n            hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n            keyId: 0\n        }\n    },\n    operationTime: Timestamp({ t: 1662641697, i: 1 })\n}\n\n\nAnd now, let’s run the same query (in the second shell):\n\ndb.blog.find()\n[\n    {\n    _id: ObjectId(\"6311eebd6effda71326b35d3\"),\n    title: 'MBox: server-driven UI for mobile apps',\n    author: 'Mobile Guru',\n    date: ISODate(\"2022-08-03\"),\n    url: 'https://blog.allegro.tech/2022/08/mbox-server-driven-ui-for-mobile-apps.html'\n    },\n    {\n    _id: ObjectId(\"6311eebd6effda71326b35d2\"),\n    title: 'How to facilitate EventStorming workshops',\n    author: 'Blog Stormer',\n    date: ISODate(\"2022-07-19\"),\n    url: 'https://blog.allegro.tech/2022/07/event-storming-workshops.html'\n    },\n    {\n    _id: ObjectId(\"6311eebd6effda71326b35d1\"),\n    title: 'GC, hands off my data!',\n    author: 'Allegro Blogperson',\n    date: ISODate(\"2022-06-30\"),\n    url: 'https://blog.allegro.tech/2022/06/gc-hands-off-my-data.html'\n    },\n    {\n    _id: ObjectId(\"6319e60accc51dfa32ca495a\"),\n    title: 'Transactions in MongoDB',\n    author: 'Piotr Kisielewicz',\n    date: ISODate(\"2022-09-30\"),\n    url: 'https://blog.allegro.tech/2022/09/transactions-in-mongodb.html'\n    }\n]\n\n\nSuccess! The data is now present after the commit, and we could see it being absent before committing the change.\nIt was all in CLI, is there support for transactions in code?\nYeah, the drivers are already there! For example, if you are using Spring, the only thing you need to do to get MongoDB transaction support is to annotate your methods with @Transactional.\nIf you’re using specific driver libraries, e.g. mongo-java-driver, then here’s a code snippet for you:\n\nval client = new MongoClient(uri)\nval db = client.getDatabase(\"blog\")\nval blogCollection = db.getCollection(\"blogPost\", BlogPost::class.java)\nval session = client.startSession()\ntry {\n    session.startTransaction(TransactionOptions.builder().writeConcern(WriteConcern.MAJORITY).build())\n    blogCollection.insertOne(session, BlogPost())\n    session.commitTransaction()\n} catch (e: MongoCommandException) {\n    session.abortTransaction()\n} finally {\n    session.close()\n}\n\n\nDo we use MongoDB transactions at Allegro?\nNot yet. We are evaluating transactions internally and are checking whether they would fit our use cases.\nFurther reading\nACID transactions in MongoDB\nMongoDB transactions\nRead concern\nWrite concern\nspring-data-mongodb\nmongo-java-driver","guid":"https://blog.allegro.tech/2022/12/transactions-in-mongodb.html","categories":["tech","techradar","NoSQL"],"isoDate":"2022-12-20T23:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Vanilla JS is not dead! Microfrontends without web performance issues.","link":"https://blog.allegro.tech/2022/11/vanilla-js-is-not-dead.html","pubDate":"Thu, 10 Nov 2022 00:00:00 +0100","authors":{"author":[{"name":["Krzysztof Mikuta"],"photo":["https://blog.allegro.tech/img/authors/krzysztof.mikuta.jpg"],"url":["https://blog.allegro.tech/authors/krzysztof.mikuta"]}]},"content":"<p>Building a complex web platform can be a real challenge, especially when parts of it are delivered by independent teams.\nPicking out the correct architecture is crucial, but maintaining it can be even more challenging.\nFrontend microservices, aka microfrontends, is an architecture that gives a lot of flexibility, but can cause\nperformance issues in the future, if not managed well. This article presents an approach to the microfrontends\narchitecture to keep the frontend technology stack efficient based on the complexity of user interface.</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n<p>It’s 2022. In the frontend world, we have at least four major frameworks and libraries that have been around for a while\nand provide great resources to build fast and responsive user interfaces. The idea of delivering frontend components in\nvanilla JS seems to be pointless. Why should I even think about getting rid of the great features provided by well known,\nprecisely documented and strongly supported mature libraries? Well, as always, it pretty much depends on the\narchitecture. You have a single big frontend application running in React? Great! You have a couple applications with\na bunch of shared components inside an Angular monorepo? Good for you! But what if you have a big platform with huge\ntraffic, where frontend features are being delivered as independent fragments by independent teams across\nthe whole company? Well, let’s talk about the last option and go through some reasonable use cases for vanilla JS/TS as\nAllegro platform is built upon frontend microservices.</p>\n\n<h2 id=\"dealing-with-the-frontend-microservices-architecture\">Dealing with the frontend microservices architecture</h2>\n<p>The idea of splitting up the frontend of a big e-commerce platform into smaller pieces has been described in\nthe article <a href=\"/2016/03/Managing-Frontend-in-the-microservices-architecture.html\">Managing Frontend in the Microservices Architecture</a>.\nIt’s been 6 years since the article appeared and even more since the architecture was implemented at Allegro.\nNowadays, we manage over 1000 microservices and 600+ Opbox components that power the Allegro platform.\nWe can say that it works pretty well for us. As software engineers, we don’t need to worry about things like routing,\nSSR or monitoring, because they’re already served by Opbox. Also, we have overcome the problems the architecture causes\nand implemented efficient solutions. One problem has been described in the article\n<a href=\"/2021/07/css-architecture-and-performance-of-micro-frontends.html\">CSS Architecture and Performance in Micro Frontends</a>.</p>\n\n<p>To clear things up a little bit, imagine building a page made of tens of components, delivered by independent teams.\nEvery component, even the simplest one was implemented using one of the popular libraries. Seems harmless, but it can\ntruly hurt web performance. Rendering plain HTML on the server is much faster than evaluation of library mechanisms to\nproduce static markup. Moreover, client bundles need to be fetched in a browser, but they are pretty heavy as they\ninclude not only the custom code, but the libraries’ code as well… It’s going to take even more time when the internet\nconnection is weak (try setting up throttling in the dev tools). Well, undeniably working with distributed components\nrequires a lot of discipline. Also, monitoring and measuring is pretty important to figure out if the components\nthe team takes care of perform well. If you want to learn more, take a look at the article\n<a href=\"/2021/06/measuring-web-performance.html\">Measuring Web Performance</a>.</p>\n\n<p>How much discipline do you need to keep the system fast and efficient? Enough to have a reasonable approach to\npick out the correct technology to solve the problem. You know you’re asking for trouble, when you decide to use\na complex rendering library for rendering static labels that don’t behave in a reactive way. What could you do instead?\nJust map data to plain HTML! This is the case for vanilla JS. In the next paragraph, I’ll present and discuss\nthe approach we use on our team.</p>\n\n<h2 id=\"pick-the-right-technology\">Pick the right technology</h2>\n<p>For organizational purposes, we decided to define three types of complexity of UI components and assigned\nthree technology stacks that are suitable to solve different kinds of problems. Let’s dive into the details.</p>\n\n<h3 id=\"simple-ui-component\">Simple UI Component</h3>\n<p>This one doesn’t do anything spectacular. In most cases, it’s entirely rendered on the server and has no\nclient side scripting, or it may have some simple event handling. You can easily navigate through the platform using\njust an HTML anchor, can’t you? Also, CSS is so powerful nowadays that javascript is not always necessary to implement\ndynamic behaviors in browsers. The approach for such a component is simple: take the response of the backend service,\nwrite some HTML and CSS representing this data and send it to the client.</p>\n\n<h3 id=\"ui-component-that-is-reactive\">UI Component that is reactive</h3>\n<p>In this case, the component is rendered server-side, but the client side scripts run in a browser\nto provide reactivity. Partial changes of the state require updating the existing parts of the DOM. The challenge here\nis to implement a fine-grained reactivity mechanism, organize the code in a functional manner and separate\nside effects. The first thing can be easily handled using reactive streams like <a href=\"https://github.com/staltz/xstream\">xstream</a>,\nwhich is lighter than the well known rxjs, but still powerful. To keep code organized in a functional manner we borrowed\nthe <a href=\"https://cycle.js.org/model-view-intent.html\">Model-View-Intent pattern from cycle.js</a> and adjusted it to our case,\nwhere the HTML is provided by the server and “hydrated” on the client side. The idea is simple: we mount event handlers\nin Intent, map it to state in Model and react to changes in View. At the end of the system there are side effects\nthat run as a result of reactive subscriptions inside View. It’s still vanilla JS/TS on the server side and\nvanilla JS/TS with a touch of reactivity on the client side.</p>\n\n<h3 id=\"complex-ui-component\">Complex UI component</h3>\n<p>This one can be rendered on the server side, but then always hydrates on the client side. It can also be entirely\nrendered on the client side, forming a single-page application. It’s strongly reactive, changes its state constantly\nand re-renders. Also, state changes affect many parts of the DOM. You surely know it is a great use case for libraries\nlike React, where state changes trigger a reconciliation algorithm, which figures out what has changed and operates on\nan effective layer called Virtual DOM. I don’t think this approach requires any more explanation, as it’s the most\npopular approach in the frontend world nowadays. We just write one piece of code, run renderToString() on the server\nand hydrate() on the client, that’s it.</p>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n<p>The presented approach may sound artificially complicated, but it does do its job. Using a sledgehammer to crack a nut\ncauses web performance issues that can go even further in a distributed environment. Spending a little bit more time on\nplanning features to pick an effective technology definitely pays off! Here are some conclusions based on our experience\nwe would like to share:</p>\n<ul>\n  <li>Don’t reinvent the wheel! Look for small, stable, well-supported packages in the npm registry.\nUse <a href=\"https://bundlephobia.com/\">bundlephobia.com</a> to analyze them and look for alternatives if needed.</li>\n  <li>If code complexity grows, use a library/framework. Don’t write your own! I know it’s tempting and trendy,\nbut you will end up maintaining this code instead of focusing on business features.</li>\n  <li>Monitor bundle sizes to ensure your code transpiles efficiently. You will figure out which expressions add more code\nto the bundle. You can set up extra tests for checking bundle sizes during your build pipeline to ensure you’re not\nrunning out of limits.</li>\n  <li>Separate side effects like DOM manipulations from business logic. It will make the code more predictable\nand easily testable. There are a bunch of patterns and state management libraries that can help you.</li>\n  <li>Respond fast by rendering on the server side, and hydrate wisely on the client side. If the component you create\nis not reactive, make it a server component that does not need to hydrate on the client. It’s a great way to optimize\nwebsite interactivity.</li>\n</ul>\n","contentSnippet":"Building a complex web platform can be a real challenge, especially when parts of it are delivered by independent teams.\nPicking out the correct architecture is crucial, but maintaining it can be even more challenging.\nFrontend microservices, aka microfrontends, is an architecture that gives a lot of flexibility, but can cause\nperformance issues in the future, if not managed well. This article presents an approach to the microfrontends\narchitecture to keep the frontend technology stack efficient based on the complexity of user interface.\nIntroduction\nIt’s 2022. In the frontend world, we have at least four major frameworks and libraries that have been around for a while\nand provide great resources to build fast and responsive user interfaces. The idea of delivering frontend components in\nvanilla JS seems to be pointless. Why should I even think about getting rid of the great features provided by well known,\nprecisely documented and strongly supported mature libraries? Well, as always, it pretty much depends on the\narchitecture. You have a single big frontend application running in React? Great! You have a couple applications with\na bunch of shared components inside an Angular monorepo? Good for you! But what if you have a big platform with huge\ntraffic, where frontend features are being delivered as independent fragments by independent teams across\nthe whole company? Well, let’s talk about the last option and go through some reasonable use cases for vanilla JS/TS as\nAllegro platform is built upon frontend microservices.\nDealing with the frontend microservices architecture\nThe idea of splitting up the frontend of a big e-commerce platform into smaller pieces has been described in\nthe article Managing Frontend in the Microservices Architecture.\nIt’s been 6 years since the article appeared and even more since the architecture was implemented at Allegro.\nNowadays, we manage over 1000 microservices and 600+ Opbox components that power the Allegro platform.\nWe can say that it works pretty well for us. As software engineers, we don’t need to worry about things like routing,\nSSR or monitoring, because they’re already served by Opbox. Also, we have overcome the problems the architecture causes\nand implemented efficient solutions. One problem has been described in the article\nCSS Architecture and Performance in Micro Frontends.\nTo clear things up a little bit, imagine building a page made of tens of components, delivered by independent teams.\nEvery component, even the simplest one was implemented using one of the popular libraries. Seems harmless, but it can\ntruly hurt web performance. Rendering plain HTML on the server is much faster than evaluation of library mechanisms to\nproduce static markup. Moreover, client bundles need to be fetched in a browser, but they are pretty heavy as they\ninclude not only the custom code, but the libraries’ code as well… It’s going to take even more time when the internet\nconnection is weak (try setting up throttling in the dev tools). Well, undeniably working with distributed components\nrequires a lot of discipline. Also, monitoring and measuring is pretty important to figure out if the components\nthe team takes care of perform well. If you want to learn more, take a look at the article\nMeasuring Web Performance.\nHow much discipline do you need to keep the system fast and efficient? Enough to have a reasonable approach to\npick out the correct technology to solve the problem. You know you’re asking for trouble, when you decide to use\na complex rendering library for rendering static labels that don’t behave in a reactive way. What could you do instead?\nJust map data to plain HTML! This is the case for vanilla JS. In the next paragraph, I’ll present and discuss\nthe approach we use on our team.\nPick the right technology\nFor organizational purposes, we decided to define three types of complexity of UI components and assigned\nthree technology stacks that are suitable to solve different kinds of problems. Let’s dive into the details.\nSimple UI Component\nThis one doesn’t do anything spectacular. In most cases, it’s entirely rendered on the server and has no\nclient side scripting, or it may have some simple event handling. You can easily navigate through the platform using\njust an HTML anchor, can’t you? Also, CSS is so powerful nowadays that javascript is not always necessary to implement\ndynamic behaviors in browsers. The approach for such a component is simple: take the response of the backend service,\nwrite some HTML and CSS representing this data and send it to the client.\nUI Component that is reactive\nIn this case, the component is rendered server-side, but the client side scripts run in a browser\nto provide reactivity. Partial changes of the state require updating the existing parts of the DOM. The challenge here\nis to implement a fine-grained reactivity mechanism, organize the code in a functional manner and separate\nside effects. The first thing can be easily handled using reactive streams like xstream,\nwhich is lighter than the well known rxjs, but still powerful. To keep code organized in a functional manner we borrowed\nthe Model-View-Intent pattern from cycle.js and adjusted it to our case,\nwhere the HTML is provided by the server and “hydrated” on the client side. The idea is simple: we mount event handlers\nin Intent, map it to state in Model and react to changes in View. At the end of the system there are side effects\nthat run as a result of reactive subscriptions inside View. It’s still vanilla JS/TS on the server side and\nvanilla JS/TS with a touch of reactivity on the client side.\nComplex UI component\nThis one can be rendered on the server side, but then always hydrates on the client side. It can also be entirely\nrendered on the client side, forming a single-page application. It’s strongly reactive, changes its state constantly\nand re-renders. Also, state changes affect many parts of the DOM. You surely know it is a great use case for libraries\nlike React, where state changes trigger a reconciliation algorithm, which figures out what has changed and operates on\nan effective layer called Virtual DOM. I don’t think this approach requires any more explanation, as it’s the most\npopular approach in the frontend world nowadays. We just write one piece of code, run renderToString() on the server\nand hydrate() on the client, that’s it.\nConclusions\nThe presented approach may sound artificially complicated, but it does do its job. Using a sledgehammer to crack a nut\ncauses web performance issues that can go even further in a distributed environment. Spending a little bit more time on\nplanning features to pick an effective technology definitely pays off! Here are some conclusions based on our experience\nwe would like to share:\nDon’t reinvent the wheel! Look for small, stable, well-supported packages in the npm registry.\nUse bundlephobia.com to analyze them and look for alternatives if needed.\nIf code complexity grows, use a library/framework. Don’t write your own! I know it’s tempting and trendy,\nbut you will end up maintaining this code instead of focusing on business features.\nMonitor bundle sizes to ensure your code transpiles efficiently. You will figure out which expressions add more code\nto the bundle. You can set up extra tests for checking bundle sizes during your build pipeline to ensure you’re not\nrunning out of limits.\nSeparate side effects like DOM manipulations from business logic. It will make the code more predictable\nand easily testable. There are a bunch of patterns and state management libraries that can help you.\nRespond fast by rendering on the server side, and hydrate wisely on the client side. If the component you create\nis not reactive, make it a server component that does not need to hydrate on the client. It’s a great way to optimize\nwebsite interactivity.","guid":"https://blog.allegro.tech/2022/11/vanilla-js-is-not-dead.html","categories":["tech","frontend","microservices","webperf","javascript"],"isoDate":"2022-11-09T23:00:00.000Z","thumbnail":"images/post-headers/javascript.png"}],"jobs":[{"id":"743999887732263","name":"Software Engineer (.NET) - Allegro Pay","uuid":"3b4165a0-b9ed-4a2a-8462-ebe386fcac95","jobAdId":"f087184f-98b7-4503-a2a7-38c97b94cbba","refNumber":"REF3170Y","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-02-21T11:01:15.218Z","location":{"city":"Warszawa, Kraków, Wrocław, Poznań","region":"","country":"pl","address":"","postalCode":"","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"9c8396d4-11a6-443c-897c-15f29221a3fd","valueLabel":"Allegro Pay sp. z o.o."}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999887732263","creator":{"name":"Martyna Stafa"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999887722143","name":"Senior Software Engineer (Java/Kotlin) - Delivery Experience","uuid":"1cbc61c9-f384-4fde-9d0a-170f97b24197","jobAdId":"bd251e77-8c7b-4496-90d8-f824c3193f46","refNumber":"REF3176R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-02-21T10:11:38.463Z","location":{"city":"Warszawa, Poznań","region":"","country":"pl","address":"","postalCode":"","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"engineering","label":"Engineering"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"743f6067-ce19-4a83-9a0d-10d49cd63004","valueLabel":"Delivery Experience"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999887722143","creator":{"name":"Martyna Maziarska"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999887718389","name":"Senior Software Engineer (Java/Kotlin) - Delivery Experience","uuid":"5d830064-a34c-4c77-9437-e85799056e5c","jobAdId":"0b27b21b-60a3-40ba-90e4-674a3eea3c9b","refNumber":"REF3176R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-02-21T10:11:20.384Z","location":{"city":"Warszawa, Poznań","region":"","country":"pl","address":"","postalCode":"","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"engineering","label":"Engineering"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"743f6067-ce19-4a83-9a0d-10d49cd63004","valueLabel":"Delivery Experience"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999887718389","creator":{"name":"Martyna Maziarska"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}},{"id":"743999887721826","name":"Software Engineer (Java/Kotlin) - Delivery Experience","uuid":"a8fc50dd-d7f1-4745-8120-028d5311c952","jobAdId":"85606577-38b1-4fb8-86e3-b0347a2ddaa0","refNumber":"REF3176R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-02-21T10:10:49.084Z","location":{"city":"Warszawa, Poznań","region":"","country":"pl","address":"","postalCode":"","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"engineering","label":"Engineering"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"743f6067-ce19-4a83-9a0d-10d49cd63004","valueLabel":"Delivery Experience"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999887721826","creator":{"name":"Martyna Maziarska"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999887720241","name":"Software Engineer (Java/Kotlin) - Delivery Experience","uuid":"ed0d92f1-9fd3-4e92-8d82-706c4f15c8e4","jobAdId":"84355f9e-bb22-4de6-b230-3fc6bbaef2b6","refNumber":"REF3176R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-02-21T10:10:24.105Z","location":{"city":"Warszawa, Poznań","region":"","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"engineering","label":"Engineering"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"60cb31a9c87e511299a3a050","fieldLabel":"Department II","valueId":"743f6067-ce19-4a83-9a0d-10d49cd63004","valueLabel":"Delivery Experience"},{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999887720241","creator":{"name":"Martyna Maziarska"},"language":{"code":"pl","label":"Polish","labelNative":"polski"}}],"events":[{"created":1675343646000,"duration":5400000,"id":"291357306","name":"Allegro Tech Live #34 - Cloud: duże dane = duży problem?","date_in_series_pattern":false,"status":"past","time":1676566800000,"local_date":"2023-02-16","local_time":"18:00","updated":1676576868000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":58,"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/291357306/","description":"**➡ Transmisja i nagranie ze spotkania:** [https://www.youtube.com/watch?v=66ub1e8kPWg](https://www.youtube.com/watch?v=66ub1e8kPWg) **Allegro Tech Live** to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Zazwyczaj spotykaliśmy się w…","visibility":"public","member_pay_fee":false},{"created":1673254351000,"duration":7200000,"id":"290822249","name":"Allegro Tech Live #33 - iOS od podszewki","date_in_series_pattern":false,"status":"past","time":1674147600000,"local_date":"2023-01-19","local_time":"18:00","updated":1674157831000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":39,"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/290822249/","description":"**➡ Transmisja i nagranie ze spotkania:** **[https://www.youtube.com/watch?v=c-AIoOnby3M](https://www.youtube.com/watch?v=c-AIoOnby3M)** **Allegro Tech Live** to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Zazwyczaj spotykaliśmy się w…","visibility":"public","member_pay_fee":false},{"created":1669910743000,"duration":7200000,"id":"290082009","name":"Allegro Tech Live #32 - Storage (nie)standardowy","date_in_series_pattern":false,"status":"past","time":1671123600000,"local_date":"2022-12-15","local_time":"18:00","updated":1671134039000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":53,"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/290082009/","description":"**➡ Transmisja spotkania:** **[https://www.youtube.com/watch?v=fQLyw_IpaPQ ](https://www.youtube.com/watch?v=fQLyw_IpaPQ)** **Allegro Tech Live** to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Zazwyczaj spotykaliśmy się w naszych biurach,…","visibility":"public","member_pay_fee":false},{"created":1667908912000,"duration":5400000,"id":"289621472","name":"Allegro Tech Live #31 - Frontend: reporting i optymalizacje","date_in_series_pattern":false,"status":"past","time":1669914000000,"local_date":"2022-12-01","local_time":"18:00","updated":1669925130000,"utc_offset":3600000,"waitlist_count":0,"yes_rsvp_count":43,"is_online_event":true,"group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/289621472/","description":"**➡ Rejestracja:** https://app.evenea.pl/event/allegro-tech-talk-31 **Allegro Tech Live** to w 100% zdalna odsłona naszych stacjonarnych meetupów Allegro Tech Talks. Zazwyczaj spotykaliśmy się w naszych biurach, ale tym…","visibility":"public","member_pay_fee":false}],"podcasts":[{"title":"S03E12 - Alina Magowska, Agnieszka Jagusiak - O pracy liderek i liderów w Allegro","link":"https://podcast.allegro.tech/o-pracy-liderek-i-liderow-w-allegro/","pubDate":"Thu, 23 Feb 2023 00:00:00 GMT","content":"Jakimi umiejętnościami powinny wyróżniać się osoby na stanowiskach liderskich? Czy wykształcenie techniczne to “must have”, aby dołączyć do zespołów Tech & Data w Allegro? Czym charakteryzuje się praca liderek i liderów w Allegro oraz jak wspieramy ich rozwój? Jaki wpływ na produkt oraz organizację mają liderki i liderzy w Allegro? Jak zacząć budowanie swojej ścieżki kariery w roli liderskiej? Jakich wyzwań się spodziewać i jak sobie z nimi poradzić? Posłuchajcie rozmowy z udziałem Aliny Magowskiej - Dyrektorki obszaru User Experience i Agnieszki Jagusiak - Senior Managerki w zespole Group IT Services w Allegro.","contentSnippet":"Jakimi umiejętnościami powinny wyróżniać się osoby na stanowiskach liderskich? Czy wykształcenie techniczne to “must have”, aby dołączyć do zespołów Tech & Data w Allegro? Czym charakteryzuje się praca liderek i liderów w Allegro oraz jak wspieramy ich rozwój? Jaki wpływ na produkt oraz organizację mają liderki i liderzy w Allegro? Jak zacząć budowanie swojej ścieżki kariery w roli liderskiej? Jakich wyzwań się spodziewać i jak sobie z nimi poradzić? Posłuchajcie rozmowy z udziałem Aliny Magowskiej - Dyrektorki obszaru User Experience i Agnieszki Jagusiak - Senior Managerki w zespole Group IT Services w Allegro.","guid":"https://podcast.allegro.tech/o-pracy-liderek-i-liderow-w-allegro/","isoDate":"2023-02-23T00:00:00.000Z"},{"title":"S03E11 - Bartosz Kaczyński - O pracy i rozwoju w zespole IT Support","link":"https://podcast.allegro.tech/o-pracy-i-rozwoju-w-zespole-it-support/","pubDate":"Thu, 26 Jan 2023 00:00:00 GMT","content":"Jak wygląda praca w zespole, który zawsze udziela odpowiedzi na zadane pytania? Co można zautomatyzować w obszarze wsparcia IT i jaki to może mieć cel? Czy praca w zespole IT Support jest bramą do kariery w IT, może dawać możliwości rozwoju i przynosić satysfakcję? Jakie wyzwania przed tym zespołem w Allegro postawiła pandemia koronawirusa? O umożliwianiu pracownikom Grupy Allegro sprawnej pracy na narzędziach i usługach IT dostarczanych przez zespół Business Services & Automation opowiada Bartosz Kaczyński - IT Service Operations Manager w Allegro.","contentSnippet":"Jak wygląda praca w zespole, który zawsze udziela odpowiedzi na zadane pytania? Co można zautomatyzować w obszarze wsparcia IT i jaki to może mieć cel? Czy praca w zespole IT Support jest bramą do kariery w IT, może dawać możliwości rozwoju i przynosić satysfakcję? Jakie wyzwania przed tym zespołem w Allegro postawiła pandemia koronawirusa? O umożliwianiu pracownikom Grupy Allegro sprawnej pracy na narzędziach i usługach IT dostarczanych przez zespół Business Services & Automation opowiada Bartosz Kaczyński - IT Service Operations Manager w Allegro.","guid":"https://podcast.allegro.tech/o-pracy-i-rozwoju-w-zespole-it-support/","isoDate":"2023-01-26T00:00:00.000Z"},{"title":"S03E10 - Zosia Śmierzchalska, Jakub Dodot - O tym jak przygotowujemy rozwiązania dla klientów w oparciu o badania","link":"https://podcast.allegro.tech/o-rozwiazaniach-opartych-na-badaniach/","pubDate":"Thu, 12 Jan 2023 00:00:00 GMT","content":"W jaki sposób przygotowujemy rozwiązania dla klientów Allegro w oparciu o badania? Jak wygląda ścieżka projektu od eksploracji do wdrożenia i późniejszego monitorowania? Jaką korzyść dają badania usability? Dlaczego warto, aby badanie było prowadzone przez dwoje badaczy? O współpracy między badaczami i projektantami UX rozmawialiśmy z Zofią Śmierzchalską - Design Managerką i Jakubem Dodotem - Senior UX Research Managerem w Allegro.","contentSnippet":"W jaki sposób przygotowujemy rozwiązania dla klientów Allegro w oparciu o badania? Jak wygląda ścieżka projektu od eksploracji do wdrożenia i późniejszego monitorowania? Jaką korzyść dają badania usability? Dlaczego warto, aby badanie było prowadzone przez dwoje badaczy? O współpracy między badaczami i projektantami UX rozmawialiśmy z Zofią Śmierzchalską - Design Managerką i Jakubem Dodotem - Senior UX Research Managerem w Allegro.","guid":"https://podcast.allegro.tech/o-rozwiazaniach-opartych-na-badaniach/","isoDate":"2023-01-12T00:00:00.000Z"},{"title":"S03E09 - Adrianna Dworniak, Łukasz Gomółka - O Allegro Family","link":"https://podcast.allegro.tech/o-allegro-family/","pubDate":"Thu, 15 Dec 2022 00:00:00 GMT","content":"Czy współpraca dwóch Product Managerów przy jednym produkcie jest możliwa i jak zadbać o jej efektywność? Czym jest “churn” i na czym polega w branży e-commerce? Co wspólnego z błędnymi rekomendacjami zakupowymi mają maty do ćwiczeń? Jak rozwiązywać wielopłaszczyznowe problemy, dzięki kompleksowemu zrozumieniu perspektywy klienta i bez wykorzystywania restrykcji? Jak powstawało Allegro Family oraz dlaczego czasem warto zacząć weryfikację pomysłu na produkt od rozmowy z… teściową? Na te i inne pytania odpowiadają  Adrianna Dworniak - Senior Product Manager i Łukasz Gomółka - Product Team Manager w Allegro.","contentSnippet":"Czy współpraca dwóch Product Managerów przy jednym produkcie jest możliwa i jak zadbać o jej efektywność? Czym jest “churn” i na czym polega w branży e-commerce? Co wspólnego z błędnymi rekomendacjami zakupowymi mają maty do ćwiczeń? Jak rozwiązywać wielopłaszczyznowe problemy, dzięki kompleksowemu zrozumieniu perspektywy klienta i bez wykorzystywania restrykcji? Jak powstawało Allegro Family oraz dlaczego czasem warto zacząć weryfikację pomysłu na produkt od rozmowy z… teściową? Na te i inne pytania odpowiadają  Adrianna Dworniak - Senior Product Manager i Łukasz Gomółka - Product Team Manager w Allegro.","guid":"https://podcast.allegro.tech/o-allegro-family/","isoDate":"2022-12-15T00:00:00.000Z"}]},"__N_SSG":true}