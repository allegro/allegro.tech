{"pageProps":{"posts":[{"title":"Debugging hangs - piecing together why nothing happens","link":"https://blog.allegro.tech/2023/05/debugging-hangs.html","pubDate":"Wed, 31 May 2023 00:00:00 +0200","authors":{"author":[{"name":["Łukasz Rokita"],"photo":["https://blog.allegro.tech/img/authors/lukasz.rokita.jpg"],"url":["https://blog.allegro.tech/authors/lukasz.rokita"]}]},"content":"<p>As a part of a broader initiative of refreshing Allegro platform, we are upgrading our internal libraries to Spring Boot 3.0 and Java 17.\nThe task is daunting and filled with challenges,\nhowever overall progress is steady and thanks to the modular nature of our code it should end in finite time.\nEveryone who has performed such an upgrade knows that you need to expect the unexpected and at the end of the day prepare for lots of debugging.\nNo amount of migration guide would prepare you for what’s coming in the field.\nIn the words of Donald Rumsfeld there are unknown unknowns and we need to be equipped with the tools to uncover these unknowns and patch them up.\nIn this blog post I’d like to walk you through a process that should show where the application hangs,\nalthough there seems to be nothing wrong with it. I will also show that you don’t always know what code you have – problem known as dependecy hell,\nplace we got quite cosy in during this upgrade.</p>\n\n<h2 id=\"the-change\">The change</h2>\n<p>Note that we keep versions as separate key–value pairs in <code class=\"language-plaintext highlighter-rouge\">build.gradle</code> files and reference them in dependencies by key.\nUpdating often means a single line change. The upgrade is trivial and git diff looks like this.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ext.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n]\n\next.versions = [\n+        spring         : '6.0.5',\n+        spock          : '2.4-M1-groovy-4.0',\n+        groovy         : '4.0.9',\n]\n</code></pre></div></div>\n<p>Nothing much happens. We upgrade Spring and since there are some problems with Spock not working well with the newest Spring\nwe need to upgrade it as well, along with Groovy. This is the easy part.\nNow we run the tests and expect to be either elated with the sight of a successful build or greeted with descriptive error messages\nthat help us quickly patch the issue. Nobody expects anything and in this case this is an unknown unknown.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>97% EXECUTING [15m 55s]\n&gt; :platform-libraries-webclient:integrationTest &gt; 1 test completed, 1 failed\n&gt; :platform-libraries-webclient:integrationTest &gt; Executing test pl.allegro....WebClientContextContainerInterceptorSpec\n</code></pre></div></div>\n<p>After 15 minutes we expect the process to end. A quick cross-check with the master branch confirms that tests run and execute in less than a minute.\nSomething is wrong and it’s on us. However, no error is presented. Adding logging does not help, nothing streams to standard output.\nSomething hangs and refuses to budge. When that happenes there is only one way to inspect what is going on and\nthat is to pop the hood open and look into JVM to see what the threads are doing or where they are slacking.</p>\n\n<h2 id=\"thread-theory\">Thread theory</h2>\n\n<p>Let’s interrupt this story with a short summary of threading in JVM. You can skip this chapter if you are familiar with the topic.\nAs the priceless book Java Concurrency in Practice by Brian Goetz et al. teaches us:</p>\n<blockquote>\n  <p>“Threads may block, or pause, for several reasons: waiting for I/O completion, waiting to acquire a lock,\nwaiting to wake up from Thread.sleep, or waiting for the result of a computation in another thread.\nWhen a thread blocks, it is usually suspended and placed in one of the blocked thread states\n(BLOCKED, WAITING, or TIMED_WAITING). (…) blocked thread must wait for an event beyond its control before it can proceed”.</p>\n</blockquote>\n\n<p>This sounds exactly like the situation we are in. So there is hope. Let’s educate ourselves further.\nAnother excerpt that would prove insightful reads as follows:</p>\n<blockquote>\n  <p>“(…) tasks can block for exteded periods of time, even if deadlock is not a possibility.\n(…) One technique that can mitigate the ill effects of long–running tasks is for tasks to use timed resource waits instead of\nunbound waits.”\nThis seems like an answer to our woes. However, two mysteries remain.\nWhere to put the timeout? What the thread is waiting for? To answer these questions we need to inspect the threads in the JVM itself.</p>\n</blockquote>\n\n<h2 id=\"the-investigation\">The investigation</h2>\n<p>At this point we did two things. First we pushed our code to a branch.\nAfter all at any moment our laptops could burst into flames and all the work would go to waste.\nThe remote CI confirmed our suspicion since it also hung. The problem was real and not only confined to the local machine.\nThe second thing is to scout for the offending thread. This is easy with the help of some JDK binaries:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>jps -lv | grep platform-libraries\n38983 worker.org.gradle.process.internal.worker.GradleWorkerMain -Dorg.gradle.internal.worker.tmpdir=/path/to/code/platform-libraries/platform-libraries-webclient/build/tmp/integrationTest/work -Dorg.gradle.native=false -Xmx512m -Dfile.encoding=UTF-8\n</code></pre></div></div>\n<p>So we have the a lvmid – local JVM identifier, which will help us locate the offending thread in jconsole.\nIn the screen below we can see that the thread waits on <code class=\"language-plaintext highlighter-rouge\">Mono.block()</code> which is left unbounded in a happy path scenario.\nWell, we are in the worst case so first of all we add a simple timeout <code class=\"language-plaintext highlighter-rouge\">Mono.block(Duration.ofSeconds(10))</code>.</p>\n\n<p><img src=\"/img/articles/2023-05-31-debugging-hangs/jconsole.png\" alt=\"jconsole\" /></p>\n\n<p>This fails our tests and for the first time the error appears:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\t08:13:39.556 [Test worker] WARN reactor.core.Exceptions - throwIfFatal detected a jvm fatal exception, which is thrown and logged below:\njava.lang.NoSuchMethodError: 'reactor.core.publisher.Mono reactor.core.publisher.Mono.subscriberContext(reactor.util.context.Context)'\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n\tat reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:427)\n\tat reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onSubscribe(PooledConnectionProvider.java:533)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:676)\n\tat reactor.netty.resources.PooledConnectionProvider.disposableAcquire(PooledConnectionProvider.java:219)\n\tat reactor.netty.resources.PooledConnectionProvider.lambda$acquire$3(PooledConnectionProvider.java:183)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.lambda$subscribe$0(HttpClientConnect.java:326)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.core.publisher.FluxRetryWhen.subscribe(FluxRetryWhen.java:77)\n\tat reactor.core.publisher.MonoRetryWhen.subscribeOrReturn(MonoRetryWhen.java:46)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:57)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.subscribe(HttpClientConnect.java:329)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\tat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2545)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2341)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2215)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)\n\tat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4485)\n\tat reactor.core.publisher.Mono.block(Mono.java:1733)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$Trait$Helper.makeRequest(WebClientContextContainerAdapterConfiguration.groovy:22)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$makeRequest.call(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)\n\tat pl.allegro....AdapterConfiguration$Trait$Helper.makeRequest(AdapterConfiguration.groovy:11)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....SharedInterceptorSpec$makeRequest.callCurrent(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:49)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)\n\tat pl.allegro....SharedInterceptorSpec.$spock_feature_0_0(SharedInterceptorSpec.groovy:44)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.spockframework.util.ReflectionUtil.invokeMethod(ReflectionUtil.java:196)\n\tat org.spockframework.runtime.model.MethodInfo.lambda$new$0(MethodInfo.java:49)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeatureMethod(PlatformSpecRunner.java:324)\n\tat org.spockframework.runtime.IterationNode.execute(IterationNode.java:50)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:58)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.IterationNode.lambda$around$0(IterationNode.java:67)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunIteration$5(PlatformSpecRunner.java:236)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.junit4.AbstractRuleInterceptor$1.evaluate(AbstractRuleInterceptor.java:46)\n\tat com.github.tomakehurst.wiremock.junit.WireMockRule$1.evaluate(WireMockRule.java:79)\n\tat org.spockframework.junit4.MethodRuleInterceptor.intercept(MethodRuleInterceptor.java:40)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runIteration(PlatformSpecRunner.java:218)\n\tat org.spockframework.runtime.IterationNode.around(IterationNode.java:67)\n\tat org.spockframework.runtime.SimpleFeatureNode.lambda$around$0(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.FeatureNode.lambda$around$0(FeatureNode.java:41)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunFeature$4(PlatformSpecRunner.java:199)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeature(PlatformSpecRunner.java:192)\n\tat org.spockframework.runtime.FeatureNode.around(FeatureNode.java:41)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.SpecNode.lambda$around$0(SpecNode.java:63)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunSpec$0(PlatformSpecRunner.java:61)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runSpec(PlatformSpecRunner.java:55)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:63)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:11)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\n\tat org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\n\tat jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)\n\tat org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\n</code></pre></div></div>\n<p>For the first time we force the entire reactive code to finally execute itself and present us with the result,\neven if it is an error this moves us in the right direction.</p>\n\n<h2 id=\"result\">Result</h2>\n\n<p>Like in any good crime story uncovering one mystery presents another.\nA quick <code class=\"language-plaintext highlighter-rouge\">grep</code> shows that there are no calls to <code class=\"language-plaintext highlighter-rouge\">reactor.core.publisher.Mono.subscriberContext</code>.\nWhere could this call be hiding, if it’s not present in our code?</p>\n\n<p>The answer is simple but I assure you that it took us some time to come up with it.\nIf it isn’t in our code and it runs inside our JVM then this must be dependency code.\nThe observant reader is able to spot it from afar. The stack trace confirms where the error lies:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n</code></pre></div></div>\n<p>We need to patch <code class=\"language-plaintext highlighter-rouge\">reactor–netty</code> which in this version still used deprecated code. Referring back to our diff:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ext.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n-        reactorNetty   : '0.9.25.RELEASE',\n]\n\next.versions = [\n+        spring        : '6.0.5',\n+        spock         : '2.4-M1-groovy-4.0',\n+        groovy        : '4.0.9',\n+        reactorNetty  : '1.1.3',\n]\n</code></pre></div></div>\n<p>We escape the dependency hell and are delighted to see the green letters <code class=\"language-plaintext highlighter-rouge\">BUILD SUCCESSFUL in 24s</code>.</p>\n\n<h2 id=\"summary\">Summary</h2>\n<p>Well this was quite a thrilling journey one doesn’t often embark on.\nThe odd peculiarity of the problem combined with peculiarity of the task provided us with a great challange and satisfaction.\nDependency hell is no joke, but armed with the JDK tools and thinking the problem through, there is no obstacle that could not be overcome.\nNext time your code hangs with no apparent reason this is a perfect opportunity to dust off the swiss army knife of JDK binaries and dig in.</p>\n","contentSnippet":"As a part of a broader initiative of refreshing Allegro platform, we are upgrading our internal libraries to Spring Boot 3.0 and Java 17.\nThe task is daunting and filled with challenges,\nhowever overall progress is steady and thanks to the modular nature of our code it should end in finite time.\nEveryone who has performed such an upgrade knows that you need to expect the unexpected and at the end of the day prepare for lots of debugging.\nNo amount of migration guide would prepare you for what’s coming in the field.\nIn the words of Donald Rumsfeld there are unknown unknowns and we need to be equipped with the tools to uncover these unknowns and patch them up.\nIn this blog post I’d like to walk you through a process that should show where the application hangs,\nalthough there seems to be nothing wrong with it. I will also show that you don’t always know what code you have – problem known as dependecy hell,\nplace we got quite cosy in during this upgrade.\nThe change\nNote that we keep versions as separate key–value pairs in build.gradle files and reference them in dependencies by key.\nUpdating often means a single line change. The upgrade is trivial and git diff looks like this.\n\next.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n]\n\next.versions = [\n+        spring         : '6.0.5',\n+        spock          : '2.4-M1-groovy-4.0',\n+        groovy         : '4.0.9',\n]\n\n\nNothing much happens. We upgrade Spring and since there are some problems with Spock not working well with the newest Spring\nwe need to upgrade it as well, along with Groovy. This is the easy part.\nNow we run the tests and expect to be either elated with the sight of a successful build or greeted with descriptive error messages\nthat help us quickly patch the issue. Nobody expects anything and in this case this is an unknown unknown.\n\n97% EXECUTING [15m 55s]\n> :platform-libraries-webclient:integrationTest > 1 test completed, 1 failed\n> :platform-libraries-webclient:integrationTest > Executing test pl.allegro....WebClientContextContainerInterceptorSpec\n\n\nAfter 15 minutes we expect the process to end. A quick cross-check with the master branch confirms that tests run and execute in less than a minute.\nSomething is wrong and it’s on us. However, no error is presented. Adding logging does not help, nothing streams to standard output.\nSomething hangs and refuses to budge. When that happenes there is only one way to inspect what is going on and\nthat is to pop the hood open and look into JVM to see what the threads are doing or where they are slacking.\nThread theory\nLet’s interrupt this story with a short summary of threading in JVM. You can skip this chapter if you are familiar with the topic.\nAs the priceless book Java Concurrency in Practice by Brian Goetz et al. teaches us:\n“Threads may block, or pause, for several reasons: waiting for I/O completion, waiting to acquire a lock,\nwaiting to wake up from Thread.sleep, or waiting for the result of a computation in another thread.\nWhen a thread blocks, it is usually suspended and placed in one of the blocked thread states\n(BLOCKED, WAITING, or TIMED_WAITING). (…) blocked thread must wait for an event beyond its control before it can proceed”.\nThis sounds exactly like the situation we are in. So there is hope. Let’s educate ourselves further.\nAnother excerpt that would prove insightful reads as follows:\n“(…) tasks can block for exteded periods of time, even if deadlock is not a possibility.\n(…) One technique that can mitigate the ill effects of long–running tasks is for tasks to use timed resource waits instead of\nunbound waits.”\nThis seems like an answer to our woes. However, two mysteries remain.\nWhere to put the timeout? What the thread is waiting for? To answer these questions we need to inspect the threads in the JVM itself.\nThe investigation\nAt this point we did two things. First we pushed our code to a branch.\nAfter all at any moment our laptops could burst into flames and all the work would go to waste.\nThe remote CI confirmed our suspicion since it also hung. The problem was real and not only confined to the local machine.\nThe second thing is to scout for the offending thread. This is easy with the help of some JDK binaries:\n\njps -lv | grep platform-libraries\n38983 worker.org.gradle.process.internal.worker.GradleWorkerMain -Dorg.gradle.internal.worker.tmpdir=/path/to/code/platform-libraries/platform-libraries-webclient/build/tmp/integrationTest/work -Dorg.gradle.native=false -Xmx512m -Dfile.encoding=UTF-8\n\n\nSo we have the a lvmid – local JVM identifier, which will help us locate the offending thread in jconsole.\nIn the screen below we can see that the thread waits on Mono.block() which is left unbounded in a happy path scenario.\nWell, we are in the worst case so first of all we add a simple timeout Mono.block(Duration.ofSeconds(10)).\n\nThis fails our tests and for the first time the error appears:\n\n\t08:13:39.556 [Test worker] WARN reactor.core.Exceptions - throwIfFatal detected a jvm fatal exception, which is thrown and logged below:\njava.lang.NoSuchMethodError: 'reactor.core.publisher.Mono reactor.core.publisher.Mono.subscriberContext(reactor.util.context.Context)'\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n\tat reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:427)\n\tat reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onSubscribe(PooledConnectionProvider.java:533)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:676)\n\tat reactor.netty.resources.PooledConnectionProvider.disposableAcquire(PooledConnectionProvider.java:219)\n\tat reactor.netty.resources.PooledConnectionProvider.lambda$acquire$3(PooledConnectionProvider.java:183)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.lambda$subscribe$0(HttpClientConnect.java:326)\n\tat reactor.core.publisher.MonoCreate.subscribe(MonoCreate.java:58)\n\tat reactor.core.publisher.FluxRetryWhen.subscribe(FluxRetryWhen.java:77)\n\tat reactor.core.publisher.MonoRetryWhen.subscribeOrReturn(MonoRetryWhen.java:46)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:57)\n\tat reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.subscribe(HttpClientConnect.java:329)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\tat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2545)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2341)\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2215)\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)\n\tat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)\n\tat reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)\n\tat reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4485)\n\tat reactor.core.publisher.Mono.block(Mono.java:1733)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$Trait$Helper.makeRequest(WebClientContextContainerAdapterConfiguration.groovy:22)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....WebClientContextContainerAdapterConfiguration$makeRequest.call(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)\n\tat pl.allegro....AdapterConfiguration$Trait$Helper.makeRequest(AdapterConfiguration.groovy:11)\n\tat org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:321)\n\tat pl.allegro....WebClientContextContainerInterceptorSpec.makeRequest(WebClientContextContainerInterceptorSpec.groovy)\n\tat pl.allegro....SharedInterceptorSpec$makeRequest.callCurrent(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:49)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)\n\tat pl.allegro....SharedInterceptorSpec.$spock_feature_0_0(SharedInterceptorSpec.groovy:44)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.spockframework.util.ReflectionUtil.invokeMethod(ReflectionUtil.java:196)\n\tat org.spockframework.runtime.model.MethodInfo.lambda$new$0(MethodInfo.java:49)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeatureMethod(PlatformSpecRunner.java:324)\n\tat org.spockframework.runtime.IterationNode.execute(IterationNode.java:50)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:58)\n\tat org.spockframework.runtime.SimpleFeatureNode.execute(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.IterationNode.lambda$around$0(IterationNode.java:67)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunIteration$5(PlatformSpecRunner.java:236)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:102)\n\tat org.spockframework.junit4.ExceptionAdapterInterceptor.intercept(ExceptionAdapterInterceptor.java:13)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.junit4.AbstractRuleInterceptor$1.evaluate(AbstractRuleInterceptor.java:46)\n\tat com.github.tomakehurst.wiremock.junit.WireMockRule$1.evaluate(WireMockRule.java:79)\n\tat org.spockframework.junit4.MethodRuleInterceptor.intercept(MethodRuleInterceptor.java:40)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:101)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:398)\n\tat org.spockframework.runtime.PlatformSpecRunner.runIteration(PlatformSpecRunner.java:218)\n\tat org.spockframework.runtime.IterationNode.around(IterationNode.java:67)\n\tat org.spockframework.runtime.SimpleFeatureNode.lambda$around$0(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.FeatureNode.lambda$around$0(FeatureNode.java:41)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunFeature$4(PlatformSpecRunner.java:199)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runFeature(PlatformSpecRunner.java:192)\n\tat org.spockframework.runtime.FeatureNode.around(FeatureNode.java:41)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:52)\n\tat org.spockframework.runtime.SimpleFeatureNode.around(SimpleFeatureNode.java:15)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.spockframework.runtime.SpockNode.sneakyInvoke(SpockNode.java:40)\n\tat org.spockframework.runtime.SpecNode.lambda$around$0(SpecNode.java:63)\n\tat org.spockframework.runtime.PlatformSpecRunner.lambda$createMethodInfoForDoRunSpec$0(PlatformSpecRunner.java:61)\n\tat org.spockframework.runtime.model.MethodInfo.invoke(MethodInfo.java:156)\n\tat org.spockframework.runtime.PlatformSpecRunner.invokeRaw(PlatformSpecRunner.java:407)\n\tat org.spockframework.runtime.PlatformSpecRunner.invoke(PlatformSpecRunner.java:390)\n\tat org.spockframework.runtime.PlatformSpecRunner.runSpec(PlatformSpecRunner.java:55)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:63)\n\tat org.spockframework.runtime.SpecNode.around(SpecNode.java:11)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)\n\tat org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)\n\tat org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\n\tat jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)\n\tat org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)\n\tat org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\n\tat worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\n\n\nFor the first time we force the entire reactive code to finally execute itself and present us with the result,\neven if it is an error this moves us in the right direction.\nResult\nLike in any good crime story uncovering one mystery presents another.\nA quick grep shows that there are no calls to reactor.core.publisher.Mono.subscriberContext.\nWhere could this call be hiding, if it’s not present in our code?\nThe answer is simple but I assure you that it took us some time to come up with it.\nIf it isn’t in our code and it runs inside our JVM then this must be dependency code.\nThe observant reader is able to spot it from afar. The stack trace confirms where the error lies:\n\n    at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:403)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:558)\n\tat reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:268)\n\n\nWe need to patch reactor–netty which in this version still used deprecated code. Referring back to our diff:\n\next.versions = [\n-        spring         : '5.3.24',\n-        spock          : '2.3-groovy-3.0',\n-        groovy         : '3.0.14',\n-        reactorNetty   : '0.9.25.RELEASE',\n]\n\next.versions = [\n+        spring        : '6.0.5',\n+        spock         : '2.4-M1-groovy-4.0',\n+        groovy        : '4.0.9',\n+        reactorNetty  : '1.1.3',\n]\n\n\nWe escape the dependency hell and are delighted to see the green letters BUILD SUCCESSFUL in 24s.\nSummary\nWell this was quite a thrilling journey one doesn’t often embark on.\nThe odd peculiarity of the problem combined with peculiarity of the task provided us with a great challange and satisfaction.\nDependency hell is no joke, but armed with the JDK tools and thinking the problem through, there is no obstacle that could not be overcome.\nNext time your code hangs with no apparent reason this is a perfect opportunity to dust off the swiss army knife of JDK binaries and dig in.","guid":"https://blog.allegro.tech/2023/05/debugging-hangs.html","categories":["tech","java","jvm","debugging","dependency hell"],"isoDate":"2023-05-30T22:00:00.000Z","thumbnail":"images/post-headers/java.png"},{"title":"Trust no one, not even your training data! Machine learning from noisy data","link":"https://blog.allegro.tech/2023/04/learning-from-noisy-data.html","pubDate":"Tue, 18 Apr 2023 00:00:00 +0200","authors":{"author":[{"name":["Łukasz Rączkowski"],"photo":["https://blog.allegro.tech/img/authors/lukasz.raczkowski.jpg"],"url":["https://blog.allegro.tech/authors/lukasz.raczkowski"]},{"name":["Aleksandra Osowska-Kurczab"],"photo":["https://blog.allegro.tech/img/authors/aleksandra.osowska-kurczab.jpg"],"url":["https://blog.allegro.tech/authors/aleksandra.osowska-kurczab"]},{"name":["Jacek Szczerbiński"],"photo":["https://blog.allegro.tech/img/authors/jacek.szczerbinski.jpg"],"url":["https://blog.allegro.tech/authors/jacek.szczerbinski"]},{"name":["Klaudia Nazarko"],"photo":["https://blog.allegro.tech/img/authors/klaudia.nazarko.jpg"],"url":["https://blog.allegro.tech/authors/klaudia.nazarko"]},{"name":["Kalina Kobus"],"photo":["https://blog.allegro.tech/img/authors/kalina.kobus.jpg"],"url":["https://blog.allegro.tech/authors/kalina.kobus"]}]},"content":"<ul>\n  <li>Label noise is ever-present in machine learning practice.</li>\n  <li>Allegro datasets are no exception.</li>\n  <li>We compared 7 methods for training classifiers robust to label noise.</li>\n  <li>All of them improved the model’s performance on noisy datasets.</li>\n  <li>Some of the methods decreased the model’s performance in the absence of label noise.</li>\n</ul>\n\n<h2 id=\"what-is-label-noise-and-why-does-it-matter\">What is label noise and why does it matter?</h2>\n\n<p>In the scope of supervised machine learning, specifically in classification tasks, the problem of label noise\nis of critical importance. It involves cases of incorrectly labelled training data. For example, let’s say that\nwe want to train a classification model to distinguish cats from dogs. For that purpose, we compose a training\ndataset with images labelled as either cat or dog. The labelling process is usually performed by human annotators,\nwho almost certainly produce some labelling errors. Unfortunately, human annotators can be confused by poor image\nquality, ambiguous image contents, or simply click the wrong item. As such, we inevitably end up with a dataset\nwhere some percentage of cats are labelled as dogs and vice versa (<a href=\"#figure1\"><strong>Figure 1</strong></a>).</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure1\"></a>\n    <img alt=\"Cats and dogs are equally nice.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure1-label-noise-example.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b>Figure 1. An example of label noise in a binary classification dataset.</b> Some images in both categories were mislabelled by human annotators, which introduces noise to the training dataset. </p>\n</figure>\n\n<p>Consequently, the model trained with such data learns partially wrong associations, which then can lead to incorrect\npredictions for new images. The more label noise we have, the more we confuse the model during training. We can\nmeasure this by evaluating the classification error on a held-out test dataset (<a href=\"#figure2\"><strong>Figure 2</strong></a>). It is clear\nthat for high noise levels, it is very hard to recover the true training signal from the corrupted training data.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure2\"></a>\n    <img alt=\"Oh no, please, not the noise!\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure2-test-accuracy.png\" style=\"width:70%;margin-bottom:10px\" />\n    <p style=\"width:70%;margin-left:auto;margin-right:auto\"><b> Figure 2. Test accuracy as a function of label noise percentage. </b> The X axis indicates the ratio of mislabelled to correctly labelled examples. The dataset used here was ImageNet, corrupted with synthetic label noise. Image source: <sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup>.</p>\n</figure>\n\n<p>How can this problem be mitigated? One approach is to simply put more effort into the labelling process — we can let\nmultiple annotators label each data point and then evaluate the cross-annotator agreement. With enough time and effort,\nwe hope to obtain a dataset free of label noise. However, in practice this approach is rarely feasible due to large\nvolumes of training data and the need for efficient turnaround of machine learning projects. Consequently, we need\na different approach for handling corrupted training data, <em>i.e.</em> ML models robust to label noise.</p>\n\n<p>In the context of this blog post, we define robustness as the model’s ability to efficiently learn in the presence\nof corrupted training data. In other words, a robust model can recover the correct training signal and ignore\nthe noise, so that it does not overfit to the corrupted traning set and can generalise during prediction. A major\nchallenge in this regard is the difficulty to estimate the proportion of label noise in real-world data. As such,\nrobust models are expected to handle varying amounts of label noise.</p>\n\n<h2 id=\"how-to-train-a-robust-classifier\">How to train a robust classifier?</h2>\n\n<p>We can improve the robustness of deep neural networks (DNNs) with a few tips and tricks presented in the recent\nliterature on <em>Learning from Noisy Data</em>. In general, there are three approaches to boosting the model’s resistance\nto noisy labels (<a href=\"#figure3\"><strong>Figure 3</strong></a>):</p>\n<ul>\n  <li><strong>Robust loss function</strong> boosting the training dynamics in the presence of noise.</li>\n  <li><strong>Implicit regularisation</strong> of the network aiming at decreasing the impact of noisy labels.</li>\n  <li><strong>Filtration of noisy data samples</strong> during the training or at the pre-training stage.</li>\n</ul>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure3\"></a>\n    <img alt=\"Flat-topped pyramids are better than sharp-topped ones.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure3-robustness-strategies.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"><b> Figure 3. Strategies for robustness. </b> In this blog post, we focused on two main approaches improving model robustness: utilisation of a robust loss function and implicit regularisation.</p>\n</figure>\n\n<p>In the scope of this blog post, we present seven different methods that are strong baselines for improving\nthe generalisation of classifiers in the presence of label noise.</p>\n\n<h3 id=\"robust-loss-function\">Robust loss function</h3>\n\n<h4 id=\"self-paced-learning-spl\">Self-Paced Learning (SPL)</h4>\n<p>The authors of <strong>Self-Paced Learning</strong><sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\" rel=\"footnote\">2</a></sup> noticed that large per-sample loss might be an indication of label\ncorruption, especially in the latter stages of training. Clean labels should be easy to learn, while corrupted labels\nwould appear as difficult, resulting in a high per-sample loss.</p>\n\n<p>SPL proposes to exclude some predefined ratio of examples from the batch depending on their per-sample loss values\n(<a href=\"#figure4\"><strong>Figure 4a</strong></a>). Usually, the ratio is set as the estimated noise level in the dataset.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure4\"></a>\n    <img alt=\"PRL makes everything equal.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure4-loss-filtration.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b> Figure 4. Comparison of loss filtration methods (SPL, PRL and CCE, see below). </b> While SPL and PRL exclude samples from loss calculation, CCE decreases the impact of potentially corrupted labels by clipping the per-sample loss values. Orange colour indicates candidate noisy samples. </p>\n</figure>\n\n<h4 id=\"provably-robust-learning-prl\">Provably Robust Learning (PRL)</h4>\n\n<p><strong>Provably Robust Learning</strong><sup id=\"fnref:3\" role=\"doc-noteref\"><a href=\"#fn:3\" class=\"footnote\" rel=\"footnote\">3</a></sup> derives from the ideas presented in the SPL paper, but the authors state that\ncorrupted labels should be detected depending on the gradient norm, instead of per-sample loss (<a href=\"#figure4\"><strong>Figure 4b</strong></a>).\nThe underlying intuition is that corrupted samples provoke the optimiser to make inadequately large steps\nin the optimisation space. The rest of the logic is the same as in SPL.</p>\n\n<h4 id=\"clipped-cross-entropy-cce\">Clipped Cross-Entropy (CCE)</h4>\n\n<p>Rejection of samples might not be optimal from the training’s point of view, because DNNs need vast amounts of data\nto be able to generalise properly. Therefore, <strong>Clipped Cross-Entropy</strong> doesn’t exclude the most contributing samples\nfrom the batch, but rather alleviates their impact by clipping the per-sample loss to a predefined value (<a href=\"#figure4\"><strong>Figure 4c</strong></a>).</p>\n\n<h4 id=\"early-learning-regularisation-elr\">Early Learning Regularisation (ELR)</h4>\n\n<p>It has been recently observed that DNNs first fit clean samples, and then start memorising the noisy ones. This\nphenomenon reduces the generalisation properties of the model, distracting it from learning true patterns present\nin the data. <strong>Early Learning Regularisation</strong><sup id=\"fnref:4\" role=\"doc-noteref\"><a href=\"#fn:4\" class=\"footnote\" rel=\"footnote\">4</a></sup> mitigates memorisation with two tricks:</p>\n\n<ul>\n  <li><em>Temporal ensembling</em> of targets: during the training step \\([k]\\), the original targets \\(\\pmb{\\text{t}}\\) are mixed\nwith the model’s predictions \\(\\pmb{\\text{p}}\\) from previous training steps. This prevents the gradient from diverging\nhugely between subsequent steps. This trick is well-known in semi-supervised learning<sup id=\"fnref:5\" role=\"doc-noteref\"><a href=\"#fn:5\" class=\"footnote\" rel=\"footnote\">5</a></sup>:</li>\n</ul>\n\n\\[\\pmb{\\text{t}}^{[k]} = \\left(\\beta\\ \\pmb{\\text{t}}^{[k-1]} + (1-\\beta)\\ \\pmb{\\text{p}}^{[k-1]}\\right)\\]\n\n<ul>\n  <li><em>Explicit regularisation</em>: an extra term is added to the default cross-entropy loss \\(\\mathcal{L}_{CE}(\\Theta)\\) that\nallows refinement of the early-learnt concepts, but penalises drastically contradicting predictions.</li>\n</ul>\n\n\\[\\mathcal{L}_{ELR}(\\Theta)=\\mathcal{L}_{CE}(\\Theta) + \\frac{\\lambda}{n} \\sum\\text{log}(1-\\langle \\pmb{\\text{p}}, \\pmb{\\text{t}} \\rangle)\\]\n\n<p>Thus, the gradient gets a boost for the clean samples, while the impact of noisy samples is neutralised\nby temporal ensembling.</p>\n\n<h4 id=\"jensen-shannon-divergence-loss-jsd\">Jensen-Shannon Divergence Loss (JSD)</h4>\n\n<p>The authors of <strong>Jensen-Shannon Divergence Loss</strong> <sup id=\"fnref:6\" role=\"doc-noteref\"><a href=\"#fn:6\" class=\"footnote\" rel=\"footnote\">6</a></sup> take yet another approach to loss construction,\nwhich is inspired by an empirical comparison between Cross-Entropy (CE) and Mean Absolute Error (MAE) loss. CE is known\nfor its fast convergence and brilliant training dynamics, while MAE provides spectacular robustness at the price\nof slow convergence.</p>\n\n<p>Englesson et al. came up with the idea to use Jensen-Shannon Divergence, which is a proven generalisation of CE\nand MAE loss (<a href=\"#figure5\"><strong>Figure 5</strong></a>). JSD uses Kullback-Leibler Divergence \\(\\text{D}_{\\text{KL}}\\) between the target\nlabels \\(\\pmb{y}\\) and predictions of the model \\(f(\\pmb{x})\\) vs. their averaged distribution \\(\\pmb{m}\\). Summing up, one\ncan think of JSD as a CE with a robustness boost, or MAE with improved convergence.</p>\n\n\\[\\mathcal{L}_{\\text{JS}}(\\pmb{x}, \\pmb{y}) = \\frac{1}{Z} \\left( \\pi_1 \\text{D}_{\\text{KL}}(\\pmb{y}||\\pmb{m}) + (1-\\pi_1) \\text{D}_{\\text{KL}}(f(\\pmb{x})||\\pmb{m}) \\right)\\]\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure5\"></a>\n    <img alt=\"Big proportion of pie makes your weight high.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure5-jsd.png\" style=\"width:70%;margin-bottom:10px\" />\n    <p style=\"width:70%;margin-left:auto;margin-right:auto\"><b> Figure 5. JSD as a generalisation of CE and MAE loss. </b> Depending on the parameter \\(\\pi_1\\), JSD resembles CE or MAE. Image source: <sup id=\"fnref:6:1\" role=\"doc-noteref\"><a href=\"#fn:6\" class=\"footnote\" rel=\"footnote\">6</a></sup>.</p>\n</figure>\n\n<h3 id=\"implicit-regularisation\">Implicit regularisation</h3>\n\n<h4 id=\"co-teaching-ct\">Co-teaching (CT)</h4>\n\n<p>In <strong>co-teaching</strong> <sup id=\"fnref:7\" role=\"doc-noteref\"><a href=\"#fn:7\" class=\"footnote\" rel=\"footnote\">7</a></sup>, we simultaneously train two independent DNNs (<a href=\"#figure6\"><strong>Figure 6</strong></a>), and let them\nexchange examples during the training. The <em>training feed</em> (learning samples) provided by the peer network should\nideally consist only of clean samples. In CT, each network predicts which samples are clean and provides them to its\ncounterpart. Deciding whether a sample is clean relies on the trick known from SPL: the sample’s label is probably\nclean if its per-sample loss is low.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure6\"></a>\n    <img alt=\"Co-operation is key to success, especially when you want to reduce noise in your garage band.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure6-co-teaching.png\" style=\"width:50%;margin-bottom:10px\" />\n    <p style=\"width:50%;margin-left:auto;margin-right:auto\"><b> Figure 6. Exchange of training feed in co-teaching. </b> Two peer networks exchange samples that are expected\nto be clean from noise. Image source: <sup id=\"fnref:7:1\" role=\"doc-noteref\"><a href=\"#fn:7\" class=\"footnote\" rel=\"footnote\">7</a></sup>.</p>\n</figure>\n\n<p>Co-teaching is one of the most popular and universal baselines in the domain of learning from noisy data. It has\nwell-established empirical results, offers good performance even in extreme noise scenarios and can be simply\nintegrated into almost any architecture or downstream task. Unfortunately, it also has a few downsides. Firstly, there\nis no theoretical guarantee that such a training setup will eventually converge. Secondly, we may end up with\na consensus between the two networks, causing them to produce identical training feeds, and making the CT redundant.</p>\n\n<h4 id=\"mixup\">Mixup</h4>\n\n<p><strong>Mixup</strong><sup id=\"fnref:8\" role=\"doc-noteref\"><a href=\"#fn:8\" class=\"footnote\" rel=\"footnote\">8</a></sup> is a simple augmentation scheme that enforces linear behaviour of the model for in-between\ntraining samples (<a href=\"#figure7\"><strong>Figure 7</strong></a>). It linearly combines two training samples \\((\\pmb{x}_i, \\pmb{y}_i)\\)\nand \\((\\pmb{x}_j, \\pmb{y}_j)\\) with weight \\(\\lambda\\) sampled from the <em>Beta</em> distribution. It results in a new augmented sample with mixed input features \\(\\pmb{x}_{aug}\\) and a soft label \\(\\pmb{y}_{aug}\\):</p>\n\n\\[\\pmb{x}_{aug} = \\lambda \\pmb{x}_i + (1 - \\lambda)\\pmb{x}_j \\\\\n\\pmb{y}_{aug} = \\lambda \\pmb{y}_i + (1 - \\lambda)\\pmb{y}_j \\\\\\]\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure7\"></a>\n    <img alt=\"When you can’t decide between cats and dogs, why don’t have both?\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure7-mixup.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b> Figure 7. Augmentation through mixup. </b> Two samples \\(i\\) and \\(j\\) are linearly combined into a synthetic image \\(\\pmb{x}_{aug}\\) and a soft label \\(\\pmb{y}_{aug}\\). This new augmented input encourages the model to linearly interpolate the predictions between the original samples. </p>\n</figure>\n\n<p>The method is a simple, universal, yet very effective approach. It yields good empirical results while adding\nno severe computational overhead.</p>\n\n<h2 id=\"cleaning-up-allegro\">Cleaning up Allegro</h2>\n\n<p>Every offer has its right place at <a href=\"https://allegro.tech\">Allegro</a>, belonging to one out of over 23,000 categories. The category structure\nis a tree consisting of:</p>\n<ul>\n  <li>the root (Allegro),</li>\n  <li>up to 7 levels of intermediate nodes (departments, metacategories, <em>etc.</em>) — over 2,600 nodes in total,</li>\n  <li>over 23,000 leaves.</li>\n</ul>\n\n<p>Offers located in wrong categories are hard to find and hard to buy. As such, we need a way to properly assign offers\nto correct category leaves. To this end, our Machine Learning Research team has developed a category classifier\nfor Allegro offers.</p>\n\n<p>The model in question is a large language model pre-trained on the Allegro catalogue (see more\nin <a href=\"https://www.youtube.com/watch?v=6T-R4kgIbBs&amp;list=PLzveSKBX_3N7yPb4ErB5HJ83eB6XvH37C&amp;index=20\"><i>Do you speak Allegro?</i></a>) and fine-tuned for offer classification. Specifically, the downstream task here is extreme text classification: each offer is represented by text (title) and is classified into over 23,000 categories — hence the word <i>extreme</i>.</p>\n\n<p>Classification is particularly challenging for offers listed in ambiguous categories such as <em>Other, Accessories, etc.</em>\nThese categories are broad and hard to navigate, as they contain a wide variety of products. Most of those products\nactually belong to some well-defined categories, but the merchant couldn’t find the right place for those offers\nat the time of their listing, because of the very rich taxonomy of the category tree. Consequently, we decided\nto clean up the offers in ambiguous categories.</p>\n\n<p>Here’s the setup (<a href=\"#figure8\"><strong>Figure 8</strong></a>):</p>\n<ul>\n  <li>We train the category classifier on offers in well-defined categories: the model learns what lies where at Allegro.</li>\n  <li>Next, we run inference on offers in ambiguous categories: the model moves the offers to their right destination.</li>\n</ul>\n\n<p>Note that this task is subject to domain shift: the assortment listed in these ambiguous categories may be harder\nto categorise than the regular assortment in other categories.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure8\"></a>\n    <img alt=\"Always trust your friendly neighbourhood language model.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure8-category-classifier.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b> Figure 8. Category classifier: training &amp; inference. </b> The model is trained on offers listed in well-defined categories. Then, it is used to move offers from ambiguous categories (<i>Other, Accessories, etc.</i>) to the well-defined categories. </p>\n</figure>\n\n<h3 id=\"real-world-label-noise-at-allegro\">Real-world label noise at Allegro</h3>\n<p>The training set (offers in well-defined categories) is not 100% correct, for several reasons (<a href=\"#figure9\"><strong>Figure 9</strong></a>):</p>\n<ul>\n  <li>the merchant may have put the offer in the wrong category,</li>\n  <li>there are several similar categories in the catalogue,</li>\n  <li>there is no appropriate category for a given offer,</li>\n  <li>the taxonomy of the Allegro category tree changes over time.</li>\n</ul>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure9\"></a>\n    <img alt=\"AHHH, FRESH MEAT.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure9-mislabelled-offers.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b> Figure 9. Examples of mislabelled offers. </b> With over 23,000 categories at Allegro, listing each offer in its best-matching category can be challenging for merchants. Hence, label noise is an inherent feature of our training dataset. </p>\n</figure>\n\n<p>The ML model is prone to memorisation of the wrong labels in the training set, <em>i.e.</em> overfitting. These errors will\nlikely be reproduced at prediction time. Our goal is to train a robust classifier that will learn the true patterns\nand ignore the mislabelled training instances.</p>\n\n<p>The training methods described in the previous section were developed and evaluated on computer vision tasks,\n<em>e.g.</em> image classification, into a relatively small number of categories. Here, we face the problem of extreme text\nclassification. Thus, we need to adapt those methods for textual input and find out which concepts transfer well between\nthe two domains.</p>\n\n<h3 id=\"synthetic-label-noise\">Synthetic label noise</h3>\n\n<p>To evaluate the model’s robustness experimentally, we need to know <em>a priori</em> which training instances were\nmislabelled. For that, we use a generator of controllable noise. The experimental setup consists of five steps\n(<a href=\"#figure10\"><strong>Figure 10</strong></a>):</p>\n<ul>\n  <li>dumping a clean dataset from a curated pool of offers that are <em>certainly</em> in the right place,</li>\n  <li>splitting it into training, validation and test sets,</li>\n  <li>application of synthetic noise to 20% of instances in the training and validation sets (changing the offer’s category\nto a wrong one),</li>\n  <li>training the model on the noisy dataset,</li>\n  <li>testing the model on a held-out fraction of the clean dataset.</li>\n</ul>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure10\"></a>\n    <img alt=\"Staying clean has many benefits. Stay clean kids!\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure10-datasets.png\" style=\"width:70%;margin-bottom:10px\" />\n    <p style=\"width:70%;margin-left:auto;margin-right:auto\"> <b> Figure 10. Testing the model’s robustness. </b> The full dataset of clean instances (offers with true category labels) is split into training, validation and test sets. Next, label noise is introduced to the training and validation sets and the model is trained. The model is tested on a held-out fraction of the clean dataset. </p>\n</figure>\n\n<p>This setup lets us answer the following question:</p>\n\n<blockquote>\n  <p>How much does the noise in the training set hurt the model’s performance on the clean test set?</p>\n</blockquote>\n\n<p>This way, we can evaluate different methods of training classifiers under label noise and choose the most robust\nclassifier, according to accuracy on the test set.</p>\n\n<h2 id=\"and-it-works\">And… it works!</h2>\n\n<p>Below we present the results of experiments for 1.3M offers listed in the <em>Construction Work &amp; Equipment</em> category.\nSymmetric noise was applied to 20% of the training set. This means that the category labels of that percentage\nof offers were changed to different randomly chosen labels. We evaluated the 7 training methods outlined above\nand compared them to the baseline: classification with cross-entropy loss.</p>\n\n<h3 id=\"baseline-memorising-doesnt-pay-off\">Baseline: Memorising doesn’t pay off</h3>\n\n<p><strong>How does the presence of noise impact the baseline model?</strong></p>\n\n<p>The validation curves for non-corrupted samples clearly show the severe impact of noisy labels on the model’s\nperformance (<a href=\"#figure11\"><strong>Figure 11</strong></a>). In the early stage of training, the performance of the model trained\non noisy data is on par with the metrics of the model trained on clean data. Yet, starting from the 4th epoch,\nthe wrong labels in the noisy dataset appear to prevent the model from discovering the true patterns in the training\ndata, resulting in a 5 p.p. drop in accuracy at the end of the training. We attribute this drop to the <em>memorisation</em>\nof the wrong labels: instead of refining the originally learnt concepts, the network starts to overfit to the noisy\nlabels. The labels memorised for particular offers don’t help with classifying previously unseen offers at test time.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure11\"></a>\n    <img alt=\"Absolute noise corrupts absolutely.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure11-baseline-degradation.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b>Figure 11. Degradation of the baseline model in the presence of noise.</b> The 20% synthetic noise degrades the model throughout the training. In the end, the model trained on the corrupted dataset exhibits 5 p.p. lower accuracy in comparison to its clean counterpart </p>\n</figure>\n\n<h3 id=\"towards-robust-classification\">Towards robust classification</h3>\n\n<p><strong>Does robustness imply underfitting?</strong></p>\n\n<p>To verify if the evaluated methods have any effect on the model’s performance when there is no noise in the training\ndata, we tested all of them on a clean dataset without any synthetic noise.</p>\n\n<p>In the absence of corrupted data, three of the tested methods (SPL, PRL and CT) are effectively reduced to the baseline\nCross-Entropy. Therefore, the accuracy for those methods was exactly the same as for the baseline (<a href=\"#table1\"><strong>Table 1</strong></a>).\nFor mixup, the difference from the baseline was within the standard deviation range, so it was marked as no improvement\nas well.</p>\n\n<p>For CCE and JSD the performance degraded, but only slightly — by 0.04 p.p. for the former and 0.34 p.p. for the latter.\nThis drop is an acceptable compromise considering the robustness to noise that these methods enable (see below).</p>\n\n<p>ELR was the only method that improved upon the baseline, by 0.07 p.p. As ELR relies on temporal ensembling, which\ndiminishes the impact of corrupted samples during training, we hypothesise that our clean dataset contained a small\nnumber of mislabelled examples. Such paradoxes are a frequent case in machine learning practice, even for renowned\nbenchmark datasets like CIFAR-100<sup id=\"fnref:9\" role=\"doc-noteref\"><a href=\"#fn:9\" class=\"footnote\" rel=\"footnote\">9</a></sup>.</p>\n\n<p><a id=\"table1\"></a><strong>Table 1.</strong> Test accuracy scores of the models trained on the clean and corrupted\n(20% synthetic noise) datasets for the 8 training methods. Light red highlight indicates deterioration in comparison\nto the baseline, while light blue denotes improvement. <em>Notation</em>: (mean \\(\\pm\\) std)% from 5 independently seeded runs.</p>\n<table>\n    <thead>\n        <tr>\n            <th rowspan=\"2\" colspan=\"2\" style=\"text-align:center\">Method</th>\n            <th style=\"text-align:center\" colspan=\"2\">Test accuracy [%]</th>\n        </tr>\n        <tr>\n            <th style=\"text-align:center\">clean dataset</th>\n            <th style=\"text-align:center\">noisy dataset</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td colspan=\"2\" style=\"border-bottom-width: thick;text-align:center;font-weight:bold\">Baseline</td>\n            <td style=\"border-bottom-width: thick;\">90.26 ± 0.03</td>\n            <td style=\"border-bottom-width: thick;\">85.31 ± 0.08</td>\n        </tr>\n        <tr>\n            <td rowspan=\"5\" style=\"font-weight:bold;transform: rotate(180deg);writing-mode: vertical-rl;text-align: center;vertical-align: middle;width: 3em\">\n                Robust loss<br />function\n            </td>\n            <td>Self-Paced Learning (SPL)</td>\n            <td>90.26 ± 0.03</td>\n            <td style=\"background:#E1F4F4;color:black\">88.51 ± 0.02</td>\n        </tr>\n        <tr>\n            <td>Provably Robust Learning (PRL)</td>\n            <td>90.26 ± 0.03</td>\n            <td style=\"background:#E1F4F4;color:black\">88.31 ± 0.02</td>\n        </tr>\n        <tr>\n            <td>Clipped Cross-Entropy (CCE)</td>\n            <td style=\"background:#ffdecb;color:black\">90.22 ± 0.03</td>\n            <td style=\"font-weight:bold;background:#E1F4F4;color:black\">89.51 ± 0.01</td>\n        </tr>\n        <tr>\n            <td>Early Learning Regularisation (ELR)</td>\n            <td style=\"font-weight:bold;background:#E1F4F4;color:black\">90.33 ± 0.01</td>\n            <td style=\"background:#E1F4F4;color:black\">89.29 ± 0.03</td>\n        </tr>\n        <tr>\n            <td>Jensen-Shannon Divergence (JSD) </td>\n            <td style=\"background:#ffdecb;color:black\">89.92 ± 0.02</td>\n            <td style=\"background:#E1F4F4;color:black\">89.24 ± 0.01</td>\n        </tr>\n        <tr>\n            <td rowspan=\"2\" style=\"font-weight:bold;transform: rotate(180deg);writing-mode: vertical-rl;white-space: wrap;text-align: center;vertical-align: middle;width: 3em;height: 8em\">\n                Implicit regularisation\n            </td>\n            <td>Co-teaching (CT)</td>\n            <td>90.26 ± 0.03</td>\n            <td style=\"background:#E1F4F4;color:black\">88.72 ± 0.03</td>\n        </tr>\n        <tr>\n            <td>Mixup</td>\n            <td>90.27 ± 0.02</td>\n            <td style=\"background:#E1F4F4;color:black\">86.02 ± 0.06</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><strong>Robust classification results</strong></p>\n\n<p>All methods discussed in this study improved the model’s performance on the noisy dataset when compared to the baseline\n(<a href=\"#table1\"><strong>Table 1</strong></a>). The best results were obtained with CCE (+4.2 p.p.), ELR (+3.98 p.p.) and JSD (+3.93 p.p.).\nCT, SPL, PRL performed a bit worse, but still proved to be quite robust, improving upon the baseline by 3.41 p.p.,\n3.2 p.p. and 3.0 p.p., respectively.</p>\n\n<p>Mixup is a clear outlier — while it does improve upon the baseline by 0.71 p.p., this increase is noticeably smaller\nthan for the other evaluated methods. Our interpretation is that the linear augmentation at the heart of this method\nregularises the DNN, but does not address label noise <em>per se</em>. Mixup treats all samples equally, even if their labels\nare corrupted. The marginal improvement upon the baseline is evident in the validation accuracy training curve\n(<a href=\"#figure12\"><strong>Figure 12</strong></a>). Mixup starts to overfit around the 5th epoch, similarly to the baseline, and unlike all\nthe other methods.</p>\n\n<figure style=\"display:block;float:none;margin-left:auto;margin-right:auto\">\n    <a id=\"figure12\"></a>\n    <img alt=\"Mixing it up doesn’t always work as intended.\" src=\"/img/articles/2023-04-18-learning-from-noisy-data/figure12-validation-accuracy.png\" style=\"width:80%;margin-bottom:10px\" />\n    <p style=\"width:80%;margin-left:auto;margin-right:auto\"> <b>Figure 12. Validation accuracy during training.</b> Validation accuracy for all methods was measured during training. It is evident that the best methods are CCE, ELR and JSD, with CT, PRL and SPL trailing slightly behind. Mixup behaves similarly to the baseline. </p>\n</figure>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n\n<p>The problem of label noise is unavoidable in machine learning practice, and Allegro datasets are no exception.\nFortunately, there exist numerous methods that diminish the impact of label noise on prediction performance\nby increasing the robustness of machine learning models. In our experiments we implemented 7 of those methods\nand showed that they increase prediction accuracy in the presence of 20% synthetic noise when compared to the baseline\n(Cross-Entropy loss), most of them by a significant margin. The simple Clipped Cross-Entropy proved to be the best,\nwith an accuracy score of 89.51% (increase of 4.2 p.p. vs the baseline trained with noisy labels). This result is very\nclose to the baseline trained with clean labels (90.26%). Thus, we showed that for the case of 20% synthetic label\nnoise, it is possible to increase robustness so that the impact of label noise is negligible.</p>\n\n<p>These experiments are only a first step in making classifiers at Allegro robust to label noise. The case of synthetic\nnoise presented here is not very realistic: real-world label noise tends to be instance-dependent,\ni.e. it is influenced by individual sample features. As such, we plan to further evaluate the methods for increasing\nmodel robustness with a real-world dataset perturbed by instance-dependent noise.</p>\n\n<p>If you’d like to know more about label noise and model robustness, please refer to the papers listed below.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/1705.10694\"><em>Deep Learning is Robust to Massive Label Noise</em>, Rolnick et al., 2018</a> <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\" role=\"doc-endnote\">\n      <p><a href=\"https://papers.nips.cc/paper/2010/hash/e57c6b956a6521b28495f2886ca0977a-Abstract.html\"><em>Self-Paced Learning for Latent Variable Models</em>, Kumar et al., 2010</a> <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/2102.06735\"><em>Learning Deep Neural Networks under Agnostic Corrupted Supervision</em>, Liu et al., 2021</a> <a href=\"#fnref:3\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/2007.00151\"><em>Early-Learning Regularization Prevents Memorization of Noisy Labels</em>, Liu et al., 2020</a> <a href=\"#fnref:4\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:5\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/1610.02242\"><em>Temporal Ensembling for Semi-Supervised Learning</em>, Laine et al., 2017</a> <a href=\"#fnref:5\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:6\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/2105.04522\"><em>Generalized Jensen-Shannon Divergence Loss for Learning with Noisy Labels</em>, Englesson et al., 2021</a> <a href=\"#fnref:6\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a> <a href=\"#fnref:6:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:7\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/1804.06872\"><em>Co-teaching: Robust Training of Deep Neural Networks with Extremely Noisy Labels</em>, Han et al., 2018</a> <a href=\"#fnref:7\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a> <a href=\"#fnref:7:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;<sup>2</sup></a></p>\n    </li>\n    <li id=\"fn:8\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/1710.09412\"><em>mixup: Beyond Empirical Risk Minimization</em>, Zhang et al., 2018</a> <a href=\"#fnref:8\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:9\" role=\"doc-endnote\">\n      <p><a href=\"https://arxiv.org/abs/2103.14749\"><em>Pervasive Label Errors in Test Sets Destabilize Machine Learning Benchmarks</em>, Northcutt et al., 2021</a> <a href=\"#fnref:9\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n","contentSnippet":"Label noise is ever-present in machine learning practice.\nAllegro datasets are no exception.\nWe compared 7 methods for training classifiers robust to label noise.\nAll of them improved the model’s performance on noisy datasets.\nSome of the methods decreased the model’s performance in the absence of label noise.\nWhat is label noise and why does it matter?\nIn the scope of supervised machine learning, specifically in classification tasks, the problem of label noise\nis of critical importance. It involves cases of incorrectly labelled training data. For example, let’s say that\nwe want to train a classification model to distinguish cats from dogs. For that purpose, we compose a training\ndataset with images labelled as either cat or dog. The labelling process is usually performed by human annotators,\nwho almost certainly produce some labelling errors. Unfortunately, human annotators can be confused by poor image\nquality, ambiguous image contents, or simply click the wrong item. As such, we inevitably end up with a dataset\nwhere some percentage of cats are labelled as dogs and vice versa (Figure 1).\n\n    \n    \n Figure 1. An example of label noise in a binary classification dataset. Some images in both categories were mislabelled by human annotators, which introduces noise to the training dataset. \nConsequently, the model trained with such data learns partially wrong associations, which then can lead to incorrect\npredictions for new images. The more label noise we have, the more we confuse the model during training. We can\nmeasure this by evaluating the classification error on a held-out test dataset (Figure 2). It is clear\nthat for high noise levels, it is very hard to recover the true training signal from the corrupted training data.\n\n    \n    \n Figure 2. Test accuracy as a function of label noise percentage.  The X axis indicates the ratio of mislabelled to correctly labelled examples. The dataset used here was ImageNet, corrupted with synthetic label noise. Image source: 1.\nHow can this problem be mitigated? One approach is to simply put more effort into the labelling process — we can let\nmultiple annotators label each data point and then evaluate the cross-annotator agreement. With enough time and effort,\nwe hope to obtain a dataset free of label noise. However, in practice this approach is rarely feasible due to large\nvolumes of training data and the need for efficient turnaround of machine learning projects. Consequently, we need\na different approach for handling corrupted training data, i.e. ML models robust to label noise.\nIn the context of this blog post, we define robustness as the model’s ability to efficiently learn in the presence\nof corrupted training data. In other words, a robust model can recover the correct training signal and ignore\nthe noise, so that it does not overfit to the corrupted traning set and can generalise during prediction. A major\nchallenge in this regard is the difficulty to estimate the proportion of label noise in real-world data. As such,\nrobust models are expected to handle varying amounts of label noise.\nHow to train a robust classifier?\nWe can improve the robustness of deep neural networks (DNNs) with a few tips and tricks presented in the recent\nliterature on Learning from Noisy Data. In general, there are three approaches to boosting the model’s resistance\nto noisy labels (Figure 3):\nRobust loss function boosting the training dynamics in the presence of noise.\nImplicit regularisation of the network aiming at decreasing the impact of noisy labels.\nFiltration of noisy data samples during the training or at the pre-training stage.\n\n    \n    \n Figure 3. Strategies for robustness.  In this blog post, we focused on two main approaches improving model robustness: utilisation of a robust loss function and implicit regularisation.\nIn the scope of this blog post, we present seven different methods that are strong baselines for improving\nthe generalisation of classifiers in the presence of label noise.\nRobust loss function\nSelf-Paced Learning (SPL)\nThe authors of Self-Paced Learning2 noticed that large per-sample loss might be an indication of label\ncorruption, especially in the latter stages of training. Clean labels should be easy to learn, while corrupted labels\nwould appear as difficult, resulting in a high per-sample loss.\nSPL proposes to exclude some predefined ratio of examples from the batch depending on their per-sample loss values\n(Figure 4a). Usually, the ratio is set as the estimated noise level in the dataset.\n\n    \n    \n  Figure 4. Comparison of loss filtration methods (SPL, PRL and CCE, see below).  While SPL and PRL exclude samples from loss calculation, CCE decreases the impact of potentially corrupted labels by clipping the per-sample loss values. Orange colour indicates candidate noisy samples. \nProvably Robust Learning (PRL)\nProvably Robust Learning3 derives from the ideas presented in the SPL paper, but the authors state that\ncorrupted labels should be detected depending on the gradient norm, instead of per-sample loss (Figure 4b).\nThe underlying intuition is that corrupted samples provoke the optimiser to make inadequately large steps\nin the optimisation space. The rest of the logic is the same as in SPL.\nClipped Cross-Entropy (CCE)\nRejection of samples might not be optimal from the training’s point of view, because DNNs need vast amounts of data\nto be able to generalise properly. Therefore, Clipped Cross-Entropy doesn’t exclude the most contributing samples\nfrom the batch, but rather alleviates their impact by clipping the per-sample loss to a predefined value (Figure 4c).\nEarly Learning Regularisation (ELR)\nIt has been recently observed that DNNs first fit clean samples, and then start memorising the noisy ones. This\nphenomenon reduces the generalisation properties of the model, distracting it from learning true patterns present\nin the data. Early Learning Regularisation4 mitigates memorisation with two tricks:\nTemporal ensembling of targets: during the training step \\([k]\\), the original targets \\(\\pmb{\\text{t}}\\) are mixed\nwith the model’s predictions \\(\\pmb{\\text{p}}\\) from previous training steps. This prevents the gradient from diverging\nhugely between subsequent steps. This trick is well-known in semi-supervised learning5:\nExplicit regularisation: an extra term is added to the default cross-entropy loss \\(\\mathcal{L}_{CE}(\\Theta)\\) that\nallows refinement of the early-learnt concepts, but penalises drastically contradicting predictions.\nThus, the gradient gets a boost for the clean samples, while the impact of noisy samples is neutralised\nby temporal ensembling.\nJensen-Shannon Divergence Loss (JSD)\nThe authors of Jensen-Shannon Divergence Loss 6 take yet another approach to loss construction,\nwhich is inspired by an empirical comparison between Cross-Entropy (CE) and Mean Absolute Error (MAE) loss. CE is known\nfor its fast convergence and brilliant training dynamics, while MAE provides spectacular robustness at the price\nof slow convergence.\nEnglesson et al. came up with the idea to use Jensen-Shannon Divergence, which is a proven generalisation of CE\nand MAE loss (Figure 5). JSD uses Kullback-Leibler Divergence \\(\\text{D}_{\\text{KL}}\\) between the target\nlabels \\(\\pmb{y}\\) and predictions of the model \\(f(\\pmb{x})\\) vs. their averaged distribution \\(\\pmb{m}\\). Summing up, one\ncan think of JSD as a CE with a robustness boost, or MAE with improved convergence.\n\n    \n    \n Figure 5. JSD as a generalisation of CE and MAE loss.  Depending on the parameter \\(\\pi_1\\), JSD resembles CE or MAE. Image source: 6.\nImplicit regularisation\nCo-teaching (CT)\nIn co-teaching 7, we simultaneously train two independent DNNs (Figure 6), and let them\nexchange examples during the training. The training feed (learning samples) provided by the peer network should\nideally consist only of clean samples. In CT, each network predicts which samples are clean and provides them to its\ncounterpart. Deciding whether a sample is clean relies on the trick known from SPL: the sample’s label is probably\nclean if its per-sample loss is low.\n\n    \n    \n Figure 6. Exchange of training feed in co-teaching.  Two peer networks exchange samples that are expected\nto be clean from noise. Image source: 7.\nCo-teaching is one of the most popular and universal baselines in the domain of learning from noisy data. It has\nwell-established empirical results, offers good performance even in extreme noise scenarios and can be simply\nintegrated into almost any architecture or downstream task. Unfortunately, it also has a few downsides. Firstly, there\nis no theoretical guarantee that such a training setup will eventually converge. Secondly, we may end up with\na consensus between the two networks, causing them to produce identical training feeds, and making the CT redundant.\nMixup\nMixup8 is a simple augmentation scheme that enforces linear behaviour of the model for in-between\ntraining samples (Figure 7). It linearly combines two training samples \\((\\pmb{x}_i, \\pmb{y}_i)\\)\nand \\((\\pmb{x}_j, \\pmb{y}_j)\\) with weight \\(\\lambda\\) sampled from the Beta distribution. It results in a new augmented sample with mixed input features \\(\\pmb{x}_{aug}\\) and a soft label \\(\\pmb{y}_{aug}\\):\n\n    \n    \n  Figure 7. Augmentation through mixup.  Two samples \\(i\\) and \\(j\\) are linearly combined into a synthetic image \\(\\pmb{x}_{aug}\\) and a soft label \\(\\pmb{y}_{aug}\\). This new augmented input encourages the model to linearly interpolate the predictions between the original samples. \nThe method is a simple, universal, yet very effective approach. It yields good empirical results while adding\nno severe computational overhead.\nCleaning up Allegro\nEvery offer has its right place at Allegro, belonging to one out of over 23,000 categories. The category structure\nis a tree consisting of:\nthe root (Allegro),\nup to 7 levels of intermediate nodes (departments, metacategories, etc.) — over 2,600 nodes in total,\nover 23,000 leaves.\nOffers located in wrong categories are hard to find and hard to buy. As such, we need a way to properly assign offers\nto correct category leaves. To this end, our Machine Learning Research team has developed a category classifier\nfor Allegro offers.\nThe model in question is a large language model pre-trained on the Allegro catalogue (see more\nin Do you speak Allegro?) and fine-tuned for offer classification. Specifically, the downstream task here is extreme text classification: each offer is represented by text (title) and is classified into over 23,000 categories — hence the word extreme.\nClassification is particularly challenging for offers listed in ambiguous categories such as Other, Accessories, etc.\nThese categories are broad and hard to navigate, as they contain a wide variety of products. Most of those products\nactually belong to some well-defined categories, but the merchant couldn’t find the right place for those offers\nat the time of their listing, because of the very rich taxonomy of the category tree. Consequently, we decided\nto clean up the offers in ambiguous categories.\nHere’s the setup (Figure 8):\nWe train the category classifier on offers in well-defined categories: the model learns what lies where at Allegro.\nNext, we run inference on offers in ambiguous categories: the model moves the offers to their right destination.\nNote that this task is subject to domain shift: the assortment listed in these ambiguous categories may be harder\nto categorise than the regular assortment in other categories.\n\n    \n    \n  Figure 8. Category classifier: training & inference.  The model is trained on offers listed in well-defined categories. Then, it is used to move offers from ambiguous categories (Other, Accessories, etc.) to the well-defined categories. \nReal-world label noise at Allegro\nThe training set (offers in well-defined categories) is not 100% correct, for several reasons (Figure 9):\nthe merchant may have put the offer in the wrong category,\nthere are several similar categories in the catalogue,\nthere is no appropriate category for a given offer,\nthe taxonomy of the Allegro category tree changes over time.\n\n    \n    \n  Figure 9. Examples of mislabelled offers.  With over 23,000 categories at Allegro, listing each offer in its best-matching category can be challenging for merchants. Hence, label noise is an inherent feature of our training dataset. \nThe ML model is prone to memorisation of the wrong labels in the training set, i.e. overfitting. These errors will\nlikely be reproduced at prediction time. Our goal is to train a robust classifier that will learn the true patterns\nand ignore the mislabelled training instances.\nThe training methods described in the previous section were developed and evaluated on computer vision tasks,\ne.g. image classification, into a relatively small number of categories. Here, we face the problem of extreme text\nclassification. Thus, we need to adapt those methods for textual input and find out which concepts transfer well between\nthe two domains.\nSynthetic label noise\nTo evaluate the model’s robustness experimentally, we need to know a priori which training instances were\nmislabelled. For that, we use a generator of controllable noise. The experimental setup consists of five steps\n(Figure 10):\ndumping a clean dataset from a curated pool of offers that are certainly in the right place,\nsplitting it into training, validation and test sets,\napplication of synthetic noise to 20% of instances in the training and validation sets (changing the offer’s category\nto a wrong one),\ntraining the model on the noisy dataset,\ntesting the model on a held-out fraction of the clean dataset.\n\n    \n    \n  Figure 10. Testing the model’s robustness.  The full dataset of clean instances (offers with true category labels) is split into training, validation and test sets. Next, label noise is introduced to the training and validation sets and the model is trained. The model is tested on a held-out fraction of the clean dataset. \nThis setup lets us answer the following question:\nHow much does the noise in the training set hurt the model’s performance on the clean test set?\nThis way, we can evaluate different methods of training classifiers under label noise and choose the most robust\nclassifier, according to accuracy on the test set.\nAnd… it works!\nBelow we present the results of experiments for 1.3M offers listed in the Construction Work & Equipment category.\nSymmetric noise was applied to 20% of the training set. This means that the category labels of that percentage\nof offers were changed to different randomly chosen labels. We evaluated the 7 training methods outlined above\nand compared them to the baseline: classification with cross-entropy loss.\nBaseline: Memorising doesn’t pay off\nHow does the presence of noise impact the baseline model?\nThe validation curves for non-corrupted samples clearly show the severe impact of noisy labels on the model’s\nperformance (Figure 11). In the early stage of training, the performance of the model trained\non noisy data is on par with the metrics of the model trained on clean data. Yet, starting from the 4th epoch,\nthe wrong labels in the noisy dataset appear to prevent the model from discovering the true patterns in the training\ndata, resulting in a 5 p.p. drop in accuracy at the end of the training. We attribute this drop to the memorisation\nof the wrong labels: instead of refining the originally learnt concepts, the network starts to overfit to the noisy\nlabels. The labels memorised for particular offers don’t help with classifying previously unseen offers at test time.\n\n    \n    \n Figure 11. Degradation of the baseline model in the presence of noise. The 20% synthetic noise degrades the model throughout the training. In the end, the model trained on the corrupted dataset exhibits 5 p.p. lower accuracy in comparison to its clean counterpart \nTowards robust classification\nDoes robustness imply underfitting?\nTo verify if the evaluated methods have any effect on the model’s performance when there is no noise in the training\ndata, we tested all of them on a clean dataset without any synthetic noise.\nIn the absence of corrupted data, three of the tested methods (SPL, PRL and CT) are effectively reduced to the baseline\nCross-Entropy. Therefore, the accuracy for those methods was exactly the same as for the baseline (Table 1).\nFor mixup, the difference from the baseline was within the standard deviation range, so it was marked as no improvement\nas well.\nFor CCE and JSD the performance degraded, but only slightly — by 0.04 p.p. for the former and 0.34 p.p. for the latter.\nThis drop is an acceptable compromise considering the robustness to noise that these methods enable (see below).\nELR was the only method that improved upon the baseline, by 0.07 p.p. As ELR relies on temporal ensembling, which\ndiminishes the impact of corrupted samples during training, we hypothesise that our clean dataset contained a small\nnumber of mislabelled examples. Such paradoxes are a frequent case in machine learning practice, even for renowned\nbenchmark datasets like CIFAR-1009.\nTable 1. Test accuracy scores of the models trained on the clean and corrupted\n(20% synthetic noise) datasets for the 8 training methods. Light red highlight indicates deterioration in comparison\nto the baseline, while light blue denotes improvement. Notation: (mean \\(\\pm\\) std)% from 5 independently seeded runs.\nMethod\n            Test accuracy [%]\n        \nclean dataset\n            noisy dataset\n        \nBaseline\n            90.26 ± 0.03\n            85.31 ± 0.08\n        \nfunction\n            \n            Self-Paced Learning (SPL)\n            90.26 ± 0.03\n            88.51 ± 0.02\n        \nProvably Robust Learning (PRL)\n            90.26 ± 0.03\n            88.31 ± 0.02\n        \nClipped Cross-Entropy (CCE)\n            90.22 ± 0.03\n            89.51 ± 0.01\n        \nEarly Learning Regularisation (ELR)\n            90.33 ± 0.01\n            89.29 ± 0.03\n        \nJensen-Shannon Divergence (JSD) \n            89.92 ± 0.02\n            89.24 ± 0.01\n        \nCo-teaching (CT)\n            90.26 ± 0.03\n            88.72 ± 0.03\n        \nMixup\n            90.27 ± 0.02\n            86.02 ± 0.06\n        \nRobust classification results\nAll methods discussed in this study improved the model’s performance on the noisy dataset when compared to the baseline\n(Table 1). The best results were obtained with CCE (+4.2 p.p.), ELR (+3.98 p.p.) and JSD (+3.93 p.p.).\nCT, SPL, PRL performed a bit worse, but still proved to be quite robust, improving upon the baseline by 3.41 p.p.,\n3.2 p.p. and 3.0 p.p., respectively.\nMixup is a clear outlier — while it does improve upon the baseline by 0.71 p.p., this increase is noticeably smaller\nthan for the other evaluated methods. Our interpretation is that the linear augmentation at the heart of this method\nregularises the DNN, but does not address label noise per se. Mixup treats all samples equally, even if their labels\nare corrupted. The marginal improvement upon the baseline is evident in the validation accuracy training curve\n(Figure 12). Mixup starts to overfit around the 5th epoch, similarly to the baseline, and unlike all\nthe other methods.\n\n    \n    \n Figure 12. Validation accuracy during training. Validation accuracy for all methods was measured during training. It is evident that the best methods are CCE, ELR and JSD, with CT, PRL and SPL trailing slightly behind. Mixup behaves similarly to the baseline. \nConclusions\nThe problem of label noise is unavoidable in machine learning practice, and Allegro datasets are no exception.\nFortunately, there exist numerous methods that diminish the impact of label noise on prediction performance\nby increasing the robustness of machine learning models. In our experiments we implemented 7 of those methods\nand showed that they increase prediction accuracy in the presence of 20% synthetic noise when compared to the baseline\n(Cross-Entropy loss), most of them by a significant margin. The simple Clipped Cross-Entropy proved to be the best,\nwith an accuracy score of 89.51% (increase of 4.2 p.p. vs the baseline trained with noisy labels). This result is very\nclose to the baseline trained with clean labels (90.26%). Thus, we showed that for the case of 20% synthetic label\nnoise, it is possible to increase robustness so that the impact of label noise is negligible.\nThese experiments are only a first step in making classifiers at Allegro robust to label noise. The case of synthetic\nnoise presented here is not very realistic: real-world label noise tends to be instance-dependent,\ni.e. it is influenced by individual sample features. As such, we plan to further evaluate the methods for increasing\nmodel robustness with a real-world dataset perturbed by instance-dependent noise.\nIf you’d like to know more about label noise and model robustness, please refer to the papers listed below.\nDeep Learning is Robust to Massive Label Noise, Rolnick et al., 2018 ↩\nSelf-Paced Learning for Latent Variable Models, Kumar et al., 2010 ↩\nLearning Deep Neural Networks under Agnostic Corrupted Supervision, Liu et al., 2021 ↩\nEarly-Learning Regularization Prevents Memorization of Noisy Labels, Liu et al., 2020 ↩\nTemporal Ensembling for Semi-Supervised Learning, Laine et al., 2017 ↩\nGeneralized Jensen-Shannon Divergence Loss for Learning with Noisy Labels, Englesson et al., 2021 ↩ ↩2\nCo-teaching: Robust Training of Deep Neural Networks with Extremely Noisy Labels, Han et al., 2018 ↩ ↩2\nmixup: Beyond Empirical Risk Minimization, Zhang et al., 2018 ↩\nPervasive Label Errors in Test Sets Destabilize Machine Learning Benchmarks, Northcutt et al., 2021 ↩","guid":"https://blog.allegro.tech/2023/04/learning-from-noisy-data.html","categories":["tech","mlr","robustness","research","ml","machine-learning","ai"],"isoDate":"2023-04-17T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"Dynamic Workload Balancing in Hermes","link":"https://blog.allegro.tech/2023/04/dynamic-workload-balancing-in-hermes.html","pubDate":"Wed, 05 Apr 2023 00:00:00 +0200","authors":{"author":[{"name":["Piotr Rżysko"],"photo":["https://blog.allegro.tech/img/authors/piotr.rzysko.jpg"],"url":["https://blog.allegro.tech/authors/piotr.rzysko"]}]},"content":"<p><a href=\"https://github.com/allegro/hermes\">Hermes</a> is a distributed <a href=\"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\">publish-subscribe</a>\nmessage broker that we use at <a href=\"https://allegro.tech\">Allegro</a> to facilitate asynchronous communication between our\nmicroservices. As our usage of Hermes has grown over time, we faced a challenge in effectively distributing the\nload it handles to optimize resource utilization. In this blog post, we will present the implementation of a dynamic\nworkload balancing algorithm that we developed to address this challenge. We will describe the approach we took, the\nlessons we learned along the way, and the results we achieved.</p>\n\n<h2 id=\"hermes-architecture\">Hermes Architecture</h2>\n\n<p>Before we delve deeper into the article’s topic, let’s first briefly introduce the architecture of Hermes, depicted in\nthe diagram below:</p>\n\n<p><img src=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/hermes_architecture.png\" alt=\"Hermes Architecture\" /></p>\n\n<p>As we can see, Hermes is composed of two main modules:</p>\n\n<ul>\n  <li>\n    <p><strong>Hermes Frontend</strong> acts as a gateway, receiving messages from publishers via its REST interface, applying necessary\n  preprocessing, and eventually storing them in <a href=\"https://kafka.apache.org/\">Apache Kafka</a>.</p>\n  </li>\n  <li>\n    <p><strong>Hermes Consumers</strong> is a component that constitutes the delivery part of the system. Its role is to fetch messages\n  from Kafka and push them to predefined subscribers while providing reliability mechanisms such as retries, backpressure,\n  and rate limiting. For the sake of brevity, in the latter parts of the article, we’ll refer to a single instance of this\n  module as a <em>consumer</em>.</p>\n  </li>\n</ul>\n\n<p>Since the rest of this post discusses topics that mainly pertain to the delivery side of the system, let’s turn our\nattention to that now.</p>\n\n<p>Apache Kafka organizes messages, also known as events, into topics. To facilitate parallelism, a topic usually has\nmultiple partitions. Each event is stored in only one partition. When someone wants to receive messages from a given\ntopic via Hermes, they create a new subscription with the defined HTTP endpoint to which messages will be delivered. Under the\nhood, Hermes assigns a group of <em>consumers</em> to that subscription, with each <em>consumer</em> handling at least one of the\ntopic partitions. By default, a fixed number of <em>consumers</em> are assigned to a subscription, but the administrator can\nmanually override this number on a per-subscription basis. It’s also worth noting that a single <em>consumer</em> can handle\nmultiple subscriptions. The following diagram illustrates this:</p>\n\n<p><img src=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/partitions.png\" alt=\"Hermes Consumers\" /></p>\n\n<h2 id=\"workload-balancer\">Workload Balancer</h2>\n\n<p>The Hermes Consumers module is designed to operate in highly dynamic environments, e.g. in the cloud, where new\ninstances can be added, restarted, or removed at almost any time. This means that the module can handle these situations\nseamlessly and without disrupting the flow of messages. Additionally, it is horizontally scalable, meaning that\nwhen there is an increase in the number of subscriptions or an increase in outgoing traffic, we can easily scale out\nthe cluster by adding new <em>consumers</em>. This adaptability to changing circumstances is achieved by a mechanism called the\n“workload balancer.” It acts as an arbiter, monitoring the state of the cluster, and if necessary, proposing\nappropriate adjustments in the distribution of subscriptions to the rest of the nodes.</p>\n\n<h2 id=\"motivations-for-improving-workload-balancer\">Motivations for Improving Workload Balancer</h2>\n\n<p>Our first implementation of the workload balancer aimed to always assign the same number of subscriptions to each\n<em>consumer</em>. This strategy is easy to understand and performs optimally when subscriptions are equal with respect to\ntheir load. However, this is not always the case. For example, imagine that we have two subscriptions. The first\nprocesses 1,000 messages per second, and the second only 10 messages per second. It is highly likely that they will\nnot consume the same number of CPU cores, network bandwidth, etc. Thus, if we want to spread the load evenly,\nwe should not assume that they are equal.</p>\n\n<p>Usually, when we deploy our application in the cloud, we have to predefine the number of instances and the amount of\nresources (e.g. CPU, memory, etc.) that should be allocated to it. Unless we use a mechanism that adjusts these\nvalues on a per-instance basis, each instance will receive an equal share of the available resources. Now, let’s take\na look at the CPU usage of each <em>consumer</em> from one of our Hermes production clusters using the workload balancer\nwhich does not account for the disproportions between subscriptions:</p>\n\n<p><a href=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/cpu_before.png\"><img src=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/cpu_before.png\" alt=\"Initial CPU usage\" /></a></p>\n\n<p>The figure below shows the difference in CPU usage between the least and most heavily loaded <em>consumers</em>:</p>\n\n<p><a href=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/cpu_before_least_and_most.png\"><img src=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/cpu_before_least_and_most.png\" alt=\"CPU usage of the least and most heavily loaded consumers\" /></a></p>\n\n<p>Taking into account all of the above factors, in order not to compromise system performance, we always had to determine\nthe right allocation based on the most loaded instance. Consequently, less busy instances were wasting resources as\ntheir demands were lower, not making the most of what was available. Knowing that our Hermes production clusters will\ncontinue to grow in terms of both traffic and the number of topics and subscriptions, we decided to develop a new and\nimproved workload balancer, which we will discuss in the next section. We knew that if we didn’t do this, we would have\nto over-allocate even more resources in the future.</p>\n\n<h2 id=\"solution\">Solution</h2>\n\n<h3 id=\"constraints-and-requirements\">Constraints and Requirements</h3>\n\n<p>Before we proceed to the description of the solution we devised, we would like to discuss the requirements and\nconstraints that guided our design process.</p>\n\n<p>First, we wanted to preserve the core responsibilities of the original workload balancer, such as:</p>\n\n<ul>\n  <li>Allocating work across newly added <em>consumers</em></li>\n  <li>Distributing work from removed <em>consumers</em></li>\n  <li>Assigning newly added subscriptions to available <em>consumers</em></li>\n  <li>Reclaiming resources previously assigned to removed subscriptions</li>\n</ul>\n\n<p>Secondly, we decided not to change the existing rule of assigning the same number of subscriptions to each <em>consumer</em>.\nThe reasoning behind this decision stemmed from the threading model implemented in Hermes Consumers, where every\nsubscription assigned to a <em>consumer</em> is handled by a separate thread. Having an unequal number of threads between\n<em>consumers</em> could potentially lead to some consumers being overwhelmed with more\n<a href=\"https://en.wikipedia.org/wiki/Context_switch\">context switches</a> and a higher memory footprint.</p>\n\n<p>Similarly, we wanted to preserve the strategy of determining the number of <em>consumers</em> a subscription should be\nassigned to (fixed and globally configured, but with the option of being overridden on a per-subscription basis by the\nadministrator). Although it may not be optimal, for the reasons mentioned earlier, we chose to narrow down the scope of the\nimprovements, keep it as is, and potentially revisit it in the future.</p>\n\n<p>The last and very important factor that we had to consider while designing the new algorithm was the cost tied to\nevery change in the assignment of subscriptions, particularly the cost of rebalancing Kafka’s consumer groups\n(i.e. temporarily suspending the delivery of messages from partitions affected by the rebalance until the process is\ncompleted).</p>\n\n<p>With all of the above preconditions met, we were able to augment the capabilities of the workload balancer by making it\naware of the heterogeneity of the subscriptions. We will discuss how we approached this in the following two subsections.</p>\n\n<h3 id=\"first-attempt\">First Attempt</h3>\n\n<p>As we mentioned earlier, the main reason for the imbalance was the fact that the original balancing algorithm was\nunaware of the differences between subscriptions. Therefore, in the first place, we wanted to make subscriptions\ncomparable by associating with each of them an attribute called “weight.” Internally, it’s a vector of metrics\ncharacterizing a subscription. Currently, this vector has only one element, named “operations per second.” A single\noperation is an action executed by a <em>consumer</em> in the context of a given subscription, such as fetching an event from\nKafka, committing offsets to Kafka, or sending an event to a subscriber. In the future, we may extend the\nweight vector by adding metrics that will allow us to eliminate uneven consumption of resources other than CPU.</p>\n\n<p>Based on weights reported by individual <em>consumers</em>, a leader (one of the nodes from the Hermes Consumers cluster)\nbuilds subscription profiles, which are records containing information about subscriptions necessary for making\nbalancing decisions. Among the details included in each profile are the weight and the timestamp of the last rebalance.\nIt’s important to remember that a single subscription can be spanned across multiple <em>consumers</em>, resulting in multiple\nweight vectors associated with a single subscription. To resolve this, the leader builds a final weight vector (\\(W\\)),\nwhich is used in further calculations:</p>\n\n<p>\\begin{equation}\nW =\n\\begin{bmatrix}\nmax(m_{11},m_{12},\\cdots,m_{1M}) &amp; max(m_{21},m_{22},\\cdots,m_{2M}) &amp; \\cdots &amp; max(m_{N1},m_{N2},\\cdots,m_{NM})\n\\end{bmatrix}\n\\end{equation}</p>\n\n<p>where:</p>\n\n<p>\\(m_{ij}\\) is the value of metric \\(i\\) reported by <em>consumer</em> \\(j\\)</p>\n\n<p>\\(N\\) is the number of metrics included in the weight vector</p>\n\n<p>\\(M\\) is the number of <em>consumers</em></p>\n\n<p>It’s also worth noting that in order to smooth out abrupt changes and short-term fluctuations in traffic, we apply an\n<a href=\"https://en.wikipedia.org/wiki/Exponential_smoothing\">exponentially weighted moving average (EWMA)</a> to the collected\nmetrics.</p>\n\n<p>To address the requirement regarding the cost of reassigning subscriptions, we introduced a global parameter called\n“stabilization window.” After a subscription is assigned, the stabilization window determines the minimum time before\nthe subscription can be reassigned. This “freezes” the subscription so that it doesn’t get reassigned too quickly,\nallowing the subscription to catch up with the events produced during the rebalancing process.</p>\n\n<p>Equipped with the necessary terminology, we can now proceed to describe the algorithm itself. The high-level idea is\nfairly simple and boils down to the leader periodically executing the following steps:</p>\n<ol>\n  <li>Fetch subscription weights from every <em>consumer</em>.</li>\n  <li>Using information from the previous step, rebuild subscription profiles.</li>\n  <li>Calculate the total weight of the whole Hermes Consumers cluster by summing all subscription weights.</li>\n  <li>Determine the target consumer weight as an average of the weights of all <em>consumers</em> in the cluster.</li>\n  <li>Build a set of <em>consumers</em> whose weights are above the average calculated in step 4.</li>\n  <li>Build a set of <em>consumers</em> whose weights are below the average calculated in step 4.</li>\n  <li>Swap subscriptions between the sets calculated in the previous two steps while maintaining the following restrictions:\n    <ul>\n      <li>The weight of an instance from the overloaded set (step 5) is smaller than it was before the swap but is not\nsmaller than the target value.</li>\n      <li>The weight of an instance from the underloaded set (step 6) is greater than it was before the swap but is not\ngreater than the target value.</li>\n      <li>If, for a given subscription, the period of time since the last rebalance is shorter than the stabilization\nwindow, don’t consider the subscription eligible for the swap.</li>\n    </ul>\n  </li>\n</ol>\n\n<p>The graph below shows the results we obtained after deploying the implementation of this algorithm to production:</p>\n\n<p><a href=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/cpu_first_attempt.png\"><img src=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/cpu_first_attempt.png\" alt=\"CPU usage after the first attempt\" /></a></p>\n\n<p>Although the graph shows that the new algorithm got us closer to having uniform utilization of CPU, we were not fully\nsatisfied with that outcome. The reason for that is depicted below, where we compare the most loaded instance with the\nleast loaded one. The degree of disparity in terms of CPU usage is still significant. Therefore, we decided to at least\ndetermine the reason for that state of affairs and, if possible, refine the algorithm.</p>\n\n<p><a href=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/cpu_first_attempt_least_most.png\"><img src=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/cpu_first_attempt_least_most.png\" alt=\"CPU usage of the least and most heavily loaded consumers after the first attempt\" /></a></p>\n\n<p>While investigating this issue, we noticed a correlation between the class of hardware that <em>consumers</em> run on and\ntheir CPU usage. This observation led us to the conclusion that, despite the fact that load is evenly distributed,\ninstances running on older generations of hardware utilize a higher percentage of available CPU power than those running\non newer hardware, which is understandable as older machines are typically less performant. In the following section, we\ndescribe how we tackled this issue.</p>\n\n<h3 id=\"second-attempt\">Second Attempt</h3>\n\n<p>After our investigation, it was clear to us that if we wanted to achieve uniform CPU usage across the entire Hermes cluster,\naiming for processing the same number of operations per second on each instance was not the way to go. This led us to the\nquestion of how to determine the ideal number of operations per second that each instance can handle without being either\noverloaded or underloaded. To answer this, we had to take into account the fact that in the cloud environment, it is not\nalways possible to precisely define the hardware that our application will be running on. Potentially, we could put the\nburden of making the right decision on the Hermes administrator. However, this is a very tedious task and also hard to\nmaintain in dynamic environments where applications are almost constantly moved around different physical machines.</p>\n\n<p>As we wanted to avoid any manual tuning, we decided to employ a concept well-known in\n<a href=\"https://en.wikipedia.org/wiki/Classical_control_theory\">Control Theory</a>, called a\n<a href=\"https://en.wikipedia.org/wiki/Proportional_control\">proportional controller</a>. To explain the idea behind this concept,\nlet’s use an example. In the following picture, we see an operator who must adjust a hand valve to achieve the desired\ntemperature in a furnace. The operator doesn’t know upfront what the appropriate degree to which the valve should be\nopen is, therefore it is necessary to use a trial-and-error method to attain the desired outcome.</p>\n\n<p><img src=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/proportional_controler.png\" alt=\"Proportional Controller\" /></p>\n\n<p>Now let’s take a look at how this example relates to Control Theory. Using Control Theory terms, we can say that the\npicture presents a feedback control system, also known as a closed-loop control system. In such systems, the current\nstate and desired state of the system are referred to as the process variable and set point, respectively. In the example,\nthe current temperature in the furnace represents the process variable, while the temperature that the operator wants to\nachieve is the set point. To fully automate the control system and eliminate the need for manual adjustments, we typically\nreplace the operator with two components: an actuator and a controller. The controller calculates an error, which is the\ndifference between the set point and the process variable. Based on the error, the controller proportionally increases\nor decreases its output (in this example, the degree to which the valve is open). The actuator uses the controller’s\noutput to physically adjust the state of the system.</p>\n\n<p>If we think about it, we realize that the problem a proportional controller solves is very similar to the one we\nencounter when we run Hermes on heterogeneous hardware. Specifically, our goal is to achieve equal CPU usage across all\n<em>consumers</em>, with the average usage of all <em>consumers</em> being our target. Additionally, we know that the number of\noperations per second processed by each <em>consumer</em> directly affects CPU usage. By utilizing a proportional\ncontroller, we can determine the value of this variable by calculating the error (the difference between the\ntarget and current CPU usage) and then adjusting the target weight accordingly. If we run the controller\nin a continuous loop, where it increases the target weight when current usage is below the target and vice versa, we\nshould eventually reach the set point.</p>\n\n<p>After integrating a proportional controller into our algorithm and deploying it to production, we were able to achieve\nthe following results:</p>\n\n<p><a href=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/cpu_second_attempt.png\"><img src=\"/img/articles/2023-04-05-dynamic-workload-balancing-in-hermes/cpu_second_attempt.png\" alt=\"CPU usage after the second attempt\" /></a></p>\n\n<p>As we can see, the current CPU usage of all instances is very similar. This is exactly what we aimed for. If we\nassume that we are targeting 40% CPU utilization (to be able to handle additional traffic in case of a datacenter failover),\nby introducing the new algorithm we reduced the amount of allocated resources by approximately 42%.</p>\n\n<h2 id=\"conclusion-and-potential-improvements\">Conclusion and Potential Improvements</h2>\n\n<p>In this post, we have described the challenges we faced with balancing load in our Hermes clusters, and the steps we\ntook to overcome them. By introducing our new workload balancing algorithm that dynamically adapts to varying\nsubscription loads and heterogeneous hardware, we were able to achieve a more uniform distribution of CPU usage across\nHermes Consumers instances.</p>\n\n<p>This approach has allowed us to significantly reduce the amount of allocated resources and avoid performance issues\ncaused by the imbalance that we observed earlier. However, there is still room for improvement. So far, we have been\nfocused on optimizing CPU utilization, but the way the algorithm is designed, enables us to extend the spectrum of\nbalanced resources in the future. For instance, we may consider factoring in memory and network bandwidth as well.</p>\n\n<p>Additionally, we plan to improve the ease of operating Hermes clusters. We aim to avoid having tuning knobs and putting\nthe burden of setting them correctly on the user. One such knob that we may want to remove in the future is the parameter\ndefining how many consumers are assigned to a subscription. Currently, the Hermes administrator is responsible for\nchoosing the value of this parameter for subscriptions where the default value is not a good fit. We suspect that this\ntask could be automated by delegating it to the workload balancer.</p>\n","contentSnippet":"Hermes is a distributed publish-subscribe\nmessage broker that we use at Allegro to facilitate asynchronous communication between our\nmicroservices. As our usage of Hermes has grown over time, we faced a challenge in effectively distributing the\nload it handles to optimize resource utilization. In this blog post, we will present the implementation of a dynamic\nworkload balancing algorithm that we developed to address this challenge. We will describe the approach we took, the\nlessons we learned along the way, and the results we achieved.\nHermes Architecture\nBefore we delve deeper into the article’s topic, let’s first briefly introduce the architecture of Hermes, depicted in\nthe diagram below:\n\nAs we can see, Hermes is composed of two main modules:\nHermes Frontend acts as a gateway, receiving messages from publishers via its REST interface, applying necessary\n  preprocessing, and eventually storing them in Apache Kafka.\nHermes Consumers is a component that constitutes the delivery part of the system. Its role is to fetch messages\n  from Kafka and push them to predefined subscribers while providing reliability mechanisms such as retries, backpressure,\n  and rate limiting. For the sake of brevity, in the latter parts of the article, we’ll refer to a single instance of this\n  module as a consumer.\nSince the rest of this post discusses topics that mainly pertain to the delivery side of the system, let’s turn our\nattention to that now.\nApache Kafka organizes messages, also known as events, into topics. To facilitate parallelism, a topic usually has\nmultiple partitions. Each event is stored in only one partition. When someone wants to receive messages from a given\ntopic via Hermes, they create a new subscription with the defined HTTP endpoint to which messages will be delivered. Under the\nhood, Hermes assigns a group of consumers to that subscription, with each consumer handling at least one of the\ntopic partitions. By default, a fixed number of consumers are assigned to a subscription, but the administrator can\nmanually override this number on a per-subscription basis. It’s also worth noting that a single consumer can handle\nmultiple subscriptions. The following diagram illustrates this:\n\nWorkload Balancer\nThe Hermes Consumers module is designed to operate in highly dynamic environments, e.g. in the cloud, where new\ninstances can be added, restarted, or removed at almost any time. This means that the module can handle these situations\nseamlessly and without disrupting the flow of messages. Additionally, it is horizontally scalable, meaning that\nwhen there is an increase in the number of subscriptions or an increase in outgoing traffic, we can easily scale out\nthe cluster by adding new consumers. This adaptability to changing circumstances is achieved by a mechanism called the\n“workload balancer.” It acts as an arbiter, monitoring the state of the cluster, and if necessary, proposing\nappropriate adjustments in the distribution of subscriptions to the rest of the nodes.\nMotivations for Improving Workload Balancer\nOur first implementation of the workload balancer aimed to always assign the same number of subscriptions to each\nconsumer. This strategy is easy to understand and performs optimally when subscriptions are equal with respect to\ntheir load. However, this is not always the case. For example, imagine that we have two subscriptions. The first\nprocesses 1,000 messages per second, and the second only 10 messages per second. It is highly likely that they will\nnot consume the same number of CPU cores, network bandwidth, etc. Thus, if we want to spread the load evenly,\nwe should not assume that they are equal.\nUsually, when we deploy our application in the cloud, we have to predefine the number of instances and the amount of\nresources (e.g. CPU, memory, etc.) that should be allocated to it. Unless we use a mechanism that adjusts these\nvalues on a per-instance basis, each instance will receive an equal share of the available resources. Now, let’s take\na look at the CPU usage of each consumer from one of our Hermes production clusters using the workload balancer\nwhich does not account for the disproportions between subscriptions:\n\nThe figure below shows the difference in CPU usage between the least and most heavily loaded consumers:\n\nTaking into account all of the above factors, in order not to compromise system performance, we always had to determine\nthe right allocation based on the most loaded instance. Consequently, less busy instances were wasting resources as\ntheir demands were lower, not making the most of what was available. Knowing that our Hermes production clusters will\ncontinue to grow in terms of both traffic and the number of topics and subscriptions, we decided to develop a new and\nimproved workload balancer, which we will discuss in the next section. We knew that if we didn’t do this, we would have\nto over-allocate even more resources in the future.\nSolution\nConstraints and Requirements\nBefore we proceed to the description of the solution we devised, we would like to discuss the requirements and\nconstraints that guided our design process.\nFirst, we wanted to preserve the core responsibilities of the original workload balancer, such as:\nAllocating work across newly added consumers\nDistributing work from removed consumers\nAssigning newly added subscriptions to available consumers\nReclaiming resources previously assigned to removed subscriptions\nSecondly, we decided not to change the existing rule of assigning the same number of subscriptions to each consumer.\nThe reasoning behind this decision stemmed from the threading model implemented in Hermes Consumers, where every\nsubscription assigned to a consumer is handled by a separate thread. Having an unequal number of threads between\nconsumers could potentially lead to some consumers being overwhelmed with more\ncontext switches and a higher memory footprint.\nSimilarly, we wanted to preserve the strategy of determining the number of consumers a subscription should be\nassigned to (fixed and globally configured, but with the option of being overridden on a per-subscription basis by the\nadministrator). Although it may not be optimal, for the reasons mentioned earlier, we chose to narrow down the scope of the\nimprovements, keep it as is, and potentially revisit it in the future.\nThe last and very important factor that we had to consider while designing the new algorithm was the cost tied to\nevery change in the assignment of subscriptions, particularly the cost of rebalancing Kafka’s consumer groups\n(i.e. temporarily suspending the delivery of messages from partitions affected by the rebalance until the process is\ncompleted).\nWith all of the above preconditions met, we were able to augment the capabilities of the workload balancer by making it\naware of the heterogeneity of the subscriptions. We will discuss how we approached this in the following two subsections.\nFirst Attempt\nAs we mentioned earlier, the main reason for the imbalance was the fact that the original balancing algorithm was\nunaware of the differences between subscriptions. Therefore, in the first place, we wanted to make subscriptions\ncomparable by associating with each of them an attribute called “weight.” Internally, it’s a vector of metrics\ncharacterizing a subscription. Currently, this vector has only one element, named “operations per second.” A single\noperation is an action executed by a consumer in the context of a given subscription, such as fetching an event from\nKafka, committing offsets to Kafka, or sending an event to a subscriber. In the future, we may extend the\nweight vector by adding metrics that will allow us to eliminate uneven consumption of resources other than CPU.\nBased on weights reported by individual consumers, a leader (one of the nodes from the Hermes Consumers cluster)\nbuilds subscription profiles, which are records containing information about subscriptions necessary for making\nbalancing decisions. Among the details included in each profile are the weight and the timestamp of the last rebalance.\nIt’s important to remember that a single subscription can be spanned across multiple consumers, resulting in multiple\nweight vectors associated with a single subscription. To resolve this, the leader builds a final weight vector (\\(W\\)),\nwhich is used in further calculations:\n\\begin{equation}\nW =\n\\begin{bmatrix}\nmax(m_{11},m_{12},\\cdots,m_{1M}) & max(m_{21},m_{22},\\cdots,m_{2M}) & \\cdots & max(m_{N1},m_{N2},\\cdots,m_{NM})\n\\end{bmatrix}\n\\end{equation}\nwhere:\n\\(m_{ij}\\) is the value of metric \\(i\\) reported by consumer \\(j\\)\n\\(N\\) is the number of metrics included in the weight vector\n\\(M\\) is the number of consumers\nIt’s also worth noting that in order to smooth out abrupt changes and short-term fluctuations in traffic, we apply an\nexponentially weighted moving average (EWMA) to the collected\nmetrics.\nTo address the requirement regarding the cost of reassigning subscriptions, we introduced a global parameter called\n“stabilization window.” After a subscription is assigned, the stabilization window determines the minimum time before\nthe subscription can be reassigned. This “freezes” the subscription so that it doesn’t get reassigned too quickly,\nallowing the subscription to catch up with the events produced during the rebalancing process.\nEquipped with the necessary terminology, we can now proceed to describe the algorithm itself. The high-level idea is\nfairly simple and boils down to the leader periodically executing the following steps:\nFetch subscription weights from every consumer.\nUsing information from the previous step, rebuild subscription profiles.\nCalculate the total weight of the whole Hermes Consumers cluster by summing all subscription weights.\nDetermine the target consumer weight as an average of the weights of all consumers in the cluster.\nBuild a set of consumers whose weights are above the average calculated in step 4.\nBuild a set of consumers whose weights are below the average calculated in step 4.\nSwap subscriptions between the sets calculated in the previous two steps while maintaining the following restrictions:\n    \nThe weight of an instance from the overloaded set (step 5) is smaller than it was before the swap but is not\nsmaller than the target value.\nThe weight of an instance from the underloaded set (step 6) is greater than it was before the swap but is not\ngreater than the target value.\nIf, for a given subscription, the period of time since the last rebalance is shorter than the stabilization\nwindow, don’t consider the subscription eligible for the swap.\nThe graph below shows the results we obtained after deploying the implementation of this algorithm to production:\n\nAlthough the graph shows that the new algorithm got us closer to having uniform utilization of CPU, we were not fully\nsatisfied with that outcome. The reason for that is depicted below, where we compare the most loaded instance with the\nleast loaded one. The degree of disparity in terms of CPU usage is still significant. Therefore, we decided to at least\ndetermine the reason for that state of affairs and, if possible, refine the algorithm.\n\nWhile investigating this issue, we noticed a correlation between the class of hardware that consumers run on and\ntheir CPU usage. This observation led us to the conclusion that, despite the fact that load is evenly distributed,\ninstances running on older generations of hardware utilize a higher percentage of available CPU power than those running\non newer hardware, which is understandable as older machines are typically less performant. In the following section, we\ndescribe how we tackled this issue.\nSecond Attempt\nAfter our investigation, it was clear to us that if we wanted to achieve uniform CPU usage across the entire Hermes cluster,\naiming for processing the same number of operations per second on each instance was not the way to go. This led us to the\nquestion of how to determine the ideal number of operations per second that each instance can handle without being either\noverloaded or underloaded. To answer this, we had to take into account the fact that in the cloud environment, it is not\nalways possible to precisely define the hardware that our application will be running on. Potentially, we could put the\nburden of making the right decision on the Hermes administrator. However, this is a very tedious task and also hard to\nmaintain in dynamic environments where applications are almost constantly moved around different physical machines.\nAs we wanted to avoid any manual tuning, we decided to employ a concept well-known in\nControl Theory, called a\nproportional controller. To explain the idea behind this concept,\nlet’s use an example. In the following picture, we see an operator who must adjust a hand valve to achieve the desired\ntemperature in a furnace. The operator doesn’t know upfront what the appropriate degree to which the valve should be\nopen is, therefore it is necessary to use a trial-and-error method to attain the desired outcome.\n\nNow let’s take a look at how this example relates to Control Theory. Using Control Theory terms, we can say that the\npicture presents a feedback control system, also known as a closed-loop control system. In such systems, the current\nstate and desired state of the system are referred to as the process variable and set point, respectively. In the example,\nthe current temperature in the furnace represents the process variable, while the temperature that the operator wants to\nachieve is the set point. To fully automate the control system and eliminate the need for manual adjustments, we typically\nreplace the operator with two components: an actuator and a controller. The controller calculates an error, which is the\ndifference between the set point and the process variable. Based on the error, the controller proportionally increases\nor decreases its output (in this example, the degree to which the valve is open). The actuator uses the controller’s\noutput to physically adjust the state of the system.\nIf we think about it, we realize that the problem a proportional controller solves is very similar to the one we\nencounter when we run Hermes on heterogeneous hardware. Specifically, our goal is to achieve equal CPU usage across all\nconsumers, with the average usage of all consumers being our target. Additionally, we know that the number of\noperations per second processed by each consumer directly affects CPU usage. By utilizing a proportional\ncontroller, we can determine the value of this variable by calculating the error (the difference between the\ntarget and current CPU usage) and then adjusting the target weight accordingly. If we run the controller\nin a continuous loop, where it increases the target weight when current usage is below the target and vice versa, we\nshould eventually reach the set point.\nAfter integrating a proportional controller into our algorithm and deploying it to production, we were able to achieve\nthe following results:\n\nAs we can see, the current CPU usage of all instances is very similar. This is exactly what we aimed for. If we\nassume that we are targeting 40% CPU utilization (to be able to handle additional traffic in case of a datacenter failover),\nby introducing the new algorithm we reduced the amount of allocated resources by approximately 42%.\nConclusion and Potential Improvements\nIn this post, we have described the challenges we faced with balancing load in our Hermes clusters, and the steps we\ntook to overcome them. By introducing our new workload balancing algorithm that dynamically adapts to varying\nsubscription loads and heterogeneous hardware, we were able to achieve a more uniform distribution of CPU usage across\nHermes Consumers instances.\nThis approach has allowed us to significantly reduce the amount of allocated resources and avoid performance issues\ncaused by the imbalance that we observed earlier. However, there is still room for improvement. So far, we have been\nfocused on optimizing CPU utilization, but the way the algorithm is designed, enables us to extend the spectrum of\nbalanced resources in the future. For instance, we may consider factoring in memory and network bandwidth as well.\nAdditionally, we plan to improve the ease of operating Hermes clusters. We aim to avoid having tuning knobs and putting\nthe burden of setting them correctly on the user. One such knob that we may want to remove in the future is the parameter\ndefining how many consumers are assigned to a subscription. Currently, the Hermes administrator is responsible for\nchoosing the value of this parameter for subscriptions where the default value is not a good fit. We suspect that this\ntask could be automated by delegating it to the workload balancer.","guid":"https://blog.allegro.tech/2023/04/dynamic-workload-balancing-in-hermes.html","categories":["tech","architecture","hermes","kafka","algorithms","pub/sub","publish-subscribe","load balancing","open source"],"isoDate":"2023-04-04T22:00:00.000Z","thumbnail":"images/post-headers/default.jpg"},{"title":"How neuroscience can help you as a software engineer - motivation","link":"https://blog.allegro.tech/2023/03/neuroscience-for-software-engineers-motivation.html","pubDate":"Tue, 21 Mar 2023 00:00:00 +0100","authors":{"author":[{"name":["Paulina Szwed"],"photo":["https://blog.allegro.tech/img/authors/paulina.szwed.jpg"],"url":["https://blog.allegro.tech/authors/paulina.szwed"]}]},"content":"<p>Many of us, software engineers, have experienced those days when nothing really sparks joy in coding, debugging,\npreparing spikes or refining tasks for the next sprints. Obviously, we would like to have as few of such days as possible\nand go on with our work effectively. A solution to this definitely is not tormenting our brains with guilt and forced\nlabour. There are other ways, and I would like to invite you to explore them with me and learn a little about our\nnervous systems in the process. We’ll find out where the motivation comes from on a biological and psychological level.\nWe’ll also take a look at the changes you can introduce into your day to take advantage of certain mechanisms working\non a neural level and boost your motivation and productivity.</p>\n\n<h2 id=\"the-neuroscience-of-motivation\">The neuroscience of motivation</h2>\n\n<p>The key to maintaining energy to work throughout the day is simple – getting and staying motivated. Even though it seems\nlike something not necessarily in our power, motivation can be, to an extent, consciously modulated once we know\nthe biological and psychological mechanisms behind it.</p>\n\n<h3 id=\"the-source\">The source</h3>\n\n<p>On a neural level, the fuel of motivation is <strong>dopamine</strong>. Dopamine is a hormone (meaning it’s a messenger of the\nbody travelling through the bloodstream) and a neurotransmitter (which indicates its ability to affect communication between\nneurons).</p>\n\n<p>In general, high levels of dopamine cause high drive, motivation and willingness to live, do and experience. Low levels\nof dopamine cause the opposite state — a lack of will to do any effort (doomscrolling or examining the contents of the\nfridge is still in our reach). How much dopamine is currently in our system, how much dopamine there was a moment ago\nand how much we remember enjoying a particular state is for our brains a way to set our level of motivation.</p>\n\n<h3 id=\"the-workspace\">The workspace</h3>\n\n<p>In the context of motivation our main area of focus across the nervous system should be the mesocorticolimbic system,\nwhich is responsible for the reward mechanism.</p>\n\n<p>Mesocorticolimbic system consists of dopaminergic and dopaminoceptive neurons — the former is a specialised kind of\nneurons that is capable of producing and emitting dopamine into our body; the latter is capable of detecting and\nreacting to the dopamine. The pathways of this system go through different areas of the brain — they extend from the\nventral tegmental area (VTA) to the part of the brain responsible for memory (hippocampus), reward, pleasure and movement\n(nucleus accumbens) and reasoning (prefrontal cortex).</p>\n\n<p><img src=\"/img/articles/2023-03-21-neuroscience-for-software-engineers-motivation/1280px-Dopamine_pathways.svg.png\" alt=\"Dopamine pathways in the brain\" title=\"Dopamine pathways in the brain (Public Domain from [Wikipedia](https://en.wikipedia.org/wiki/Dopamine#/media/File:Dopamine_pathways.svg))\" /></p>\n\n<p>The complexity of this structure might be a hint that there are a multiple implications of dopamine release, but\nalso many different ways to interact with this area.</p>\n\n<h3 id=\"the-process\">The process</h3>\n\n<p>When we talk about managing dopamine levels in healthy individuals, we actually should consider two different things:</p>\n\n<ul>\n  <li><strong>baseline level</strong>, which is how much dopamine circulates in the body and determines how much dopamine we are capable\nof having,</li>\n  <li><strong>peak level</strong>, which tells us how much dopamine we have at the moment or as a result of a rapid change.</li>\n</ul>\n\n<p>Baseline level and peak level are closely related to each other. Evolutionally we are prepared to go out and search for\ndifferent resources, such as food, water or shelter, even though nowadays we might use it to gain slightly different\nthings (like a morning coffee or a salary). The drive to do so is provided by dopamine – which is, as we already know, a\nhormonal fuel of motivation. This mechanism is pretty old and it can be observed widely across the animal kingdom.</p>\n\n<p>When the resources are found we experience a dopamine release — that is an effect of the reward mechanism in our\nmesocorticolimbic pathway. Now, in order to make us go and search for the resources again, the dopamine level must drop,\nso that we feel the lack of those resources as unpleasurable and seek for them again.</p>\n\n<p>The dopamine level drops <strong>lower</strong> than the baseline and the extent of the drop is proportional to the height of the\npeak. Why? The drop of the dopamine level is caused by releasing available dopamine from synaptic vesicles – small\nstructures in the dopaminergic neurons. In time the vesicles get depleted of dopamine – we can only release the hormone\nthat is already there, ready to be deployed. After the release there isn’t enough dopamine in the vesicles to keep the\nbaseline level. It will go back to the baseline eventually, as the neurons produce more of it, but for a period of time\nit’s going to remain low.</p>\n\n<p>Continuous peaks in dopamine level may eventually lead to drop of the baseline level. In that situation a person’s\nbrain, seeking for another reward to elevate it, will try repeating previous dopamine-increasing behaviours. A cascade\nof peaks and drops with repeated behaviours is a mechanism for addiction. This is something that may happen over\nexcessive usage of certain substances but also with social media. Incoming likes, comments and notifications or\nscrollable, neverending feed of videos — all of these generate peaks of dopamine. When we spend time on social media\nexperiencing peak after peak we may start feeling less and less satisfaction but still feel the urge to scroll further —\ndue to the mechanism I have just described. That would explain why social media addiction is such a great challenge\nfor our society.</p>\n\n<h2 id=\"how-to-get-and-stay-motivated\">How to get and stay motivated</h2>\n\n<p>After that long lecture on neurobiology, those who are still with me may be asking the question “are we there yet”? Yes,\nwe are! That knowledge is going to let us dive into different strategies of managing our dopamine levels, hence\nmodulating our motivation.</p>\n\n<p><img src=\"/img/articles/2023-03-21-neuroscience-for-software-engineers-motivation/54e8c52c-c40e-4197-a0ec-d17be266ed90_text.gif\" alt=\"Are we there yet...? Asked Donkey from Shrek\" title=\"(from [Giphy](https://y.yarn.co/54e8c52c-c40e-4197-a0ec-d17be266ed90_text.gif)\" /></p>\n\n<h3 id=\"short-term-increase\">Short-term increase</h3>\n\n<p>There are multiple possibilities to invoke a peak of dopamine and give our bodies that immediate impulse lasting a few\nminutes or even seconds. We should be aware of them, both when we need those peaks and when we want to avoid them — and\nsoon you’ll know why.</p>\n\n<p>There is a significant number of substances that may increase the dopamine level above the baseline:</p>\n\n<ul>\n  <li>Chocolate might increase it up to 1,5 times, although it only lasts a few seconds.</li>\n  <li>Smoked nicotine or cocaine may cause a 2,5 times increase, amphetamine causes up to 10-fold increase (knowing that\nand how peak and baseline levels of dopamine work, explains the addictive effect those substances have).</li>\n  <li>Alcohol in low doses is also known to cause dopamine release.</li>\n  <li>Ingestion of herbs like saffron, rosemary or oregano may lead to elevation of dopamine levels.</li>\n  <li>Caffeine causes a rather modest increase of dopamine, but also increases sensitivity of some dopamine receptors as\nwell as their number and density. This is worth noting, especially for coffee-fueled machines like programmers – a cup\nof coffee in the morning will make us more susceptible to dopamine changes throughout the day.</li>\n</ul>\n\n<p>There are also several actions which we might take to induce a peak of dopamine like physical activity or thinking and\ntalking about things we enjoy. The former is rather subjective and the height of the peak depends on whether the person\nenjoys the activity itself. For those who do, it may double the dopamine level.</p>\n\n<p>The latter results from involvement of the prefrontal cortex in the mesocorticolimbic system. Do you remember the last\ntime when you’ve been telling somebody about that new thing you’d recently learned? How passionate you’ve felt and how\nhappy and excited you’ve been afterwards? The prefrontal cortex is responsible for assigning rational explanations and\nsubjective experiences to things we engage with. Recalling those interactions might cause a dopamine release and make us\nhappier and more motivated.</p>\n\n<h3 id=\"long-term-strategies\">Long-term strategies</h3>\n\n<p>As previously said, the peaks of the dopamine, especially one after the other, will cause the dopamine level to drop\nbelow the baseline. In order to maintain high levels of dopamine (hence high motivation) on a daily basis we should act\nlong-term and affect the baseline level as much as possible. There are ways to do it.</p>\n\n<h4 id=\"exposure-to-cold\">Exposure to cold</h4>\n\n<p>Research shows that when a human subject enters cold water (14°C) and stays there for up to an hour it leads to rapid\nincrease in norepinephrine and epinephrine (i.e. adrenaline) and also an increase in dopamine. Dopamine was observed to\ncontinuously rise up to 250% of baseline level and it stayed there for a few hours. It also limited release of cortisol\n— the stress hormone.</p>\n\n<p>An hour-long cold bath is too much for an average person, but the same effect (although on a smaller scale) can be\nacquired by more accessible measures. How about a quick cold shower before work to charge up on that dopamine? Or maybe\njoining a winter swimming community?</p>\n\n<p><img src=\"/img/articles/2023-03-21-neuroscience-for-software-engineers-motivation/giphy-downsized-large.gif\" alt=\"A man jumping into snow\" title=\"(from [Giphy](https://media.giphy.com/media/MpJJ7gWng24bjxrMiK/giphy-downsized-large.gif))\" /></p>\n\n<h4 id=\"avoiding-layers-of-dopamine-increasing-factors\">Avoiding layers of dopamine-increasing factors</h4>\n\n<p>Do you start working only with a big hot cup of coffee in your hand? Do you listen to loud music while programming? Or\nmaybe do you treat yourself with a sweet drink after a workout? Are there a lot of such rituals? You might want to\nconsider not having them on a daily basis.</p>\n\n<p>Every one of these rituals is a dopamine-increasing factor. As you’ve already read, multiple peaks of dopamine one on\ntop of the other might not be a great idea. Layering multiple dopamine-increasing factors on a regular basis might\nseriously affect our ability to release dopamine in general. Spiking the dopamine by multiple activities in a short\nperiod of time leads to lowering the baseline by depleting stored, ready-to-deploy dopamine. That may lead to lowering\nthe baseline dopamine level, what will result in lack of motivation and feeling low in general.</p>\n\n<p>So what should we do? Are those things bad for us? Well, not really. Sometimes these spikes of dopamine from listening\nto music or sweet treats are exactly what we need to get through the day. The key is to differentiate all these “extras”\nwhile we work. Listen to music while working — just not every time. Have that sweet drink — just not every day. Meet\nwith friends for a workout session — but also have these individual sessions once in a while.</p>\n\n<p>Some of us spend our time on meetings while trying to do our individual work at the same time. Some listen to podcasts\nwhile coding. We should keep in mind, though, that multitasking is another way of layering dopamine and doing that on a\ndaily basis will have a negative effect on general motivation.</p>\n\n<p><img src=\"/img/articles/2023-03-21-neuroscience-for-software-engineers-motivation/giphy.webp\" alt=\"A man multitasking at work \" title=\"(from [Giphy](\nhttps://media3.giphy.com/media/PvvSfSDFoAL5e/giphy.gif?cid=ecf05e47mym26elkkk7obya4xr8zj83hva1jlu12l7cvmglq&amp;rid=giphy.gif&amp;ct=g)\n)\" /></p>\n\n<p>Another factor we should keep in mind are distractions. Every email, every slack message, every push notification on\nyour phone will cause a small peak of dopamine. That makes it yet another thing to eliminate if you want to avoid\ndopamine layering.</p>\n\n<h4 id=\"focusing-on-intrinsic-motivation\">Focusing on intrinsic motivation</h4>\n\n<p>When we look at the sources of motivation we can divide them in two groups — external sources, such as meeting\nexpectations of other people, fame or financial compensation and intrinsic sources, like enjoyment during an activity or\nfulfilling a personal mission.</p>\n\n<p>What do you like to do after work? Is it playing video games, playing music, baking, practising yoga or maybe watching\nlectures on mathematics on YouTube? (don’t judge me…) Whatever this would be, I bet no one needs to encourage you to do\nthis — you have an intrinsic drive to go and do your thing. You could spend hours on it, and then you’ll feel happy and\nfulfilled. This is how intrinsic motivation works — no external reward is required for you to feel motivated. Wouldn’t\nit be great if you had that in your job?</p>\n\n<p>Research shows that intrinsic motivation brings better results than extrinsic motivation. One could ask a question —\nwhat if we brought those two things together? Well, the results might surprise you. Researchers gave out to participants\na rather enjoyable task like assembling the jigsaw puzzle or drawing and measured their motivation to do so. Then they\nintroduced small rewards for finishing the puzzle. Curiously, the participants were no longer as motivated as at the\nbeginning.</p>\n\n<p>The conclusion is that when we add an extrinsic motivation to an existing intrinsic one, we observe an overall decrease\nin willingness to do the activity!\nThis is what we call an undermining effect.</p>\n\n<p>The effect comes from the reward being perceived as the ultimate goal of the activity. When the reward comes at the end\nof the activity, only then is dopamine release activated, whereas it could be active during the whole time if only we\nmindfully focused on the joyful part of the activity itself. Introducing the reward leads to perceiving the whole\nexperience as less and less pleasurable over time.</p>\n\n<p>How to avoid the undermining effect? It’s rather simple. Don’t layer other sources of dopamine, avoid dopamine peaks\nright before and right after the activity and be mindful about your intrinsic motivation. But what if getting it done\nbecomes really hard? It is difficult to have intrinsic motivation at such times. A good tactic to try is\ntelling ourselves that overcoming those difficulties is a kind of pleasure, so we can activate our prefrontal cortex as\na part of the dopaminergic pathway and eventually get ourselves motivated.</p>\n\n<h4 id=\"thinking-positively-practising-gratitude-meditation\">Thinking positively, practising gratitude, meditation</h4>\n\n<p>Remember that aspect of the mesocorticolimbic pathway where thinking about something enjoyable caused a dopamine\nrelease? There is more to it! By repeatedly having positive or negative interactions with something we can make a\nsignificant impact on its rewarding or non-rewarding properties. It effectively means that focusing on positive aspects\nof our surroundings and activities will eventually lead to an increase of dopamine releases from engaging with it.</p>\n\n<p>Having said that, I would strongly encourage you to use different forms of appreciation or gratitude practice. Maybe try\njournaling a little at the end of the day? I dare you to think about 3 good things that happened to you at work every\nday and write it down.</p>\n\n<p>Research also shows that engaging in meditational practices leads to activation of reward-related areas of the brain.\nHaving a long-term habit of meditation and mindfulness will contribute to having sustained feelings of deep joy and\npeace, which is associated with higher dopamine levels.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>You now know how your dopamine mechanisms work and how to use your biological hardware\nto modulate your overall motivation. What you should remember is that the thing most important for your\nmotivation is maintaining a high baseline dopamine level. Avoid dopamine peaks, differentiate stimuli when you work,\nuse other tactics such as exposing yourself to cold water or meditation. Also, keep your focus\nmostly (preferably only) on your intrinsic motivation to avoid the undermining effect. Now, go conquer the world!</p>\n\n<h2 id=\"references\">References</h2>\n\n<ol>\n  <li>Lee W, Reeve J, Xue Y, Xiong J. Neural differences between intrinsic reasons for doing versus extrinsic reasons for\ndoing: an fMRI study. Neurosci Res. 2012 May;73(1):68-72. doi: 10.1016/j.neures.2012.02.010. PMID: 23565014; PMCID:\nPMC3614004.</li>\n  <li>Liu, C., Goel, P. &amp; Kaeser, P.S. Spatial and temporal scales of dopamine transmission. Nat Rev Neurosci 22, 345–358 (\n2021). https://doi.org/10.1038/s41583-021-00455-7</li>\n  <li>Šrámek, P., Šimečková, M., Janský, L. et al. Human physiological responses to immersion into water of different\ntemperatures. Eur J Appl Physiol 81, 436–442 (2000). https://doi.org/10.1007/s004210050065</li>\n  <li>Volkow, N., Wang, GJ., Logan, J. et al. Caffeine increases striatal dopamine D2/D3 receptor availability in the human\nbrain. Transl Psychiatry 5, e549 (2015). https://doi.org/10.1038/tp.2015.46</li>\n  <li>Neuroscience. 2nd edition. Purves D, Augustine GJ, Fitzpatrick D, et al., editors. Sunderland (MA): Sinauer\nAssociates;</li>\n  <li>Vani Pariyadath, Joshua L. Gowin, Elliot A. Stein, Chapter 8 - Resting state functional connectivity analysis for\naddiction medicine: From individual loci to complex networks, Editor(s): Hamed Ekhtiari, Martin P. Paulus, Progress\nin Brain Research, Elsevier, Volume 224, 2016</li>\n  <li>Deci, E. L., Koestner, R., &amp; Ryan, R. M. (1999). A meta-analytic review of experiments examining the effects of\nextrinsic rewards on intrinsic motivation. Psychological Bulletin, 125(6),\n627–668. https://doi.org/10.1037/0033-2909.125.6.627</li>\n  <li>Chen W. Neural circuits provide insights into reward and aversion. Front Neural Circuits. 2022 Oct 28;16:1002485.\ndoi:\n10.3389/fncir.2022.1002485. PMID: 36389177; PMCID: PMC9650032.</li>\n  <li>Looby A, Zimmerman L, Livingston NR. Expectation for stimulant type modifies caffeine’s effects on mood and cognition\namong college students. Exp Clin Psychopharmacol. 2022 Oct;30(5):525-535. doi: 10.1037/pha0000448. Epub 2021 Mar 18.\nPMID: 33734725.</li>\n  <li>Arias-Carrión, O., Stamelou, M., Murillo-Rodríguez, E. et al. Dopaminergic reward system: a short integrative\nreview. Int Arch Med 3, 24 (2010)\n. https://doi.org/10.1186/1755-7682-3-24</li>\n  <li>Esch, Tobias. “The neurobiology of meditation and mindfulness.” Meditation–neuroscientific approaches and\nphilosophical implications. Springer, Cham, 2014. 153-173.</li>\n  <li>Di Chiara G. Alcohol and dopamine. Alcohol Health Res World. 1997;21(2):\n108-14. PMID: 15704345; PMCID: PMC6826820.</li>\n  <li>Farahani MS, Bahramsoltani R, Farzaei MH, Abdollahi M, Rahimi R. Plant-derived natural medicines for the management\nof depression: an overview of mechanisms of action. Rev Neurosci. 2015;26(3):305-21. doi:\n10.1515/revneuro-2014-0058. PMID: 25719303.</li>\n  <li>Mechan AO, Fowler A, Seifert N, Rieger H, Wöhrle T, Etheve S, Wyss A, Schüler G, Colletto B, Kilpert C, Aston J,\nElliott JM, Goralczyk R, Mohajeri MH. Monoamine reuptake inhibition and mood-enhancing potential of a specified\noregano extract. Br J Nutr. 2011 Apr;105(8):1150-63. doi:\n10.1017/S0007114510004940. Epub 2010 Dec 21. PMID: 21205415.</li>\n  <li>Khazdair MR, Boskabady MH, Hosseini M, Rezaee R, M Tsatsakis A. The effects of Crocus sativus (saffron) and its\nconstituents on nervous system: A review. Avicenna J Phytomed. 2015 Sep-Oct;5(5):376-91. PMID: 26468457; PMCID:\nPMC4599112.</li>\n  <li>Marques A, Marconcin P, Werneck AO, Ferrari G, Gouveia ÉR, Kliegel M, Peralta M, Ihle A. Bidirectional Association\nbetween Physical Activity and Dopamine Across Adulthood-A Systematic Review. Brain Sci. 2021 Jun 23;11(7):829. doi:\n10.3390/brainsci11070829. PMID: 34201523; PMCID:\nPMC8301978.</li>\n  <li>R. Kotarski “Inaczej”, Altenberg, 2020</li>\n  <li>A. Huberman, Controlling Your Dopamine For Motivation, Focus &amp; Satisfaction | Huberman Lab Podcast #39,\nYoutube, https://www.youtube.com/watch?v=QmOF0crdyRU</li>\n</ol>\n\n","contentSnippet":"Many of us, software engineers, have experienced those days when nothing really sparks joy in coding, debugging,\npreparing spikes or refining tasks for the next sprints. Obviously, we would like to have as few of such days as possible\nand go on with our work effectively. A solution to this definitely is not tormenting our brains with guilt and forced\nlabour. There are other ways, and I would like to invite you to explore them with me and learn a little about our\nnervous systems in the process. We’ll find out where the motivation comes from on a biological and psychological level.\nWe’ll also take a look at the changes you can introduce into your day to take advantage of certain mechanisms working\non a neural level and boost your motivation and productivity.\nThe neuroscience of motivation\nThe key to maintaining energy to work throughout the day is simple – getting and staying motivated. Even though it seems\nlike something not necessarily in our power, motivation can be, to an extent, consciously modulated once we know\nthe biological and psychological mechanisms behind it.\nThe source\nOn a neural level, the fuel of motivation is dopamine. Dopamine is a hormone (meaning it’s a messenger of the\nbody travelling through the bloodstream) and a neurotransmitter (which indicates its ability to affect communication between\nneurons).\nIn general, high levels of dopamine cause high drive, motivation and willingness to live, do and experience. Low levels\nof dopamine cause the opposite state — a lack of will to do any effort (doomscrolling or examining the contents of the\nfridge is still in our reach). How much dopamine is currently in our system, how much dopamine there was a moment ago\nand how much we remember enjoying a particular state is for our brains a way to set our level of motivation.\nThe workspace\nIn the context of motivation our main area of focus across the nervous system should be the mesocorticolimbic system,\nwhich is responsible for the reward mechanism.\nMesocorticolimbic system consists of dopaminergic and dopaminoceptive neurons — the former is a specialised kind of\nneurons that is capable of producing and emitting dopamine into our body; the latter is capable of detecting and\nreacting to the dopamine. The pathways of this system go through different areas of the brain — they extend from the\nventral tegmental area (VTA) to the part of the brain responsible for memory (hippocampus), reward, pleasure and movement\n(nucleus accumbens) and reasoning (prefrontal cortex).\n\nThe complexity of this structure might be a hint that there are a multiple implications of dopamine release, but\nalso many different ways to interact with this area.\nThe process\nWhen we talk about managing dopamine levels in healthy individuals, we actually should consider two different things:\nbaseline level, which is how much dopamine circulates in the body and determines how much dopamine we are capable\nof having,\npeak level, which tells us how much dopamine we have at the moment or as a result of a rapid change.\nBaseline level and peak level are closely related to each other. Evolutionally we are prepared to go out and search for\ndifferent resources, such as food, water or shelter, even though nowadays we might use it to gain slightly different\nthings (like a morning coffee or a salary). The drive to do so is provided by dopamine – which is, as we already know, a\nhormonal fuel of motivation. This mechanism is pretty old and it can be observed widely across the animal kingdom.\nWhen the resources are found we experience a dopamine release — that is an effect of the reward mechanism in our\nmesocorticolimbic pathway. Now, in order to make us go and search for the resources again, the dopamine level must drop,\nso that we feel the lack of those resources as unpleasurable and seek for them again.\nThe dopamine level drops lower than the baseline and the extent of the drop is proportional to the height of the\npeak. Why? The drop of the dopamine level is caused by releasing available dopamine from synaptic vesicles – small\nstructures in the dopaminergic neurons. In time the vesicles get depleted of dopamine – we can only release the hormone\nthat is already there, ready to be deployed. After the release there isn’t enough dopamine in the vesicles to keep the\nbaseline level. It will go back to the baseline eventually, as the neurons produce more of it, but for a period of time\nit’s going to remain low.\nContinuous peaks in dopamine level may eventually lead to drop of the baseline level. In that situation a person’s\nbrain, seeking for another reward to elevate it, will try repeating previous dopamine-increasing behaviours. A cascade\nof peaks and drops with repeated behaviours is a mechanism for addiction. This is something that may happen over\nexcessive usage of certain substances but also with social media. Incoming likes, comments and notifications or\nscrollable, neverending feed of videos — all of these generate peaks of dopamine. When we spend time on social media\nexperiencing peak after peak we may start feeling less and less satisfaction but still feel the urge to scroll further —\ndue to the mechanism I have just described. That would explain why social media addiction is such a great challenge\nfor our society.\nHow to get and stay motivated\nAfter that long lecture on neurobiology, those who are still with me may be asking the question “are we there yet”? Yes,\nwe are! That knowledge is going to let us dive into different strategies of managing our dopamine levels, hence\nmodulating our motivation.\n\nShort-term increase\nThere are multiple possibilities to invoke a peak of dopamine and give our bodies that immediate impulse lasting a few\nminutes or even seconds. We should be aware of them, both when we need those peaks and when we want to avoid them — and\nsoon you’ll know why.\nThere is a significant number of substances that may increase the dopamine level above the baseline:\nChocolate might increase it up to 1,5 times, although it only lasts a few seconds.\nSmoked nicotine or cocaine may cause a 2,5 times increase, amphetamine causes up to 10-fold increase (knowing that\nand how peak and baseline levels of dopamine work, explains the addictive effect those substances have).\nAlcohol in low doses is also known to cause dopamine release.\nIngestion of herbs like saffron, rosemary or oregano may lead to elevation of dopamine levels.\nCaffeine causes a rather modest increase of dopamine, but also increases sensitivity of some dopamine receptors as\nwell as their number and density. This is worth noting, especially for coffee-fueled machines like programmers – a cup\nof coffee in the morning will make us more susceptible to dopamine changes throughout the day.\nThere are also several actions which we might take to induce a peak of dopamine like physical activity or thinking and\ntalking about things we enjoy. The former is rather subjective and the height of the peak depends on whether the person\nenjoys the activity itself. For those who do, it may double the dopamine level.\nThe latter results from involvement of the prefrontal cortex in the mesocorticolimbic system. Do you remember the last\ntime when you’ve been telling somebody about that new thing you’d recently learned? How passionate you’ve felt and how\nhappy and excited you’ve been afterwards? The prefrontal cortex is responsible for assigning rational explanations and\nsubjective experiences to things we engage with. Recalling those interactions might cause a dopamine release and make us\nhappier and more motivated.\nLong-term strategies\nAs previously said, the peaks of the dopamine, especially one after the other, will cause the dopamine level to drop\nbelow the baseline. In order to maintain high levels of dopamine (hence high motivation) on a daily basis we should act\nlong-term and affect the baseline level as much as possible. There are ways to do it.\nExposure to cold\nResearch shows that when a human subject enters cold water (14°C) and stays there for up to an hour it leads to rapid\nincrease in norepinephrine and epinephrine (i.e. adrenaline) and also an increase in dopamine. Dopamine was observed to\ncontinuously rise up to 250% of baseline level and it stayed there for a few hours. It also limited release of cortisol\n— the stress hormone.\nAn hour-long cold bath is too much for an average person, but the same effect (although on a smaller scale) can be\nacquired by more accessible measures. How about a quick cold shower before work to charge up on that dopamine? Or maybe\njoining a winter swimming community?\n\nAvoiding layers of dopamine-increasing factors\nDo you start working only with a big hot cup of coffee in your hand? Do you listen to loud music while programming? Or\nmaybe do you treat yourself with a sweet drink after a workout? Are there a lot of such rituals? You might want to\nconsider not having them on a daily basis.\nEvery one of these rituals is a dopamine-increasing factor. As you’ve already read, multiple peaks of dopamine one on\ntop of the other might not be a great idea. Layering multiple dopamine-increasing factors on a regular basis might\nseriously affect our ability to release dopamine in general. Spiking the dopamine by multiple activities in a short\nperiod of time leads to lowering the baseline by depleting stored, ready-to-deploy dopamine. That may lead to lowering\nthe baseline dopamine level, what will result in lack of motivation and feeling low in general.\nSo what should we do? Are those things bad for us? Well, not really. Sometimes these spikes of dopamine from listening\nto music or sweet treats are exactly what we need to get through the day. The key is to differentiate all these “extras”\nwhile we work. Listen to music while working — just not every time. Have that sweet drink — just not every day. Meet\nwith friends for a workout session — but also have these individual sessions once in a while.\nSome of us spend our time on meetings while trying to do our individual work at the same time. Some listen to podcasts\nwhile coding. We should keep in mind, though, that multitasking is another way of layering dopamine and doing that on a\ndaily basis will have a negative effect on general motivation.\n\nAnother factor we should keep in mind are distractions. Every email, every slack message, every push notification on\nyour phone will cause a small peak of dopamine. That makes it yet another thing to eliminate if you want to avoid\ndopamine layering.\nFocusing on intrinsic motivation\nWhen we look at the sources of motivation we can divide them in two groups — external sources, such as meeting\nexpectations of other people, fame or financial compensation and intrinsic sources, like enjoyment during an activity or\nfulfilling a personal mission.\nWhat do you like to do after work? Is it playing video games, playing music, baking, practising yoga or maybe watching\nlectures on mathematics on YouTube? (don’t judge me…) Whatever this would be, I bet no one needs to encourage you to do\nthis — you have an intrinsic drive to go and do your thing. You could spend hours on it, and then you’ll feel happy and\nfulfilled. This is how intrinsic motivation works — no external reward is required for you to feel motivated. Wouldn’t\nit be great if you had that in your job?\nResearch shows that intrinsic motivation brings better results than extrinsic motivation. One could ask a question —\nwhat if we brought those two things together? Well, the results might surprise you. Researchers gave out to participants\na rather enjoyable task like assembling the jigsaw puzzle or drawing and measured their motivation to do so. Then they\nintroduced small rewards for finishing the puzzle. Curiously, the participants were no longer as motivated as at the\nbeginning.\nThe conclusion is that when we add an extrinsic motivation to an existing intrinsic one, we observe an overall decrease\nin willingness to do the activity!\nThis is what we call an undermining effect.\nThe effect comes from the reward being perceived as the ultimate goal of the activity. When the reward comes at the end\nof the activity, only then is dopamine release activated, whereas it could be active during the whole time if only we\nmindfully focused on the joyful part of the activity itself. Introducing the reward leads to perceiving the whole\nexperience as less and less pleasurable over time.\nHow to avoid the undermining effect? It’s rather simple. Don’t layer other sources of dopamine, avoid dopamine peaks\nright before and right after the activity and be mindful about your intrinsic motivation. But what if getting it done\nbecomes really hard? It is difficult to have intrinsic motivation at such times. A good tactic to try is\ntelling ourselves that overcoming those difficulties is a kind of pleasure, so we can activate our prefrontal cortex as\na part of the dopaminergic pathway and eventually get ourselves motivated.\nThinking positively, practising gratitude, meditation\nRemember that aspect of the mesocorticolimbic pathway where thinking about something enjoyable caused a dopamine\nrelease? There is more to it! By repeatedly having positive or negative interactions with something we can make a\nsignificant impact on its rewarding or non-rewarding properties. It effectively means that focusing on positive aspects\nof our surroundings and activities will eventually lead to an increase of dopamine releases from engaging with it.\nHaving said that, I would strongly encourage you to use different forms of appreciation or gratitude practice. Maybe try\njournaling a little at the end of the day? I dare you to think about 3 good things that happened to you at work every\nday and write it down.\nResearch also shows that engaging in meditational practices leads to activation of reward-related areas of the brain.\nHaving a long-term habit of meditation and mindfulness will contribute to having sustained feelings of deep joy and\npeace, which is associated with higher dopamine levels.\nSummary\nYou now know how your dopamine mechanisms work and how to use your biological hardware\nto modulate your overall motivation. What you should remember is that the thing most important for your\nmotivation is maintaining a high baseline dopamine level. Avoid dopamine peaks, differentiate stimuli when you work,\nuse other tactics such as exposing yourself to cold water or meditation. Also, keep your focus\nmostly (preferably only) on your intrinsic motivation to avoid the undermining effect. Now, go conquer the world!\nReferences\nLee W, Reeve J, Xue Y, Xiong J. Neural differences between intrinsic reasons for doing versus extrinsic reasons for\ndoing: an fMRI study. Neurosci Res. 2012 May;73(1):68-72. doi: 10.1016/j.neures.2012.02.010. PMID: 23565014; PMCID:\nPMC3614004.\nLiu, C., Goel, P. & Kaeser, P.S. Spatial and temporal scales of dopamine transmission. Nat Rev Neurosci 22, 345–358 (\n2021). https://doi.org/10.1038/s41583-021-00455-7\nŠrámek, P., Šimečková, M., Janský, L. et al. Human physiological responses to immersion into water of different\ntemperatures. Eur J Appl Physiol 81, 436–442 (2000). https://doi.org/10.1007/s004210050065\nVolkow, N., Wang, GJ., Logan, J. et al. Caffeine increases striatal dopamine D2/D3 receptor availability in the human\nbrain. Transl Psychiatry 5, e549 (2015). https://doi.org/10.1038/tp.2015.46\nNeuroscience. 2nd edition. Purves D, Augustine GJ, Fitzpatrick D, et al., editors. Sunderland (MA): Sinauer\nAssociates;\nVani Pariyadath, Joshua L. Gowin, Elliot A. Stein, Chapter 8 - Resting state functional connectivity analysis for\naddiction medicine: From individual loci to complex networks, Editor(s): Hamed Ekhtiari, Martin P. Paulus, Progress\nin Brain Research, Elsevier, Volume 224, 2016\nDeci, E. L., Koestner, R., & Ryan, R. M. (1999). A meta-analytic review of experiments examining the effects of\nextrinsic rewards on intrinsic motivation. Psychological Bulletin, 125(6),\n627–668. https://doi.org/10.1037/0033-2909.125.6.627\nChen W. Neural circuits provide insights into reward and aversion. Front Neural Circuits. 2022 Oct 28;16:1002485.\ndoi:\n10.3389/fncir.2022.1002485. PMID: 36389177; PMCID: PMC9650032.\nLooby A, Zimmerman L, Livingston NR. Expectation for stimulant type modifies caffeine’s effects on mood and cognition\namong college students. Exp Clin Psychopharmacol. 2022 Oct;30(5):525-535. doi: 10.1037/pha0000448. Epub 2021 Mar 18.\nPMID: 33734725.\nArias-Carrión, O., Stamelou, M., Murillo-Rodríguez, E. et al. Dopaminergic reward system: a short integrative\nreview. Int Arch Med 3, 24 (2010)\n. https://doi.org/10.1186/1755-7682-3-24\nEsch, Tobias. “The neurobiology of meditation and mindfulness.” Meditation–neuroscientific approaches and\nphilosophical implications. Springer, Cham, 2014. 153-173.\nDi Chiara G. Alcohol and dopamine. Alcohol Health Res World. 1997;21(2):\n108-14. PMID: 15704345; PMCID: PMC6826820.\nFarahani MS, Bahramsoltani R, Farzaei MH, Abdollahi M, Rahimi R. Plant-derived natural medicines for the management\nof depression: an overview of mechanisms of action. Rev Neurosci. 2015;26(3):305-21. doi:\n10.1515/revneuro-2014-0058. PMID: 25719303.\nMechan AO, Fowler A, Seifert N, Rieger H, Wöhrle T, Etheve S, Wyss A, Schüler G, Colletto B, Kilpert C, Aston J,\nElliott JM, Goralczyk R, Mohajeri MH. Monoamine reuptake inhibition and mood-enhancing potential of a specified\noregano extract. Br J Nutr. 2011 Apr;105(8):1150-63. doi:\n10.1017/S0007114510004940. Epub 2010 Dec 21. PMID: 21205415.\nKhazdair MR, Boskabady MH, Hosseini M, Rezaee R, M Tsatsakis A. The effects of Crocus sativus (saffron) and its\nconstituents on nervous system: A review. Avicenna J Phytomed. 2015 Sep-Oct;5(5):376-91. PMID: 26468457; PMCID:\nPMC4599112.\nMarques A, Marconcin P, Werneck AO, Ferrari G, Gouveia ÉR, Kliegel M, Peralta M, Ihle A. Bidirectional Association\nbetween Physical Activity and Dopamine Across Adulthood-A Systematic Review. Brain Sci. 2021 Jun 23;11(7):829. doi:\n10.3390/brainsci11070829. PMID: 34201523; PMCID:\nPMC8301978.\nR. Kotarski “Inaczej”, Altenberg, 2020\nA. Huberman, Controlling Your Dopamine For Motivation, Focus & Satisfaction | Huberman Lab Podcast #39,\nYoutube, https://www.youtube.com/watch?v=QmOF0crdyRU","guid":"https://blog.allegro.tech/2023/03/neuroscience-for-software-engineers-motivation.html","categories":["tech","soft skills","neuroscience","productivity"],"isoDate":"2023-03-20T23:00:00.000Z","thumbnail":"images/post-headers/default.jpg"}],"jobs":[{"id":"743999912833698","name":"Front-End Software Engineer - Merchant Experience","uuid":"ae8d3a17-99a8-491e-aff9-6e26ae3c4819","jobAdId":"db0fc952-c047-4dd0-9c96-c4b6650982fc","defaultJobAd":false,"refNumber":"REF3941R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-06-13T10:34:31.101Z","location":{"city":"Warszawa, Poznań, Wrocław","region":"","country":"pl","address":"","postalCode":"","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999912833698","creator":{"name":"Martyna Maziarska"},"language":{"code":"en-GB","label":"English (UK)","labelNative":"English (UK)"}},{"id":"743999912830523","name":"Front-End Software Engineer","uuid":"1890289b-cd2a-4bab-8111-ecf377984fbd","jobAdId":"05b6643a-43dd-46a2-b998-bfbaa0a31c68","defaultJobAd":true,"refNumber":"REF3941R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-06-13T09:59:55.327Z","location":{"city":"Warszawa, Poznań, Wrocław","region":"","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999912830523","creator":{"name":"Martyna Maziarska"},"language":{"code":"en-GB","label":"English (UK)","labelNative":"English (UK)"}},{"id":"743999912829875","name":"Front-End Software Engineer - Delivery Experience","uuid":"08ebd3ca-f6fd-4017-a254-de47cd70590a","jobAdId":"2c5bb846-0902-4b0e-8821-6dda5cbfafa9","defaultJobAd":false,"refNumber":"REF3941R","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-06-13T09:58:08.274Z","location":{"city":"Warszawa","region":"","country":"pl","address":"","postalCode":"","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999912829875","creator":{"name":"Martyna Maziarska"},"language":{"code":"en-GB","label":"English (UK)","labelNative":"English (UK)"}},{"id":"743999910309044","name":"Mid/Senior Software Engineer (Java/Kotlin)","uuid":"44664606-87f7-4644-949a-7a28c3db72b2","jobAdId":"104e2540-4115-4a17-8545-001ee1df0a60","defaultJobAd":true,"refNumber":"REF4181Y","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-05-31T14:53:58.556Z","location":{"city":"Warszawa, Kraków, Poznań, Wrocław, Gdańsk","region":"","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"ed4682c7-33c9-41c2-8d13-428ed39046f5","valueLabel":"Tech. Engineer - IC"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"3c97f53f-19c2-4a25-9eb1-513f9fb38b80","valueLabel":"3-5"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999910309044","creator":{"name":"Paulina Siwek"},"language":{"code":"en","label":"English","labelNative":"English (US)"}},{"id":"743999910043146","name":"Engineering Manager (Java/Kotlin) - Merchant Experience","uuid":"b2882fca-c920-4127-8a3c-35b606577d02","jobAdId":"a4b71e28-0033-47e9-a924-0861d515c6fc","defaultJobAd":true,"refNumber":"REF4165Y","company":{"identifier":"Allegro","name":"Allegro"},"releasedDate":"2023-05-30T09:46:16.495Z","location":{"city":"Warszawa, Poznań, Wrocław, Kraków, Gdańsk","region":"","country":"pl","remote":false},"industry":{"id":"internet","label":"Internet"},"department":{"id":"2572770","label":"IT - Software Development"},"function":{"id":"information_technology","label":"Information Technology"},"typeOfEmployment":{"id":"permanent","label":"Full-time"},"experienceLevel":{"id":"mid_senior_level","label":"Mid-Senior Level"},"customField":[{"fieldId":"58c15608e4b01d4b19ddf790","fieldLabel":"Recruitment Process","valueId":"63c62385-eb34-4cd3-a7ad-a2479d862d05","valueLabel":"Technology Manager (CL 4-6)"},{"fieldId":"6406f92e638cbb2f415a94a9","fieldLabel":"Job Area","valueId":"e8731ea4-48a9-476d-ab1d-9a40eb3426f1","valueLabel":"Technology"},{"fieldId":"COUNTRY","fieldLabel":"Country","valueId":"pl","valueLabel":"Poland"},{"fieldId":"61583054f15cea434e0be36f","fieldLabel":"Career Level","valueId":"78540d72-e837-4a9d-af54-6a8def1cc2bc","valueLabel":"6"},{"fieldId":"58c13159e4b01d4b19ddf729","fieldLabel":"Department","valueId":"2572770","valueLabel":"IT - Software Development"},{"fieldId":"58c13159e4b01d4b19ddf728","fieldLabel":"Brands","valueId":"4ccb4fab-6c3f-4ed0-9140-8533fe17447f","valueLabel":"Allegro sp. z o.o."},{"fieldId":"61582f70e72a6b6d239c9857","fieldLabel":"Area","valueId":"76599a72-f283-4550-9303-52e2e0eb6e32","valueLabel":"Technology"}],"ref":"https://api.smartrecruiters.com/v1/companies/allegro/postings/743999910043146","language":{"code":"en","label":"English","labelNative":"English (US)"}}],"events":[{"created":1685697967000,"duration":7200000,"id":"293929321","name":"Allegro Tech Talks #38 - Mobile: o iOS bez spinki","date_in_series_pattern":false,"status":"past","time":1686760200000,"local_date":"2023-06-14","local_time":"18:30","updated":1686773845000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":17,"venue":{"id":27549223,"name":"Allegro Warsaw Office","lat":0,"lon":0,"repinned":true,"address_1":"ul. Żelazna 51/53","city":"Warszawa","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/293929321/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-talk-38/](https://app.evenea.pl/event/allegro-tech-talk-38/) Ostatnie przed przerwą wakacyjną, stacjonarne spotkanie z cyklu Allegro Tech Talks, na których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy podczas rozmów…","how_to_find_us":"Biuro Allegro znajduje się w kompleksie Fabryki Norblina (wejście Plater 3 od ul. Żelaznej). W niedalekiej odległości znajdują się dwie stacje metra linii M2, Rondo Daszyńskiego i Rondo ONZ. Autobusy, tramwaje i inne środki transportu sprawdzisz też na: https://fabrykanorblina.pl/dojazd","visibility":"public","member_pay_fee":false},{"created":1678978572000,"duration":111600000,"id":"292278882","name":"UX Research Confetti - III edycja ","date_in_series_pattern":false,"status":"past","time":1684915200000,"local_date":"2023-05-24","local_time":"10:00","updated":1685029049000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":33,"is_online_event":true,"eventType":"ONLINE","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/292278882/","description":"**Rejestracja na wydarzenie ➡ [https://app.evenea.pl/event/ux-research-confetti-3/]( https://app.evenea.pl/event/ux-research-confetti-3/ )**[ ]( https://app.evenea.pl/event/ux-research-confetti-3/ ) **🎉 Przedstawiamy 3. edycję UX Research Confetti organizowaną przez Allegro - bezpłatną, polską konferencję poświęconą badaniom…","visibility":"public","member_pay_fee":false},{"created":1683275557000,"duration":7200000,"id":"293341234","name":"Allegro Tech Talks #37 - Kotlin Native i niebezpieczeństwa współdzielonego stanu","date_in_series_pattern":false,"status":"past","time":1684425600000,"local_date":"2023-05-18","local_time":"18:00","updated":1684437308000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":19,"venue":{"id":27570147,"name":"Allegro Office - Poznań (Nowy Rynek)","lat":52.40021514892578,"lon":16.92083168029785,"repinned":true,"address_1":"Wierzbięcice 1B - budynek D","city":"Poznań","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/293341234/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-talk-37/](https://app.evenea.pl/event/allegro-tech-talk-37/) Ciąg dalszy naszych stacjonarnych spotkań Allegro Tech Talks, na których dzielimy się wiedzą, wzajemnie inspirujemy oraz integrujemy podczas rozmów w kuluarach. 📌…","how_to_find_us":"Biuro Allegro znajduje się w kompleksie Nowy Rynek w budynku D. Najbliższy przystanek to Wierzbięcice i kursują tu linie tramwajowe numer 2, 5, 6, 10, 12, 18. ","visibility":"public","member_pay_fee":false},{"created":1682779438000,"duration":9000000,"id":"293215214","name":"AlleKwanty: o komputerach przyszłości, które na Allegro dopiero będą mieć","date_in_series_pattern":false,"status":"past","time":1684252800000,"local_date":"2023-05-16","local_time":"18:00","updated":1684266490000,"utc_offset":7200000,"waitlist_count":0,"yes_rsvp_count":41,"venue":{"id":27549223,"name":"Allegro Warsaw Office","lat":52.23224639892578,"lon":20.992111206054688,"repinned":true,"address_1":"ul. Żelazna 51/53","city":"Warszawa","country":"pl","localized_country_name":"Poland"},"is_online_event":false,"eventType":"PHYSICAL","group":{"created":1425052059000,"name":"allegro Tech","id":18465254,"join_mode":"open","lat":52.2599983215332,"lon":21.020000457763672,"urlname":"allegrotech","who":"Techs","localized_location":"Warsaw, Poland","state":"","country":"pl","region":"en_US","timezone":"Europe/Warsaw"},"link":"https://www.meetup.com/allegrotech/events/293215214/","description":"**➡ Rejestracja:** [https://app.evenea.pl/event/allegro-tech-kwanty/](https://app.evenea.pl/event/allegro-tech-kwanty/) Allegro Tech to miejsce, w którym nasi inżynierowie dzielą się wiedzą oraz case study z wybranych projektów w firmie - w formie…","how_to_find_us":"The Allegro office is located in Norblin Factory (entrance Plater 3, from Żelazna Street). You can check the details of the journey (buses, trams, metro) at: https://fabrykanorblina.pl/dojazd/","visibility":"public","member_pay_fee":false}],"podcasts":[{"title":"O Developer Experience, czyli jak pracuje się programist(k)om w Allegro","link":"https://podcast.allegro.tech/o-developer-experience-czyli-jak-pracuje-sie-programistkom-w-allegro/","pubDate":"Thu, 15 Jun 2023 00:00:00 GMT","content":"Czym jest Developer Experience (DX) w Allegro i kto za nie odpowiada? Co robimy, jako firma, aby nasi developerzy(-ki) mieli(-ły) jak największy komfort pracy? Czym jest Allegro Developer Platform i jak dużą swobodę w wyborze technologii pozostawia developer(k)om? Jak mierzymy zadowolenie użytkowników i efektywność naszych narzędzi? Skąd wiemy co naprawdę się sprawdza na różnych płaszczyznach?","contentSnippet":"Czym jest Developer Experience (DX) w Allegro i kto za nie odpowiada? Co robimy, jako firma, aby nasi developerzy(-ki) mieli(-ły) jak największy komfort pracy? Czym jest Allegro Developer Platform i jak dużą swobodę w wyborze technologii pozostawia developer(k)om? Jak mierzymy zadowolenie użytkowników i efektywność naszych narzędzi? Skąd wiemy co naprawdę się sprawdza na różnych płaszczyznach?","guid":"https://podcast.allegro.tech/o-developer-experience-czyli-jak-pracuje-sie-programistkom-w-allegro/","isoDate":"2023-06-15T00:00:00.000Z"},{"title":"O pracy liderek i liderów w Allegro","link":"https://podcast.allegro.tech/o-pracy-liderek-i-liderow-w-allegro/","pubDate":"Thu, 23 Feb 2023 00:00:00 GMT","content":"Jakimi umiejętnościami powinny wyróżniać się osoby na stanowiskach liderskich? Czy wykształcenie techniczne to “must have”, aby dołączyć do zespołów Tech & Data w Allegro? Czym charakteryzuje się praca liderek i liderów w Allegro oraz jak wspieramy ich rozwój? Jaki wpływ na produkt oraz organizację mają liderki i liderzy w Allegro? Jak zacząć budowanie swojej ścieżki kariery w roli liderskiej? Jakich wyzwań się spodziewać i jak sobie z nimi poradzić? Posłuchajcie rozmowy z udziałem Aliny Magowskiej - Dyrektorki obszaru User Experience i Agnieszki Jagusiak - Senior Managerki w zespole Group IT Services w Allegro.","contentSnippet":"Jakimi umiejętnościami powinny wyróżniać się osoby na stanowiskach liderskich? Czy wykształcenie techniczne to “must have”, aby dołączyć do zespołów Tech & Data w Allegro? Czym charakteryzuje się praca liderek i liderów w Allegro oraz jak wspieramy ich rozwój? Jaki wpływ na produkt oraz organizację mają liderki i liderzy w Allegro? Jak zacząć budowanie swojej ścieżki kariery w roli liderskiej? Jakich wyzwań się spodziewać i jak sobie z nimi poradzić? Posłuchajcie rozmowy z udziałem Aliny Magowskiej - Dyrektorki obszaru User Experience i Agnieszki Jagusiak - Senior Managerki w zespole Group IT Services w Allegro.","guid":"https://podcast.allegro.tech/o-pracy-liderek-i-liderow-w-allegro/","isoDate":"2023-02-23T00:00:00.000Z"},{"title":"O pracy i rozwoju w zespole IT Support","link":"https://podcast.allegro.tech/o-pracy-i-rozwoju-w-zespole-it-support/","pubDate":"Thu, 26 Jan 2023 00:00:00 GMT","content":"Jak wygląda praca w zespole, który zawsze udziela odpowiedzi na zadane pytania? Co można zautomatyzować w obszarze wsparcia IT i jaki to może mieć cel? Czy praca w zespole IT Support jest bramą do kariery w IT, może dawać możliwości rozwoju i przynosić satysfakcję? Jakie wyzwania przed tym zespołem w Allegro postawiła pandemia koronawirusa? O umożliwianiu pracownikom Grupy Allegro sprawnej pracy na narzędziach i usługach IT dostarczanych przez zespół Business Services & Automation opowiada Bartosz Kaczyński - IT Service Operations Manager w Allegro.","contentSnippet":"Jak wygląda praca w zespole, który zawsze udziela odpowiedzi na zadane pytania? Co można zautomatyzować w obszarze wsparcia IT i jaki to może mieć cel? Czy praca w zespole IT Support jest bramą do kariery w IT, może dawać możliwości rozwoju i przynosić satysfakcję? Jakie wyzwania przed tym zespołem w Allegro postawiła pandemia koronawirusa? O umożliwianiu pracownikom Grupy Allegro sprawnej pracy na narzędziach i usługach IT dostarczanych przez zespół Business Services & Automation opowiada Bartosz Kaczyński - IT Service Operations Manager w Allegro.","guid":"https://podcast.allegro.tech/o-pracy-i-rozwoju-w-zespole-it-support/","isoDate":"2023-01-26T00:00:00.000Z"},{"title":"O tym jak przygotowujemy rozwiązania dla klientów w oparciu o badania","link":"https://podcast.allegro.tech/o-rozwiazaniach-opartych-na-badaniach/","pubDate":"Thu, 12 Jan 2023 00:00:00 GMT","content":"W jaki sposób przygotowujemy rozwiązania dla klientów Allegro w oparciu o badania? Jak wygląda ścieżka projektu od eksploracji do wdrożenia i późniejszego monitorowania? Jaką korzyść dają badania usability? Dlaczego warto, aby badanie było prowadzone przez dwoje badaczy? O współpracy między badaczami i projektantami UX rozmawialiśmy z Zofią Śmierzchalską - Design Managerką i Jakubem Dodotem - Senior UX Research Managerem w Allegro.","contentSnippet":"W jaki sposób przygotowujemy rozwiązania dla klientów Allegro w oparciu o badania? Jak wygląda ścieżka projektu od eksploracji do wdrożenia i późniejszego monitorowania? Jaką korzyść dają badania usability? Dlaczego warto, aby badanie było prowadzone przez dwoje badaczy? O współpracy między badaczami i projektantami UX rozmawialiśmy z Zofią Śmierzchalską - Design Managerką i Jakubem Dodotem - Senior UX Research Managerem w Allegro.","guid":"https://podcast.allegro.tech/o-rozwiazaniach-opartych-na-badaniach/","isoDate":"2023-01-12T00:00:00.000Z"}]},"__N_SSG":true}